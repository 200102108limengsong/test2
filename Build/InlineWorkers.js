globalThis.CESIUM_WORKERS = atob("var CesiumWorkers = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a3, b) => (typeof require !== "undefined" ? require : a3)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __glob = (map) => (path) => {
    var fn = map[path];
    if (fn)
      return fn();
    throw new Error("Module not found in bundle: " + path);
  };
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // packages/engine/Source/Core/defined.js
  function defined(value) {
    return value !== void 0 && value !== null;
  }
  var defined_default;
  var init_defined = __esm({
    "packages/engine/Source/Core/defined.js"() {
      defined_default = defined;
    }
  });

  // packages/engine/Source/Core/DeveloperError.js
  function DeveloperError(message) {
    this.name = "DeveloperError";
    this.message = message;
    let stack;
    try {
      throw new Error();
    } catch (e) {
      stack = e.stack;
    }
    this.stack = stack;
  }
  var DeveloperError_default;
  var init_DeveloperError = __esm({
    "packages/engine/Source/Core/DeveloperError.js"() {
      init_defined();
      if (defined_default(Object.create)) {
        DeveloperError.prototype = Object.create(Error.prototype);
        DeveloperError.prototype.constructor = DeveloperError;
      }
      DeveloperError.prototype.toString = function() {
        let str = `${this.name}: ${this.message}`;
        if (defined_default(this.stack)) {
          str += `
${this.stack.toString()}`;
        }
        return str;
      };
      DeveloperError.throwInstantiationError = function() {
        throw new DeveloperError(
          "This function defines an interface and should not be called directly."
        );
      };
      DeveloperError_default = DeveloperError;
    }
  });

  // packages/engine/Source/Core/Check.js
  function getUndefinedErrorMessage(name) {
    return `${name} is required, actual value was undefined`;
  }
  function getFailedTypeErrorMessage(actual, expected, name) {
    return `Expected ${name} to be typeof ${expected}, actual typeof was ${actual}`;
  }
  var Check, Check_default;
  var init_Check = __esm({
    "packages/engine/Source/Core/Check.js"() {
      init_defined();
      init_DeveloperError();
      Check = {};
      Check.typeOf = {};
      Check.defined = function(name, test) {
        if (!defined_default(test)) {
          throw new DeveloperError_default(getUndefinedErrorMessage(name));
        }
      };
      Check.typeOf.func = function(name, test) {
        if (typeof test !== "function") {
          throw new DeveloperError_default(
            getFailedTypeErrorMessage(typeof test, "function", name)
          );
        }
      };
      Check.typeOf.string = function(name, test) {
        if (typeof test !== "string") {
          throw new DeveloperError_default(
            getFailedTypeErrorMessage(typeof test, "string", name)
          );
        }
      };
      Check.typeOf.number = function(name, test) {
        if (typeof test !== "number") {
          throw new DeveloperError_default(
            getFailedTypeErrorMessage(typeof test, "number", name)
          );
        }
      };
      Check.typeOf.number.lessThan = function(name, test, limit) {
        Check.typeOf.number(name, test);
        if (test >= limit) {
          throw new DeveloperError_default(
            `Expected ${name} to be less than ${limit}, actual value was ${test}`
          );
        }
      };
      Check.typeOf.number.lessThanOrEquals = function(name, test, limit) {
        Check.typeOf.number(name, test);
        if (test > limit) {
          throw new DeveloperError_default(
            `Expected ${name} to be less than or equal to ${limit}, actual value was ${test}`
          );
        }
      };
      Check.typeOf.number.greaterThan = function(name, test, limit) {
        Check.typeOf.number(name, test);
        if (test <= limit) {
          throw new DeveloperError_default(
            `Expected ${name} to be greater than ${limit}, actual value was ${test}`
          );
        }
      };
      Check.typeOf.number.greaterThanOrEquals = function(name, test, limit) {
        Check.typeOf.number(name, test);
        if (test < limit) {
          throw new DeveloperError_default(
            `Expected ${name} to be greater than or equal to ${limit}, actual value was ${test}`
          );
        }
      };
      Check.typeOf.object = function(name, test) {
        if (typeof test !== "object") {
          throw new DeveloperError_default(
            getFailedTypeErrorMessage(typeof test, "object", name)
          );
        }
      };
      Check.typeOf.bool = function(name, test) {
        if (typeof test !== "boolean") {
          throw new DeveloperError_default(
            getFailedTypeErrorMessage(typeof test, "boolean", name)
          );
        }
      };
      Check.typeOf.bigint = function(name, test) {
        if (typeof test !== "bigint") {
          throw new DeveloperError_default(
            getFailedTypeErrorMessage(typeof test, "bigint", name)
          );
        }
      };
      Check.typeOf.number.equals = function(name1, name2, test1, test2) {
        Check.typeOf.number(name1, test1);
        Check.typeOf.number(name2, test2);
        if (test1 !== test2) {
          throw new DeveloperError_default(
            `${name1} must be equal to ${name2}, the actual values are ${test1} and ${test2}`
          );
        }
      };
      Check_default = Check;
    }
  });

  // packages/engine/Source/Core/defaultValue.js
  function defaultValue(a3, b) {
    if (a3 !== void 0 && a3 !== null) {
      return a3;
    }
    return b;
  }
  var defaultValue_default;
  var init_defaultValue = __esm({
    "packages/engine/Source/Core/defaultValue.js"() {
      defaultValue.EMPTY_OBJECT = Object.freeze({});
      defaultValue_default = defaultValue;
    }
  });

  // node_modules/mersenne-twister/src/mersenne-twister.js
  var require_mersenne_twister = __commonJS({
    "node_modules/mersenne-twister/src/mersenne-twister.js"(exports2, module) {
      var MersenneTwister2 = function(seed) {
        if (seed == void 0) {
          seed = (/* @__PURE__ */ new Date()).getTime();
        }
        this.N = 624;
        this.M = 397;
        this.MATRIX_A = 2567483615;
        this.UPPER_MASK = 2147483648;
        this.LOWER_MASK = 2147483647;
        this.mt = new Array(this.N);
        this.mti = this.N + 1;
        if (seed.constructor == Array) {
          this.init_by_array(seed, seed.length);
        } else {
          this.init_seed(seed);
        }
      };
      MersenneTwister2.prototype.init_seed = function(s) {
        this.mt[0] = s >>> 0;
        for (this.mti = 1; this.mti < this.N; this.mti++) {
          var s = this.mt[this.mti - 1] ^ this.mt[this.mti - 1] >>> 30;
          this.mt[this.mti] = (((s & 4294901760) >>> 16) * 1812433253 << 16) + (s & 65535) * 1812433253 + this.mti;
          this.mt[this.mti] >>>= 0;
        }
      };
      MersenneTwister2.prototype.init_by_array = function(init_key, key_length) {
        var i, j, k;
        this.init_seed(19650218);
        i = 1;
        j = 0;
        k = this.N > key_length ? this.N : key_length;
        for (; k; k--) {
          var s = this.mt[i - 1] ^ this.mt[i - 1] >>> 30;
          this.mt[i] = (this.mt[i] ^ (((s & 4294901760) >>> 16) * 1664525 << 16) + (s & 65535) * 1664525) + init_key[j] + j;
          this.mt[i] >>>= 0;
          i++;
          j++;
          if (i >= this.N) {
            this.mt[0] = this.mt[this.N - 1];
            i = 1;
          }
          if (j >= key_length)
            j = 0;
        }
        for (k = this.N - 1; k; k--) {
          var s = this.mt[i - 1] ^ this.mt[i - 1] >>> 30;
          this.mt[i] = (this.mt[i] ^ (((s & 4294901760) >>> 16) * 1566083941 << 16) + (s & 65535) * 1566083941) - i;
          this.mt[i] >>>= 0;
          i++;
          if (i >= this.N) {
            this.mt[0] = this.mt[this.N - 1];
            i = 1;
          }
        }
        this.mt[0] = 2147483648;
      };
      MersenneTwister2.prototype.random_int = function() {
        var y;
        var mag01 = new Array(0, this.MATRIX_A);
        if (this.mti >= this.N) {
          var kk;
          if (this.mti == this.N + 1)
            this.init_seed(5489);
          for (kk = 0; kk < this.N - this.M; kk++) {
            y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
            this.mt[kk] = this.mt[kk + this.M] ^ y >>> 1 ^ mag01[y & 1];
          }
          for (; kk < this.N - 1; kk++) {
            y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
            this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ y >>> 1 ^ mag01[y & 1];
          }
          y = this.mt[this.N - 1] & this.UPPER_MASK | this.mt[0] & this.LOWER_MASK;
          this.mt[this.N - 1] = this.mt[this.M - 1] ^ y >>> 1 ^ mag01[y & 1];
          this.mti = 0;
        }
        y = this.mt[this.mti++];
        y ^= y >>> 11;
        y ^= y << 7 & 2636928640;
        y ^= y << 15 & 4022730752;
        y ^= y >>> 18;
        return y >>> 0;
      };
      MersenneTwister2.prototype.random_int31 = function() {
        return this.random_int() >>> 1;
      };
      MersenneTwister2.prototype.random_incl = function() {
        return this.random_int() * (1 / 4294967295);
      };
      MersenneTwister2.prototype.random = function() {
        return this.random_int() * (1 / 4294967296);
      };
      MersenneTwister2.prototype.random_excl = function() {
        return (this.random_int() + 0.5) * (1 / 4294967296);
      };
      MersenneTwister2.prototype.random_long = function() {
        var a3 = this.random_int() >>> 5, b = this.random_int() >>> 6;
        return (a3 * 67108864 + b) * (1 / 9007199254740992);
      };
      module.exports = MersenneTwister2;
    }
  });

  // packages/engine/Source/Core/Math.js
  var import_mersenne_twister, CesiumMath, factorials, randomNumberGenerator, Math_default;
  var init_Math = __esm({
    "packages/engine/Source/Core/Math.js"() {
      import_mersenne_twister = __toESM(require_mersenne_twister(), 1);
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      CesiumMath = {};
      CesiumMath.EPSILON1 = 0.1;
      CesiumMath.EPSILON2 = 0.01;
      CesiumMath.EPSILON3 = 1e-3;
      CesiumMath.EPSILON4 = 1e-4;
      CesiumMath.EPSILON5 = 1e-5;
      CesiumMath.EPSILON6 = 1e-6;
      CesiumMath.EPSILON7 = 1e-7;
      CesiumMath.EPSILON8 = 1e-8;
      CesiumMath.EPSILON9 = 1e-9;
      CesiumMath.EPSILON10 = 1e-10;
      CesiumMath.EPSILON11 = 1e-11;
      CesiumMath.EPSILON12 = 1e-12;
      CesiumMath.EPSILON13 = 1e-13;
      CesiumMath.EPSILON14 = 1e-14;
      CesiumMath.EPSILON15 = 1e-15;
      CesiumMath.EPSILON16 = 1e-16;
      CesiumMath.EPSILON17 = 1e-17;
      CesiumMath.EPSILON18 = 1e-18;
      CesiumMath.EPSILON19 = 1e-19;
      CesiumMath.EPSILON20 = 1e-20;
      CesiumMath.EPSILON21 = 1e-21;
      CesiumMath.GRAVITATIONALPARAMETER = 3986004418e5;
      CesiumMath.SOLAR_RADIUS = 6955e5;
      CesiumMath.LUNAR_RADIUS = 1737400;
      CesiumMath.SIXTY_FOUR_KILOBYTES = 64 * 1024;
      CesiumMath.FOUR_GIGABYTES = 4 * 1024 * 1024 * 1024;
      CesiumMath.sign = defaultValue_default(Math.sign, function sign(value) {
        value = +value;
        if (value === 0 || value !== value) {
          return value;
        }
        return value > 0 ? 1 : -1;
      });
      CesiumMath.signNotZero = function(value) {
        return value < 0 ? -1 : 1;
      };
      CesiumMath.toSNorm = function(value, rangeMaximum) {
        rangeMaximum = defaultValue_default(rangeMaximum, 255);
        return Math.round(
          (CesiumMath.clamp(value, -1, 1) * 0.5 + 0.5) * rangeMaximum
        );
      };
      CesiumMath.fromSNorm = function(value, rangeMaximum) {
        rangeMaximum = defaultValue_default(rangeMaximum, 255);
        return CesiumMath.clamp(value, 0, rangeMaximum) / rangeMaximum * 2 - 1;
      };
      CesiumMath.normalize = function(value, rangeMinimum, rangeMaximum) {
        rangeMaximum = Math.max(rangeMaximum - rangeMinimum, 0);
        return rangeMaximum === 0 ? 0 : CesiumMath.clamp((value - rangeMinimum) / rangeMaximum, 0, 1);
      };
      CesiumMath.sinh = defaultValue_default(Math.sinh, function sinh(value) {
        return (Math.exp(value) - Math.exp(-value)) / 2;
      });
      CesiumMath.cosh = defaultValue_default(Math.cosh, function cosh(value) {
        return (Math.exp(value) + Math.exp(-value)) / 2;
      });
      CesiumMath.lerp = function(p, q, time) {
        return (1 - time) * p + time * q;
      };
      CesiumMath.PI = Math.PI;
      CesiumMath.ONE_OVER_PI = 1 / Math.PI;
      CesiumMath.PI_OVER_TWO = Math.PI / 2;
      CesiumMath.PI_OVER_THREE = Math.PI / 3;
      CesiumMath.PI_OVER_FOUR = Math.PI / 4;
      CesiumMath.PI_OVER_SIX = Math.PI / 6;
      CesiumMath.THREE_PI_OVER_TWO = 3 * Math.PI / 2;
      CesiumMath.TWO_PI = 2 * Math.PI;
      CesiumMath.ONE_OVER_TWO_PI = 1 / (2 * Math.PI);
      CesiumMath.RADIANS_PER_DEGREE = Math.PI / 180;
      CesiumMath.DEGREES_PER_RADIAN = 180 / Math.PI;
      CesiumMath.RADIANS_PER_ARCSECOND = CesiumMath.RADIANS_PER_DEGREE / 3600;
      CesiumMath.toRadians = function(degrees) {
        if (!defined_default(degrees)) {
          throw new DeveloperError_default("degrees is required.");
        }
        return degrees * CesiumMath.RADIANS_PER_DEGREE;
      };
      CesiumMath.toDegrees = function(radians) {
        if (!defined_default(radians)) {
          throw new DeveloperError_default("radians is required.");
        }
        return radians * CesiumMath.DEGREES_PER_RADIAN;
      };
      CesiumMath.convertLongitudeRange = function(angle) {
        if (!defined_default(angle)) {
          throw new DeveloperError_default("angle is required.");
        }
        const twoPi = CesiumMath.TWO_PI;
        const simplified = angle - Math.floor(angle / twoPi) * twoPi;
        if (simplified < -Math.PI) {
          return simplified + twoPi;
        }
        if (simplified >= Math.PI) {
          return simplified - twoPi;
        }
        return simplified;
      };
      CesiumMath.clampToLatitudeRange = function(angle) {
        if (!defined_default(angle)) {
          throw new DeveloperError_default("angle is required.");
        }
        return CesiumMath.clamp(
          angle,
          -1 * CesiumMath.PI_OVER_TWO,
          CesiumMath.PI_OVER_TWO
        );
      };
      CesiumMath.negativePiToPi = function(angle) {
        if (!defined_default(angle)) {
          throw new DeveloperError_default("angle is required.");
        }
        if (angle >= -CesiumMath.PI && angle <= CesiumMath.PI) {
          return angle;
        }
        return CesiumMath.zeroToTwoPi(angle + CesiumMath.PI) - CesiumMath.PI;
      };
      CesiumMath.zeroToTwoPi = function(angle) {
        if (!defined_default(angle)) {
          throw new DeveloperError_default("angle is required.");
        }
        if (angle >= 0 && angle <= CesiumMath.TWO_PI) {
          return angle;
        }
        const mod = CesiumMath.mod(angle, CesiumMath.TWO_PI);
        if (Math.abs(mod) < CesiumMath.EPSILON14 && Math.abs(angle) > CesiumMath.EPSILON14) {
          return CesiumMath.TWO_PI;
        }
        return mod;
      };
      CesiumMath.mod = function(m, n) {
        if (!defined_default(m)) {
          throw new DeveloperError_default("m is required.");
        }
        if (!defined_default(n)) {
          throw new DeveloperError_default("n is required.");
        }
        if (n === 0) {
          throw new DeveloperError_default("divisor cannot be 0.");
        }
        if (CesiumMath.sign(m) === CesiumMath.sign(n) && Math.abs(m) < Math.abs(n)) {
          return m;
        }
        return (m % n + n) % n;
      };
      CesiumMath.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {
        if (!defined_default(left)) {
          throw new DeveloperError_default("left is required.");
        }
        if (!defined_default(right)) {
          throw new DeveloperError_default("right is required.");
        }
        relativeEpsilon = defaultValue_default(relativeEpsilon, 0);
        absoluteEpsilon = defaultValue_default(absoluteEpsilon, relativeEpsilon);
        const absDiff = Math.abs(left - right);
        return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));
      };
      CesiumMath.lessThan = function(left, right, absoluteEpsilon) {
        if (!defined_default(left)) {
          throw new DeveloperError_default("first is required.");
        }
        if (!defined_default(right)) {
          throw new DeveloperError_default("second is required.");
        }
        if (!defined_default(absoluteEpsilon)) {
          throw new DeveloperError_default("absoluteEpsilon is required.");
        }
        return left - right < -absoluteEpsilon;
      };
      CesiumMath.lessThanOrEquals = function(left, right, absoluteEpsilon) {
        if (!defined_default(left)) {
          throw new DeveloperError_default("first is required.");
        }
        if (!defined_default(right)) {
          throw new DeveloperError_default("second is required.");
        }
        if (!defined_default(absoluteEpsilon)) {
          throw new DeveloperError_default("absoluteEpsilon is required.");
        }
        return left - right < absoluteEpsilon;
      };
      CesiumMath.greaterThan = function(left, right, absoluteEpsilon) {
        if (!defined_default(left)) {
          throw new DeveloperError_default("first is required.");
        }
        if (!defined_default(right)) {
          throw new DeveloperError_default("second is required.");
        }
        if (!defined_default(absoluteEpsilon)) {
          throw new DeveloperError_default("absoluteEpsilon is required.");
        }
        return left - right > absoluteEpsilon;
      };
      CesiumMath.greaterThanOrEquals = function(left, right, absoluteEpsilon) {
        if (!defined_default(left)) {
          throw new DeveloperError_default("first is required.");
        }
        if (!defined_default(right)) {
          throw new DeveloperError_default("second is required.");
        }
        if (!defined_default(absoluteEpsilon)) {
          throw new DeveloperError_default("absoluteEpsilon is required.");
        }
        return left - right > -absoluteEpsilon;
      };
      factorials = [1];
      CesiumMath.factorial = function(n) {
        if (typeof n !== "number" || n < 0) {
          throw new DeveloperError_default(
            "A number greater than or equal to 0 is required."
          );
        }
        const length = factorials.length;
        if (n >= length) {
          let sum = factorials[length - 1];
          for (let i = length; i <= n; i++) {
            const next = sum * i;
            factorials.push(next);
            sum = next;
          }
        }
        return factorials[n];
      };
      CesiumMath.incrementWrap = function(n, maximumValue, minimumValue) {
        minimumValue = defaultValue_default(minimumValue, 0);
        if (!defined_default(n)) {
          throw new DeveloperError_default("n is required.");
        }
        if (maximumValue <= minimumValue) {
          throw new DeveloperError_default("maximumValue must be greater than minimumValue.");
        }
        ++n;
        if (n > maximumValue) {
          n = minimumValue;
        }
        return n;
      };
      CesiumMath.isPowerOfTwo = function(n) {
        if (typeof n !== "number" || n < 0 || n > 4294967295) {
          throw new DeveloperError_default("A number between 0 and (2^32)-1 is required.");
        }
        return n !== 0 && (n & n - 1) === 0;
      };
      CesiumMath.nextPowerOfTwo = function(n) {
        if (typeof n !== "number" || n < 0 || n > 2147483648) {
          throw new DeveloperError_default("A number between 0 and 2^31 is required.");
        }
        --n;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        ++n;
        return n;
      };
      CesiumMath.previousPowerOfTwo = function(n) {
        if (typeof n !== "number" || n < 0 || n > 4294967295) {
          throw new DeveloperError_default("A number between 0 and (2^32)-1 is required.");
        }
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        n |= n >> 32;
        n = (n >>> 0) - (n >>> 1);
        return n;
      };
      CesiumMath.clamp = function(value, min3, max3) {
        Check_default.typeOf.number("value", value);
        Check_default.typeOf.number("min", min3);
        Check_default.typeOf.number("max", max3);
        return value < min3 ? min3 : value > max3 ? max3 : value;
      };
      randomNumberGenerator = new import_mersenne_twister.default();
      CesiumMath.setRandomNumberSeed = function(seed) {
        if (!defined_default(seed)) {
          throw new DeveloperError_default("seed is required.");
        }
        randomNumberGenerator = new import_mersenne_twister.default(seed);
      };
      CesiumMath.nextRandomNumber = function() {
        return randomNumberGenerator.random();
      };
      CesiumMath.randomBetween = function(min3, max3) {
        return CesiumMath.nextRandomNumber() * (max3 - min3) + min3;
      };
      CesiumMath.acosClamped = function(value) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required.");
        }
        return Math.acos(CesiumMath.clamp(value, -1, 1));
      };
      CesiumMath.asinClamped = function(value) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required.");
        }
        return Math.asin(CesiumMath.clamp(value, -1, 1));
      };
      CesiumMath.chordLength = function(angle, radius) {
        if (!defined_default(angle)) {
          throw new DeveloperError_default("angle is required.");
        }
        if (!defined_default(radius)) {
          throw new DeveloperError_default("radius is required.");
        }
        return 2 * radius * Math.sin(angle * 0.5);
      };
      CesiumMath.logBase = function(number, base) {
        if (!defined_default(number)) {
          throw new DeveloperError_default("number is required.");
        }
        if (!defined_default(base)) {
          throw new DeveloperError_default("base is required.");
        }
        return Math.log(number) / Math.log(base);
      };
      CesiumMath.cbrt = defaultValue_default(Math.cbrt, function cbrt(number) {
        const result = Math.pow(Math.abs(number), 1 / 3);
        return number < 0 ? -result : result;
      });
      CesiumMath.log2 = defaultValue_default(Math.log2, function log2(number) {
        return Math.log(number) * Math.LOG2E;
      });
      CesiumMath.fog = function(distanceToCamera, density) {
        const scalar = distanceToCamera * density;
        return 1 - Math.exp(-(scalar * scalar));
      };
      CesiumMath.fastApproximateAtan = function(x) {
        Check_default.typeOf.number("x", x);
        return x * (-0.1784 * Math.abs(x) - 0.0663 * x * x + 1.0301);
      };
      CesiumMath.fastApproximateAtan2 = function(x, y) {
        Check_default.typeOf.number("x", x);
        Check_default.typeOf.number("y", y);
        let opposite;
        let t = Math.abs(x);
        opposite = Math.abs(y);
        const adjacent = Math.max(t, opposite);
        opposite = Math.min(t, opposite);
        const oppositeOverAdjacent = opposite / adjacent;
        if (isNaN(oppositeOverAdjacent)) {
          throw new DeveloperError_default("either x or y must be nonzero");
        }
        t = CesiumMath.fastApproximateAtan(oppositeOverAdjacent);
        t = Math.abs(y) > Math.abs(x) ? CesiumMath.PI_OVER_TWO - t : t;
        t = x < 0 ? CesiumMath.PI - t : t;
        t = y < 0 ? -t : t;
        return t;
      };
      Math_default = CesiumMath;
    }
  });

  // packages/engine/Source/Core/Cartesian3.js
  function Cartesian3(x, y, z) {
    this.x = defaultValue_default(x, 0);
    this.y = defaultValue_default(y, 0);
    this.z = defaultValue_default(z, 0);
  }
  var distanceScratch, lerpScratch, angleBetweenScratch, angleBetweenScratch2, mostOrthogonalAxisScratch, scratchN, scratchK, wgs84RadiiSquared, Cartesian3_default;
  var init_Cartesian3 = __esm({
    "packages/engine/Source/Core/Cartesian3.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      Cartesian3.fromSpherical = function(spherical, result) {
        Check_default.typeOf.object("spherical", spherical);
        if (!defined_default(result)) {
          result = new Cartesian3();
        }
        const clock = spherical.clock;
        const cone = spherical.cone;
        const magnitude = defaultValue_default(spherical.magnitude, 1);
        const radial = magnitude * Math.sin(cone);
        result.x = radial * Math.cos(clock);
        result.y = radial * Math.sin(clock);
        result.z = magnitude * Math.cos(cone);
        return result;
      };
      Cartesian3.fromElements = function(x, y, z, result) {
        if (!defined_default(result)) {
          return new Cartesian3(x, y, z);
        }
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      Cartesian3.clone = function(cartesian11, result) {
        if (!defined_default(cartesian11)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Cartesian3(cartesian11.x, cartesian11.y, cartesian11.z);
        }
        result.x = cartesian11.x;
        result.y = cartesian11.y;
        result.z = cartesian11.z;
        return result;
      };
      Cartesian3.fromCartesian4 = Cartesian3.clone;
      Cartesian3.packedLength = 3;
      Cartesian3.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.x;
        array[startingIndex++] = value.y;
        array[startingIndex] = value.z;
        return array;
      };
      Cartesian3.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Cartesian3();
        }
        result.x = array[startingIndex++];
        result.y = array[startingIndex++];
        result.z = array[startingIndex];
        return result;
      };
      Cartesian3.packArray = function(array, result) {
        Check_default.defined("array", array);
        const length = array.length;
        const resultLength = length * 3;
        if (!defined_default(result)) {
          result = new Array(resultLength);
        } else if (!Array.isArray(result) && result.length !== resultLength) {
          throw new DeveloperError_default(
            "If result is a typed array, it must have exactly array.length * 3 elements"
          );
        } else if (result.length !== resultLength) {
          result.length = resultLength;
        }
        for (let i = 0; i < length; ++i) {
          Cartesian3.pack(array[i], result, i * 3);
        }
        return result;
      };
      Cartesian3.unpackArray = function(array, result) {
        Check_default.defined("array", array);
        Check_default.typeOf.number.greaterThanOrEquals("array.length", array.length, 3);
        if (array.length % 3 !== 0) {
          throw new DeveloperError_default("array length must be a multiple of 3.");
        }
        const length = array.length;
        if (!defined_default(result)) {
          result = new Array(length / 3);
        } else {
          result.length = length / 3;
        }
        for (let i = 0; i < length; i += 3) {
          const index = i / 3;
          result[index] = Cartesian3.unpack(array, i, result[index]);
        }
        return result;
      };
      Cartesian3.fromArray = Cartesian3.unpack;
      Cartesian3.maximumComponent = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return Math.max(cartesian11.x, cartesian11.y, cartesian11.z);
      };
      Cartesian3.minimumComponent = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return Math.min(cartesian11.x, cartesian11.y, cartesian11.z);
      };
      Cartesian3.minimumByComponent = function(first, second, result) {
        Check_default.typeOf.object("first", first);
        Check_default.typeOf.object("second", second);
        Check_default.typeOf.object("result", result);
        result.x = Math.min(first.x, second.x);
        result.y = Math.min(first.y, second.y);
        result.z = Math.min(first.z, second.z);
        return result;
      };
      Cartesian3.maximumByComponent = function(first, second, result) {
        Check_default.typeOf.object("first", first);
        Check_default.typeOf.object("second", second);
        Check_default.typeOf.object("result", result);
        result.x = Math.max(first.x, second.x);
        result.y = Math.max(first.y, second.y);
        result.z = Math.max(first.z, second.z);
        return result;
      };
      Cartesian3.clamp = function(value, min3, max3, result) {
        Check_default.typeOf.object("value", value);
        Check_default.typeOf.object("min", min3);
        Check_default.typeOf.object("max", max3);
        Check_default.typeOf.object("result", result);
        const x = Math_default.clamp(value.x, min3.x, max3.x);
        const y = Math_default.clamp(value.y, min3.y, max3.y);
        const z = Math_default.clamp(value.z, min3.z, max3.z);
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      Cartesian3.magnitudeSquared = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return cartesian11.x * cartesian11.x + cartesian11.y * cartesian11.y + cartesian11.z * cartesian11.z;
      };
      Cartesian3.magnitude = function(cartesian11) {
        return Math.sqrt(Cartesian3.magnitudeSquared(cartesian11));
      };
      distanceScratch = new Cartesian3();
      Cartesian3.distance = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Cartesian3.subtract(left, right, distanceScratch);
        return Cartesian3.magnitude(distanceScratch);
      };
      Cartesian3.distanceSquared = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Cartesian3.subtract(left, right, distanceScratch);
        return Cartesian3.magnitudeSquared(distanceScratch);
      };
      Cartesian3.normalize = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const magnitude = Cartesian3.magnitude(cartesian11);
        result.x = cartesian11.x / magnitude;
        result.y = cartesian11.y / magnitude;
        result.z = cartesian11.z / magnitude;
        if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z)) {
          throw new DeveloperError_default("normalized result is not a number");
        }
        return result;
      };
      Cartesian3.dot = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        return left.x * right.x + left.y * right.y + left.z * right.z;
      };
      Cartesian3.multiplyComponents = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x * right.x;
        result.y = left.y * right.y;
        result.z = left.z * right.z;
        return result;
      };
      Cartesian3.divideComponents = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x / right.x;
        result.y = left.y / right.y;
        result.z = left.z / right.z;
        return result;
      };
      Cartesian3.add = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x + right.x;
        result.y = left.y + right.y;
        result.z = left.z + right.z;
        return result;
      };
      Cartesian3.subtract = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x - right.x;
        result.y = left.y - right.y;
        result.z = left.z - right.z;
        return result;
      };
      Cartesian3.multiplyByScalar = function(cartesian11, scalar, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.x = cartesian11.x * scalar;
        result.y = cartesian11.y * scalar;
        result.z = cartesian11.z * scalar;
        return result;
      };
      Cartesian3.divideByScalar = function(cartesian11, scalar, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.x = cartesian11.x / scalar;
        result.y = cartesian11.y / scalar;
        result.z = cartesian11.z / scalar;
        return result;
      };
      Cartesian3.negate = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result.x = -cartesian11.x;
        result.y = -cartesian11.y;
        result.z = -cartesian11.z;
        return result;
      };
      Cartesian3.abs = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result.x = Math.abs(cartesian11.x);
        result.y = Math.abs(cartesian11.y);
        result.z = Math.abs(cartesian11.z);
        return result;
      };
      lerpScratch = new Cartesian3();
      Cartesian3.lerp = function(start, end, t, result) {
        Check_default.typeOf.object("start", start);
        Check_default.typeOf.object("end", end);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        Cartesian3.multiplyByScalar(end, t, lerpScratch);
        result = Cartesian3.multiplyByScalar(start, 1 - t, result);
        return Cartesian3.add(lerpScratch, result, result);
      };
      angleBetweenScratch = new Cartesian3();
      angleBetweenScratch2 = new Cartesian3();
      Cartesian3.angleBetween = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Cartesian3.normalize(left, angleBetweenScratch);
        Cartesian3.normalize(right, angleBetweenScratch2);
        const cosine = Cartesian3.dot(angleBetweenScratch, angleBetweenScratch2);
        const sine = Cartesian3.magnitude(
          Cartesian3.cross(
            angleBetweenScratch,
            angleBetweenScratch2,
            angleBetweenScratch
          )
        );
        return Math.atan2(sine, cosine);
      };
      mostOrthogonalAxisScratch = new Cartesian3();
      Cartesian3.mostOrthogonalAxis = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const f = Cartesian3.normalize(cartesian11, mostOrthogonalAxisScratch);
        Cartesian3.abs(f, f);
        if (f.x <= f.y) {
          if (f.x <= f.z) {
            result = Cartesian3.clone(Cartesian3.UNIT_X, result);
          } else {
            result = Cartesian3.clone(Cartesian3.UNIT_Z, result);
          }
        } else if (f.y <= f.z) {
          result = Cartesian3.clone(Cartesian3.UNIT_Y, result);
        } else {
          result = Cartesian3.clone(Cartesian3.UNIT_Z, result);
        }
        return result;
      };
      Cartesian3.projectVector = function(a3, b, result) {
        Check_default.defined("a", a3);
        Check_default.defined("b", b);
        Check_default.defined("result", result);
        const scalar = Cartesian3.dot(a3, b) / Cartesian3.dot(b, b);
        return Cartesian3.multiplyByScalar(b, scalar, result);
      };
      Cartesian3.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.x === right.x && left.y === right.y && left.z === right.z;
      };
      Cartesian3.equalsArray = function(cartesian11, array, offset) {
        return cartesian11.x === array[offset] && cartesian11.y === array[offset + 1] && cartesian11.z === array[offset + 2];
      };
      Cartesian3.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {
        return left === right || defined_default(left) && defined_default(right) && Math_default.equalsEpsilon(
          left.x,
          right.x,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          left.y,
          right.y,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          left.z,
          right.z,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      Cartesian3.cross = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        const leftX = left.x;
        const leftY = left.y;
        const leftZ = left.z;
        const rightX = right.x;
        const rightY = right.y;
        const rightZ = right.z;
        const x = leftY * rightZ - leftZ * rightY;
        const y = leftZ * rightX - leftX * rightZ;
        const z = leftX * rightY - leftY * rightX;
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      Cartesian3.midpoint = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = (left.x + right.x) * 0.5;
        result.y = (left.y + right.y) * 0.5;
        result.z = (left.z + right.z) * 0.5;
        return result;
      };
      Cartesian3.fromDegrees = function(longitude, latitude, height, ellipsoid, result) {
        Check_default.typeOf.number("longitude", longitude);
        Check_default.typeOf.number("latitude", latitude);
        longitude = Math_default.toRadians(longitude);
        latitude = Math_default.toRadians(latitude);
        return Cartesian3.fromRadians(longitude, latitude, height, ellipsoid, result);
      };
      scratchN = new Cartesian3();
      scratchK = new Cartesian3();
      wgs84RadiiSquared = new Cartesian3(
        6378137 * 6378137,
        6378137 * 6378137,
        6356752314245179e-9 * 6356752314245179e-9
      );
      Cartesian3.fromRadians = function(longitude, latitude, height, ellipsoid, result) {
        Check_default.typeOf.number("longitude", longitude);
        Check_default.typeOf.number("latitude", latitude);
        height = defaultValue_default(height, 0);
        const radiiSquared = defined_default(ellipsoid) ? ellipsoid.radiiSquared : wgs84RadiiSquared;
        const cosLatitude = Math.cos(latitude);
        scratchN.x = cosLatitude * Math.cos(longitude);
        scratchN.y = cosLatitude * Math.sin(longitude);
        scratchN.z = Math.sin(latitude);
        scratchN = Cartesian3.normalize(scratchN, scratchN);
        Cartesian3.multiplyComponents(radiiSquared, scratchN, scratchK);
        const gamma = Math.sqrt(Cartesian3.dot(scratchN, scratchK));
        scratchK = Cartesian3.divideByScalar(scratchK, gamma, scratchK);
        scratchN = Cartesian3.multiplyByScalar(scratchN, height, scratchN);
        if (!defined_default(result)) {
          result = new Cartesian3();
        }
        return Cartesian3.add(scratchK, scratchN, result);
      };
      Cartesian3.fromDegreesArray = function(coordinates, ellipsoid, result) {
        Check_default.defined("coordinates", coordinates);
        if (coordinates.length < 2 || coordinates.length % 2 !== 0) {
          throw new DeveloperError_default(
            "the number of coordinates must be a multiple of 2 and at least 2"
          );
        }
        const length = coordinates.length;
        if (!defined_default(result)) {
          result = new Array(length / 2);
        } else {
          result.length = length / 2;
        }
        for (let i = 0; i < length; i += 2) {
          const longitude = coordinates[i];
          const latitude = coordinates[i + 1];
          const index = i / 2;
          result[index] = Cartesian3.fromDegrees(
            longitude,
            latitude,
            0,
            ellipsoid,
            result[index]
          );
        }
        return result;
      };
      Cartesian3.fromRadiansArray = function(coordinates, ellipsoid, result) {
        Check_default.defined("coordinates", coordinates);
        if (coordinates.length < 2 || coordinates.length % 2 !== 0) {
          throw new DeveloperError_default(
            "the number of coordinates must be a multiple of 2 and at least 2"
          );
        }
        const length = coordinates.length;
        if (!defined_default(result)) {
          result = new Array(length / 2);
        } else {
          result.length = length / 2;
        }
        for (let i = 0; i < length; i += 2) {
          const longitude = coordinates[i];
          const latitude = coordinates[i + 1];
          const index = i / 2;
          result[index] = Cartesian3.fromRadians(
            longitude,
            latitude,
            0,
            ellipsoid,
            result[index]
          );
        }
        return result;
      };
      Cartesian3.fromDegreesArrayHeights = function(coordinates, ellipsoid, result) {
        Check_default.defined("coordinates", coordinates);
        if (coordinates.length < 3 || coordinates.length % 3 !== 0) {
          throw new DeveloperError_default(
            "the number of coordinates must be a multiple of 3 and at least 3"
          );
        }
        const length = coordinates.length;
        if (!defined_default(result)) {
          result = new Array(length / 3);
        } else {
          result.length = length / 3;
        }
        for (let i = 0; i < length; i += 3) {
          const longitude = coordinates[i];
          const latitude = coordinates[i + 1];
          const height = coordinates[i + 2];
          const index = i / 3;
          result[index] = Cartesian3.fromDegrees(
            longitude,
            latitude,
            height,
            ellipsoid,
            result[index]
          );
        }
        return result;
      };
      Cartesian3.fromRadiansArrayHeights = function(coordinates, ellipsoid, result) {
        Check_default.defined("coordinates", coordinates);
        if (coordinates.length < 3 || coordinates.length % 3 !== 0) {
          throw new DeveloperError_default(
            "the number of coordinates must be a multiple of 3 and at least 3"
          );
        }
        const length = coordinates.length;
        if (!defined_default(result)) {
          result = new Array(length / 3);
        } else {
          result.length = length / 3;
        }
        for (let i = 0; i < length; i += 3) {
          const longitude = coordinates[i];
          const latitude = coordinates[i + 1];
          const height = coordinates[i + 2];
          const index = i / 3;
          result[index] = Cartesian3.fromRadians(
            longitude,
            latitude,
            height,
            ellipsoid,
            result[index]
          );
        }
        return result;
      };
      Cartesian3.ZERO = Object.freeze(new Cartesian3(0, 0, 0));
      Cartesian3.ONE = Object.freeze(new Cartesian3(1, 1, 1));
      Cartesian3.UNIT_X = Object.freeze(new Cartesian3(1, 0, 0));
      Cartesian3.UNIT_Y = Object.freeze(new Cartesian3(0, 1, 0));
      Cartesian3.UNIT_Z = Object.freeze(new Cartesian3(0, 0, 1));
      Cartesian3.prototype.clone = function(result) {
        return Cartesian3.clone(this, result);
      };
      Cartesian3.prototype.equals = function(right) {
        return Cartesian3.equals(this, right);
      };
      Cartesian3.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {
        return Cartesian3.equalsEpsilon(
          this,
          right,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      Cartesian3.prototype.toString = function() {
        return `(${this.x}, ${this.y}, ${this.z})`;
      };
      Cartesian3_default = Cartesian3;
    }
  });

  // packages/engine/Source/Core/scaleToGeodeticSurface.js
  function scaleToGeodeticSurface(cartesian11, oneOverRadii, oneOverRadiiSquared, centerToleranceSquared, result) {
    if (!defined_default(cartesian11)) {
      throw new DeveloperError_default("cartesian is required.");
    }
    if (!defined_default(oneOverRadii)) {
      throw new DeveloperError_default("oneOverRadii is required.");
    }
    if (!defined_default(oneOverRadiiSquared)) {
      throw new DeveloperError_default("oneOverRadiiSquared is required.");
    }
    if (!defined_default(centerToleranceSquared)) {
      throw new DeveloperError_default("centerToleranceSquared is required.");
    }
    const positionX = cartesian11.x;
    const positionY = cartesian11.y;
    const positionZ = cartesian11.z;
    const oneOverRadiiX = oneOverRadii.x;
    const oneOverRadiiY = oneOverRadii.y;
    const oneOverRadiiZ = oneOverRadii.z;
    const x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;
    const y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;
    const z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;
    const squaredNorm = x2 + y2 + z2;
    const ratio = Math.sqrt(1 / squaredNorm);
    const intersection = Cartesian3_default.multiplyByScalar(
      cartesian11,
      ratio,
      scaleToGeodeticSurfaceIntersection
    );
    if (squaredNorm < centerToleranceSquared) {
      return !isFinite(ratio) ? void 0 : Cartesian3_default.clone(intersection, result);
    }
    const oneOverRadiiSquaredX = oneOverRadiiSquared.x;
    const oneOverRadiiSquaredY = oneOverRadiiSquared.y;
    const oneOverRadiiSquaredZ = oneOverRadiiSquared.z;
    const gradient = scaleToGeodeticSurfaceGradient;
    gradient.x = intersection.x * oneOverRadiiSquaredX * 2;
    gradient.y = intersection.y * oneOverRadiiSquaredY * 2;
    gradient.z = intersection.z * oneOverRadiiSquaredZ * 2;
    let lambda = (1 - ratio) * Cartesian3_default.magnitude(cartesian11) / (0.5 * Cartesian3_default.magnitude(gradient));
    let correction = 0;
    let func;
    let denominator;
    let xMultiplier;
    let yMultiplier;
    let zMultiplier;
    let xMultiplier2;
    let yMultiplier2;
    let zMultiplier2;
    let xMultiplier3;
    let yMultiplier3;
    let zMultiplier3;
    do {
      lambda -= correction;
      xMultiplier = 1 / (1 + lambda * oneOverRadiiSquaredX);
      yMultiplier = 1 / (1 + lambda * oneOverRadiiSquaredY);
      zMultiplier = 1 / (1 + lambda * oneOverRadiiSquaredZ);
      xMultiplier2 = xMultiplier * xMultiplier;
      yMultiplier2 = yMultiplier * yMultiplier;
      zMultiplier2 = zMultiplier * zMultiplier;
      xMultiplier3 = xMultiplier2 * xMultiplier;
      yMultiplier3 = yMultiplier2 * yMultiplier;
      zMultiplier3 = zMultiplier2 * zMultiplier;
      func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1;
      denominator = x2 * xMultiplier3 * oneOverRadiiSquaredX + y2 * yMultiplier3 * oneOverRadiiSquaredY + z2 * zMultiplier3 * oneOverRadiiSquaredZ;
      const derivative = -2 * denominator;
      correction = func / derivative;
    } while (Math.abs(func) > Math_default.EPSILON12);
    if (!defined_default(result)) {
      return new Cartesian3_default(
        positionX * xMultiplier,
        positionY * yMultiplier,
        positionZ * zMultiplier
      );
    }
    result.x = positionX * xMultiplier;
    result.y = positionY * yMultiplier;
    result.z = positionZ * zMultiplier;
    return result;
  }
  var scaleToGeodeticSurfaceIntersection, scaleToGeodeticSurfaceGradient, scaleToGeodeticSurface_default;
  var init_scaleToGeodeticSurface = __esm({
    "packages/engine/Source/Core/scaleToGeodeticSurface.js"() {
      init_Cartesian3();
      init_defined();
      init_DeveloperError();
      init_Math();
      scaleToGeodeticSurfaceIntersection = new Cartesian3_default();
      scaleToGeodeticSurfaceGradient = new Cartesian3_default();
      scaleToGeodeticSurface_default = scaleToGeodeticSurface;
    }
  });

  // packages/engine/Source/Core/Cartographic.js
  function Cartographic(longitude, latitude, height) {
    this.longitude = defaultValue_default(longitude, 0);
    this.latitude = defaultValue_default(latitude, 0);
    this.height = defaultValue_default(height, 0);
  }
  var cartesianToCartographicN, cartesianToCartographicP, cartesianToCartographicH, wgs84OneOverRadii, wgs84OneOverRadiiSquared, wgs84CenterToleranceSquared, Cartographic_default;
  var init_Cartographic = __esm({
    "packages/engine/Source/Core/Cartographic.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_Math();
      init_scaleToGeodeticSurface();
      Cartographic.fromRadians = function(longitude, latitude, height, result) {
        Check_default.typeOf.number("longitude", longitude);
        Check_default.typeOf.number("latitude", latitude);
        height = defaultValue_default(height, 0);
        if (!defined_default(result)) {
          return new Cartographic(longitude, latitude, height);
        }
        result.longitude = longitude;
        result.latitude = latitude;
        result.height = height;
        return result;
      };
      Cartographic.fromDegrees = function(longitude, latitude, height, result) {
        Check_default.typeOf.number("longitude", longitude);
        Check_default.typeOf.number("latitude", latitude);
        longitude = Math_default.toRadians(longitude);
        latitude = Math_default.toRadians(latitude);
        return Cartographic.fromRadians(longitude, latitude, height, result);
      };
      cartesianToCartographicN = new Cartesian3_default();
      cartesianToCartographicP = new Cartesian3_default();
      cartesianToCartographicH = new Cartesian3_default();
      wgs84OneOverRadii = new Cartesian3_default(
        1 / 6378137,
        1 / 6378137,
        1 / 6356752314245179e-9
      );
      wgs84OneOverRadiiSquared = new Cartesian3_default(
        1 / (6378137 * 6378137),
        1 / (6378137 * 6378137),
        1 / (6356752314245179e-9 * 6356752314245179e-9)
      );
      wgs84CenterToleranceSquared = Math_default.EPSILON1;
      Cartographic.fromCartesian = function(cartesian11, ellipsoid, result) {
        const oneOverRadii = defined_default(ellipsoid) ? ellipsoid.oneOverRadii : wgs84OneOverRadii;
        const oneOverRadiiSquared = defined_default(ellipsoid) ? ellipsoid.oneOverRadiiSquared : wgs84OneOverRadiiSquared;
        const centerToleranceSquared = defined_default(ellipsoid) ? ellipsoid._centerToleranceSquared : wgs84CenterToleranceSquared;
        const p = scaleToGeodeticSurface_default(
          cartesian11,
          oneOverRadii,
          oneOverRadiiSquared,
          centerToleranceSquared,
          cartesianToCartographicP
        );
        if (!defined_default(p)) {
          return void 0;
        }
        let n = Cartesian3_default.multiplyComponents(
          p,
          oneOverRadiiSquared,
          cartesianToCartographicN
        );
        n = Cartesian3_default.normalize(n, n);
        const h = Cartesian3_default.subtract(cartesian11, p, cartesianToCartographicH);
        const longitude = Math.atan2(n.y, n.x);
        const latitude = Math.asin(n.z);
        const height = Math_default.sign(Cartesian3_default.dot(h, cartesian11)) * Cartesian3_default.magnitude(h);
        if (!defined_default(result)) {
          return new Cartographic(longitude, latitude, height);
        }
        result.longitude = longitude;
        result.latitude = latitude;
        result.height = height;
        return result;
      };
      Cartographic.toCartesian = function(cartographic2, ellipsoid, result) {
        Check_default.defined("cartographic", cartographic2);
        return Cartesian3_default.fromRadians(
          cartographic2.longitude,
          cartographic2.latitude,
          cartographic2.height,
          ellipsoid,
          result
        );
      };
      Cartographic.clone = function(cartographic2, result) {
        if (!defined_default(cartographic2)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Cartographic(
            cartographic2.longitude,
            cartographic2.latitude,
            cartographic2.height
          );
        }
        result.longitude = cartographic2.longitude;
        result.latitude = cartographic2.latitude;
        result.height = cartographic2.height;
        return result;
      };
      Cartographic.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.longitude === right.longitude && left.latitude === right.latitude && left.height === right.height;
      };
      Cartographic.equalsEpsilon = function(left, right, epsilon) {
        epsilon = defaultValue_default(epsilon, 0);
        return left === right || defined_default(left) && defined_default(right) && Math.abs(left.longitude - right.longitude) <= epsilon && Math.abs(left.latitude - right.latitude) <= epsilon && Math.abs(left.height - right.height) <= epsilon;
      };
      Cartographic.ZERO = Object.freeze(new Cartographic(0, 0, 0));
      Cartographic.prototype.clone = function(result) {
        return Cartographic.clone(this, result);
      };
      Cartographic.prototype.equals = function(right) {
        return Cartographic.equals(this, right);
      };
      Cartographic.prototype.equalsEpsilon = function(right, epsilon) {
        return Cartographic.equalsEpsilon(this, right, epsilon);
      };
      Cartographic.prototype.toString = function() {
        return `(${this.longitude}, ${this.latitude}, ${this.height})`;
      };
      Cartographic_default = Cartographic;
    }
  });

  // packages/engine/Source/Core/Cartesian2.js
  function Cartesian2(x, y) {
    this.x = defaultValue_default(x, 0);
    this.y = defaultValue_default(y, 0);
  }
  var distanceScratch2, lerpScratch2, angleBetweenScratch3, angleBetweenScratch22, mostOrthogonalAxisScratch2, Cartesian2_default;
  var init_Cartesian2 = __esm({
    "packages/engine/Source/Core/Cartesian2.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      Cartesian2.fromElements = function(x, y, result) {
        if (!defined_default(result)) {
          return new Cartesian2(x, y);
        }
        result.x = x;
        result.y = y;
        return result;
      };
      Cartesian2.clone = function(cartesian11, result) {
        if (!defined_default(cartesian11)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Cartesian2(cartesian11.x, cartesian11.y);
        }
        result.x = cartesian11.x;
        result.y = cartesian11.y;
        return result;
      };
      Cartesian2.fromCartesian3 = Cartesian2.clone;
      Cartesian2.fromCartesian4 = Cartesian2.clone;
      Cartesian2.packedLength = 2;
      Cartesian2.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.x;
        array[startingIndex] = value.y;
        return array;
      };
      Cartesian2.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Cartesian2();
        }
        result.x = array[startingIndex++];
        result.y = array[startingIndex];
        return result;
      };
      Cartesian2.packArray = function(array, result) {
        Check_default.defined("array", array);
        const length = array.length;
        const resultLength = length * 2;
        if (!defined_default(result)) {
          result = new Array(resultLength);
        } else if (!Array.isArray(result) && result.length !== resultLength) {
          throw new DeveloperError_default(
            "If result is a typed array, it must have exactly array.length * 2 elements"
          );
        } else if (result.length !== resultLength) {
          result.length = resultLength;
        }
        for (let i = 0; i < length; ++i) {
          Cartesian2.pack(array[i], result, i * 2);
        }
        return result;
      };
      Cartesian2.unpackArray = function(array, result) {
        Check_default.defined("array", array);
        Check_default.typeOf.number.greaterThanOrEquals("array.length", array.length, 2);
        if (array.length % 2 !== 0) {
          throw new DeveloperError_default("array length must be a multiple of 2.");
        }
        const length = array.length;
        if (!defined_default(result)) {
          result = new Array(length / 2);
        } else {
          result.length = length / 2;
        }
        for (let i = 0; i < length; i += 2) {
          const index = i / 2;
          result[index] = Cartesian2.unpack(array, i, result[index]);
        }
        return result;
      };
      Cartesian2.fromArray = Cartesian2.unpack;
      Cartesian2.maximumComponent = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return Math.max(cartesian11.x, cartesian11.y);
      };
      Cartesian2.minimumComponent = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return Math.min(cartesian11.x, cartesian11.y);
      };
      Cartesian2.minimumByComponent = function(first, second, result) {
        Check_default.typeOf.object("first", first);
        Check_default.typeOf.object("second", second);
        Check_default.typeOf.object("result", result);
        result.x = Math.min(first.x, second.x);
        result.y = Math.min(first.y, second.y);
        return result;
      };
      Cartesian2.maximumByComponent = function(first, second, result) {
        Check_default.typeOf.object("first", first);
        Check_default.typeOf.object("second", second);
        Check_default.typeOf.object("result", result);
        result.x = Math.max(first.x, second.x);
        result.y = Math.max(first.y, second.y);
        return result;
      };
      Cartesian2.clamp = function(value, min3, max3, result) {
        Check_default.typeOf.object("value", value);
        Check_default.typeOf.object("min", min3);
        Check_default.typeOf.object("max", max3);
        Check_default.typeOf.object("result", result);
        const x = Math_default.clamp(value.x, min3.x, max3.x);
        const y = Math_default.clamp(value.y, min3.y, max3.y);
        result.x = x;
        result.y = y;
        return result;
      };
      Cartesian2.magnitudeSquared = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return cartesian11.x * cartesian11.x + cartesian11.y * cartesian11.y;
      };
      Cartesian2.magnitude = function(cartesian11) {
        return Math.sqrt(Cartesian2.magnitudeSquared(cartesian11));
      };
      distanceScratch2 = new Cartesian2();
      Cartesian2.distance = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Cartesian2.subtract(left, right, distanceScratch2);
        return Cartesian2.magnitude(distanceScratch2);
      };
      Cartesian2.distanceSquared = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Cartesian2.subtract(left, right, distanceScratch2);
        return Cartesian2.magnitudeSquared(distanceScratch2);
      };
      Cartesian2.normalize = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const magnitude = Cartesian2.magnitude(cartesian11);
        result.x = cartesian11.x / magnitude;
        result.y = cartesian11.y / magnitude;
        if (isNaN(result.x) || isNaN(result.y)) {
          throw new DeveloperError_default("normalized result is not a number");
        }
        return result;
      };
      Cartesian2.dot = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        return left.x * right.x + left.y * right.y;
      };
      Cartesian2.cross = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        return left.x * right.y - left.y * right.x;
      };
      Cartesian2.multiplyComponents = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x * right.x;
        result.y = left.y * right.y;
        return result;
      };
      Cartesian2.divideComponents = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x / right.x;
        result.y = left.y / right.y;
        return result;
      };
      Cartesian2.add = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x + right.x;
        result.y = left.y + right.y;
        return result;
      };
      Cartesian2.subtract = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x - right.x;
        result.y = left.y - right.y;
        return result;
      };
      Cartesian2.multiplyByScalar = function(cartesian11, scalar, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.x = cartesian11.x * scalar;
        result.y = cartesian11.y * scalar;
        return result;
      };
      Cartesian2.divideByScalar = function(cartesian11, scalar, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.x = cartesian11.x / scalar;
        result.y = cartesian11.y / scalar;
        return result;
      };
      Cartesian2.negate = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result.x = -cartesian11.x;
        result.y = -cartesian11.y;
        return result;
      };
      Cartesian2.abs = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result.x = Math.abs(cartesian11.x);
        result.y = Math.abs(cartesian11.y);
        return result;
      };
      lerpScratch2 = new Cartesian2();
      Cartesian2.lerp = function(start, end, t, result) {
        Check_default.typeOf.object("start", start);
        Check_default.typeOf.object("end", end);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        Cartesian2.multiplyByScalar(end, t, lerpScratch2);
        result = Cartesian2.multiplyByScalar(start, 1 - t, result);
        return Cartesian2.add(lerpScratch2, result, result);
      };
      angleBetweenScratch3 = new Cartesian2();
      angleBetweenScratch22 = new Cartesian2();
      Cartesian2.angleBetween = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Cartesian2.normalize(left, angleBetweenScratch3);
        Cartesian2.normalize(right, angleBetweenScratch22);
        return Math_default.acosClamped(
          Cartesian2.dot(angleBetweenScratch3, angleBetweenScratch22)
        );
      };
      mostOrthogonalAxisScratch2 = new Cartesian2();
      Cartesian2.mostOrthogonalAxis = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const f = Cartesian2.normalize(cartesian11, mostOrthogonalAxisScratch2);
        Cartesian2.abs(f, f);
        if (f.x <= f.y) {
          result = Cartesian2.clone(Cartesian2.UNIT_X, result);
        } else {
          result = Cartesian2.clone(Cartesian2.UNIT_Y, result);
        }
        return result;
      };
      Cartesian2.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.x === right.x && left.y === right.y;
      };
      Cartesian2.equalsArray = function(cartesian11, array, offset) {
        return cartesian11.x === array[offset] && cartesian11.y === array[offset + 1];
      };
      Cartesian2.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {
        return left === right || defined_default(left) && defined_default(right) && Math_default.equalsEpsilon(
          left.x,
          right.x,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          left.y,
          right.y,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      Cartesian2.ZERO = Object.freeze(new Cartesian2(0, 0));
      Cartesian2.ONE = Object.freeze(new Cartesian2(1, 1));
      Cartesian2.UNIT_X = Object.freeze(new Cartesian2(1, 0));
      Cartesian2.UNIT_Y = Object.freeze(new Cartesian2(0, 1));
      Cartesian2.prototype.clone = function(result) {
        return Cartesian2.clone(this, result);
      };
      Cartesian2.prototype.equals = function(right) {
        return Cartesian2.equals(this, right);
      };
      Cartesian2.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {
        return Cartesian2.equalsEpsilon(
          this,
          right,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      Cartesian2.prototype.toString = function() {
        return `(${this.x}, ${this.y})`;
      };
      Cartesian2_default = Cartesian2;
    }
  });

  // packages/engine/Source/Core/Ellipsoid.js
  function initialize(ellipsoid, x, y, z) {
    x = defaultValue_default(x, 0);
    y = defaultValue_default(y, 0);
    z = defaultValue_default(z, 0);
    Check_default.typeOf.number.greaterThanOrEquals("x", x, 0);
    Check_default.typeOf.number.greaterThanOrEquals("y", y, 0);
    Check_default.typeOf.number.greaterThanOrEquals("z", z, 0);
    ellipsoid._radii = new Cartesian3_default(x, y, z);
    ellipsoid._radiiSquared = new Cartesian3_default(x * x, y * y, z * z);
    ellipsoid._radiiToTheFourth = new Cartesian3_default(
      x * x * x * x,
      y * y * y * y,
      z * z * z * z
    );
    ellipsoid._oneOverRadii = new Cartesian3_default(
      x === 0 ? 0 : 1 / x,
      y === 0 ? 0 : 1 / y,
      z === 0 ? 0 : 1 / z
    );
    ellipsoid._oneOverRadiiSquared = new Cartesian3_default(
      x === 0 ? 0 : 1 / (x * x),
      y === 0 ? 0 : 1 / (y * y),
      z === 0 ? 0 : 1 / (z * z)
    );
    ellipsoid._minimumRadius = Math.min(x, y, z);
    ellipsoid._maximumRadius = Math.max(x, y, z);
    ellipsoid._centerToleranceSquared = Math_default.EPSILON1;
    if (ellipsoid._radiiSquared.z !== 0) {
      ellipsoid._squaredXOverSquaredZ = ellipsoid._radiiSquared.x / ellipsoid._radiiSquared.z;
    }
  }
  function Ellipsoid(x, y, z) {
    this._radii = void 0;
    this._radiiSquared = void 0;
    this._radiiToTheFourth = void 0;
    this._oneOverRadii = void 0;
    this._oneOverRadiiSquared = void 0;
    this._minimumRadius = void 0;
    this._maximumRadius = void 0;
    this._centerToleranceSquared = void 0;
    this._squaredXOverSquaredZ = void 0;
    initialize(this, x, y, z);
  }
  function gaussLegendreQuadrature(a3, b, func) {
    Check_default.typeOf.number("a", a3);
    Check_default.typeOf.number("b", b);
    Check_default.typeOf.func("func", func);
    const xMean = 0.5 * (b + a3);
    const xRange = 0.5 * (b - a3);
    let sum = 0;
    for (let i = 0; i < 5; i++) {
      const dx = xRange * abscissas[i];
      sum += weights[i] * (func(xMean + dx) + func(xMean - dx));
    }
    sum *= xRange;
    return sum;
  }
  var cartographicToCartesianNormal, cartographicToCartesianK, cartesianToCartographicN2, cartesianToCartographicP2, cartesianToCartographicH2, scratchEndpoint, abscissas, weights, Ellipsoid_default;
  var init_Ellipsoid = __esm({
    "packages/engine/Source/Core/Ellipsoid.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      init_scaleToGeodeticSurface();
      Object.defineProperties(Ellipsoid.prototype, {
        /**
         * Gets the radii of the ellipsoid.
         * @memberof Ellipsoid.prototype
         * @type {Cartesian3}
         * @readonly
         */
        radii: {
          get: function() {
            return this._radii;
          }
        },
        /**
         * Gets the squared radii of the ellipsoid.
         * @memberof Ellipsoid.prototype
         * @type {Cartesian3}
         * @readonly
         */
        radiiSquared: {
          get: function() {
            return this._radiiSquared;
          }
        },
        /**
         * Gets the radii of the ellipsoid raise to the fourth power.
         * @memberof Ellipsoid.prototype
         * @type {Cartesian3}
         * @readonly
         */
        radiiToTheFourth: {
          get: function() {
            return this._radiiToTheFourth;
          }
        },
        /**
         * Gets one over the radii of the ellipsoid.
         * @memberof Ellipsoid.prototype
         * @type {Cartesian3}
         * @readonly
         */
        oneOverRadii: {
          get: function() {
            return this._oneOverRadii;
          }
        },
        /**
         * Gets one over the squared radii of the ellipsoid.
         * @memberof Ellipsoid.prototype
         * @type {Cartesian3}
         * @readonly
         */
        oneOverRadiiSquared: {
          get: function() {
            return this._oneOverRadiiSquared;
          }
        },
        /**
         * Gets the minimum radius of the ellipsoid.
         * @memberof Ellipsoid.prototype
         * @type {number}
         * @readonly
         */
        minimumRadius: {
          get: function() {
            return this._minimumRadius;
          }
        },
        /**
         * Gets the maximum radius of the ellipsoid.
         * @memberof Ellipsoid.prototype
         * @type {number}
         * @readonly
         */
        maximumRadius: {
          get: function() {
            return this._maximumRadius;
          }
        }
      });
      Ellipsoid.clone = function(ellipsoid, result) {
        if (!defined_default(ellipsoid)) {
          return void 0;
        }
        const radii = ellipsoid._radii;
        if (!defined_default(result)) {
          return new Ellipsoid(radii.x, radii.y, radii.z);
        }
        Cartesian3_default.clone(radii, result._radii);
        Cartesian3_default.clone(ellipsoid._radiiSquared, result._radiiSquared);
        Cartesian3_default.clone(ellipsoid._radiiToTheFourth, result._radiiToTheFourth);
        Cartesian3_default.clone(ellipsoid._oneOverRadii, result._oneOverRadii);
        Cartesian3_default.clone(ellipsoid._oneOverRadiiSquared, result._oneOverRadiiSquared);
        result._minimumRadius = ellipsoid._minimumRadius;
        result._maximumRadius = ellipsoid._maximumRadius;
        result._centerToleranceSquared = ellipsoid._centerToleranceSquared;
        return result;
      };
      Ellipsoid.fromCartesian3 = function(cartesian11, result) {
        if (!defined_default(result)) {
          result = new Ellipsoid();
        }
        if (!defined_default(cartesian11)) {
          return result;
        }
        initialize(result, cartesian11.x, cartesian11.y, cartesian11.z);
        return result;
      };
      Ellipsoid.WGS84 = Object.freeze(
        new Ellipsoid(6378137, 6378137, 6356752314245179e-9)
      );
      Ellipsoid.UNIT_SPHERE = Object.freeze(new Ellipsoid(1, 1, 1));
      Ellipsoid.MOON = Object.freeze(
        new Ellipsoid(
          Math_default.LUNAR_RADIUS,
          Math_default.LUNAR_RADIUS,
          Math_default.LUNAR_RADIUS
        )
      );
      Ellipsoid.prototype.clone = function(result) {
        return Ellipsoid.clone(this, result);
      };
      Ellipsoid.packedLength = Cartesian3_default.packedLength;
      Ellipsoid.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        Cartesian3_default.pack(value._radii, array, startingIndex);
        return array;
      };
      Ellipsoid.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const radii = Cartesian3_default.unpack(array, startingIndex);
        return Ellipsoid.fromCartesian3(radii, result);
      };
      Ellipsoid.prototype.geocentricSurfaceNormal = Cartesian3_default.normalize;
      Ellipsoid.prototype.geodeticSurfaceNormalCartographic = function(cartographic2, result) {
        Check_default.typeOf.object("cartographic", cartographic2);
        const longitude = cartographic2.longitude;
        const latitude = cartographic2.latitude;
        const cosLatitude = Math.cos(latitude);
        const x = cosLatitude * Math.cos(longitude);
        const y = cosLatitude * Math.sin(longitude);
        const z = Math.sin(latitude);
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        result.x = x;
        result.y = y;
        result.z = z;
        return Cartesian3_default.normalize(result, result);
      };
      Ellipsoid.prototype.geodeticSurfaceNormal = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        if (isNaN(cartesian11.x) || isNaN(cartesian11.y) || isNaN(cartesian11.z)) {
          throw new DeveloperError_default("cartesian has a NaN component");
        }
        if (Cartesian3_default.equalsEpsilon(cartesian11, Cartesian3_default.ZERO, Math_default.EPSILON14)) {
          return void 0;
        }
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        result = Cartesian3_default.multiplyComponents(
          cartesian11,
          this._oneOverRadiiSquared,
          result
        );
        return Cartesian3_default.normalize(result, result);
      };
      cartographicToCartesianNormal = new Cartesian3_default();
      cartographicToCartesianK = new Cartesian3_default();
      Ellipsoid.prototype.cartographicToCartesian = function(cartographic2, result) {
        const n = cartographicToCartesianNormal;
        const k = cartographicToCartesianK;
        this.geodeticSurfaceNormalCartographic(cartographic2, n);
        Cartesian3_default.multiplyComponents(this._radiiSquared, n, k);
        const gamma = Math.sqrt(Cartesian3_default.dot(n, k));
        Cartesian3_default.divideByScalar(k, gamma, k);
        Cartesian3_default.multiplyByScalar(n, cartographic2.height, n);
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        return Cartesian3_default.add(k, n, result);
      };
      Ellipsoid.prototype.cartographicArrayToCartesianArray = function(cartographics, result) {
        Check_default.defined("cartographics", cartographics);
        const length = cartographics.length;
        if (!defined_default(result)) {
          result = new Array(length);
        } else {
          result.length = length;
        }
        for (let i = 0; i < length; i++) {
          result[i] = this.cartographicToCartesian(cartographics[i], result[i]);
        }
        return result;
      };
      cartesianToCartographicN2 = new Cartesian3_default();
      cartesianToCartographicP2 = new Cartesian3_default();
      cartesianToCartographicH2 = new Cartesian3_default();
      Ellipsoid.prototype.cartesianToCartographic = function(cartesian11, result) {
        const p = this.scaleToGeodeticSurface(cartesian11, cartesianToCartographicP2);
        if (!defined_default(p)) {
          return void 0;
        }
        const n = this.geodeticSurfaceNormal(p, cartesianToCartographicN2);
        const h = Cartesian3_default.subtract(cartesian11, p, cartesianToCartographicH2);
        const longitude = Math.atan2(n.y, n.x);
        const latitude = Math.asin(n.z);
        const height = Math_default.sign(Cartesian3_default.dot(h, cartesian11)) * Cartesian3_default.magnitude(h);
        if (!defined_default(result)) {
          return new Cartographic_default(longitude, latitude, height);
        }
        result.longitude = longitude;
        result.latitude = latitude;
        result.height = height;
        return result;
      };
      Ellipsoid.prototype.cartesianArrayToCartographicArray = function(cartesians, result) {
        Check_default.defined("cartesians", cartesians);
        const length = cartesians.length;
        if (!defined_default(result)) {
          result = new Array(length);
        } else {
          result.length = length;
        }
        for (let i = 0; i < length; ++i) {
          result[i] = this.cartesianToCartographic(cartesians[i], result[i]);
        }
        return result;
      };
      Ellipsoid.prototype.scaleToGeodeticSurface = function(cartesian11, result) {
        return scaleToGeodeticSurface_default(
          cartesian11,
          this._oneOverRadii,
          this._oneOverRadiiSquared,
          this._centerToleranceSquared,
          result
        );
      };
      Ellipsoid.prototype.scaleToGeocentricSurface = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        const positionX = cartesian11.x;
        const positionY = cartesian11.y;
        const positionZ = cartesian11.z;
        const oneOverRadiiSquared = this._oneOverRadiiSquared;
        const beta = 1 / Math.sqrt(
          positionX * positionX * oneOverRadiiSquared.x + positionY * positionY * oneOverRadiiSquared.y + positionZ * positionZ * oneOverRadiiSquared.z
        );
        return Cartesian3_default.multiplyByScalar(cartesian11, beta, result);
      };
      Ellipsoid.prototype.transformPositionToScaledSpace = function(position, result) {
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        return Cartesian3_default.multiplyComponents(position, this._oneOverRadii, result);
      };
      Ellipsoid.prototype.transformPositionFromScaledSpace = function(position, result) {
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        return Cartesian3_default.multiplyComponents(position, this._radii, result);
      };
      Ellipsoid.prototype.equals = function(right) {
        return this === right || defined_default(right) && Cartesian3_default.equals(this._radii, right._radii);
      };
      Ellipsoid.prototype.toString = function() {
        return this._radii.toString();
      };
      Ellipsoid.prototype.getSurfaceNormalIntersectionWithZAxis = function(position, buffer, result) {
        Check_default.typeOf.object("position", position);
        if (!Math_default.equalsEpsilon(
          this._radii.x,
          this._radii.y,
          Math_default.EPSILON15
        )) {
          throw new DeveloperError_default(
            "Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)"
          );
        }
        Check_default.typeOf.number.greaterThan("Ellipsoid.radii.z", this._radii.z, 0);
        buffer = defaultValue_default(buffer, 0);
        const squaredXOverSquaredZ = this._squaredXOverSquaredZ;
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        result.x = 0;
        result.y = 0;
        result.z = position.z * (1 - squaredXOverSquaredZ);
        if (Math.abs(result.z) >= this._radii.z - buffer) {
          return void 0;
        }
        return result;
      };
      scratchEndpoint = new Cartesian3_default();
      Ellipsoid.prototype.getLocalCurvature = function(surfacePosition, result) {
        Check_default.typeOf.object("surfacePosition", surfacePosition);
        if (!defined_default(result)) {
          result = new Cartesian2_default();
        }
        const primeVerticalEndpoint = this.getSurfaceNormalIntersectionWithZAxis(
          surfacePosition,
          0,
          scratchEndpoint
        );
        const primeVerticalRadius = Cartesian3_default.distance(
          surfacePosition,
          primeVerticalEndpoint
        );
        const radiusRatio = this.minimumRadius * primeVerticalRadius / this.maximumRadius ** 2;
        const meridionalRadius = primeVerticalRadius * radiusRatio ** 2;
        return Cartesian2_default.fromElements(
          1 / primeVerticalRadius,
          1 / meridionalRadius,
          result
        );
      };
      abscissas = [
        0.14887433898163,
        0.43339539412925,
        0.67940956829902,
        0.86506336668898,
        0.97390652851717,
        0
      ];
      weights = [
        0.29552422471475,
        0.26926671930999,
        0.21908636251598,
        0.14945134915058,
        0.066671344308684,
        0
      ];
      Ellipsoid.prototype.surfaceArea = function(rectangle) {
        Check_default.typeOf.object("rectangle", rectangle);
        const minLongitude = rectangle.west;
        let maxLongitude = rectangle.east;
        const minLatitude = rectangle.south;
        const maxLatitude = rectangle.north;
        while (maxLongitude < minLongitude) {
          maxLongitude += Math_default.TWO_PI;
        }
        const radiiSquared = this._radiiSquared;
        const a22 = radiiSquared.x;
        const b2 = radiiSquared.y;
        const c2 = radiiSquared.z;
        const a2b2 = a22 * b2;
        return gaussLegendreQuadrature(minLatitude, maxLatitude, function(lat) {
          const sinPhi = Math.cos(lat);
          const cosPhi = Math.sin(lat);
          return Math.cos(lat) * gaussLegendreQuadrature(minLongitude, maxLongitude, function(lon) {
            const cosTheta = Math.cos(lon);
            const sinTheta = Math.sin(lon);
            return Math.sqrt(
              a2b2 * cosPhi * cosPhi + c2 * (b2 * cosTheta * cosTheta + a22 * sinTheta * sinTheta) * sinPhi * sinPhi
            );
          });
        });
      };
      Ellipsoid_default = Ellipsoid;
    }
  });

  // packages/engine/Source/Core/GeographicProjection.js
  function GeographicProjection(ellipsoid) {
    this._ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
    this._semimajorAxis = this._ellipsoid.maximumRadius;
    this._oneOverSemimajorAxis = 1 / this._semimajorAxis;
  }
  var GeographicProjection_default;
  var init_GeographicProjection = __esm({
    "packages/engine/Source/Core/GeographicProjection.js"() {
      init_Cartesian3();
      init_Cartographic();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      Object.defineProperties(GeographicProjection.prototype, {
        /**
         * Gets the {@link Ellipsoid}.
         *
         * @memberof GeographicProjection.prototype
         *
         * @type {Ellipsoid}
         * @readonly
         */
        ellipsoid: {
          get: function() {
            return this._ellipsoid;
          }
        }
      });
      GeographicProjection.prototype.project = function(cartographic2, result) {
        const semimajorAxis = this._semimajorAxis;
        const x = cartographic2.longitude * semimajorAxis;
        const y = cartographic2.latitude * semimajorAxis;
        const z = cartographic2.height;
        if (!defined_default(result)) {
          return new Cartesian3_default(x, y, z);
        }
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      GeographicProjection.prototype.unproject = function(cartesian11, result) {
        if (!defined_default(cartesian11)) {
          throw new DeveloperError_default("cartesian is required");
        }
        const oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;
        const longitude = cartesian11.x * oneOverEarthSemimajorAxis;
        const latitude = cartesian11.y * oneOverEarthSemimajorAxis;
        const height = cartesian11.z;
        if (!defined_default(result)) {
          return new Cartographic_default(longitude, latitude, height);
        }
        result.longitude = longitude;
        result.latitude = latitude;
        result.height = height;
        return result;
      };
      GeographicProjection_default = GeographicProjection;
    }
  });

  // packages/engine/Source/Core/Intersect.js
  var Intersect, Intersect_default;
  var init_Intersect = __esm({
    "packages/engine/Source/Core/Intersect.js"() {
      Intersect = {
        /**
         * Represents that an object is not contained within the frustum.
         *
         * @type {number}
         * @constant
         */
        OUTSIDE: -1,
        /**
         * Represents that an object intersects one of the frustum's planes.
         *
         * @type {number}
         * @constant
         */
        INTERSECTING: 0,
        /**
         * Represents that an object is fully within the frustum.
         *
         * @type {number}
         * @constant
         */
        INSIDE: 1
      };
      Intersect_default = Object.freeze(Intersect);
    }
  });

  // packages/engine/Source/Core/Interval.js
  function Interval(start, stop) {
    this.start = defaultValue_default(start, 0);
    this.stop = defaultValue_default(stop, 0);
  }
  var Interval_default;
  var init_Interval = __esm({
    "packages/engine/Source/Core/Interval.js"() {
      init_defaultValue();
      Interval_default = Interval;
    }
  });

  // packages/engine/Source/Core/Matrix3.js
  function Matrix3(column0Row0, column1Row0, column2Row0, column0Row1, column1Row1, column2Row1, column0Row2, column1Row2, column2Row2) {
    this[0] = defaultValue_default(column0Row0, 0);
    this[1] = defaultValue_default(column0Row1, 0);
    this[2] = defaultValue_default(column0Row2, 0);
    this[3] = defaultValue_default(column1Row0, 0);
    this[4] = defaultValue_default(column1Row1, 0);
    this[5] = defaultValue_default(column1Row2, 0);
    this[6] = defaultValue_default(column2Row0, 0);
    this[7] = defaultValue_default(column2Row1, 0);
    this[8] = defaultValue_default(column2Row2, 0);
  }
  function computeFrobeniusNorm(matrix) {
    let norm = 0;
    for (let i = 0; i < 9; ++i) {
      const temp = matrix[i];
      norm += temp * temp;
    }
    return Math.sqrt(norm);
  }
  function offDiagonalFrobeniusNorm(matrix) {
    let norm = 0;
    for (let i = 0; i < 3; ++i) {
      const temp = matrix[Matrix3.getElementIndex(colVal[i], rowVal[i])];
      norm += 2 * temp * temp;
    }
    return Math.sqrt(norm);
  }
  function shurDecomposition(matrix, result) {
    const tolerance = Math_default.EPSILON15;
    let maxDiagonal = 0;
    let rotAxis2 = 1;
    for (let i = 0; i < 3; ++i) {
      const temp = Math.abs(
        matrix[Matrix3.getElementIndex(colVal[i], rowVal[i])]
      );
      if (temp > maxDiagonal) {
        rotAxis2 = i;
        maxDiagonal = temp;
      }
    }
    let c = 1;
    let s = 0;
    const p = rowVal[rotAxis2];
    const q = colVal[rotAxis2];
    if (Math.abs(matrix[Matrix3.getElementIndex(q, p)]) > tolerance) {
      const qq = matrix[Matrix3.getElementIndex(q, q)];
      const pp = matrix[Matrix3.getElementIndex(p, p)];
      const qp = matrix[Matrix3.getElementIndex(q, p)];
      const tau = (qq - pp) / 2 / qp;
      let t;
      if (tau < 0) {
        t = -1 / (-tau + Math.sqrt(1 + tau * tau));
      } else {
        t = 1 / (tau + Math.sqrt(1 + tau * tau));
      }
      c = 1 / Math.sqrt(1 + t * t);
      s = t * c;
    }
    result = Matrix3.clone(Matrix3.IDENTITY, result);
    result[Matrix3.getElementIndex(p, p)] = result[Matrix3.getElementIndex(q, q)] = c;
    result[Matrix3.getElementIndex(q, p)] = s;
    result[Matrix3.getElementIndex(p, q)] = -s;
    return result;
  }
  var scaleScratch1, scaleScratch2, scratchColumn, scaleScratch3, scaleScratch4, scaleScratch5, rowVal, colVal, jMatrix, jMatrixTranspose, scratchTransposeMatrix, Matrix3_default;
  var init_Matrix3 = __esm({
    "packages/engine/Source/Core/Matrix3.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      Matrix3.packedLength = 9;
      Matrix3.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value[0];
        array[startingIndex++] = value[1];
        array[startingIndex++] = value[2];
        array[startingIndex++] = value[3];
        array[startingIndex++] = value[4];
        array[startingIndex++] = value[5];
        array[startingIndex++] = value[6];
        array[startingIndex++] = value[7];
        array[startingIndex++] = value[8];
        return array;
      };
      Matrix3.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Matrix3();
        }
        result[0] = array[startingIndex++];
        result[1] = array[startingIndex++];
        result[2] = array[startingIndex++];
        result[3] = array[startingIndex++];
        result[4] = array[startingIndex++];
        result[5] = array[startingIndex++];
        result[6] = array[startingIndex++];
        result[7] = array[startingIndex++];
        result[8] = array[startingIndex++];
        return result;
      };
      Matrix3.packArray = function(array, result) {
        Check_default.defined("array", array);
        const length = array.length;
        const resultLength = length * 9;
        if (!defined_default(result)) {
          result = new Array(resultLength);
        } else if (!Array.isArray(result) && result.length !== resultLength) {
          throw new DeveloperError_default(
            "If result is a typed array, it must have exactly array.length * 9 elements"
          );
        } else if (result.length !== resultLength) {
          result.length = resultLength;
        }
        for (let i = 0; i < length; ++i) {
          Matrix3.pack(array[i], result, i * 9);
        }
        return result;
      };
      Matrix3.unpackArray = function(array, result) {
        Check_default.defined("array", array);
        Check_default.typeOf.number.greaterThanOrEquals("array.length", array.length, 9);
        if (array.length % 9 !== 0) {
          throw new DeveloperError_default("array length must be a multiple of 9.");
        }
        const length = array.length;
        if (!defined_default(result)) {
          result = new Array(length / 9);
        } else {
          result.length = length / 9;
        }
        for (let i = 0; i < length; i += 9) {
          const index = i / 9;
          result[index] = Matrix3.unpack(array, i, result[index]);
        }
        return result;
      };
      Matrix3.clone = function(matrix, result) {
        if (!defined_default(matrix)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Matrix3(
            matrix[0],
            matrix[3],
            matrix[6],
            matrix[1],
            matrix[4],
            matrix[7],
            matrix[2],
            matrix[5],
            matrix[8]
          );
        }
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[3];
        result[4] = matrix[4];
        result[5] = matrix[5];
        result[6] = matrix[6];
        result[7] = matrix[7];
        result[8] = matrix[8];
        return result;
      };
      Matrix3.fromArray = Matrix3.unpack;
      Matrix3.fromColumnMajorArray = function(values, result) {
        Check_default.defined("values", values);
        return Matrix3.clone(values, result);
      };
      Matrix3.fromRowMajorArray = function(values, result) {
        Check_default.defined("values", values);
        if (!defined_default(result)) {
          return new Matrix3(
            values[0],
            values[1],
            values[2],
            values[3],
            values[4],
            values[5],
            values[6],
            values[7],
            values[8]
          );
        }
        result[0] = values[0];
        result[1] = values[3];
        result[2] = values[6];
        result[3] = values[1];
        result[4] = values[4];
        result[5] = values[7];
        result[6] = values[2];
        result[7] = values[5];
        result[8] = values[8];
        return result;
      };
      Matrix3.fromQuaternion = function(quaternion, result) {
        Check_default.typeOf.object("quaternion", quaternion);
        const x2 = quaternion.x * quaternion.x;
        const xy = quaternion.x * quaternion.y;
        const xz = quaternion.x * quaternion.z;
        const xw = quaternion.x * quaternion.w;
        const y2 = quaternion.y * quaternion.y;
        const yz = quaternion.y * quaternion.z;
        const yw = quaternion.y * quaternion.w;
        const z2 = quaternion.z * quaternion.z;
        const zw = quaternion.z * quaternion.w;
        const w2 = quaternion.w * quaternion.w;
        const m00 = x2 - y2 - z2 + w2;
        const m01 = 2 * (xy - zw);
        const m02 = 2 * (xz + yw);
        const m10 = 2 * (xy + zw);
        const m11 = -x2 + y2 - z2 + w2;
        const m12 = 2 * (yz - xw);
        const m20 = 2 * (xz - yw);
        const m21 = 2 * (yz + xw);
        const m22 = -x2 - y2 + z2 + w2;
        if (!defined_default(result)) {
          return new Matrix3(m00, m01, m02, m10, m11, m12, m20, m21, m22);
        }
        result[0] = m00;
        result[1] = m10;
        result[2] = m20;
        result[3] = m01;
        result[4] = m11;
        result[5] = m21;
        result[6] = m02;
        result[7] = m12;
        result[8] = m22;
        return result;
      };
      Matrix3.fromHeadingPitchRoll = function(headingPitchRoll, result) {
        Check_default.typeOf.object("headingPitchRoll", headingPitchRoll);
        const cosTheta = Math.cos(-headingPitchRoll.pitch);
        const cosPsi = Math.cos(-headingPitchRoll.heading);
        const cosPhi = Math.cos(headingPitchRoll.roll);
        const sinTheta = Math.sin(-headingPitchRoll.pitch);
        const sinPsi = Math.sin(-headingPitchRoll.heading);
        const sinPhi = Math.sin(headingPitchRoll.roll);
        const m00 = cosTheta * cosPsi;
        const m01 = -cosPhi * sinPsi + sinPhi * sinTheta * cosPsi;
        const m02 = sinPhi * sinPsi + cosPhi * sinTheta * cosPsi;
        const m10 = cosTheta * sinPsi;
        const m11 = cosPhi * cosPsi + sinPhi * sinTheta * sinPsi;
        const m12 = -sinPhi * cosPsi + cosPhi * sinTheta * sinPsi;
        const m20 = -sinTheta;
        const m21 = sinPhi * cosTheta;
        const m22 = cosPhi * cosTheta;
        if (!defined_default(result)) {
          return new Matrix3(m00, m01, m02, m10, m11, m12, m20, m21, m22);
        }
        result[0] = m00;
        result[1] = m10;
        result[2] = m20;
        result[3] = m01;
        result[4] = m11;
        result[5] = m21;
        result[6] = m02;
        result[7] = m12;
        result[8] = m22;
        return result;
      };
      Matrix3.fromScale = function(scale, result) {
        Check_default.typeOf.object("scale", scale);
        if (!defined_default(result)) {
          return new Matrix3(scale.x, 0, 0, 0, scale.y, 0, 0, 0, scale.z);
        }
        result[0] = scale.x;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = scale.y;
        result[5] = 0;
        result[6] = 0;
        result[7] = 0;
        result[8] = scale.z;
        return result;
      };
      Matrix3.fromUniformScale = function(scale, result) {
        Check_default.typeOf.number("scale", scale);
        if (!defined_default(result)) {
          return new Matrix3(scale, 0, 0, 0, scale, 0, 0, 0, scale);
        }
        result[0] = scale;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = scale;
        result[5] = 0;
        result[6] = 0;
        result[7] = 0;
        result[8] = scale;
        return result;
      };
      Matrix3.fromCrossProduct = function(vector, result) {
        Check_default.typeOf.object("vector", vector);
        if (!defined_default(result)) {
          return new Matrix3(
            0,
            -vector.z,
            vector.y,
            vector.z,
            0,
            -vector.x,
            -vector.y,
            vector.x,
            0
          );
        }
        result[0] = 0;
        result[1] = vector.z;
        result[2] = -vector.y;
        result[3] = -vector.z;
        result[4] = 0;
        result[5] = vector.x;
        result[6] = vector.y;
        result[7] = -vector.x;
        result[8] = 0;
        return result;
      };
      Matrix3.fromRotationX = function(angle, result) {
        Check_default.typeOf.number("angle", angle);
        const cosAngle = Math.cos(angle);
        const sinAngle = Math.sin(angle);
        if (!defined_default(result)) {
          return new Matrix3(
            1,
            0,
            0,
            0,
            cosAngle,
            -sinAngle,
            0,
            sinAngle,
            cosAngle
          );
        }
        result[0] = 1;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = cosAngle;
        result[5] = sinAngle;
        result[6] = 0;
        result[7] = -sinAngle;
        result[8] = cosAngle;
        return result;
      };
      Matrix3.fromRotationY = function(angle, result) {
        Check_default.typeOf.number("angle", angle);
        const cosAngle = Math.cos(angle);
        const sinAngle = Math.sin(angle);
        if (!defined_default(result)) {
          return new Matrix3(
            cosAngle,
            0,
            sinAngle,
            0,
            1,
            0,
            -sinAngle,
            0,
            cosAngle
          );
        }
        result[0] = cosAngle;
        result[1] = 0;
        result[2] = -sinAngle;
        result[3] = 0;
        result[4] = 1;
        result[5] = 0;
        result[6] = sinAngle;
        result[7] = 0;
        result[8] = cosAngle;
        return result;
      };
      Matrix3.fromRotationZ = function(angle, result) {
        Check_default.typeOf.number("angle", angle);
        const cosAngle = Math.cos(angle);
        const sinAngle = Math.sin(angle);
        if (!defined_default(result)) {
          return new Matrix3(
            cosAngle,
            -sinAngle,
            0,
            sinAngle,
            cosAngle,
            0,
            0,
            0,
            1
          );
        }
        result[0] = cosAngle;
        result[1] = sinAngle;
        result[2] = 0;
        result[3] = -sinAngle;
        result[4] = cosAngle;
        result[5] = 0;
        result[6] = 0;
        result[7] = 0;
        result[8] = 1;
        return result;
      };
      Matrix3.toArray = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        if (!defined_default(result)) {
          return [
            matrix[0],
            matrix[1],
            matrix[2],
            matrix[3],
            matrix[4],
            matrix[5],
            matrix[6],
            matrix[7],
            matrix[8]
          ];
        }
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[3];
        result[4] = matrix[4];
        result[5] = matrix[5];
        result[6] = matrix[6];
        result[7] = matrix[7];
        result[8] = matrix[8];
        return result;
      };
      Matrix3.getElementIndex = function(column, row) {
        Check_default.typeOf.number.greaterThanOrEquals("row", row, 0);
        Check_default.typeOf.number.lessThanOrEquals("row", row, 2);
        Check_default.typeOf.number.greaterThanOrEquals("column", column, 0);
        Check_default.typeOf.number.lessThanOrEquals("column", column, 2);
        return column * 3 + row;
      };
      Matrix3.getColumn = function(matrix, index, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 2);
        Check_default.typeOf.object("result", result);
        const startIndex = index * 3;
        const x = matrix[startIndex];
        const y = matrix[startIndex + 1];
        const z = matrix[startIndex + 2];
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      Matrix3.setColumn = function(matrix, index, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 2);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result = Matrix3.clone(matrix, result);
        const startIndex = index * 3;
        result[startIndex] = cartesian11.x;
        result[startIndex + 1] = cartesian11.y;
        result[startIndex + 2] = cartesian11.z;
        return result;
      };
      Matrix3.getRow = function(matrix, index, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 2);
        Check_default.typeOf.object("result", result);
        const x = matrix[index];
        const y = matrix[index + 3];
        const z = matrix[index + 6];
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      Matrix3.setRow = function(matrix, index, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 2);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result = Matrix3.clone(matrix, result);
        result[index] = cartesian11.x;
        result[index + 3] = cartesian11.y;
        result[index + 6] = cartesian11.z;
        return result;
      };
      scaleScratch1 = new Cartesian3_default();
      Matrix3.setScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("scale", scale);
        Check_default.typeOf.object("result", result);
        const existingScale = Matrix3.getScale(matrix, scaleScratch1);
        const scaleRatioX = scale.x / existingScale.x;
        const scaleRatioY = scale.y / existingScale.y;
        const scaleRatioZ = scale.z / existingScale.z;
        result[0] = matrix[0] * scaleRatioX;
        result[1] = matrix[1] * scaleRatioX;
        result[2] = matrix[2] * scaleRatioX;
        result[3] = matrix[3] * scaleRatioY;
        result[4] = matrix[4] * scaleRatioY;
        result[5] = matrix[5] * scaleRatioY;
        result[6] = matrix[6] * scaleRatioZ;
        result[7] = matrix[7] * scaleRatioZ;
        result[8] = matrix[8] * scaleRatioZ;
        return result;
      };
      scaleScratch2 = new Cartesian3_default();
      Matrix3.setUniformScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scale", scale);
        Check_default.typeOf.object("result", result);
        const existingScale = Matrix3.getScale(matrix, scaleScratch2);
        const scaleRatioX = scale / existingScale.x;
        const scaleRatioY = scale / existingScale.y;
        const scaleRatioZ = scale / existingScale.z;
        result[0] = matrix[0] * scaleRatioX;
        result[1] = matrix[1] * scaleRatioX;
        result[2] = matrix[2] * scaleRatioX;
        result[3] = matrix[3] * scaleRatioY;
        result[4] = matrix[4] * scaleRatioY;
        result[5] = matrix[5] * scaleRatioY;
        result[6] = matrix[6] * scaleRatioZ;
        result[7] = matrix[7] * scaleRatioZ;
        result[8] = matrix[8] * scaleRatioZ;
        return result;
      };
      scratchColumn = new Cartesian3_default();
      Matrix3.getScale = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result.x = Cartesian3_default.magnitude(
          Cartesian3_default.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn)
        );
        result.y = Cartesian3_default.magnitude(
          Cartesian3_default.fromElements(matrix[3], matrix[4], matrix[5], scratchColumn)
        );
        result.z = Cartesian3_default.magnitude(
          Cartesian3_default.fromElements(matrix[6], matrix[7], matrix[8], scratchColumn)
        );
        return result;
      };
      scaleScratch3 = new Cartesian3_default();
      Matrix3.getMaximumScale = function(matrix) {
        Matrix3.getScale(matrix, scaleScratch3);
        return Cartesian3_default.maximumComponent(scaleScratch3);
      };
      scaleScratch4 = new Cartesian3_default();
      Matrix3.setRotation = function(matrix, rotation, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const scale = Matrix3.getScale(matrix, scaleScratch4);
        result[0] = rotation[0] * scale.x;
        result[1] = rotation[1] * scale.x;
        result[2] = rotation[2] * scale.x;
        result[3] = rotation[3] * scale.y;
        result[4] = rotation[4] * scale.y;
        result[5] = rotation[5] * scale.y;
        result[6] = rotation[6] * scale.z;
        result[7] = rotation[7] * scale.z;
        result[8] = rotation[8] * scale.z;
        return result;
      };
      scaleScratch5 = new Cartesian3_default();
      Matrix3.getRotation = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const scale = Matrix3.getScale(matrix, scaleScratch5);
        result[0] = matrix[0] / scale.x;
        result[1] = matrix[1] / scale.x;
        result[2] = matrix[2] / scale.x;
        result[3] = matrix[3] / scale.y;
        result[4] = matrix[4] / scale.y;
        result[5] = matrix[5] / scale.y;
        result[6] = matrix[6] / scale.z;
        result[7] = matrix[7] / scale.z;
        result[8] = matrix[8] / scale.z;
        return result;
      };
      Matrix3.multiply = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        const column0Row0 = left[0] * right[0] + left[3] * right[1] + left[6] * right[2];
        const column0Row1 = left[1] * right[0] + left[4] * right[1] + left[7] * right[2];
        const column0Row2 = left[2] * right[0] + left[5] * right[1] + left[8] * right[2];
        const column1Row0 = left[0] * right[3] + left[3] * right[4] + left[6] * right[5];
        const column1Row1 = left[1] * right[3] + left[4] * right[4] + left[7] * right[5];
        const column1Row2 = left[2] * right[3] + left[5] * right[4] + left[8] * right[5];
        const column2Row0 = left[0] * right[6] + left[3] * right[7] + left[6] * right[8];
        const column2Row1 = left[1] * right[6] + left[4] * right[7] + left[7] * right[8];
        const column2Row2 = left[2] * right[6] + left[5] * right[7] + left[8] * right[8];
        result[0] = column0Row0;
        result[1] = column0Row1;
        result[2] = column0Row2;
        result[3] = column1Row0;
        result[4] = column1Row1;
        result[5] = column1Row2;
        result[6] = column2Row0;
        result[7] = column2Row1;
        result[8] = column2Row2;
        return result;
      };
      Matrix3.add = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result[0] = left[0] + right[0];
        result[1] = left[1] + right[1];
        result[2] = left[2] + right[2];
        result[3] = left[3] + right[3];
        result[4] = left[4] + right[4];
        result[5] = left[5] + right[5];
        result[6] = left[6] + right[6];
        result[7] = left[7] + right[7];
        result[8] = left[8] + right[8];
        return result;
      };
      Matrix3.subtract = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result[0] = left[0] - right[0];
        result[1] = left[1] - right[1];
        result[2] = left[2] - right[2];
        result[3] = left[3] - right[3];
        result[4] = left[4] - right[4];
        result[5] = left[5] - right[5];
        result[6] = left[6] - right[6];
        result[7] = left[7] - right[7];
        result[8] = left[8] - right[8];
        return result;
      };
      Matrix3.multiplyByVector = function(matrix, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const vX = cartesian11.x;
        const vY = cartesian11.y;
        const vZ = cartesian11.z;
        const x = matrix[0] * vX + matrix[3] * vY + matrix[6] * vZ;
        const y = matrix[1] * vX + matrix[4] * vY + matrix[7] * vZ;
        const z = matrix[2] * vX + matrix[5] * vY + matrix[8] * vZ;
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      Matrix3.multiplyByScalar = function(matrix, scalar, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0] * scalar;
        result[1] = matrix[1] * scalar;
        result[2] = matrix[2] * scalar;
        result[3] = matrix[3] * scalar;
        result[4] = matrix[4] * scalar;
        result[5] = matrix[5] * scalar;
        result[6] = matrix[6] * scalar;
        result[7] = matrix[7] * scalar;
        result[8] = matrix[8] * scalar;
        return result;
      };
      Matrix3.multiplyByScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("scale", scale);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0] * scale.x;
        result[1] = matrix[1] * scale.x;
        result[2] = matrix[2] * scale.x;
        result[3] = matrix[3] * scale.y;
        result[4] = matrix[4] * scale.y;
        result[5] = matrix[5] * scale.y;
        result[6] = matrix[6] * scale.z;
        result[7] = matrix[7] * scale.z;
        result[8] = matrix[8] * scale.z;
        return result;
      };
      Matrix3.multiplyByUniformScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scale", scale);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0] * scale;
        result[1] = matrix[1] * scale;
        result[2] = matrix[2] * scale;
        result[3] = matrix[3] * scale;
        result[4] = matrix[4] * scale;
        result[5] = matrix[5] * scale;
        result[6] = matrix[6] * scale;
        result[7] = matrix[7] * scale;
        result[8] = matrix[8] * scale;
        return result;
      };
      Matrix3.negate = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result[0] = -matrix[0];
        result[1] = -matrix[1];
        result[2] = -matrix[2];
        result[3] = -matrix[3];
        result[4] = -matrix[4];
        result[5] = -matrix[5];
        result[6] = -matrix[6];
        result[7] = -matrix[7];
        result[8] = -matrix[8];
        return result;
      };
      Matrix3.transpose = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const column0Row0 = matrix[0];
        const column0Row1 = matrix[3];
        const column0Row2 = matrix[6];
        const column1Row0 = matrix[1];
        const column1Row1 = matrix[4];
        const column1Row2 = matrix[7];
        const column2Row0 = matrix[2];
        const column2Row1 = matrix[5];
        const column2Row2 = matrix[8];
        result[0] = column0Row0;
        result[1] = column0Row1;
        result[2] = column0Row2;
        result[3] = column1Row0;
        result[4] = column1Row1;
        result[5] = column1Row2;
        result[6] = column2Row0;
        result[7] = column2Row1;
        result[8] = column2Row2;
        return result;
      };
      rowVal = [1, 0, 0];
      colVal = [2, 2, 1];
      jMatrix = new Matrix3();
      jMatrixTranspose = new Matrix3();
      Matrix3.computeEigenDecomposition = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        const tolerance = Math_default.EPSILON20;
        const maxSweeps = 10;
        let count = 0;
        let sweep = 0;
        if (!defined_default(result)) {
          result = {};
        }
        const unitaryMatrix = result.unitary = Matrix3.clone(
          Matrix3.IDENTITY,
          result.unitary
        );
        const diagMatrix = result.diagonal = Matrix3.clone(matrix, result.diagonal);
        const epsilon = tolerance * computeFrobeniusNorm(diagMatrix);
        while (sweep < maxSweeps && offDiagonalFrobeniusNorm(diagMatrix) > epsilon) {
          shurDecomposition(diagMatrix, jMatrix);
          Matrix3.transpose(jMatrix, jMatrixTranspose);
          Matrix3.multiply(diagMatrix, jMatrix, diagMatrix);
          Matrix3.multiply(jMatrixTranspose, diagMatrix, diagMatrix);
          Matrix3.multiply(unitaryMatrix, jMatrix, unitaryMatrix);
          if (++count > 2) {
            ++sweep;
            count = 0;
          }
        }
        return result;
      };
      Matrix3.abs = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result[0] = Math.abs(matrix[0]);
        result[1] = Math.abs(matrix[1]);
        result[2] = Math.abs(matrix[2]);
        result[3] = Math.abs(matrix[3]);
        result[4] = Math.abs(matrix[4]);
        result[5] = Math.abs(matrix[5]);
        result[6] = Math.abs(matrix[6]);
        result[7] = Math.abs(matrix[7]);
        result[8] = Math.abs(matrix[8]);
        return result;
      };
      Matrix3.determinant = function(matrix) {
        Check_default.typeOf.object("matrix", matrix);
        const m11 = matrix[0];
        const m21 = matrix[3];
        const m31 = matrix[6];
        const m12 = matrix[1];
        const m22 = matrix[4];
        const m32 = matrix[7];
        const m13 = matrix[2];
        const m23 = matrix[5];
        const m33 = matrix[8];
        return m11 * (m22 * m33 - m23 * m32) + m12 * (m23 * m31 - m21 * m33) + m13 * (m21 * m32 - m22 * m31);
      };
      Matrix3.inverse = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const m11 = matrix[0];
        const m21 = matrix[1];
        const m31 = matrix[2];
        const m12 = matrix[3];
        const m22 = matrix[4];
        const m32 = matrix[5];
        const m13 = matrix[6];
        const m23 = matrix[7];
        const m33 = matrix[8];
        const determinant = Matrix3.determinant(matrix);
        if (Math.abs(determinant) <= Math_default.EPSILON15) {
          throw new DeveloperError_default("matrix is not invertible");
        }
        result[0] = m22 * m33 - m23 * m32;
        result[1] = m23 * m31 - m21 * m33;
        result[2] = m21 * m32 - m22 * m31;
        result[3] = m13 * m32 - m12 * m33;
        result[4] = m11 * m33 - m13 * m31;
        result[5] = m12 * m31 - m11 * m32;
        result[6] = m12 * m23 - m13 * m22;
        result[7] = m13 * m21 - m11 * m23;
        result[8] = m11 * m22 - m12 * m21;
        const scale = 1 / determinant;
        return Matrix3.multiplyByScalar(result, scale, result);
      };
      scratchTransposeMatrix = new Matrix3();
      Matrix3.inverseTranspose = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        return Matrix3.inverse(
          Matrix3.transpose(matrix, scratchTransposeMatrix),
          result
        );
      };
      Matrix3.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left[0] === right[0] && left[1] === right[1] && left[2] === right[2] && left[3] === right[3] && left[4] === right[4] && left[5] === right[5] && left[6] === right[6] && left[7] === right[7] && left[8] === right[8];
      };
      Matrix3.equalsEpsilon = function(left, right, epsilon) {
        epsilon = defaultValue_default(epsilon, 0);
        return left === right || defined_default(left) && defined_default(right) && Math.abs(left[0] - right[0]) <= epsilon && Math.abs(left[1] - right[1]) <= epsilon && Math.abs(left[2] - right[2]) <= epsilon && Math.abs(left[3] - right[3]) <= epsilon && Math.abs(left[4] - right[4]) <= epsilon && Math.abs(left[5] - right[5]) <= epsilon && Math.abs(left[6] - right[6]) <= epsilon && Math.abs(left[7] - right[7]) <= epsilon && Math.abs(left[8] - right[8]) <= epsilon;
      };
      Matrix3.IDENTITY = Object.freeze(
        new Matrix3(1, 0, 0, 0, 1, 0, 0, 0, 1)
      );
      Matrix3.ZERO = Object.freeze(
        new Matrix3(0, 0, 0, 0, 0, 0, 0, 0, 0)
      );
      Matrix3.COLUMN0ROW0 = 0;
      Matrix3.COLUMN0ROW1 = 1;
      Matrix3.COLUMN0ROW2 = 2;
      Matrix3.COLUMN1ROW0 = 3;
      Matrix3.COLUMN1ROW1 = 4;
      Matrix3.COLUMN1ROW2 = 5;
      Matrix3.COLUMN2ROW0 = 6;
      Matrix3.COLUMN2ROW1 = 7;
      Matrix3.COLUMN2ROW2 = 8;
      Object.defineProperties(Matrix3.prototype, {
        /**
         * Gets the number of items in the collection.
         * @memberof Matrix3.prototype
         *
         * @type {number}
         */
        length: {
          get: function() {
            return Matrix3.packedLength;
          }
        }
      });
      Matrix3.prototype.clone = function(result) {
        return Matrix3.clone(this, result);
      };
      Matrix3.prototype.equals = function(right) {
        return Matrix3.equals(this, right);
      };
      Matrix3.equalsArray = function(matrix, array, offset) {
        return matrix[0] === array[offset] && matrix[1] === array[offset + 1] && matrix[2] === array[offset + 2] && matrix[3] === array[offset + 3] && matrix[4] === array[offset + 4] && matrix[5] === array[offset + 5] && matrix[6] === array[offset + 6] && matrix[7] === array[offset + 7] && matrix[8] === array[offset + 8];
      };
      Matrix3.prototype.equalsEpsilon = function(right, epsilon) {
        return Matrix3.equalsEpsilon(this, right, epsilon);
      };
      Matrix3.prototype.toString = function() {
        return `(${this[0]}, ${this[3]}, ${this[6]})
(${this[1]}, ${this[4]}, ${this[7]})
(${this[2]}, ${this[5]}, ${this[8]})`;
      };
      Matrix3_default = Matrix3;
    }
  });

  // packages/engine/Source/Core/Cartesian4.js
  function Cartesian4(x, y, z, w) {
    this.x = defaultValue_default(x, 0);
    this.y = defaultValue_default(y, 0);
    this.z = defaultValue_default(z, 0);
    this.w = defaultValue_default(w, 0);
  }
  var distanceScratch3, lerpScratch3, mostOrthogonalAxisScratch3, scratchF32Array, scratchU8Array, testU32, testU8, littleEndian, Cartesian4_default;
  var init_Cartesian4 = __esm({
    "packages/engine/Source/Core/Cartesian4.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      Cartesian4.fromElements = function(x, y, z, w, result) {
        if (!defined_default(result)) {
          return new Cartesian4(x, y, z, w);
        }
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      Cartesian4.fromColor = function(color, result) {
        Check_default.typeOf.object("color", color);
        if (!defined_default(result)) {
          return new Cartesian4(color.red, color.green, color.blue, color.alpha);
        }
        result.x = color.red;
        result.y = color.green;
        result.z = color.blue;
        result.w = color.alpha;
        return result;
      };
      Cartesian4.clone = function(cartesian11, result) {
        if (!defined_default(cartesian11)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Cartesian4(cartesian11.x, cartesian11.y, cartesian11.z, cartesian11.w);
        }
        result.x = cartesian11.x;
        result.y = cartesian11.y;
        result.z = cartesian11.z;
        result.w = cartesian11.w;
        return result;
      };
      Cartesian4.packedLength = 4;
      Cartesian4.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.x;
        array[startingIndex++] = value.y;
        array[startingIndex++] = value.z;
        array[startingIndex] = value.w;
        return array;
      };
      Cartesian4.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Cartesian4();
        }
        result.x = array[startingIndex++];
        result.y = array[startingIndex++];
        result.z = array[startingIndex++];
        result.w = array[startingIndex];
        return result;
      };
      Cartesian4.packArray = function(array, result) {
        Check_default.defined("array", array);
        const length = array.length;
        const resultLength = length * 4;
        if (!defined_default(result)) {
          result = new Array(resultLength);
        } else if (!Array.isArray(result) && result.length !== resultLength) {
          throw new DeveloperError_default(
            "If result is a typed array, it must have exactly array.length * 4 elements"
          );
        } else if (result.length !== resultLength) {
          result.length = resultLength;
        }
        for (let i = 0; i < length; ++i) {
          Cartesian4.pack(array[i], result, i * 4);
        }
        return result;
      };
      Cartesian4.unpackArray = function(array, result) {
        Check_default.defined("array", array);
        Check_default.typeOf.number.greaterThanOrEquals("array.length", array.length, 4);
        if (array.length % 4 !== 0) {
          throw new DeveloperError_default("array length must be a multiple of 4.");
        }
        const length = array.length;
        if (!defined_default(result)) {
          result = new Array(length / 4);
        } else {
          result.length = length / 4;
        }
        for (let i = 0; i < length; i += 4) {
          const index = i / 4;
          result[index] = Cartesian4.unpack(array, i, result[index]);
        }
        return result;
      };
      Cartesian4.fromArray = Cartesian4.unpack;
      Cartesian4.maximumComponent = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return Math.max(cartesian11.x, cartesian11.y, cartesian11.z, cartesian11.w);
      };
      Cartesian4.minimumComponent = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return Math.min(cartesian11.x, cartesian11.y, cartesian11.z, cartesian11.w);
      };
      Cartesian4.minimumByComponent = function(first, second, result) {
        Check_default.typeOf.object("first", first);
        Check_default.typeOf.object("second", second);
        Check_default.typeOf.object("result", result);
        result.x = Math.min(first.x, second.x);
        result.y = Math.min(first.y, second.y);
        result.z = Math.min(first.z, second.z);
        result.w = Math.min(first.w, second.w);
        return result;
      };
      Cartesian4.maximumByComponent = function(first, second, result) {
        Check_default.typeOf.object("first", first);
        Check_default.typeOf.object("second", second);
        Check_default.typeOf.object("result", result);
        result.x = Math.max(first.x, second.x);
        result.y = Math.max(first.y, second.y);
        result.z = Math.max(first.z, second.z);
        result.w = Math.max(first.w, second.w);
        return result;
      };
      Cartesian4.clamp = function(value, min3, max3, result) {
        Check_default.typeOf.object("value", value);
        Check_default.typeOf.object("min", min3);
        Check_default.typeOf.object("max", max3);
        Check_default.typeOf.object("result", result);
        const x = Math_default.clamp(value.x, min3.x, max3.x);
        const y = Math_default.clamp(value.y, min3.y, max3.y);
        const z = Math_default.clamp(value.z, min3.z, max3.z);
        const w = Math_default.clamp(value.w, min3.w, max3.w);
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      Cartesian4.magnitudeSquared = function(cartesian11) {
        Check_default.typeOf.object("cartesian", cartesian11);
        return cartesian11.x * cartesian11.x + cartesian11.y * cartesian11.y + cartesian11.z * cartesian11.z + cartesian11.w * cartesian11.w;
      };
      Cartesian4.magnitude = function(cartesian11) {
        return Math.sqrt(Cartesian4.magnitudeSquared(cartesian11));
      };
      distanceScratch3 = new Cartesian4();
      Cartesian4.distance = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Cartesian4.subtract(left, right, distanceScratch3);
        return Cartesian4.magnitude(distanceScratch3);
      };
      Cartesian4.distanceSquared = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Cartesian4.subtract(left, right, distanceScratch3);
        return Cartesian4.magnitudeSquared(distanceScratch3);
      };
      Cartesian4.normalize = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const magnitude = Cartesian4.magnitude(cartesian11);
        result.x = cartesian11.x / magnitude;
        result.y = cartesian11.y / magnitude;
        result.z = cartesian11.z / magnitude;
        result.w = cartesian11.w / magnitude;
        if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z) || isNaN(result.w)) {
          throw new DeveloperError_default("normalized result is not a number");
        }
        return result;
      };
      Cartesian4.dot = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
      };
      Cartesian4.multiplyComponents = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x * right.x;
        result.y = left.y * right.y;
        result.z = left.z * right.z;
        result.w = left.w * right.w;
        return result;
      };
      Cartesian4.divideComponents = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x / right.x;
        result.y = left.y / right.y;
        result.z = left.z / right.z;
        result.w = left.w / right.w;
        return result;
      };
      Cartesian4.add = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x + right.x;
        result.y = left.y + right.y;
        result.z = left.z + right.z;
        result.w = left.w + right.w;
        return result;
      };
      Cartesian4.subtract = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x - right.x;
        result.y = left.y - right.y;
        result.z = left.z - right.z;
        result.w = left.w - right.w;
        return result;
      };
      Cartesian4.multiplyByScalar = function(cartesian11, scalar, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.x = cartesian11.x * scalar;
        result.y = cartesian11.y * scalar;
        result.z = cartesian11.z * scalar;
        result.w = cartesian11.w * scalar;
        return result;
      };
      Cartesian4.divideByScalar = function(cartesian11, scalar, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.x = cartesian11.x / scalar;
        result.y = cartesian11.y / scalar;
        result.z = cartesian11.z / scalar;
        result.w = cartesian11.w / scalar;
        return result;
      };
      Cartesian4.negate = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result.x = -cartesian11.x;
        result.y = -cartesian11.y;
        result.z = -cartesian11.z;
        result.w = -cartesian11.w;
        return result;
      };
      Cartesian4.abs = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result.x = Math.abs(cartesian11.x);
        result.y = Math.abs(cartesian11.y);
        result.z = Math.abs(cartesian11.z);
        result.w = Math.abs(cartesian11.w);
        return result;
      };
      lerpScratch3 = new Cartesian4();
      Cartesian4.lerp = function(start, end, t, result) {
        Check_default.typeOf.object("start", start);
        Check_default.typeOf.object("end", end);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        Cartesian4.multiplyByScalar(end, t, lerpScratch3);
        result = Cartesian4.multiplyByScalar(start, 1 - t, result);
        return Cartesian4.add(lerpScratch3, result, result);
      };
      mostOrthogonalAxisScratch3 = new Cartesian4();
      Cartesian4.mostOrthogonalAxis = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const f = Cartesian4.normalize(cartesian11, mostOrthogonalAxisScratch3);
        Cartesian4.abs(f, f);
        if (f.x <= f.y) {
          if (f.x <= f.z) {
            if (f.x <= f.w) {
              result = Cartesian4.clone(Cartesian4.UNIT_X, result);
            } else {
              result = Cartesian4.clone(Cartesian4.UNIT_W, result);
            }
          } else if (f.z <= f.w) {
            result = Cartesian4.clone(Cartesian4.UNIT_Z, result);
          } else {
            result = Cartesian4.clone(Cartesian4.UNIT_W, result);
          }
        } else if (f.y <= f.z) {
          if (f.y <= f.w) {
            result = Cartesian4.clone(Cartesian4.UNIT_Y, result);
          } else {
            result = Cartesian4.clone(Cartesian4.UNIT_W, result);
          }
        } else if (f.z <= f.w) {
          result = Cartesian4.clone(Cartesian4.UNIT_Z, result);
        } else {
          result = Cartesian4.clone(Cartesian4.UNIT_W, result);
        }
        return result;
      };
      Cartesian4.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.x === right.x && left.y === right.y && left.z === right.z && left.w === right.w;
      };
      Cartesian4.equalsArray = function(cartesian11, array, offset) {
        return cartesian11.x === array[offset] && cartesian11.y === array[offset + 1] && cartesian11.z === array[offset + 2] && cartesian11.w === array[offset + 3];
      };
      Cartesian4.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {
        return left === right || defined_default(left) && defined_default(right) && Math_default.equalsEpsilon(
          left.x,
          right.x,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          left.y,
          right.y,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          left.z,
          right.z,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          left.w,
          right.w,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      Cartesian4.ZERO = Object.freeze(new Cartesian4(0, 0, 0, 0));
      Cartesian4.ONE = Object.freeze(new Cartesian4(1, 1, 1, 1));
      Cartesian4.UNIT_X = Object.freeze(new Cartesian4(1, 0, 0, 0));
      Cartesian4.UNIT_Y = Object.freeze(new Cartesian4(0, 1, 0, 0));
      Cartesian4.UNIT_Z = Object.freeze(new Cartesian4(0, 0, 1, 0));
      Cartesian4.UNIT_W = Object.freeze(new Cartesian4(0, 0, 0, 1));
      Cartesian4.prototype.clone = function(result) {
        return Cartesian4.clone(this, result);
      };
      Cartesian4.prototype.equals = function(right) {
        return Cartesian4.equals(this, right);
      };
      Cartesian4.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {
        return Cartesian4.equalsEpsilon(
          this,
          right,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      Cartesian4.prototype.toString = function() {
        return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;
      };
      scratchF32Array = new Float32Array(1);
      scratchU8Array = new Uint8Array(scratchF32Array.buffer);
      testU32 = new Uint32Array([287454020]);
      testU8 = new Uint8Array(testU32.buffer);
      littleEndian = testU8[0] === 68;
      Cartesian4.packFloat = function(value, result) {
        Check_default.typeOf.number("value", value);
        if (!defined_default(result)) {
          result = new Cartesian4();
        }
        scratchF32Array[0] = value;
        if (littleEndian) {
          result.x = scratchU8Array[0];
          result.y = scratchU8Array[1];
          result.z = scratchU8Array[2];
          result.w = scratchU8Array[3];
        } else {
          result.x = scratchU8Array[3];
          result.y = scratchU8Array[2];
          result.z = scratchU8Array[1];
          result.w = scratchU8Array[0];
        }
        return result;
      };
      Cartesian4.unpackFloat = function(packedFloat) {
        Check_default.typeOf.object("packedFloat", packedFloat);
        if (littleEndian) {
          scratchU8Array[0] = packedFloat.x;
          scratchU8Array[1] = packedFloat.y;
          scratchU8Array[2] = packedFloat.z;
          scratchU8Array[3] = packedFloat.w;
        } else {
          scratchU8Array[0] = packedFloat.w;
          scratchU8Array[1] = packedFloat.z;
          scratchU8Array[2] = packedFloat.y;
          scratchU8Array[3] = packedFloat.x;
        }
        return scratchF32Array[0];
      };
      Cartesian4_default = Cartesian4;
    }
  });

  // packages/engine/Source/Core/RuntimeError.js
  function RuntimeError(message) {
    this.name = "RuntimeError";
    this.message = message;
    let stack;
    try {
      throw new Error();
    } catch (e) {
      stack = e.stack;
    }
    this.stack = stack;
  }
  var RuntimeError_default;
  var init_RuntimeError = __esm({
    "packages/engine/Source/Core/RuntimeError.js"() {
      init_defined();
      if (defined_default(Object.create)) {
        RuntimeError.prototype = Object.create(Error.prototype);
        RuntimeError.prototype.constructor = RuntimeError;
      }
      RuntimeError.prototype.toString = function() {
        let str = `${this.name}: ${this.message}`;
        if (defined_default(this.stack)) {
          str += `
${this.stack.toString()}`;
        }
        return str;
      };
      RuntimeError_default = RuntimeError;
    }
  });

  // packages/engine/Source/Core/Matrix4.js
  function Matrix4(column0Row0, column1Row0, column2Row0, column3Row0, column0Row1, column1Row1, column2Row1, column3Row1, column0Row2, column1Row2, column2Row2, column3Row2, column0Row3, column1Row3, column2Row3, column3Row3) {
    this[0] = defaultValue_default(column0Row0, 0);
    this[1] = defaultValue_default(column0Row1, 0);
    this[2] = defaultValue_default(column0Row2, 0);
    this[3] = defaultValue_default(column0Row3, 0);
    this[4] = defaultValue_default(column1Row0, 0);
    this[5] = defaultValue_default(column1Row1, 0);
    this[6] = defaultValue_default(column1Row2, 0);
    this[7] = defaultValue_default(column1Row3, 0);
    this[8] = defaultValue_default(column2Row0, 0);
    this[9] = defaultValue_default(column2Row1, 0);
    this[10] = defaultValue_default(column2Row2, 0);
    this[11] = defaultValue_default(column2Row3, 0);
    this[12] = defaultValue_default(column3Row0, 0);
    this[13] = defaultValue_default(column3Row1, 0);
    this[14] = defaultValue_default(column3Row2, 0);
    this[15] = defaultValue_default(column3Row3, 0);
  }
  var fromCameraF, fromCameraR, fromCameraU, scaleScratch12, scaleScratch22, scratchColumn2, scaleScratch32, scaleScratch42, scaleScratch52, scratchInverseRotation, scratchMatrix3Zero, scratchBottomRow, scratchExpectedBottomRow, scratchTransposeMatrix2, Matrix4_default;
  var init_Matrix4 = __esm({
    "packages/engine/Source/Core/Matrix4.js"() {
      init_Cartesian3();
      init_Cartesian4();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      init_Matrix3();
      init_RuntimeError();
      Matrix4.packedLength = 16;
      Matrix4.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value[0];
        array[startingIndex++] = value[1];
        array[startingIndex++] = value[2];
        array[startingIndex++] = value[3];
        array[startingIndex++] = value[4];
        array[startingIndex++] = value[5];
        array[startingIndex++] = value[6];
        array[startingIndex++] = value[7];
        array[startingIndex++] = value[8];
        array[startingIndex++] = value[9];
        array[startingIndex++] = value[10];
        array[startingIndex++] = value[11];
        array[startingIndex++] = value[12];
        array[startingIndex++] = value[13];
        array[startingIndex++] = value[14];
        array[startingIndex] = value[15];
        return array;
      };
      Matrix4.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Matrix4();
        }
        result[0] = array[startingIndex++];
        result[1] = array[startingIndex++];
        result[2] = array[startingIndex++];
        result[3] = array[startingIndex++];
        result[4] = array[startingIndex++];
        result[5] = array[startingIndex++];
        result[6] = array[startingIndex++];
        result[7] = array[startingIndex++];
        result[8] = array[startingIndex++];
        result[9] = array[startingIndex++];
        result[10] = array[startingIndex++];
        result[11] = array[startingIndex++];
        result[12] = array[startingIndex++];
        result[13] = array[startingIndex++];
        result[14] = array[startingIndex++];
        result[15] = array[startingIndex];
        return result;
      };
      Matrix4.packArray = function(array, result) {
        Check_default.defined("array", array);
        const length = array.length;
        const resultLength = length * 16;
        if (!defined_default(result)) {
          result = new Array(resultLength);
        } else if (!Array.isArray(result) && result.length !== resultLength) {
          throw new DeveloperError_default(
            "If result is a typed array, it must have exactly array.length * 16 elements"
          );
        } else if (result.length !== resultLength) {
          result.length = resultLength;
        }
        for (let i = 0; i < length; ++i) {
          Matrix4.pack(array[i], result, i * 16);
        }
        return result;
      };
      Matrix4.unpackArray = function(array, result) {
        Check_default.defined("array", array);
        Check_default.typeOf.number.greaterThanOrEquals("array.length", array.length, 16);
        if (array.length % 16 !== 0) {
          throw new DeveloperError_default("array length must be a multiple of 16.");
        }
        const length = array.length;
        if (!defined_default(result)) {
          result = new Array(length / 16);
        } else {
          result.length = length / 16;
        }
        for (let i = 0; i < length; i += 16) {
          const index = i / 16;
          result[index] = Matrix4.unpack(array, i, result[index]);
        }
        return result;
      };
      Matrix4.clone = function(matrix, result) {
        if (!defined_default(matrix)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Matrix4(
            matrix[0],
            matrix[4],
            matrix[8],
            matrix[12],
            matrix[1],
            matrix[5],
            matrix[9],
            matrix[13],
            matrix[2],
            matrix[6],
            matrix[10],
            matrix[14],
            matrix[3],
            matrix[7],
            matrix[11],
            matrix[15]
          );
        }
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[3];
        result[4] = matrix[4];
        result[5] = matrix[5];
        result[6] = matrix[6];
        result[7] = matrix[7];
        result[8] = matrix[8];
        result[9] = matrix[9];
        result[10] = matrix[10];
        result[11] = matrix[11];
        result[12] = matrix[12];
        result[13] = matrix[13];
        result[14] = matrix[14];
        result[15] = matrix[15];
        return result;
      };
      Matrix4.fromArray = Matrix4.unpack;
      Matrix4.fromColumnMajorArray = function(values, result) {
        Check_default.defined("values", values);
        return Matrix4.clone(values, result);
      };
      Matrix4.fromRowMajorArray = function(values, result) {
        Check_default.defined("values", values);
        if (!defined_default(result)) {
          return new Matrix4(
            values[0],
            values[1],
            values[2],
            values[3],
            values[4],
            values[5],
            values[6],
            values[7],
            values[8],
            values[9],
            values[10],
            values[11],
            values[12],
            values[13],
            values[14],
            values[15]
          );
        }
        result[0] = values[0];
        result[1] = values[4];
        result[2] = values[8];
        result[3] = values[12];
        result[4] = values[1];
        result[5] = values[5];
        result[6] = values[9];
        result[7] = values[13];
        result[8] = values[2];
        result[9] = values[6];
        result[10] = values[10];
        result[11] = values[14];
        result[12] = values[3];
        result[13] = values[7];
        result[14] = values[11];
        result[15] = values[15];
        return result;
      };
      Matrix4.fromRotationTranslation = function(rotation, translation2, result) {
        Check_default.typeOf.object("rotation", rotation);
        translation2 = defaultValue_default(translation2, Cartesian3_default.ZERO);
        if (!defined_default(result)) {
          return new Matrix4(
            rotation[0],
            rotation[3],
            rotation[6],
            translation2.x,
            rotation[1],
            rotation[4],
            rotation[7],
            translation2.y,
            rotation[2],
            rotation[5],
            rotation[8],
            translation2.z,
            0,
            0,
            0,
            1
          );
        }
        result[0] = rotation[0];
        result[1] = rotation[1];
        result[2] = rotation[2];
        result[3] = 0;
        result[4] = rotation[3];
        result[5] = rotation[4];
        result[6] = rotation[5];
        result[7] = 0;
        result[8] = rotation[6];
        result[9] = rotation[7];
        result[10] = rotation[8];
        result[11] = 0;
        result[12] = translation2.x;
        result[13] = translation2.y;
        result[14] = translation2.z;
        result[15] = 1;
        return result;
      };
      Matrix4.fromTranslationQuaternionRotationScale = function(translation2, rotation, scale, result) {
        Check_default.typeOf.object("translation", translation2);
        Check_default.typeOf.object("rotation", rotation);
        Check_default.typeOf.object("scale", scale);
        if (!defined_default(result)) {
          result = new Matrix4();
        }
        const scaleX = scale.x;
        const scaleY = scale.y;
        const scaleZ = scale.z;
        const x2 = rotation.x * rotation.x;
        const xy = rotation.x * rotation.y;
        const xz = rotation.x * rotation.z;
        const xw = rotation.x * rotation.w;
        const y2 = rotation.y * rotation.y;
        const yz = rotation.y * rotation.z;
        const yw = rotation.y * rotation.w;
        const z2 = rotation.z * rotation.z;
        const zw = rotation.z * rotation.w;
        const w2 = rotation.w * rotation.w;
        const m00 = x2 - y2 - z2 + w2;
        const m01 = 2 * (xy - zw);
        const m02 = 2 * (xz + yw);
        const m10 = 2 * (xy + zw);
        const m11 = -x2 + y2 - z2 + w2;
        const m12 = 2 * (yz - xw);
        const m20 = 2 * (xz - yw);
        const m21 = 2 * (yz + xw);
        const m22 = -x2 - y2 + z2 + w2;
        result[0] = m00 * scaleX;
        result[1] = m10 * scaleX;
        result[2] = m20 * scaleX;
        result[3] = 0;
        result[4] = m01 * scaleY;
        result[5] = m11 * scaleY;
        result[6] = m21 * scaleY;
        result[7] = 0;
        result[8] = m02 * scaleZ;
        result[9] = m12 * scaleZ;
        result[10] = m22 * scaleZ;
        result[11] = 0;
        result[12] = translation2.x;
        result[13] = translation2.y;
        result[14] = translation2.z;
        result[15] = 1;
        return result;
      };
      Matrix4.fromTranslationRotationScale = function(translationRotationScale, result) {
        Check_default.typeOf.object("translationRotationScale", translationRotationScale);
        return Matrix4.fromTranslationQuaternionRotationScale(
          translationRotationScale.translation,
          translationRotationScale.rotation,
          translationRotationScale.scale,
          result
        );
      };
      Matrix4.fromTranslation = function(translation2, result) {
        Check_default.typeOf.object("translation", translation2);
        return Matrix4.fromRotationTranslation(Matrix3_default.IDENTITY, translation2, result);
      };
      Matrix4.fromScale = function(scale, result) {
        Check_default.typeOf.object("scale", scale);
        if (!defined_default(result)) {
          return new Matrix4(
            scale.x,
            0,
            0,
            0,
            0,
            scale.y,
            0,
            0,
            0,
            0,
            scale.z,
            0,
            0,
            0,
            0,
            1
          );
        }
        result[0] = scale.x;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = 0;
        result[5] = scale.y;
        result[6] = 0;
        result[7] = 0;
        result[8] = 0;
        result[9] = 0;
        result[10] = scale.z;
        result[11] = 0;
        result[12] = 0;
        result[13] = 0;
        result[14] = 0;
        result[15] = 1;
        return result;
      };
      Matrix4.fromUniformScale = function(scale, result) {
        Check_default.typeOf.number("scale", scale);
        if (!defined_default(result)) {
          return new Matrix4(
            scale,
            0,
            0,
            0,
            0,
            scale,
            0,
            0,
            0,
            0,
            scale,
            0,
            0,
            0,
            0,
            1
          );
        }
        result[0] = scale;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = 0;
        result[5] = scale;
        result[6] = 0;
        result[7] = 0;
        result[8] = 0;
        result[9] = 0;
        result[10] = scale;
        result[11] = 0;
        result[12] = 0;
        result[13] = 0;
        result[14] = 0;
        result[15] = 1;
        return result;
      };
      Matrix4.fromRotation = function(rotation, result) {
        Check_default.typeOf.object("rotation", rotation);
        if (!defined_default(result)) {
          result = new Matrix4();
        }
        result[0] = rotation[0];
        result[1] = rotation[1];
        result[2] = rotation[2];
        result[3] = 0;
        result[4] = rotation[3];
        result[5] = rotation[4];
        result[6] = rotation[5];
        result[7] = 0;
        result[8] = rotation[6];
        result[9] = rotation[7];
        result[10] = rotation[8];
        result[11] = 0;
        result[12] = 0;
        result[13] = 0;
        result[14] = 0;
        result[15] = 1;
        return result;
      };
      fromCameraF = new Cartesian3_default();
      fromCameraR = new Cartesian3_default();
      fromCameraU = new Cartesian3_default();
      Matrix4.fromCamera = function(camera, result) {
        Check_default.typeOf.object("camera", camera);
        const position = camera.position;
        const direction2 = camera.direction;
        const up = camera.up;
        Check_default.typeOf.object("camera.position", position);
        Check_default.typeOf.object("camera.direction", direction2);
        Check_default.typeOf.object("camera.up", up);
        Cartesian3_default.normalize(direction2, fromCameraF);
        Cartesian3_default.normalize(
          Cartesian3_default.cross(fromCameraF, up, fromCameraR),
          fromCameraR
        );
        Cartesian3_default.normalize(
          Cartesian3_default.cross(fromCameraR, fromCameraF, fromCameraU),
          fromCameraU
        );
        const sX = fromCameraR.x;
        const sY = fromCameraR.y;
        const sZ = fromCameraR.z;
        const fX = fromCameraF.x;
        const fY = fromCameraF.y;
        const fZ = fromCameraF.z;
        const uX = fromCameraU.x;
        const uY = fromCameraU.y;
        const uZ = fromCameraU.z;
        const positionX = position.x;
        const positionY = position.y;
        const positionZ = position.z;
        const t0 = sX * -positionX + sY * -positionY + sZ * -positionZ;
        const t1 = uX * -positionX + uY * -positionY + uZ * -positionZ;
        const t2 = fX * positionX + fY * positionY + fZ * positionZ;
        if (!defined_default(result)) {
          return new Matrix4(
            sX,
            sY,
            sZ,
            t0,
            uX,
            uY,
            uZ,
            t1,
            -fX,
            -fY,
            -fZ,
            t2,
            0,
            0,
            0,
            1
          );
        }
        result[0] = sX;
        result[1] = uX;
        result[2] = -fX;
        result[3] = 0;
        result[4] = sY;
        result[5] = uY;
        result[6] = -fY;
        result[7] = 0;
        result[8] = sZ;
        result[9] = uZ;
        result[10] = -fZ;
        result[11] = 0;
        result[12] = t0;
        result[13] = t1;
        result[14] = t2;
        result[15] = 1;
        return result;
      };
      Matrix4.computePerspectiveFieldOfView = function(fovY, aspectRatio, near, far, result) {
        Check_default.typeOf.number.greaterThan("fovY", fovY, 0);
        Check_default.typeOf.number.lessThan("fovY", fovY, Math.PI);
        Check_default.typeOf.number.greaterThan("near", near, 0);
        Check_default.typeOf.number.greaterThan("far", far, 0);
        Check_default.typeOf.object("result", result);
        const bottom = Math.tan(fovY * 0.5);
        const column1Row1 = 1 / bottom;
        const column0Row0 = column1Row1 / aspectRatio;
        const column2Row2 = (far + near) / (near - far);
        const column3Row2 = 2 * far * near / (near - far);
        result[0] = column0Row0;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = 0;
        result[5] = column1Row1;
        result[6] = 0;
        result[7] = 0;
        result[8] = 0;
        result[9] = 0;
        result[10] = column2Row2;
        result[11] = -1;
        result[12] = 0;
        result[13] = 0;
        result[14] = column3Row2;
        result[15] = 0;
        return result;
      };
      Matrix4.computeOrthographicOffCenter = function(left, right, bottom, top, near, far, result) {
        Check_default.typeOf.number("left", left);
        Check_default.typeOf.number("right", right);
        Check_default.typeOf.number("bottom", bottom);
        Check_default.typeOf.number("top", top);
        Check_default.typeOf.number("near", near);
        Check_default.typeOf.number("far", far);
        Check_default.typeOf.object("result", result);
        let a3 = 1 / (right - left);
        let b = 1 / (top - bottom);
        let c = 1 / (far - near);
        const tx = -(right + left) * a3;
        const ty = -(top + bottom) * b;
        const tz = -(far + near) * c;
        a3 *= 2;
        b *= 2;
        c *= -2;
        result[0] = a3;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = 0;
        result[5] = b;
        result[6] = 0;
        result[7] = 0;
        result[8] = 0;
        result[9] = 0;
        result[10] = c;
        result[11] = 0;
        result[12] = tx;
        result[13] = ty;
        result[14] = tz;
        result[15] = 1;
        return result;
      };
      Matrix4.computePerspectiveOffCenter = function(left, right, bottom, top, near, far, result) {
        Check_default.typeOf.number("left", left);
        Check_default.typeOf.number("right", right);
        Check_default.typeOf.number("bottom", bottom);
        Check_default.typeOf.number("top", top);
        Check_default.typeOf.number("near", near);
        Check_default.typeOf.number("far", far);
        Check_default.typeOf.object("result", result);
        const column0Row0 = 2 * near / (right - left);
        const column1Row1 = 2 * near / (top - bottom);
        const column2Row0 = (right + left) / (right - left);
        const column2Row1 = (top + bottom) / (top - bottom);
        const column2Row2 = -(far + near) / (far - near);
        const column2Row3 = -1;
        const column3Row2 = -2 * far * near / (far - near);
        result[0] = column0Row0;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = 0;
        result[5] = column1Row1;
        result[6] = 0;
        result[7] = 0;
        result[8] = column2Row0;
        result[9] = column2Row1;
        result[10] = column2Row2;
        result[11] = column2Row3;
        result[12] = 0;
        result[13] = 0;
        result[14] = column3Row2;
        result[15] = 0;
        return result;
      };
      Matrix4.computeInfinitePerspectiveOffCenter = function(left, right, bottom, top, near, result) {
        Check_default.typeOf.number("left", left);
        Check_default.typeOf.number("right", right);
        Check_default.typeOf.number("bottom", bottom);
        Check_default.typeOf.number("top", top);
        Check_default.typeOf.number("near", near);
        Check_default.typeOf.object("result", result);
        const column0Row0 = 2 * near / (right - left);
        const column1Row1 = 2 * near / (top - bottom);
        const column2Row0 = (right + left) / (right - left);
        const column2Row1 = (top + bottom) / (top - bottom);
        const column2Row2 = -1;
        const column2Row3 = -1;
        const column3Row2 = -2 * near;
        result[0] = column0Row0;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = 0;
        result[5] = column1Row1;
        result[6] = 0;
        result[7] = 0;
        result[8] = column2Row0;
        result[9] = column2Row1;
        result[10] = column2Row2;
        result[11] = column2Row3;
        result[12] = 0;
        result[13] = 0;
        result[14] = column3Row2;
        result[15] = 0;
        return result;
      };
      Matrix4.computeViewportTransformation = function(viewport, nearDepthRange, farDepthRange, result) {
        if (!defined_default(result)) {
          result = new Matrix4();
        }
        viewport = defaultValue_default(viewport, defaultValue_default.EMPTY_OBJECT);
        const x = defaultValue_default(viewport.x, 0);
        const y = defaultValue_default(viewport.y, 0);
        const width = defaultValue_default(viewport.width, 0);
        const height = defaultValue_default(viewport.height, 0);
        nearDepthRange = defaultValue_default(nearDepthRange, 0);
        farDepthRange = defaultValue_default(farDepthRange, 1);
        const halfWidth = width * 0.5;
        const halfHeight = height * 0.5;
        const halfDepth = (farDepthRange - nearDepthRange) * 0.5;
        const column0Row0 = halfWidth;
        const column1Row1 = halfHeight;
        const column2Row2 = halfDepth;
        const column3Row0 = x + halfWidth;
        const column3Row1 = y + halfHeight;
        const column3Row2 = nearDepthRange + halfDepth;
        const column3Row3 = 1;
        result[0] = column0Row0;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result[4] = 0;
        result[5] = column1Row1;
        result[6] = 0;
        result[7] = 0;
        result[8] = 0;
        result[9] = 0;
        result[10] = column2Row2;
        result[11] = 0;
        result[12] = column3Row0;
        result[13] = column3Row1;
        result[14] = column3Row2;
        result[15] = column3Row3;
        return result;
      };
      Matrix4.computeView = function(position, direction2, up, right, result) {
        Check_default.typeOf.object("position", position);
        Check_default.typeOf.object("direction", direction2);
        Check_default.typeOf.object("up", up);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result[0] = right.x;
        result[1] = up.x;
        result[2] = -direction2.x;
        result[3] = 0;
        result[4] = right.y;
        result[5] = up.y;
        result[6] = -direction2.y;
        result[7] = 0;
        result[8] = right.z;
        result[9] = up.z;
        result[10] = -direction2.z;
        result[11] = 0;
        result[12] = -Cartesian3_default.dot(right, position);
        result[13] = -Cartesian3_default.dot(up, position);
        result[14] = Cartesian3_default.dot(direction2, position);
        result[15] = 1;
        return result;
      };
      Matrix4.toArray = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        if (!defined_default(result)) {
          return [
            matrix[0],
            matrix[1],
            matrix[2],
            matrix[3],
            matrix[4],
            matrix[5],
            matrix[6],
            matrix[7],
            matrix[8],
            matrix[9],
            matrix[10],
            matrix[11],
            matrix[12],
            matrix[13],
            matrix[14],
            matrix[15]
          ];
        }
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[3];
        result[4] = matrix[4];
        result[5] = matrix[5];
        result[6] = matrix[6];
        result[7] = matrix[7];
        result[8] = matrix[8];
        result[9] = matrix[9];
        result[10] = matrix[10];
        result[11] = matrix[11];
        result[12] = matrix[12];
        result[13] = matrix[13];
        result[14] = matrix[14];
        result[15] = matrix[15];
        return result;
      };
      Matrix4.getElementIndex = function(column, row) {
        Check_default.typeOf.number.greaterThanOrEquals("row", row, 0);
        Check_default.typeOf.number.lessThanOrEquals("row", row, 3);
        Check_default.typeOf.number.greaterThanOrEquals("column", column, 0);
        Check_default.typeOf.number.lessThanOrEquals("column", column, 3);
        return column * 4 + row;
      };
      Matrix4.getColumn = function(matrix, index, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 3);
        Check_default.typeOf.object("result", result);
        const startIndex = index * 4;
        const x = matrix[startIndex];
        const y = matrix[startIndex + 1];
        const z = matrix[startIndex + 2];
        const w = matrix[startIndex + 3];
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      Matrix4.setColumn = function(matrix, index, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 3);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result = Matrix4.clone(matrix, result);
        const startIndex = index * 4;
        result[startIndex] = cartesian11.x;
        result[startIndex + 1] = cartesian11.y;
        result[startIndex + 2] = cartesian11.z;
        result[startIndex + 3] = cartesian11.w;
        return result;
      };
      Matrix4.getRow = function(matrix, index, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 3);
        Check_default.typeOf.object("result", result);
        const x = matrix[index];
        const y = matrix[index + 4];
        const z = matrix[index + 8];
        const w = matrix[index + 12];
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      Matrix4.setRow = function(matrix, index, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 3);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result = Matrix4.clone(matrix, result);
        result[index] = cartesian11.x;
        result[index + 4] = cartesian11.y;
        result[index + 8] = cartesian11.z;
        result[index + 12] = cartesian11.w;
        return result;
      };
      Matrix4.setTranslation = function(matrix, translation2, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("translation", translation2);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[3];
        result[4] = matrix[4];
        result[5] = matrix[5];
        result[6] = matrix[6];
        result[7] = matrix[7];
        result[8] = matrix[8];
        result[9] = matrix[9];
        result[10] = matrix[10];
        result[11] = matrix[11];
        result[12] = translation2.x;
        result[13] = translation2.y;
        result[14] = translation2.z;
        result[15] = matrix[15];
        return result;
      };
      scaleScratch12 = new Cartesian3_default();
      Matrix4.setScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("scale", scale);
        Check_default.typeOf.object("result", result);
        const existingScale = Matrix4.getScale(matrix, scaleScratch12);
        const scaleRatioX = scale.x / existingScale.x;
        const scaleRatioY = scale.y / existingScale.y;
        const scaleRatioZ = scale.z / existingScale.z;
        result[0] = matrix[0] * scaleRatioX;
        result[1] = matrix[1] * scaleRatioX;
        result[2] = matrix[2] * scaleRatioX;
        result[3] = matrix[3];
        result[4] = matrix[4] * scaleRatioY;
        result[5] = matrix[5] * scaleRatioY;
        result[6] = matrix[6] * scaleRatioY;
        result[7] = matrix[7];
        result[8] = matrix[8] * scaleRatioZ;
        result[9] = matrix[9] * scaleRatioZ;
        result[10] = matrix[10] * scaleRatioZ;
        result[11] = matrix[11];
        result[12] = matrix[12];
        result[13] = matrix[13];
        result[14] = matrix[14];
        result[15] = matrix[15];
        return result;
      };
      scaleScratch22 = new Cartesian3_default();
      Matrix4.setUniformScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scale", scale);
        Check_default.typeOf.object("result", result);
        const existingScale = Matrix4.getScale(matrix, scaleScratch22);
        const scaleRatioX = scale / existingScale.x;
        const scaleRatioY = scale / existingScale.y;
        const scaleRatioZ = scale / existingScale.z;
        result[0] = matrix[0] * scaleRatioX;
        result[1] = matrix[1] * scaleRatioX;
        result[2] = matrix[2] * scaleRatioX;
        result[3] = matrix[3];
        result[4] = matrix[4] * scaleRatioY;
        result[5] = matrix[5] * scaleRatioY;
        result[6] = matrix[6] * scaleRatioY;
        result[7] = matrix[7];
        result[8] = matrix[8] * scaleRatioZ;
        result[9] = matrix[9] * scaleRatioZ;
        result[10] = matrix[10] * scaleRatioZ;
        result[11] = matrix[11];
        result[12] = matrix[12];
        result[13] = matrix[13];
        result[14] = matrix[14];
        result[15] = matrix[15];
        return result;
      };
      scratchColumn2 = new Cartesian3_default();
      Matrix4.getScale = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result.x = Cartesian3_default.magnitude(
          Cartesian3_default.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn2)
        );
        result.y = Cartesian3_default.magnitude(
          Cartesian3_default.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn2)
        );
        result.z = Cartesian3_default.magnitude(
          Cartesian3_default.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn2)
        );
        return result;
      };
      scaleScratch32 = new Cartesian3_default();
      Matrix4.getMaximumScale = function(matrix) {
        Matrix4.getScale(matrix, scaleScratch32);
        return Cartesian3_default.maximumComponent(scaleScratch32);
      };
      scaleScratch42 = new Cartesian3_default();
      Matrix4.setRotation = function(matrix, rotation, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const scale = Matrix4.getScale(matrix, scaleScratch42);
        result[0] = rotation[0] * scale.x;
        result[1] = rotation[1] * scale.x;
        result[2] = rotation[2] * scale.x;
        result[3] = matrix[3];
        result[4] = rotation[3] * scale.y;
        result[5] = rotation[4] * scale.y;
        result[6] = rotation[5] * scale.y;
        result[7] = matrix[7];
        result[8] = rotation[6] * scale.z;
        result[9] = rotation[7] * scale.z;
        result[10] = rotation[8] * scale.z;
        result[11] = matrix[11];
        result[12] = matrix[12];
        result[13] = matrix[13];
        result[14] = matrix[14];
        result[15] = matrix[15];
        return result;
      };
      scaleScratch52 = new Cartesian3_default();
      Matrix4.getRotation = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const scale = Matrix4.getScale(matrix, scaleScratch52);
        result[0] = matrix[0] / scale.x;
        result[1] = matrix[1] / scale.x;
        result[2] = matrix[2] / scale.x;
        result[3] = matrix[4] / scale.y;
        result[4] = matrix[5] / scale.y;
        result[5] = matrix[6] / scale.y;
        result[6] = matrix[8] / scale.z;
        result[7] = matrix[9] / scale.z;
        result[8] = matrix[10] / scale.z;
        return result;
      };
      Matrix4.multiply = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        const left0 = left[0];
        const left1 = left[1];
        const left2 = left[2];
        const left3 = left[3];
        const left4 = left[4];
        const left5 = left[5];
        const left6 = left[6];
        const left7 = left[7];
        const left8 = left[8];
        const left9 = left[9];
        const left10 = left[10];
        const left11 = left[11];
        const left12 = left[12];
        const left13 = left[13];
        const left14 = left[14];
        const left15 = left[15];
        const right0 = right[0];
        const right1 = right[1];
        const right2 = right[2];
        const right3 = right[3];
        const right4 = right[4];
        const right5 = right[5];
        const right6 = right[6];
        const right7 = right[7];
        const right8 = right[8];
        const right9 = right[9];
        const right10 = right[10];
        const right11 = right[11];
        const right12 = right[12];
        const right13 = right[13];
        const right14 = right[14];
        const right15 = right[15];
        const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;
        const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;
        const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;
        const column0Row3 = left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;
        const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;
        const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;
        const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;
        const column1Row3 = left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;
        const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;
        const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;
        const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;
        const column2Row3 = left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;
        const column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;
        const column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;
        const column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;
        const column3Row3 = left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;
        result[0] = column0Row0;
        result[1] = column0Row1;
        result[2] = column0Row2;
        result[3] = column0Row3;
        result[4] = column1Row0;
        result[5] = column1Row1;
        result[6] = column1Row2;
        result[7] = column1Row3;
        result[8] = column2Row0;
        result[9] = column2Row1;
        result[10] = column2Row2;
        result[11] = column2Row3;
        result[12] = column3Row0;
        result[13] = column3Row1;
        result[14] = column3Row2;
        result[15] = column3Row3;
        return result;
      };
      Matrix4.add = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result[0] = left[0] + right[0];
        result[1] = left[1] + right[1];
        result[2] = left[2] + right[2];
        result[3] = left[3] + right[3];
        result[4] = left[4] + right[4];
        result[5] = left[5] + right[5];
        result[6] = left[6] + right[6];
        result[7] = left[7] + right[7];
        result[8] = left[8] + right[8];
        result[9] = left[9] + right[9];
        result[10] = left[10] + right[10];
        result[11] = left[11] + right[11];
        result[12] = left[12] + right[12];
        result[13] = left[13] + right[13];
        result[14] = left[14] + right[14];
        result[15] = left[15] + right[15];
        return result;
      };
      Matrix4.subtract = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result[0] = left[0] - right[0];
        result[1] = left[1] - right[1];
        result[2] = left[2] - right[2];
        result[3] = left[3] - right[3];
        result[4] = left[4] - right[4];
        result[5] = left[5] - right[5];
        result[6] = left[6] - right[6];
        result[7] = left[7] - right[7];
        result[8] = left[8] - right[8];
        result[9] = left[9] - right[9];
        result[10] = left[10] - right[10];
        result[11] = left[11] - right[11];
        result[12] = left[12] - right[12];
        result[13] = left[13] - right[13];
        result[14] = left[14] - right[14];
        result[15] = left[15] - right[15];
        return result;
      };
      Matrix4.multiplyTransformation = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        const left0 = left[0];
        const left1 = left[1];
        const left2 = left[2];
        const left4 = left[4];
        const left5 = left[5];
        const left6 = left[6];
        const left8 = left[8];
        const left9 = left[9];
        const left10 = left[10];
        const left12 = left[12];
        const left13 = left[13];
        const left14 = left[14];
        const right0 = right[0];
        const right1 = right[1];
        const right2 = right[2];
        const right4 = right[4];
        const right5 = right[5];
        const right6 = right[6];
        const right8 = right[8];
        const right9 = right[9];
        const right10 = right[10];
        const right12 = right[12];
        const right13 = right[13];
        const right14 = right[14];
        const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;
        const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;
        const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;
        const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;
        const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;
        const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;
        const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;
        const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;
        const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;
        const column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12;
        const column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13;
        const column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14;
        result[0] = column0Row0;
        result[1] = column0Row1;
        result[2] = column0Row2;
        result[3] = 0;
        result[4] = column1Row0;
        result[5] = column1Row1;
        result[6] = column1Row2;
        result[7] = 0;
        result[8] = column2Row0;
        result[9] = column2Row1;
        result[10] = column2Row2;
        result[11] = 0;
        result[12] = column3Row0;
        result[13] = column3Row1;
        result[14] = column3Row2;
        result[15] = 1;
        return result;
      };
      Matrix4.multiplyByMatrix3 = function(matrix, rotation, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("rotation", rotation);
        Check_default.typeOf.object("result", result);
        const left0 = matrix[0];
        const left1 = matrix[1];
        const left2 = matrix[2];
        const left4 = matrix[4];
        const left5 = matrix[5];
        const left6 = matrix[6];
        const left8 = matrix[8];
        const left9 = matrix[9];
        const left10 = matrix[10];
        const right0 = rotation[0];
        const right1 = rotation[1];
        const right2 = rotation[2];
        const right4 = rotation[3];
        const right5 = rotation[4];
        const right6 = rotation[5];
        const right8 = rotation[6];
        const right9 = rotation[7];
        const right10 = rotation[8];
        const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;
        const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;
        const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;
        const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;
        const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;
        const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;
        const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;
        const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;
        const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;
        result[0] = column0Row0;
        result[1] = column0Row1;
        result[2] = column0Row2;
        result[3] = 0;
        result[4] = column1Row0;
        result[5] = column1Row1;
        result[6] = column1Row2;
        result[7] = 0;
        result[8] = column2Row0;
        result[9] = column2Row1;
        result[10] = column2Row2;
        result[11] = 0;
        result[12] = matrix[12];
        result[13] = matrix[13];
        result[14] = matrix[14];
        result[15] = matrix[15];
        return result;
      };
      Matrix4.multiplyByTranslation = function(matrix, translation2, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("translation", translation2);
        Check_default.typeOf.object("result", result);
        const x = translation2.x;
        const y = translation2.y;
        const z = translation2.z;
        const tx = x * matrix[0] + y * matrix[4] + z * matrix[8] + matrix[12];
        const ty = x * matrix[1] + y * matrix[5] + z * matrix[9] + matrix[13];
        const tz = x * matrix[2] + y * matrix[6] + z * matrix[10] + matrix[14];
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[3];
        result[4] = matrix[4];
        result[5] = matrix[5];
        result[6] = matrix[6];
        result[7] = matrix[7];
        result[8] = matrix[8];
        result[9] = matrix[9];
        result[10] = matrix[10];
        result[11] = matrix[11];
        result[12] = tx;
        result[13] = ty;
        result[14] = tz;
        result[15] = matrix[15];
        return result;
      };
      Matrix4.multiplyByScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("scale", scale);
        Check_default.typeOf.object("result", result);
        const scaleX = scale.x;
        const scaleY = scale.y;
        const scaleZ = scale.z;
        if (scaleX === 1 && scaleY === 1 && scaleZ === 1) {
          return Matrix4.clone(matrix, result);
        }
        result[0] = scaleX * matrix[0];
        result[1] = scaleX * matrix[1];
        result[2] = scaleX * matrix[2];
        result[3] = matrix[3];
        result[4] = scaleY * matrix[4];
        result[5] = scaleY * matrix[5];
        result[6] = scaleY * matrix[6];
        result[7] = matrix[7];
        result[8] = scaleZ * matrix[8];
        result[9] = scaleZ * matrix[9];
        result[10] = scaleZ * matrix[10];
        result[11] = matrix[11];
        result[12] = matrix[12];
        result[13] = matrix[13];
        result[14] = matrix[14];
        result[15] = matrix[15];
        return result;
      };
      Matrix4.multiplyByUniformScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scale", scale);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0] * scale;
        result[1] = matrix[1] * scale;
        result[2] = matrix[2] * scale;
        result[3] = matrix[3];
        result[4] = matrix[4] * scale;
        result[5] = matrix[5] * scale;
        result[6] = matrix[6] * scale;
        result[7] = matrix[7];
        result[8] = matrix[8] * scale;
        result[9] = matrix[9] * scale;
        result[10] = matrix[10] * scale;
        result[11] = matrix[11];
        result[12] = matrix[12];
        result[13] = matrix[13];
        result[14] = matrix[14];
        result[15] = matrix[15];
        return result;
      };
      Matrix4.multiplyByVector = function(matrix, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const vX = cartesian11.x;
        const vY = cartesian11.y;
        const vZ = cartesian11.z;
        const vW = cartesian11.w;
        const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;
        const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;
        const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;
        const w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      Matrix4.multiplyByPointAsVector = function(matrix, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const vX = cartesian11.x;
        const vY = cartesian11.y;
        const vZ = cartesian11.z;
        const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;
        const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;
        const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      Matrix4.multiplyByPoint = function(matrix, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const vX = cartesian11.x;
        const vY = cartesian11.y;
        const vZ = cartesian11.z;
        const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];
        const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];
        const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      Matrix4.multiplyByScalar = function(matrix, scalar, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0] * scalar;
        result[1] = matrix[1] * scalar;
        result[2] = matrix[2] * scalar;
        result[3] = matrix[3] * scalar;
        result[4] = matrix[4] * scalar;
        result[5] = matrix[5] * scalar;
        result[6] = matrix[6] * scalar;
        result[7] = matrix[7] * scalar;
        result[8] = matrix[8] * scalar;
        result[9] = matrix[9] * scalar;
        result[10] = matrix[10] * scalar;
        result[11] = matrix[11] * scalar;
        result[12] = matrix[12] * scalar;
        result[13] = matrix[13] * scalar;
        result[14] = matrix[14] * scalar;
        result[15] = matrix[15] * scalar;
        return result;
      };
      Matrix4.negate = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result[0] = -matrix[0];
        result[1] = -matrix[1];
        result[2] = -matrix[2];
        result[3] = -matrix[3];
        result[4] = -matrix[4];
        result[5] = -matrix[5];
        result[6] = -matrix[6];
        result[7] = -matrix[7];
        result[8] = -matrix[8];
        result[9] = -matrix[9];
        result[10] = -matrix[10];
        result[11] = -matrix[11];
        result[12] = -matrix[12];
        result[13] = -matrix[13];
        result[14] = -matrix[14];
        result[15] = -matrix[15];
        return result;
      };
      Matrix4.transpose = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const matrix1 = matrix[1];
        const matrix2 = matrix[2];
        const matrix3 = matrix[3];
        const matrix6 = matrix[6];
        const matrix7 = matrix[7];
        const matrix11 = matrix[11];
        result[0] = matrix[0];
        result[1] = matrix[4];
        result[2] = matrix[8];
        result[3] = matrix[12];
        result[4] = matrix1;
        result[5] = matrix[5];
        result[6] = matrix[9];
        result[7] = matrix[13];
        result[8] = matrix2;
        result[9] = matrix6;
        result[10] = matrix[10];
        result[11] = matrix[14];
        result[12] = matrix3;
        result[13] = matrix7;
        result[14] = matrix11;
        result[15] = matrix[15];
        return result;
      };
      Matrix4.abs = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result[0] = Math.abs(matrix[0]);
        result[1] = Math.abs(matrix[1]);
        result[2] = Math.abs(matrix[2]);
        result[3] = Math.abs(matrix[3]);
        result[4] = Math.abs(matrix[4]);
        result[5] = Math.abs(matrix[5]);
        result[6] = Math.abs(matrix[6]);
        result[7] = Math.abs(matrix[7]);
        result[8] = Math.abs(matrix[8]);
        result[9] = Math.abs(matrix[9]);
        result[10] = Math.abs(matrix[10]);
        result[11] = Math.abs(matrix[11]);
        result[12] = Math.abs(matrix[12]);
        result[13] = Math.abs(matrix[13]);
        result[14] = Math.abs(matrix[14]);
        result[15] = Math.abs(matrix[15]);
        return result;
      };
      Matrix4.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && // Translation
        left[12] === right[12] && left[13] === right[13] && left[14] === right[14] && // Rotation/scale
        left[0] === right[0] && left[1] === right[1] && left[2] === right[2] && left[4] === right[4] && left[5] === right[5] && left[6] === right[6] && left[8] === right[8] && left[9] === right[9] && left[10] === right[10] && // Bottom row
        left[3] === right[3] && left[7] === right[7] && left[11] === right[11] && left[15] === right[15];
      };
      Matrix4.equalsEpsilon = function(left, right, epsilon) {
        epsilon = defaultValue_default(epsilon, 0);
        return left === right || defined_default(left) && defined_default(right) && Math.abs(left[0] - right[0]) <= epsilon && Math.abs(left[1] - right[1]) <= epsilon && Math.abs(left[2] - right[2]) <= epsilon && Math.abs(left[3] - right[3]) <= epsilon && Math.abs(left[4] - right[4]) <= epsilon && Math.abs(left[5] - right[5]) <= epsilon && Math.abs(left[6] - right[6]) <= epsilon && Math.abs(left[7] - right[7]) <= epsilon && Math.abs(left[8] - right[8]) <= epsilon && Math.abs(left[9] - right[9]) <= epsilon && Math.abs(left[10] - right[10]) <= epsilon && Math.abs(left[11] - right[11]) <= epsilon && Math.abs(left[12] - right[12]) <= epsilon && Math.abs(left[13] - right[13]) <= epsilon && Math.abs(left[14] - right[14]) <= epsilon && Math.abs(left[15] - right[15]) <= epsilon;
      };
      Matrix4.getTranslation = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result.x = matrix[12];
        result.y = matrix[13];
        result.z = matrix[14];
        return result;
      };
      Matrix4.getMatrix3 = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[4];
        result[4] = matrix[5];
        result[5] = matrix[6];
        result[6] = matrix[8];
        result[7] = matrix[9];
        result[8] = matrix[10];
        return result;
      };
      scratchInverseRotation = new Matrix3_default();
      scratchMatrix3Zero = new Matrix3_default();
      scratchBottomRow = new Cartesian4_default();
      scratchExpectedBottomRow = new Cartesian4_default(0, 0, 0, 1);
      Matrix4.inverse = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const src0 = matrix[0];
        const src1 = matrix[4];
        const src2 = matrix[8];
        const src3 = matrix[12];
        const src4 = matrix[1];
        const src5 = matrix[5];
        const src6 = matrix[9];
        const src7 = matrix[13];
        const src8 = matrix[2];
        const src9 = matrix[6];
        const src10 = matrix[10];
        const src11 = matrix[14];
        const src12 = matrix[3];
        const src13 = matrix[7];
        const src14 = matrix[11];
        const src15 = matrix[15];
        let tmp0 = src10 * src15;
        let tmp1 = src11 * src14;
        let tmp2 = src9 * src15;
        let tmp3 = src11 * src13;
        let tmp4 = src9 * src14;
        let tmp5 = src10 * src13;
        let tmp6 = src8 * src15;
        let tmp7 = src11 * src12;
        let tmp8 = src8 * src14;
        let tmp9 = src10 * src12;
        let tmp10 = src8 * src13;
        let tmp11 = src9 * src12;
        const dst0 = tmp0 * src5 + tmp3 * src6 + tmp4 * src7 - (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);
        const dst1 = tmp1 * src4 + tmp6 * src6 + tmp9 * src7 - (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);
        const dst2 = tmp2 * src4 + tmp7 * src5 + tmp10 * src7 - (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);
        const dst3 = tmp5 * src4 + tmp8 * src5 + tmp11 * src6 - (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);
        const dst4 = tmp1 * src1 + tmp2 * src2 + tmp5 * src3 - (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);
        const dst5 = tmp0 * src0 + tmp7 * src2 + tmp8 * src3 - (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);
        const dst6 = tmp3 * src0 + tmp6 * src1 + tmp11 * src3 - (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);
        const dst7 = tmp4 * src0 + tmp9 * src1 + tmp10 * src2 - (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);
        tmp0 = src2 * src7;
        tmp1 = src3 * src6;
        tmp2 = src1 * src7;
        tmp3 = src3 * src5;
        tmp4 = src1 * src6;
        tmp5 = src2 * src5;
        tmp6 = src0 * src7;
        tmp7 = src3 * src4;
        tmp8 = src0 * src6;
        tmp9 = src2 * src4;
        tmp10 = src0 * src5;
        tmp11 = src1 * src4;
        const dst8 = tmp0 * src13 + tmp3 * src14 + tmp4 * src15 - (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);
        const dst9 = tmp1 * src12 + tmp6 * src14 + tmp9 * src15 - (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);
        const dst10 = tmp2 * src12 + tmp7 * src13 + tmp10 * src15 - (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);
        const dst11 = tmp5 * src12 + tmp8 * src13 + tmp11 * src14 - (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);
        const dst12 = tmp2 * src10 + tmp5 * src11 + tmp1 * src9 - (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);
        const dst13 = tmp8 * src11 + tmp0 * src8 + tmp7 * src10 - (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);
        const dst14 = tmp6 * src9 + tmp11 * src11 + tmp3 * src8 - (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);
        const dst15 = tmp10 * src10 + tmp4 * src8 + tmp9 * src9 - (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);
        let det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;
        if (Math.abs(det) < Math_default.EPSILON21) {
          if (Matrix3_default.equalsEpsilon(
            Matrix4.getMatrix3(matrix, scratchInverseRotation),
            scratchMatrix3Zero,
            Math_default.EPSILON7
          ) && Cartesian4_default.equals(
            Matrix4.getRow(matrix, 3, scratchBottomRow),
            scratchExpectedBottomRow
          )) {
            result[0] = 0;
            result[1] = 0;
            result[2] = 0;
            result[3] = 0;
            result[4] = 0;
            result[5] = 0;
            result[6] = 0;
            result[7] = 0;
            result[8] = 0;
            result[9] = 0;
            result[10] = 0;
            result[11] = 0;
            result[12] = -matrix[12];
            result[13] = -matrix[13];
            result[14] = -matrix[14];
            result[15] = 1;
            return result;
          }
          throw new RuntimeError_default(
            "matrix is not invertible because its determinate is zero."
          );
        }
        det = 1 / det;
        result[0] = dst0 * det;
        result[1] = dst1 * det;
        result[2] = dst2 * det;
        result[3] = dst3 * det;
        result[4] = dst4 * det;
        result[5] = dst5 * det;
        result[6] = dst6 * det;
        result[7] = dst7 * det;
        result[8] = dst8 * det;
        result[9] = dst9 * det;
        result[10] = dst10 * det;
        result[11] = dst11 * det;
        result[12] = dst12 * det;
        result[13] = dst13 * det;
        result[14] = dst14 * det;
        result[15] = dst15 * det;
        return result;
      };
      Matrix4.inverseTransformation = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const matrix0 = matrix[0];
        const matrix1 = matrix[1];
        const matrix2 = matrix[2];
        const matrix4 = matrix[4];
        const matrix5 = matrix[5];
        const matrix6 = matrix[6];
        const matrix8 = matrix[8];
        const matrix9 = matrix[9];
        const matrix10 = matrix[10];
        const vX = matrix[12];
        const vY = matrix[13];
        const vZ = matrix[14];
        const x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;
        const y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;
        const z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;
        result[0] = matrix0;
        result[1] = matrix4;
        result[2] = matrix8;
        result[3] = 0;
        result[4] = matrix1;
        result[5] = matrix5;
        result[6] = matrix9;
        result[7] = 0;
        result[8] = matrix2;
        result[9] = matrix6;
        result[10] = matrix10;
        result[11] = 0;
        result[12] = x;
        result[13] = y;
        result[14] = z;
        result[15] = 1;
        return result;
      };
      scratchTransposeMatrix2 = new Matrix4();
      Matrix4.inverseTranspose = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        return Matrix4.inverse(
          Matrix4.transpose(matrix, scratchTransposeMatrix2),
          result
        );
      };
      Matrix4.IDENTITY = Object.freeze(
        new Matrix4(
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        )
      );
      Matrix4.ZERO = Object.freeze(
        new Matrix4(
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        )
      );
      Matrix4.COLUMN0ROW0 = 0;
      Matrix4.COLUMN0ROW1 = 1;
      Matrix4.COLUMN0ROW2 = 2;
      Matrix4.COLUMN0ROW3 = 3;
      Matrix4.COLUMN1ROW0 = 4;
      Matrix4.COLUMN1ROW1 = 5;
      Matrix4.COLUMN1ROW2 = 6;
      Matrix4.COLUMN1ROW3 = 7;
      Matrix4.COLUMN2ROW0 = 8;
      Matrix4.COLUMN2ROW1 = 9;
      Matrix4.COLUMN2ROW2 = 10;
      Matrix4.COLUMN2ROW3 = 11;
      Matrix4.COLUMN3ROW0 = 12;
      Matrix4.COLUMN3ROW1 = 13;
      Matrix4.COLUMN3ROW2 = 14;
      Matrix4.COLUMN3ROW3 = 15;
      Object.defineProperties(Matrix4.prototype, {
        /**
         * Gets the number of items in the collection.
         * @memberof Matrix4.prototype
         *
         * @type {number}
         */
        length: {
          get: function() {
            return Matrix4.packedLength;
          }
        }
      });
      Matrix4.prototype.clone = function(result) {
        return Matrix4.clone(this, result);
      };
      Matrix4.prototype.equals = function(right) {
        return Matrix4.equals(this, right);
      };
      Matrix4.equalsArray = function(matrix, array, offset) {
        return matrix[0] === array[offset] && matrix[1] === array[offset + 1] && matrix[2] === array[offset + 2] && matrix[3] === array[offset + 3] && matrix[4] === array[offset + 4] && matrix[5] === array[offset + 5] && matrix[6] === array[offset + 6] && matrix[7] === array[offset + 7] && matrix[8] === array[offset + 8] && matrix[9] === array[offset + 9] && matrix[10] === array[offset + 10] && matrix[11] === array[offset + 11] && matrix[12] === array[offset + 12] && matrix[13] === array[offset + 13] && matrix[14] === array[offset + 14] && matrix[15] === array[offset + 15];
      };
      Matrix4.prototype.equalsEpsilon = function(right, epsilon) {
        return Matrix4.equalsEpsilon(this, right, epsilon);
      };
      Matrix4.prototype.toString = function() {
        return `(${this[0]}, ${this[4]}, ${this[8]}, ${this[12]})
(${this[1]}, ${this[5]}, ${this[9]}, ${this[13]})
(${this[2]}, ${this[6]}, ${this[10]}, ${this[14]})
(${this[3]}, ${this[7]}, ${this[11]}, ${this[15]})`;
      };
      Matrix4_default = Matrix4;
    }
  });

  // packages/engine/Source/Core/Rectangle.js
  function Rectangle(west, south, east, north) {
    this.west = defaultValue_default(west, 0);
    this.south = defaultValue_default(south, 0);
    this.east = defaultValue_default(east, 0);
    this.north = defaultValue_default(north, 0);
  }
  var subsampleLlaScratch, Rectangle_default;
  var init_Rectangle = __esm({
    "packages/engine/Source/Core/Rectangle.js"() {
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_Math();
      Object.defineProperties(Rectangle.prototype, {
        /**
         * Gets the width of the rectangle in radians.
         * @memberof Rectangle.prototype
         * @type {number}
         * @readonly
         */
        width: {
          get: function() {
            return Rectangle.computeWidth(this);
          }
        },
        /**
         * Gets the height of the rectangle in radians.
         * @memberof Rectangle.prototype
         * @type {number}
         * @readonly
         */
        height: {
          get: function() {
            return Rectangle.computeHeight(this);
          }
        }
      });
      Rectangle.packedLength = 4;
      Rectangle.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.west;
        array[startingIndex++] = value.south;
        array[startingIndex++] = value.east;
        array[startingIndex] = value.north;
        return array;
      };
      Rectangle.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Rectangle();
        }
        result.west = array[startingIndex++];
        result.south = array[startingIndex++];
        result.east = array[startingIndex++];
        result.north = array[startingIndex];
        return result;
      };
      Rectangle.computeWidth = function(rectangle) {
        Check_default.typeOf.object("rectangle", rectangle);
        let east = rectangle.east;
        const west = rectangle.west;
        if (east < west) {
          east += Math_default.TWO_PI;
        }
        return east - west;
      };
      Rectangle.computeHeight = function(rectangle) {
        Check_default.typeOf.object("rectangle", rectangle);
        return rectangle.north - rectangle.south;
      };
      Rectangle.fromDegrees = function(west, south, east, north, result) {
        west = Math_default.toRadians(defaultValue_default(west, 0));
        south = Math_default.toRadians(defaultValue_default(south, 0));
        east = Math_default.toRadians(defaultValue_default(east, 0));
        north = Math_default.toRadians(defaultValue_default(north, 0));
        if (!defined_default(result)) {
          return new Rectangle(west, south, east, north);
        }
        result.west = west;
        result.south = south;
        result.east = east;
        result.north = north;
        return result;
      };
      Rectangle.fromRadians = function(west, south, east, north, result) {
        if (!defined_default(result)) {
          return new Rectangle(west, south, east, north);
        }
        result.west = defaultValue_default(west, 0);
        result.south = defaultValue_default(south, 0);
        result.east = defaultValue_default(east, 0);
        result.north = defaultValue_default(north, 0);
        return result;
      };
      Rectangle.fromCartographicArray = function(cartographics, result) {
        Check_default.defined("cartographics", cartographics);
        let west = Number.MAX_VALUE;
        let east = -Number.MAX_VALUE;
        let westOverIDL = Number.MAX_VALUE;
        let eastOverIDL = -Number.MAX_VALUE;
        let south = Number.MAX_VALUE;
        let north = -Number.MAX_VALUE;
        for (let i = 0, len = cartographics.length; i < len; i++) {
          const position = cartographics[i];
          west = Math.min(west, position.longitude);
          east = Math.max(east, position.longitude);
          south = Math.min(south, position.latitude);
          north = Math.max(north, position.latitude);
          const lonAdjusted = position.longitude >= 0 ? position.longitude : position.longitude + Math_default.TWO_PI;
          westOverIDL = Math.min(westOverIDL, lonAdjusted);
          eastOverIDL = Math.max(eastOverIDL, lonAdjusted);
        }
        if (east - west > eastOverIDL - westOverIDL) {
          west = westOverIDL;
          east = eastOverIDL;
          if (east > Math_default.PI) {
            east = east - Math_default.TWO_PI;
          }
          if (west > Math_default.PI) {
            west = west - Math_default.TWO_PI;
          }
        }
        if (!defined_default(result)) {
          return new Rectangle(west, south, east, north);
        }
        result.west = west;
        result.south = south;
        result.east = east;
        result.north = north;
        return result;
      };
      Rectangle.fromCartesianArray = function(cartesians, ellipsoid, result) {
        Check_default.defined("cartesians", cartesians);
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        let west = Number.MAX_VALUE;
        let east = -Number.MAX_VALUE;
        let westOverIDL = Number.MAX_VALUE;
        let eastOverIDL = -Number.MAX_VALUE;
        let south = Number.MAX_VALUE;
        let north = -Number.MAX_VALUE;
        for (let i = 0, len = cartesians.length; i < len; i++) {
          const position = ellipsoid.cartesianToCartographic(cartesians[i]);
          west = Math.min(west, position.longitude);
          east = Math.max(east, position.longitude);
          south = Math.min(south, position.latitude);
          north = Math.max(north, position.latitude);
          const lonAdjusted = position.longitude >= 0 ? position.longitude : position.longitude + Math_default.TWO_PI;
          westOverIDL = Math.min(westOverIDL, lonAdjusted);
          eastOverIDL = Math.max(eastOverIDL, lonAdjusted);
        }
        if (east - west > eastOverIDL - westOverIDL) {
          west = westOverIDL;
          east = eastOverIDL;
          if (east > Math_default.PI) {
            east = east - Math_default.TWO_PI;
          }
          if (west > Math_default.PI) {
            west = west - Math_default.TWO_PI;
          }
        }
        if (!defined_default(result)) {
          return new Rectangle(west, south, east, north);
        }
        result.west = west;
        result.south = south;
        result.east = east;
        result.north = north;
        return result;
      };
      Rectangle.clone = function(rectangle, result) {
        if (!defined_default(rectangle)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Rectangle(
            rectangle.west,
            rectangle.south,
            rectangle.east,
            rectangle.north
          );
        }
        result.west = rectangle.west;
        result.south = rectangle.south;
        result.east = rectangle.east;
        result.north = rectangle.north;
        return result;
      };
      Rectangle.equalsEpsilon = function(left, right, absoluteEpsilon) {
        absoluteEpsilon = defaultValue_default(absoluteEpsilon, 0);
        return left === right || defined_default(left) && defined_default(right) && Math.abs(left.west - right.west) <= absoluteEpsilon && Math.abs(left.south - right.south) <= absoluteEpsilon && Math.abs(left.east - right.east) <= absoluteEpsilon && Math.abs(left.north - right.north) <= absoluteEpsilon;
      };
      Rectangle.prototype.clone = function(result) {
        return Rectangle.clone(this, result);
      };
      Rectangle.prototype.equals = function(other) {
        return Rectangle.equals(this, other);
      };
      Rectangle.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.west === right.west && left.south === right.south && left.east === right.east && left.north === right.north;
      };
      Rectangle.prototype.equalsEpsilon = function(other, epsilon) {
        return Rectangle.equalsEpsilon(this, other, epsilon);
      };
      Rectangle.validate = function(rectangle) {
        Check_default.typeOf.object("rectangle", rectangle);
        const north = rectangle.north;
        Check_default.typeOf.number.greaterThanOrEquals(
          "north",
          north,
          -Math_default.PI_OVER_TWO
        );
        Check_default.typeOf.number.lessThanOrEquals("north", north, Math_default.PI_OVER_TWO);
        const south = rectangle.south;
        Check_default.typeOf.number.greaterThanOrEquals(
          "south",
          south,
          -Math_default.PI_OVER_TWO
        );
        Check_default.typeOf.number.lessThanOrEquals("south", south, Math_default.PI_OVER_TWO);
        const west = rectangle.west;
        Check_default.typeOf.number.greaterThanOrEquals("west", west, -Math.PI);
        Check_default.typeOf.number.lessThanOrEquals("west", west, Math.PI);
        const east = rectangle.east;
        Check_default.typeOf.number.greaterThanOrEquals("east", east, -Math.PI);
        Check_default.typeOf.number.lessThanOrEquals("east", east, Math.PI);
      };
      Rectangle.southwest = function(rectangle, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        if (!defined_default(result)) {
          return new Cartographic_default(rectangle.west, rectangle.south);
        }
        result.longitude = rectangle.west;
        result.latitude = rectangle.south;
        result.height = 0;
        return result;
      };
      Rectangle.northwest = function(rectangle, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        if (!defined_default(result)) {
          return new Cartographic_default(rectangle.west, rectangle.north);
        }
        result.longitude = rectangle.west;
        result.latitude = rectangle.north;
        result.height = 0;
        return result;
      };
      Rectangle.northeast = function(rectangle, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        if (!defined_default(result)) {
          return new Cartographic_default(rectangle.east, rectangle.north);
        }
        result.longitude = rectangle.east;
        result.latitude = rectangle.north;
        result.height = 0;
        return result;
      };
      Rectangle.southeast = function(rectangle, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        if (!defined_default(result)) {
          return new Cartographic_default(rectangle.east, rectangle.south);
        }
        result.longitude = rectangle.east;
        result.latitude = rectangle.south;
        result.height = 0;
        return result;
      };
      Rectangle.center = function(rectangle, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        let east = rectangle.east;
        const west = rectangle.west;
        if (east < west) {
          east += Math_default.TWO_PI;
        }
        const longitude = Math_default.negativePiToPi((west + east) * 0.5);
        const latitude = (rectangle.south + rectangle.north) * 0.5;
        if (!defined_default(result)) {
          return new Cartographic_default(longitude, latitude);
        }
        result.longitude = longitude;
        result.latitude = latitude;
        result.height = 0;
        return result;
      };
      Rectangle.intersection = function(rectangle, otherRectangle, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        Check_default.typeOf.object("otherRectangle", otherRectangle);
        let rectangleEast = rectangle.east;
        let rectangleWest = rectangle.west;
        let otherRectangleEast = otherRectangle.east;
        let otherRectangleWest = otherRectangle.west;
        if (rectangleEast < rectangleWest && otherRectangleEast > 0) {
          rectangleEast += Math_default.TWO_PI;
        } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0) {
          otherRectangleEast += Math_default.TWO_PI;
        }
        if (rectangleEast < rectangleWest && otherRectangleWest < 0) {
          otherRectangleWest += Math_default.TWO_PI;
        } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0) {
          rectangleWest += Math_default.TWO_PI;
        }
        const west = Math_default.negativePiToPi(
          Math.max(rectangleWest, otherRectangleWest)
        );
        const east = Math_default.negativePiToPi(
          Math.min(rectangleEast, otherRectangleEast)
        );
        if ((rectangle.west < rectangle.east || otherRectangle.west < otherRectangle.east) && east <= west) {
          return void 0;
        }
        const south = Math.max(rectangle.south, otherRectangle.south);
        const north = Math.min(rectangle.north, otherRectangle.north);
        if (south >= north) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Rectangle(west, south, east, north);
        }
        result.west = west;
        result.south = south;
        result.east = east;
        result.north = north;
        return result;
      };
      Rectangle.simpleIntersection = function(rectangle, otherRectangle, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        Check_default.typeOf.object("otherRectangle", otherRectangle);
        const west = Math.max(rectangle.west, otherRectangle.west);
        const south = Math.max(rectangle.south, otherRectangle.south);
        const east = Math.min(rectangle.east, otherRectangle.east);
        const north = Math.min(rectangle.north, otherRectangle.north);
        if (south >= north || west >= east) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Rectangle(west, south, east, north);
        }
        result.west = west;
        result.south = south;
        result.east = east;
        result.north = north;
        return result;
      };
      Rectangle.union = function(rectangle, otherRectangle, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        Check_default.typeOf.object("otherRectangle", otherRectangle);
        if (!defined_default(result)) {
          result = new Rectangle();
        }
        let rectangleEast = rectangle.east;
        let rectangleWest = rectangle.west;
        let otherRectangleEast = otherRectangle.east;
        let otherRectangleWest = otherRectangle.west;
        if (rectangleEast < rectangleWest && otherRectangleEast > 0) {
          rectangleEast += Math_default.TWO_PI;
        } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0) {
          otherRectangleEast += Math_default.TWO_PI;
        }
        if (rectangleEast < rectangleWest && otherRectangleWest < 0) {
          otherRectangleWest += Math_default.TWO_PI;
        } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0) {
          rectangleWest += Math_default.TWO_PI;
        }
        const west = Math_default.negativePiToPi(
          Math.min(rectangleWest, otherRectangleWest)
        );
        const east = Math_default.negativePiToPi(
          Math.max(rectangleEast, otherRectangleEast)
        );
        result.west = west;
        result.south = Math.min(rectangle.south, otherRectangle.south);
        result.east = east;
        result.north = Math.max(rectangle.north, otherRectangle.north);
        return result;
      };
      Rectangle.expand = function(rectangle, cartographic2, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        Check_default.typeOf.object("cartographic", cartographic2);
        if (!defined_default(result)) {
          result = new Rectangle();
        }
        result.west = Math.min(rectangle.west, cartographic2.longitude);
        result.south = Math.min(rectangle.south, cartographic2.latitude);
        result.east = Math.max(rectangle.east, cartographic2.longitude);
        result.north = Math.max(rectangle.north, cartographic2.latitude);
        return result;
      };
      Rectangle.contains = function(rectangle, cartographic2) {
        Check_default.typeOf.object("rectangle", rectangle);
        Check_default.typeOf.object("cartographic", cartographic2);
        let longitude = cartographic2.longitude;
        const latitude = cartographic2.latitude;
        const west = rectangle.west;
        let east = rectangle.east;
        if (east < west) {
          east += Math_default.TWO_PI;
          if (longitude < 0) {
            longitude += Math_default.TWO_PI;
          }
        }
        return (longitude > west || Math_default.equalsEpsilon(longitude, west, Math_default.EPSILON14)) && (longitude < east || Math_default.equalsEpsilon(longitude, east, Math_default.EPSILON14)) && latitude >= rectangle.south && latitude <= rectangle.north;
      };
      subsampleLlaScratch = new Cartographic_default();
      Rectangle.subsample = function(rectangle, ellipsoid, surfaceHeight, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        surfaceHeight = defaultValue_default(surfaceHeight, 0);
        if (!defined_default(result)) {
          result = [];
        }
        let length = 0;
        const north = rectangle.north;
        const south = rectangle.south;
        const east = rectangle.east;
        const west = rectangle.west;
        const lla = subsampleLlaScratch;
        lla.height = surfaceHeight;
        lla.longitude = west;
        lla.latitude = north;
        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);
        length++;
        lla.longitude = east;
        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);
        length++;
        lla.latitude = south;
        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);
        length++;
        lla.longitude = west;
        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);
        length++;
        if (north < 0) {
          lla.latitude = north;
        } else if (south > 0) {
          lla.latitude = south;
        } else {
          lla.latitude = 0;
        }
        for (let i = 1; i < 8; ++i) {
          lla.longitude = -Math.PI + i * Math_default.PI_OVER_TWO;
          if (Rectangle.contains(rectangle, lla)) {
            result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);
            length++;
          }
        }
        if (lla.latitude === 0) {
          lla.longitude = west;
          result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);
          length++;
          lla.longitude = east;
          result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);
          length++;
        }
        result.length = length;
        return result;
      };
      Rectangle.subsection = function(rectangle, westLerp, southLerp, eastLerp, northLerp, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        Check_default.typeOf.number.greaterThanOrEquals("westLerp", westLerp, 0);
        Check_default.typeOf.number.lessThanOrEquals("westLerp", westLerp, 1);
        Check_default.typeOf.number.greaterThanOrEquals("southLerp", southLerp, 0);
        Check_default.typeOf.number.lessThanOrEquals("southLerp", southLerp, 1);
        Check_default.typeOf.number.greaterThanOrEquals("eastLerp", eastLerp, 0);
        Check_default.typeOf.number.lessThanOrEquals("eastLerp", eastLerp, 1);
        Check_default.typeOf.number.greaterThanOrEquals("northLerp", northLerp, 0);
        Check_default.typeOf.number.lessThanOrEquals("northLerp", northLerp, 1);
        Check_default.typeOf.number.lessThanOrEquals("westLerp", westLerp, eastLerp);
        Check_default.typeOf.number.lessThanOrEquals("southLerp", southLerp, northLerp);
        if (!defined_default(result)) {
          result = new Rectangle();
        }
        if (rectangle.west <= rectangle.east) {
          const width = rectangle.east - rectangle.west;
          result.west = rectangle.west + westLerp * width;
          result.east = rectangle.west + eastLerp * width;
        } else {
          const width = Math_default.TWO_PI + rectangle.east - rectangle.west;
          result.west = Math_default.negativePiToPi(rectangle.west + westLerp * width);
          result.east = Math_default.negativePiToPi(rectangle.west + eastLerp * width);
        }
        const height = rectangle.north - rectangle.south;
        result.south = rectangle.south + southLerp * height;
        result.north = rectangle.south + northLerp * height;
        if (westLerp === 1) {
          result.west = rectangle.east;
        }
        if (eastLerp === 1) {
          result.east = rectangle.east;
        }
        if (southLerp === 1) {
          result.south = rectangle.north;
        }
        if (northLerp === 1) {
          result.north = rectangle.north;
        }
        return result;
      };
      Rectangle.MAX_VALUE = Object.freeze(
        new Rectangle(
          -Math.PI,
          -Math_default.PI_OVER_TWO,
          Math.PI,
          Math_default.PI_OVER_TWO
        )
      );
      Rectangle_default = Rectangle;
    }
  });

  // packages/engine/Source/Core/BoundingSphere.js
  function BoundingSphere(center, radius) {
    this.center = Cartesian3_default.clone(defaultValue_default(center, Cartesian3_default.ZERO));
    this.radius = defaultValue_default(radius, 0);
  }
  var fromPointsXMin, fromPointsYMin, fromPointsZMin, fromPointsXMax, fromPointsYMax, fromPointsZMax, fromPointsCurrentPos, fromPointsScratch, fromPointsRitterCenter, fromPointsMinBoxPt, fromPointsMaxBoxPt, fromPointsNaiveCenterScratch, volumeConstant, defaultProjection, fromRectangle2DLowerLeft, fromRectangle2DUpperRight, fromRectangle2DSouthwest, fromRectangle2DNortheast, fromRectangle3DScratch, fromBoundingSpheresScratch, fromOrientedBoundingBoxScratchU, fromOrientedBoundingBoxScratchV, fromOrientedBoundingBoxScratchW, scratchFromTransformationCenter, scratchFromTransformationScale, unionScratch, unionScratchCenter, expandScratch, distanceSquaredToScratch, scratchCartesian3, projectTo2DNormalScratch, projectTo2DEastScratch, projectTo2DNorthScratch, projectTo2DWestScratch, projectTo2DSouthScratch, projectTo2DCartographicScratch, projectTo2DPositionsScratch, projectTo2DProjection, BoundingSphere_default;
  var init_BoundingSphere = __esm({
    "packages/engine/Source/Core/BoundingSphere.js"() {
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_GeographicProjection();
      init_Intersect();
      init_Interval();
      init_Math();
      init_Matrix3();
      init_Matrix4();
      init_Rectangle();
      fromPointsXMin = new Cartesian3_default();
      fromPointsYMin = new Cartesian3_default();
      fromPointsZMin = new Cartesian3_default();
      fromPointsXMax = new Cartesian3_default();
      fromPointsYMax = new Cartesian3_default();
      fromPointsZMax = new Cartesian3_default();
      fromPointsCurrentPos = new Cartesian3_default();
      fromPointsScratch = new Cartesian3_default();
      fromPointsRitterCenter = new Cartesian3_default();
      fromPointsMinBoxPt = new Cartesian3_default();
      fromPointsMaxBoxPt = new Cartesian3_default();
      fromPointsNaiveCenterScratch = new Cartesian3_default();
      volumeConstant = 4 / 3 * Math_default.PI;
      BoundingSphere.fromPoints = function(positions, result) {
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        if (!defined_default(positions) || positions.length === 0) {
          result.center = Cartesian3_default.clone(Cartesian3_default.ZERO, result.center);
          result.radius = 0;
          return result;
        }
        const currentPos = Cartesian3_default.clone(positions[0], fromPointsCurrentPos);
        const xMin = Cartesian3_default.clone(currentPos, fromPointsXMin);
        const yMin = Cartesian3_default.clone(currentPos, fromPointsYMin);
        const zMin = Cartesian3_default.clone(currentPos, fromPointsZMin);
        const xMax = Cartesian3_default.clone(currentPos, fromPointsXMax);
        const yMax = Cartesian3_default.clone(currentPos, fromPointsYMax);
        const zMax = Cartesian3_default.clone(currentPos, fromPointsZMax);
        const numPositions = positions.length;
        let i;
        for (i = 1; i < numPositions; i++) {
          Cartesian3_default.clone(positions[i], currentPos);
          const x = currentPos.x;
          const y = currentPos.y;
          const z = currentPos.z;
          if (x < xMin.x) {
            Cartesian3_default.clone(currentPos, xMin);
          }
          if (x > xMax.x) {
            Cartesian3_default.clone(currentPos, xMax);
          }
          if (y < yMin.y) {
            Cartesian3_default.clone(currentPos, yMin);
          }
          if (y > yMax.y) {
            Cartesian3_default.clone(currentPos, yMax);
          }
          if (z < zMin.z) {
            Cartesian3_default.clone(currentPos, zMin);
          }
          if (z > zMax.z) {
            Cartesian3_default.clone(currentPos, zMax);
          }
        }
        const xSpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(xMax, xMin, fromPointsScratch)
        );
        const ySpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(yMax, yMin, fromPointsScratch)
        );
        const zSpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(zMax, zMin, fromPointsScratch)
        );
        let diameter1 = xMin;
        let diameter2 = xMax;
        let maxSpan = xSpan;
        if (ySpan > maxSpan) {
          maxSpan = ySpan;
          diameter1 = yMin;
          diameter2 = yMax;
        }
        if (zSpan > maxSpan) {
          maxSpan = zSpan;
          diameter1 = zMin;
          diameter2 = zMax;
        }
        const ritterCenter = fromPointsRitterCenter;
        ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;
        ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;
        ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;
        let radiusSquared = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(diameter2, ritterCenter, fromPointsScratch)
        );
        let ritterRadius = Math.sqrt(radiusSquared);
        const minBoxPt = fromPointsMinBoxPt;
        minBoxPt.x = xMin.x;
        minBoxPt.y = yMin.y;
        minBoxPt.z = zMin.z;
        const maxBoxPt = fromPointsMaxBoxPt;
        maxBoxPt.x = xMax.x;
        maxBoxPt.y = yMax.y;
        maxBoxPt.z = zMax.z;
        const naiveCenter = Cartesian3_default.midpoint(
          minBoxPt,
          maxBoxPt,
          fromPointsNaiveCenterScratch
        );
        let naiveRadius = 0;
        for (i = 0; i < numPositions; i++) {
          Cartesian3_default.clone(positions[i], currentPos);
          const r = Cartesian3_default.magnitude(
            Cartesian3_default.subtract(currentPos, naiveCenter, fromPointsScratch)
          );
          if (r > naiveRadius) {
            naiveRadius = r;
          }
          const oldCenterToPointSquared = Cartesian3_default.magnitudeSquared(
            Cartesian3_default.subtract(currentPos, ritterCenter, fromPointsScratch)
          );
          if (oldCenterToPointSquared > radiusSquared) {
            const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);
            ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;
            radiusSquared = ritterRadius * ritterRadius;
            const oldToNew = oldCenterToPoint - ritterRadius;
            ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;
            ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;
            ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;
          }
        }
        if (ritterRadius < naiveRadius) {
          Cartesian3_default.clone(ritterCenter, result.center);
          result.radius = ritterRadius;
        } else {
          Cartesian3_default.clone(naiveCenter, result.center);
          result.radius = naiveRadius;
        }
        return result;
      };
      defaultProjection = new GeographicProjection_default();
      fromRectangle2DLowerLeft = new Cartesian3_default();
      fromRectangle2DUpperRight = new Cartesian3_default();
      fromRectangle2DSouthwest = new Cartographic_default();
      fromRectangle2DNortheast = new Cartographic_default();
      BoundingSphere.fromRectangle2D = function(rectangle, projection, result) {
        return BoundingSphere.fromRectangleWithHeights2D(
          rectangle,
          projection,
          0,
          0,
          result
        );
      };
      BoundingSphere.fromRectangleWithHeights2D = function(rectangle, projection, minimumHeight, maximumHeight, result) {
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        if (!defined_default(rectangle)) {
          result.center = Cartesian3_default.clone(Cartesian3_default.ZERO, result.center);
          result.radius = 0;
          return result;
        }
        projection = defaultValue_default(projection, defaultProjection);
        Rectangle_default.southwest(rectangle, fromRectangle2DSouthwest);
        fromRectangle2DSouthwest.height = minimumHeight;
        Rectangle_default.northeast(rectangle, fromRectangle2DNortheast);
        fromRectangle2DNortheast.height = maximumHeight;
        const lowerLeft = projection.project(
          fromRectangle2DSouthwest,
          fromRectangle2DLowerLeft
        );
        const upperRight = projection.project(
          fromRectangle2DNortheast,
          fromRectangle2DUpperRight
        );
        const width = upperRight.x - lowerLeft.x;
        const height = upperRight.y - lowerLeft.y;
        const elevation = upperRight.z - lowerLeft.z;
        result.radius = Math.sqrt(width * width + height * height + elevation * elevation) * 0.5;
        const center = result.center;
        center.x = lowerLeft.x + width * 0.5;
        center.y = lowerLeft.y + height * 0.5;
        center.z = lowerLeft.z + elevation * 0.5;
        return result;
      };
      fromRectangle3DScratch = [];
      BoundingSphere.fromRectangle3D = function(rectangle, ellipsoid, surfaceHeight, result) {
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        surfaceHeight = defaultValue_default(surfaceHeight, 0);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        if (!defined_default(rectangle)) {
          result.center = Cartesian3_default.clone(Cartesian3_default.ZERO, result.center);
          result.radius = 0;
          return result;
        }
        const positions = Rectangle_default.subsample(
          rectangle,
          ellipsoid,
          surfaceHeight,
          fromRectangle3DScratch
        );
        return BoundingSphere.fromPoints(positions, result);
      };
      BoundingSphere.fromVertices = function(positions, center, stride, result) {
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        if (!defined_default(positions) || positions.length === 0) {
          result.center = Cartesian3_default.clone(Cartesian3_default.ZERO, result.center);
          result.radius = 0;
          return result;
        }
        center = defaultValue_default(center, Cartesian3_default.ZERO);
        stride = defaultValue_default(stride, 3);
        Check_default.typeOf.number.greaterThanOrEquals("stride", stride, 3);
        const currentPos = fromPointsCurrentPos;
        currentPos.x = positions[0] + center.x;
        currentPos.y = positions[1] + center.y;
        currentPos.z = positions[2] + center.z;
        const xMin = Cartesian3_default.clone(currentPos, fromPointsXMin);
        const yMin = Cartesian3_default.clone(currentPos, fromPointsYMin);
        const zMin = Cartesian3_default.clone(currentPos, fromPointsZMin);
        const xMax = Cartesian3_default.clone(currentPos, fromPointsXMax);
        const yMax = Cartesian3_default.clone(currentPos, fromPointsYMax);
        const zMax = Cartesian3_default.clone(currentPos, fromPointsZMax);
        const numElements = positions.length;
        let i;
        for (i = 0; i < numElements; i += stride) {
          const x = positions[i] + center.x;
          const y = positions[i + 1] + center.y;
          const z = positions[i + 2] + center.z;
          currentPos.x = x;
          currentPos.y = y;
          currentPos.z = z;
          if (x < xMin.x) {
            Cartesian3_default.clone(currentPos, xMin);
          }
          if (x > xMax.x) {
            Cartesian3_default.clone(currentPos, xMax);
          }
          if (y < yMin.y) {
            Cartesian3_default.clone(currentPos, yMin);
          }
          if (y > yMax.y) {
            Cartesian3_default.clone(currentPos, yMax);
          }
          if (z < zMin.z) {
            Cartesian3_default.clone(currentPos, zMin);
          }
          if (z > zMax.z) {
            Cartesian3_default.clone(currentPos, zMax);
          }
        }
        const xSpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(xMax, xMin, fromPointsScratch)
        );
        const ySpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(yMax, yMin, fromPointsScratch)
        );
        const zSpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(zMax, zMin, fromPointsScratch)
        );
        let diameter1 = xMin;
        let diameter2 = xMax;
        let maxSpan = xSpan;
        if (ySpan > maxSpan) {
          maxSpan = ySpan;
          diameter1 = yMin;
          diameter2 = yMax;
        }
        if (zSpan > maxSpan) {
          maxSpan = zSpan;
          diameter1 = zMin;
          diameter2 = zMax;
        }
        const ritterCenter = fromPointsRitterCenter;
        ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;
        ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;
        ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;
        let radiusSquared = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(diameter2, ritterCenter, fromPointsScratch)
        );
        let ritterRadius = Math.sqrt(radiusSquared);
        const minBoxPt = fromPointsMinBoxPt;
        minBoxPt.x = xMin.x;
        minBoxPt.y = yMin.y;
        minBoxPt.z = zMin.z;
        const maxBoxPt = fromPointsMaxBoxPt;
        maxBoxPt.x = xMax.x;
        maxBoxPt.y = yMax.y;
        maxBoxPt.z = zMax.z;
        const naiveCenter = Cartesian3_default.midpoint(
          minBoxPt,
          maxBoxPt,
          fromPointsNaiveCenterScratch
        );
        let naiveRadius = 0;
        for (i = 0; i < numElements; i += stride) {
          currentPos.x = positions[i] + center.x;
          currentPos.y = positions[i + 1] + center.y;
          currentPos.z = positions[i + 2] + center.z;
          const r = Cartesian3_default.magnitude(
            Cartesian3_default.subtract(currentPos, naiveCenter, fromPointsScratch)
          );
          if (r > naiveRadius) {
            naiveRadius = r;
          }
          const oldCenterToPointSquared = Cartesian3_default.magnitudeSquared(
            Cartesian3_default.subtract(currentPos, ritterCenter, fromPointsScratch)
          );
          if (oldCenterToPointSquared > radiusSquared) {
            const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);
            ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;
            radiusSquared = ritterRadius * ritterRadius;
            const oldToNew = oldCenterToPoint - ritterRadius;
            ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;
            ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;
            ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;
          }
        }
        if (ritterRadius < naiveRadius) {
          Cartesian3_default.clone(ritterCenter, result.center);
          result.radius = ritterRadius;
        } else {
          Cartesian3_default.clone(naiveCenter, result.center);
          result.radius = naiveRadius;
        }
        return result;
      };
      BoundingSphere.fromEncodedCartesianVertices = function(positionsHigh, positionsLow, result) {
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        if (!defined_default(positionsHigh) || !defined_default(positionsLow) || positionsHigh.length !== positionsLow.length || positionsHigh.length === 0) {
          result.center = Cartesian3_default.clone(Cartesian3_default.ZERO, result.center);
          result.radius = 0;
          return result;
        }
        const currentPos = fromPointsCurrentPos;
        currentPos.x = positionsHigh[0] + positionsLow[0];
        currentPos.y = positionsHigh[1] + positionsLow[1];
        currentPos.z = positionsHigh[2] + positionsLow[2];
        const xMin = Cartesian3_default.clone(currentPos, fromPointsXMin);
        const yMin = Cartesian3_default.clone(currentPos, fromPointsYMin);
        const zMin = Cartesian3_default.clone(currentPos, fromPointsZMin);
        const xMax = Cartesian3_default.clone(currentPos, fromPointsXMax);
        const yMax = Cartesian3_default.clone(currentPos, fromPointsYMax);
        const zMax = Cartesian3_default.clone(currentPos, fromPointsZMax);
        const numElements = positionsHigh.length;
        let i;
        for (i = 0; i < numElements; i += 3) {
          const x = positionsHigh[i] + positionsLow[i];
          const y = positionsHigh[i + 1] + positionsLow[i + 1];
          const z = positionsHigh[i + 2] + positionsLow[i + 2];
          currentPos.x = x;
          currentPos.y = y;
          currentPos.z = z;
          if (x < xMin.x) {
            Cartesian3_default.clone(currentPos, xMin);
          }
          if (x > xMax.x) {
            Cartesian3_default.clone(currentPos, xMax);
          }
          if (y < yMin.y) {
            Cartesian3_default.clone(currentPos, yMin);
          }
          if (y > yMax.y) {
            Cartesian3_default.clone(currentPos, yMax);
          }
          if (z < zMin.z) {
            Cartesian3_default.clone(currentPos, zMin);
          }
          if (z > zMax.z) {
            Cartesian3_default.clone(currentPos, zMax);
          }
        }
        const xSpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(xMax, xMin, fromPointsScratch)
        );
        const ySpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(yMax, yMin, fromPointsScratch)
        );
        const zSpan = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(zMax, zMin, fromPointsScratch)
        );
        let diameter1 = xMin;
        let diameter2 = xMax;
        let maxSpan = xSpan;
        if (ySpan > maxSpan) {
          maxSpan = ySpan;
          diameter1 = yMin;
          diameter2 = yMax;
        }
        if (zSpan > maxSpan) {
          maxSpan = zSpan;
          diameter1 = zMin;
          diameter2 = zMax;
        }
        const ritterCenter = fromPointsRitterCenter;
        ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;
        ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;
        ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;
        let radiusSquared = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(diameter2, ritterCenter, fromPointsScratch)
        );
        let ritterRadius = Math.sqrt(radiusSquared);
        const minBoxPt = fromPointsMinBoxPt;
        minBoxPt.x = xMin.x;
        minBoxPt.y = yMin.y;
        minBoxPt.z = zMin.z;
        const maxBoxPt = fromPointsMaxBoxPt;
        maxBoxPt.x = xMax.x;
        maxBoxPt.y = yMax.y;
        maxBoxPt.z = zMax.z;
        const naiveCenter = Cartesian3_default.midpoint(
          minBoxPt,
          maxBoxPt,
          fromPointsNaiveCenterScratch
        );
        let naiveRadius = 0;
        for (i = 0; i < numElements; i += 3) {
          currentPos.x = positionsHigh[i] + positionsLow[i];
          currentPos.y = positionsHigh[i + 1] + positionsLow[i + 1];
          currentPos.z = positionsHigh[i + 2] + positionsLow[i + 2];
          const r = Cartesian3_default.magnitude(
            Cartesian3_default.subtract(currentPos, naiveCenter, fromPointsScratch)
          );
          if (r > naiveRadius) {
            naiveRadius = r;
          }
          const oldCenterToPointSquared = Cartesian3_default.magnitudeSquared(
            Cartesian3_default.subtract(currentPos, ritterCenter, fromPointsScratch)
          );
          if (oldCenterToPointSquared > radiusSquared) {
            const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);
            ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;
            radiusSquared = ritterRadius * ritterRadius;
            const oldToNew = oldCenterToPoint - ritterRadius;
            ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;
            ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;
            ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;
          }
        }
        if (ritterRadius < naiveRadius) {
          Cartesian3_default.clone(ritterCenter, result.center);
          result.radius = ritterRadius;
        } else {
          Cartesian3_default.clone(naiveCenter, result.center);
          result.radius = naiveRadius;
        }
        return result;
      };
      BoundingSphere.fromCornerPoints = function(corner, oppositeCorner, result) {
        Check_default.typeOf.object("corner", corner);
        Check_default.typeOf.object("oppositeCorner", oppositeCorner);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        const center = Cartesian3_default.midpoint(corner, oppositeCorner, result.center);
        result.radius = Cartesian3_default.distance(center, oppositeCorner);
        return result;
      };
      BoundingSphere.fromEllipsoid = function(ellipsoid, result) {
        Check_default.typeOf.object("ellipsoid", ellipsoid);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        Cartesian3_default.clone(Cartesian3_default.ZERO, result.center);
        result.radius = ellipsoid.maximumRadius;
        return result;
      };
      fromBoundingSpheresScratch = new Cartesian3_default();
      BoundingSphere.fromBoundingSpheres = function(boundingSpheres, result) {
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        if (!defined_default(boundingSpheres) || boundingSpheres.length === 0) {
          result.center = Cartesian3_default.clone(Cartesian3_default.ZERO, result.center);
          result.radius = 0;
          return result;
        }
        const length = boundingSpheres.length;
        if (length === 1) {
          return BoundingSphere.clone(boundingSpheres[0], result);
        }
        if (length === 2) {
          return BoundingSphere.union(boundingSpheres[0], boundingSpheres[1], result);
        }
        const positions = [];
        let i;
        for (i = 0; i < length; i++) {
          positions.push(boundingSpheres[i].center);
        }
        result = BoundingSphere.fromPoints(positions, result);
        const center = result.center;
        let radius = result.radius;
        for (i = 0; i < length; i++) {
          const tmp2 = boundingSpheres[i];
          radius = Math.max(
            radius,
            Cartesian3_default.distance(center, tmp2.center, fromBoundingSpheresScratch) + tmp2.radius
          );
        }
        result.radius = radius;
        return result;
      };
      fromOrientedBoundingBoxScratchU = new Cartesian3_default();
      fromOrientedBoundingBoxScratchV = new Cartesian3_default();
      fromOrientedBoundingBoxScratchW = new Cartesian3_default();
      BoundingSphere.fromOrientedBoundingBox = function(orientedBoundingBox, result) {
        Check_default.defined("orientedBoundingBox", orientedBoundingBox);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        const halfAxes = orientedBoundingBox.halfAxes;
        const u3 = Matrix3_default.getColumn(halfAxes, 0, fromOrientedBoundingBoxScratchU);
        const v3 = Matrix3_default.getColumn(halfAxes, 1, fromOrientedBoundingBoxScratchV);
        const w = Matrix3_default.getColumn(halfAxes, 2, fromOrientedBoundingBoxScratchW);
        Cartesian3_default.add(u3, v3, u3);
        Cartesian3_default.add(u3, w, u3);
        result.center = Cartesian3_default.clone(orientedBoundingBox.center, result.center);
        result.radius = Cartesian3_default.magnitude(u3);
        return result;
      };
      scratchFromTransformationCenter = new Cartesian3_default();
      scratchFromTransformationScale = new Cartesian3_default();
      BoundingSphere.fromTransformation = function(transformation, result) {
        Check_default.typeOf.object("transformation", transformation);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        const center = Matrix4_default.getTranslation(
          transformation,
          scratchFromTransformationCenter
        );
        const scale = Matrix4_default.getScale(
          transformation,
          scratchFromTransformationScale
        );
        const radius = 0.5 * Cartesian3_default.magnitude(scale);
        result.center = Cartesian3_default.clone(center, result.center);
        result.radius = radius;
        return result;
      };
      BoundingSphere.clone = function(sphere, result) {
        if (!defined_default(sphere)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new BoundingSphere(sphere.center, sphere.radius);
        }
        result.center = Cartesian3_default.clone(sphere.center, result.center);
        result.radius = sphere.radius;
        return result;
      };
      BoundingSphere.packedLength = 4;
      BoundingSphere.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const center = value.center;
        array[startingIndex++] = center.x;
        array[startingIndex++] = center.y;
        array[startingIndex++] = center.z;
        array[startingIndex] = value.radius;
        return array;
      };
      BoundingSphere.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        const center = result.center;
        center.x = array[startingIndex++];
        center.y = array[startingIndex++];
        center.z = array[startingIndex++];
        result.radius = array[startingIndex];
        return result;
      };
      unionScratch = new Cartesian3_default();
      unionScratchCenter = new Cartesian3_default();
      BoundingSphere.union = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        const leftCenter = left.center;
        const leftRadius = left.radius;
        const rightCenter = right.center;
        const rightRadius = right.radius;
        const toRightCenter = Cartesian3_default.subtract(
          rightCenter,
          leftCenter,
          unionScratch
        );
        const centerSeparation = Cartesian3_default.magnitude(toRightCenter);
        if (leftRadius >= centerSeparation + rightRadius) {
          left.clone(result);
          return result;
        }
        if (rightRadius >= centerSeparation + leftRadius) {
          right.clone(result);
          return result;
        }
        const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;
        const center = Cartesian3_default.multiplyByScalar(
          toRightCenter,
          (-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation,
          unionScratchCenter
        );
        Cartesian3_default.add(center, leftCenter, center);
        Cartesian3_default.clone(center, result.center);
        result.radius = halfDistanceBetweenTangentPoints;
        return result;
      };
      expandScratch = new Cartesian3_default();
      BoundingSphere.expand = function(sphere, point, result) {
        Check_default.typeOf.object("sphere", sphere);
        Check_default.typeOf.object("point", point);
        result = BoundingSphere.clone(sphere, result);
        const radius = Cartesian3_default.magnitude(
          Cartesian3_default.subtract(point, result.center, expandScratch)
        );
        if (radius > result.radius) {
          result.radius = radius;
        }
        return result;
      };
      BoundingSphere.intersectPlane = function(sphere, plane) {
        Check_default.typeOf.object("sphere", sphere);
        Check_default.typeOf.object("plane", plane);
        const center = sphere.center;
        const radius = sphere.radius;
        const normal2 = plane.normal;
        const distanceToPlane = Cartesian3_default.dot(normal2, center) + plane.distance;
        if (distanceToPlane < -radius) {
          return Intersect_default.OUTSIDE;
        } else if (distanceToPlane < radius) {
          return Intersect_default.INTERSECTING;
        }
        return Intersect_default.INSIDE;
      };
      BoundingSphere.transform = function(sphere, transform2, result) {
        Check_default.typeOf.object("sphere", sphere);
        Check_default.typeOf.object("transform", transform2);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        result.center = Matrix4_default.multiplyByPoint(
          transform2,
          sphere.center,
          result.center
        );
        result.radius = Matrix4_default.getMaximumScale(transform2) * sphere.radius;
        return result;
      };
      distanceSquaredToScratch = new Cartesian3_default();
      BoundingSphere.distanceSquaredTo = function(sphere, cartesian11) {
        Check_default.typeOf.object("sphere", sphere);
        Check_default.typeOf.object("cartesian", cartesian11);
        const diff = Cartesian3_default.subtract(
          sphere.center,
          cartesian11,
          distanceSquaredToScratch
        );
        const distance = Cartesian3_default.magnitude(diff) - sphere.radius;
        if (distance <= 0) {
          return 0;
        }
        return distance * distance;
      };
      BoundingSphere.transformWithoutScale = function(sphere, transform2, result) {
        Check_default.typeOf.object("sphere", sphere);
        Check_default.typeOf.object("transform", transform2);
        if (!defined_default(result)) {
          result = new BoundingSphere();
        }
        result.center = Matrix4_default.multiplyByPoint(
          transform2,
          sphere.center,
          result.center
        );
        result.radius = sphere.radius;
        return result;
      };
      scratchCartesian3 = new Cartesian3_default();
      BoundingSphere.computePlaneDistances = function(sphere, position, direction2, result) {
        Check_default.typeOf.object("sphere", sphere);
        Check_default.typeOf.object("position", position);
        Check_default.typeOf.object("direction", direction2);
        if (!defined_default(result)) {
          result = new Interval_default();
        }
        const toCenter = Cartesian3_default.subtract(
          sphere.center,
          position,
          scratchCartesian3
        );
        const mag = Cartesian3_default.dot(direction2, toCenter);
        result.start = mag - sphere.radius;
        result.stop = mag + sphere.radius;
        return result;
      };
      projectTo2DNormalScratch = new Cartesian3_default();
      projectTo2DEastScratch = new Cartesian3_default();
      projectTo2DNorthScratch = new Cartesian3_default();
      projectTo2DWestScratch = new Cartesian3_default();
      projectTo2DSouthScratch = new Cartesian3_default();
      projectTo2DCartographicScratch = new Cartographic_default();
      projectTo2DPositionsScratch = new Array(8);
      for (let n = 0; n < 8; ++n) {
        projectTo2DPositionsScratch[n] = new Cartesian3_default();
      }
      projectTo2DProjection = new GeographicProjection_default();
      BoundingSphere.projectTo2D = function(sphere, projection, result) {
        Check_default.typeOf.object("sphere", sphere);
        projection = defaultValue_default(projection, projectTo2DProjection);
        const ellipsoid = projection.ellipsoid;
        let center = sphere.center;
        const radius = sphere.radius;
        let normal2;
        if (Cartesian3_default.equals(center, Cartesian3_default.ZERO)) {
          normal2 = Cartesian3_default.clone(Cartesian3_default.UNIT_X, projectTo2DNormalScratch);
        } else {
          normal2 = ellipsoid.geodeticSurfaceNormal(center, projectTo2DNormalScratch);
        }
        const east = Cartesian3_default.cross(
          Cartesian3_default.UNIT_Z,
          normal2,
          projectTo2DEastScratch
        );
        Cartesian3_default.normalize(east, east);
        const north = Cartesian3_default.cross(normal2, east, projectTo2DNorthScratch);
        Cartesian3_default.normalize(north, north);
        Cartesian3_default.multiplyByScalar(normal2, radius, normal2);
        Cartesian3_default.multiplyByScalar(north, radius, north);
        Cartesian3_default.multiplyByScalar(east, radius, east);
        const south = Cartesian3_default.negate(north, projectTo2DSouthScratch);
        const west = Cartesian3_default.negate(east, projectTo2DWestScratch);
        const positions = projectTo2DPositionsScratch;
        let corner = positions[0];
        Cartesian3_default.add(normal2, north, corner);
        Cartesian3_default.add(corner, east, corner);
        corner = positions[1];
        Cartesian3_default.add(normal2, north, corner);
        Cartesian3_default.add(corner, west, corner);
        corner = positions[2];
        Cartesian3_default.add(normal2, south, corner);
        Cartesian3_default.add(corner, west, corner);
        corner = positions[3];
        Cartesian3_default.add(normal2, south, corner);
        Cartesian3_default.add(corner, east, corner);
        Cartesian3_default.negate(normal2, normal2);
        corner = positions[4];
        Cartesian3_default.add(normal2, north, corner);
        Cartesian3_default.add(corner, east, corner);
        corner = positions[5];
        Cartesian3_default.add(normal2, north, corner);
        Cartesian3_default.add(corner, west, corner);
        corner = positions[6];
        Cartesian3_default.add(normal2, south, corner);
        Cartesian3_default.add(corner, west, corner);
        corner = positions[7];
        Cartesian3_default.add(normal2, south, corner);
        Cartesian3_default.add(corner, east, corner);
        const length = positions.length;
        for (let i = 0; i < length; ++i) {
          const position = positions[i];
          Cartesian3_default.add(center, position, position);
          const cartographic2 = ellipsoid.cartesianToCartographic(
            position,
            projectTo2DCartographicScratch
          );
          projection.project(cartographic2, position);
        }
        result = BoundingSphere.fromPoints(positions, result);
        center = result.center;
        const x = center.x;
        const y = center.y;
        const z = center.z;
        center.x = z;
        center.y = x;
        center.z = y;
        return result;
      };
      BoundingSphere.isOccluded = function(sphere, occluder) {
        Check_default.typeOf.object("sphere", sphere);
        Check_default.typeOf.object("occluder", occluder);
        return !occluder.isBoundingSphereVisible(sphere);
      };
      BoundingSphere.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && Cartesian3_default.equals(left.center, right.center) && left.radius === right.radius;
      };
      BoundingSphere.prototype.intersectPlane = function(plane) {
        return BoundingSphere.intersectPlane(this, plane);
      };
      BoundingSphere.prototype.distanceSquaredTo = function(cartesian11) {
        return BoundingSphere.distanceSquaredTo(this, cartesian11);
      };
      BoundingSphere.prototype.computePlaneDistances = function(position, direction2, result) {
        return BoundingSphere.computePlaneDistances(
          this,
          position,
          direction2,
          result
        );
      };
      BoundingSphere.prototype.isOccluded = function(occluder) {
        return BoundingSphere.isOccluded(this, occluder);
      };
      BoundingSphere.prototype.equals = function(right) {
        return BoundingSphere.equals(this, right);
      };
      BoundingSphere.prototype.clone = function(result) {
        return BoundingSphere.clone(this, result);
      };
      BoundingSphere.prototype.volume = function() {
        const radius = this.radius;
        return volumeConstant * radius * radius * radius;
      };
      BoundingSphere_default = BoundingSphere;
    }
  });

  // packages/engine/Source/Core/WebGLConstants.js
  var WebGLConstants, WebGLConstants_default;
  var init_WebGLConstants = __esm({
    "packages/engine/Source/Core/WebGLConstants.js"() {
      WebGLConstants = {
        DEPTH_BUFFER_BIT: 256,
        STENCIL_BUFFER_BIT: 1024,
        COLOR_BUFFER_BIT: 16384,
        POINTS: 0,
        LINES: 1,
        LINE_LOOP: 2,
        LINE_STRIP: 3,
        TRIANGLES: 4,
        TRIANGLE_STRIP: 5,
        TRIANGLE_FAN: 6,
        ZERO: 0,
        ONE: 1,
        SRC_COLOR: 768,
        ONE_MINUS_SRC_COLOR: 769,
        SRC_ALPHA: 770,
        ONE_MINUS_SRC_ALPHA: 771,
        DST_ALPHA: 772,
        ONE_MINUS_DST_ALPHA: 773,
        DST_COLOR: 774,
        ONE_MINUS_DST_COLOR: 775,
        SRC_ALPHA_SATURATE: 776,
        FUNC_ADD: 32774,
        BLEND_EQUATION: 32777,
        BLEND_EQUATION_RGB: 32777,
        // same as BLEND_EQUATION
        BLEND_EQUATION_ALPHA: 34877,
        FUNC_SUBTRACT: 32778,
        FUNC_REVERSE_SUBTRACT: 32779,
        BLEND_DST_RGB: 32968,
        BLEND_SRC_RGB: 32969,
        BLEND_DST_ALPHA: 32970,
        BLEND_SRC_ALPHA: 32971,
        CONSTANT_COLOR: 32769,
        ONE_MINUS_CONSTANT_COLOR: 32770,
        CONSTANT_ALPHA: 32771,
        ONE_MINUS_CONSTANT_ALPHA: 32772,
        BLEND_COLOR: 32773,
        ARRAY_BUFFER: 34962,
        ELEMENT_ARRAY_BUFFER: 34963,
        ARRAY_BUFFER_BINDING: 34964,
        ELEMENT_ARRAY_BUFFER_BINDING: 34965,
        STREAM_DRAW: 35040,
        STATIC_DRAW: 35044,
        DYNAMIC_DRAW: 35048,
        BUFFER_SIZE: 34660,
        BUFFER_USAGE: 34661,
        CURRENT_VERTEX_ATTRIB: 34342,
        FRONT: 1028,
        BACK: 1029,
        FRONT_AND_BACK: 1032,
        CULL_FACE: 2884,
        BLEND: 3042,
        DITHER: 3024,
        STENCIL_TEST: 2960,
        DEPTH_TEST: 2929,
        SCISSOR_TEST: 3089,
        POLYGON_OFFSET_FILL: 32823,
        SAMPLE_ALPHA_TO_COVERAGE: 32926,
        SAMPLE_COVERAGE: 32928,
        NO_ERROR: 0,
        INVALID_ENUM: 1280,
        INVALID_VALUE: 1281,
        INVALID_OPERATION: 1282,
        OUT_OF_MEMORY: 1285,
        CW: 2304,
        CCW: 2305,
        LINE_WIDTH: 2849,
        ALIASED_POINT_SIZE_RANGE: 33901,
        ALIASED_LINE_WIDTH_RANGE: 33902,
        CULL_FACE_MODE: 2885,
        FRONT_FACE: 2886,
        DEPTH_RANGE: 2928,
        DEPTH_WRITEMASK: 2930,
        DEPTH_CLEAR_VALUE: 2931,
        DEPTH_FUNC: 2932,
        STENCIL_CLEAR_VALUE: 2961,
        STENCIL_FUNC: 2962,
        STENCIL_FAIL: 2964,
        STENCIL_PASS_DEPTH_FAIL: 2965,
        STENCIL_PASS_DEPTH_PASS: 2966,
        STENCIL_REF: 2967,
        STENCIL_VALUE_MASK: 2963,
        STENCIL_WRITEMASK: 2968,
        STENCIL_BACK_FUNC: 34816,
        STENCIL_BACK_FAIL: 34817,
        STENCIL_BACK_PASS_DEPTH_FAIL: 34818,
        STENCIL_BACK_PASS_DEPTH_PASS: 34819,
        STENCIL_BACK_REF: 36003,
        STENCIL_BACK_VALUE_MASK: 36004,
        STENCIL_BACK_WRITEMASK: 36005,
        VIEWPORT: 2978,
        SCISSOR_BOX: 3088,
        COLOR_CLEAR_VALUE: 3106,
        COLOR_WRITEMASK: 3107,
        UNPACK_ALIGNMENT: 3317,
        PACK_ALIGNMENT: 3333,
        MAX_TEXTURE_SIZE: 3379,
        MAX_VIEWPORT_DIMS: 3386,
        SUBPIXEL_BITS: 3408,
        RED_BITS: 3410,
        GREEN_BITS: 3411,
        BLUE_BITS: 3412,
        ALPHA_BITS: 3413,
        DEPTH_BITS: 3414,
        STENCIL_BITS: 3415,
        POLYGON_OFFSET_UNITS: 10752,
        POLYGON_OFFSET_FACTOR: 32824,
        TEXTURE_BINDING_2D: 32873,
        SAMPLE_BUFFERS: 32936,
        SAMPLES: 32937,
        SAMPLE_COVERAGE_VALUE: 32938,
        SAMPLE_COVERAGE_INVERT: 32939,
        COMPRESSED_TEXTURE_FORMATS: 34467,
        DONT_CARE: 4352,
        FASTEST: 4353,
        NICEST: 4354,
        GENERATE_MIPMAP_HINT: 33170,
        BYTE: 5120,
        UNSIGNED_BYTE: 5121,
        SHORT: 5122,
        UNSIGNED_SHORT: 5123,
        INT: 5124,
        UNSIGNED_INT: 5125,
        FLOAT: 5126,
        DEPTH_COMPONENT: 6402,
        ALPHA: 6406,
        RGB: 6407,
        RGBA: 6408,
        LUMINANCE: 6409,
        LUMINANCE_ALPHA: 6410,
        UNSIGNED_SHORT_4_4_4_4: 32819,
        UNSIGNED_SHORT_5_5_5_1: 32820,
        UNSIGNED_SHORT_5_6_5: 33635,
        FRAGMENT_SHADER: 35632,
        VERTEX_SHADER: 35633,
        MAX_VERTEX_ATTRIBS: 34921,
        MAX_VERTEX_UNIFORM_VECTORS: 36347,
        MAX_VARYING_VECTORS: 36348,
        MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661,
        MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660,
        MAX_TEXTURE_IMAGE_UNITS: 34930,
        MAX_FRAGMENT_UNIFORM_VECTORS: 36349,
        SHADER_TYPE: 35663,
        DELETE_STATUS: 35712,
        LINK_STATUS: 35714,
        VALIDATE_STATUS: 35715,
        ATTACHED_SHADERS: 35717,
        ACTIVE_UNIFORMS: 35718,
        ACTIVE_ATTRIBUTES: 35721,
        SHADING_LANGUAGE_VERSION: 35724,
        CURRENT_PROGRAM: 35725,
        NEVER: 512,
        LESS: 513,
        EQUAL: 514,
        LEQUAL: 515,
        GREATER: 516,
        NOTEQUAL: 517,
        GEQUAL: 518,
        ALWAYS: 519,
        KEEP: 7680,
        REPLACE: 7681,
        INCR: 7682,
        DECR: 7683,
        INVERT: 5386,
        INCR_WRAP: 34055,
        DECR_WRAP: 34056,
        VENDOR: 7936,
        RENDERER: 7937,
        VERSION: 7938,
        NEAREST: 9728,
        LINEAR: 9729,
        NEAREST_MIPMAP_NEAREST: 9984,
        LINEAR_MIPMAP_NEAREST: 9985,
        NEAREST_MIPMAP_LINEAR: 9986,
        LINEAR_MIPMAP_LINEAR: 9987,
        TEXTURE_MAG_FILTER: 10240,
        TEXTURE_MIN_FILTER: 10241,
        TEXTURE_WRAP_S: 10242,
        TEXTURE_WRAP_T: 10243,
        TEXTURE_2D: 3553,
        TEXTURE: 5890,
        TEXTURE_CUBE_MAP: 34067,
        TEXTURE_BINDING_CUBE_MAP: 34068,
        TEXTURE_CUBE_MAP_POSITIVE_X: 34069,
        TEXTURE_CUBE_MAP_NEGATIVE_X: 34070,
        TEXTURE_CUBE_MAP_POSITIVE_Y: 34071,
        TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072,
        TEXTURE_CUBE_MAP_POSITIVE_Z: 34073,
        TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074,
        MAX_CUBE_MAP_TEXTURE_SIZE: 34076,
        TEXTURE0: 33984,
        TEXTURE1: 33985,
        TEXTURE2: 33986,
        TEXTURE3: 33987,
        TEXTURE4: 33988,
        TEXTURE5: 33989,
        TEXTURE6: 33990,
        TEXTURE7: 33991,
        TEXTURE8: 33992,
        TEXTURE9: 33993,
        TEXTURE10: 33994,
        TEXTURE11: 33995,
        TEXTURE12: 33996,
        TEXTURE13: 33997,
        TEXTURE14: 33998,
        TEXTURE15: 33999,
        TEXTURE16: 34e3,
        TEXTURE17: 34001,
        TEXTURE18: 34002,
        TEXTURE19: 34003,
        TEXTURE20: 34004,
        TEXTURE21: 34005,
        TEXTURE22: 34006,
        TEXTURE23: 34007,
        TEXTURE24: 34008,
        TEXTURE25: 34009,
        TEXTURE26: 34010,
        TEXTURE27: 34011,
        TEXTURE28: 34012,
        TEXTURE29: 34013,
        TEXTURE30: 34014,
        TEXTURE31: 34015,
        ACTIVE_TEXTURE: 34016,
        REPEAT: 10497,
        CLAMP_TO_EDGE: 33071,
        MIRRORED_REPEAT: 33648,
        FLOAT_VEC2: 35664,
        FLOAT_VEC3: 35665,
        FLOAT_VEC4: 35666,
        INT_VEC2: 35667,
        INT_VEC3: 35668,
        INT_VEC4: 35669,
        BOOL: 35670,
        BOOL_VEC2: 35671,
        BOOL_VEC3: 35672,
        BOOL_VEC4: 35673,
        FLOAT_MAT2: 35674,
        FLOAT_MAT3: 35675,
        FLOAT_MAT4: 35676,
        SAMPLER_2D: 35678,
        SAMPLER_CUBE: 35680,
        VERTEX_ATTRIB_ARRAY_ENABLED: 34338,
        VERTEX_ATTRIB_ARRAY_SIZE: 34339,
        VERTEX_ATTRIB_ARRAY_STRIDE: 34340,
        VERTEX_ATTRIB_ARRAY_TYPE: 34341,
        VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922,
        VERTEX_ATTRIB_ARRAY_POINTER: 34373,
        VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975,
        IMPLEMENTATION_COLOR_READ_TYPE: 35738,
        IMPLEMENTATION_COLOR_READ_FORMAT: 35739,
        COMPILE_STATUS: 35713,
        LOW_FLOAT: 36336,
        MEDIUM_FLOAT: 36337,
        HIGH_FLOAT: 36338,
        LOW_INT: 36339,
        MEDIUM_INT: 36340,
        HIGH_INT: 36341,
        FRAMEBUFFER: 36160,
        RENDERBUFFER: 36161,
        RGBA4: 32854,
        RGB5_A1: 32855,
        RGB565: 36194,
        DEPTH_COMPONENT16: 33189,
        STENCIL_INDEX: 6401,
        STENCIL_INDEX8: 36168,
        DEPTH_STENCIL: 34041,
        RENDERBUFFER_WIDTH: 36162,
        RENDERBUFFER_HEIGHT: 36163,
        RENDERBUFFER_INTERNAL_FORMAT: 36164,
        RENDERBUFFER_RED_SIZE: 36176,
        RENDERBUFFER_GREEN_SIZE: 36177,
        RENDERBUFFER_BLUE_SIZE: 36178,
        RENDERBUFFER_ALPHA_SIZE: 36179,
        RENDERBUFFER_DEPTH_SIZE: 36180,
        RENDERBUFFER_STENCIL_SIZE: 36181,
        FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048,
        FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049,
        FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050,
        FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051,
        COLOR_ATTACHMENT0: 36064,
        DEPTH_ATTACHMENT: 36096,
        STENCIL_ATTACHMENT: 36128,
        DEPTH_STENCIL_ATTACHMENT: 33306,
        NONE: 0,
        FRAMEBUFFER_COMPLETE: 36053,
        FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054,
        FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055,
        FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057,
        FRAMEBUFFER_UNSUPPORTED: 36061,
        FRAMEBUFFER_BINDING: 36006,
        RENDERBUFFER_BINDING: 36007,
        MAX_RENDERBUFFER_SIZE: 34024,
        INVALID_FRAMEBUFFER_OPERATION: 1286,
        UNPACK_FLIP_Y_WEBGL: 37440,
        UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441,
        CONTEXT_LOST_WEBGL: 37442,
        UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443,
        BROWSER_DEFAULT_WEBGL: 37444,
        // WEBGL_compressed_texture_s3tc
        COMPRESSED_RGB_S3TC_DXT1_EXT: 33776,
        COMPRESSED_RGBA_S3TC_DXT1_EXT: 33777,
        COMPRESSED_RGBA_S3TC_DXT3_EXT: 33778,
        COMPRESSED_RGBA_S3TC_DXT5_EXT: 33779,
        // WEBGL_compressed_texture_pvrtc
        COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 35840,
        COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 35841,
        COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 35842,
        COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 35843,
        // WEBGL_compressed_texture_astc
        COMPRESSED_RGBA_ASTC_4x4_WEBGL: 37808,
        // WEBGL_compressed_texture_etc1
        COMPRESSED_RGB_ETC1_WEBGL: 36196,
        // EXT_texture_compression_bptc
        COMPRESSED_RGBA_BPTC_UNORM: 36492,
        // EXT_color_buffer_half_float
        HALF_FLOAT_OES: 36193,
        // Desktop OpenGL
        DOUBLE: 5130,
        // WebGL 2
        READ_BUFFER: 3074,
        UNPACK_ROW_LENGTH: 3314,
        UNPACK_SKIP_ROWS: 3315,
        UNPACK_SKIP_PIXELS: 3316,
        PACK_ROW_LENGTH: 3330,
        PACK_SKIP_ROWS: 3331,
        PACK_SKIP_PIXELS: 3332,
        COLOR: 6144,
        DEPTH: 6145,
        STENCIL: 6146,
        RED: 6403,
        RGB8: 32849,
        RGBA8: 32856,
        RGB10_A2: 32857,
        TEXTURE_BINDING_3D: 32874,
        UNPACK_SKIP_IMAGES: 32877,
        UNPACK_IMAGE_HEIGHT: 32878,
        TEXTURE_3D: 32879,
        TEXTURE_WRAP_R: 32882,
        MAX_3D_TEXTURE_SIZE: 32883,
        UNSIGNED_INT_2_10_10_10_REV: 33640,
        MAX_ELEMENTS_VERTICES: 33e3,
        MAX_ELEMENTS_INDICES: 33001,
        TEXTURE_MIN_LOD: 33082,
        TEXTURE_MAX_LOD: 33083,
        TEXTURE_BASE_LEVEL: 33084,
        TEXTURE_MAX_LEVEL: 33085,
        MIN: 32775,
        MAX: 32776,
        DEPTH_COMPONENT24: 33190,
        MAX_TEXTURE_LOD_BIAS: 34045,
        TEXTURE_COMPARE_MODE: 34892,
        TEXTURE_COMPARE_FUNC: 34893,
        CURRENT_QUERY: 34917,
        QUERY_RESULT: 34918,
        QUERY_RESULT_AVAILABLE: 34919,
        STREAM_READ: 35041,
        STREAM_COPY: 35042,
        STATIC_READ: 35045,
        STATIC_COPY: 35046,
        DYNAMIC_READ: 35049,
        DYNAMIC_COPY: 35050,
        MAX_DRAW_BUFFERS: 34852,
        DRAW_BUFFER0: 34853,
        DRAW_BUFFER1: 34854,
        DRAW_BUFFER2: 34855,
        DRAW_BUFFER3: 34856,
        DRAW_BUFFER4: 34857,
        DRAW_BUFFER5: 34858,
        DRAW_BUFFER6: 34859,
        DRAW_BUFFER7: 34860,
        DRAW_BUFFER8: 34861,
        DRAW_BUFFER9: 34862,
        DRAW_BUFFER10: 34863,
        DRAW_BUFFER11: 34864,
        DRAW_BUFFER12: 34865,
        DRAW_BUFFER13: 34866,
        DRAW_BUFFER14: 34867,
        DRAW_BUFFER15: 34868,
        MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657,
        MAX_VERTEX_UNIFORM_COMPONENTS: 35658,
        SAMPLER_3D: 35679,
        SAMPLER_2D_SHADOW: 35682,
        FRAGMENT_SHADER_DERIVATIVE_HINT: 35723,
        PIXEL_PACK_BUFFER: 35051,
        PIXEL_UNPACK_BUFFER: 35052,
        PIXEL_PACK_BUFFER_BINDING: 35053,
        PIXEL_UNPACK_BUFFER_BINDING: 35055,
        FLOAT_MAT2x3: 35685,
        FLOAT_MAT2x4: 35686,
        FLOAT_MAT3x2: 35687,
        FLOAT_MAT3x4: 35688,
        FLOAT_MAT4x2: 35689,
        FLOAT_MAT4x3: 35690,
        SRGB: 35904,
        SRGB8: 35905,
        SRGB8_ALPHA8: 35907,
        COMPARE_REF_TO_TEXTURE: 34894,
        RGBA32F: 34836,
        RGB32F: 34837,
        RGBA16F: 34842,
        RGB16F: 34843,
        VERTEX_ATTRIB_ARRAY_INTEGER: 35069,
        MAX_ARRAY_TEXTURE_LAYERS: 35071,
        MIN_PROGRAM_TEXEL_OFFSET: 35076,
        MAX_PROGRAM_TEXEL_OFFSET: 35077,
        MAX_VARYING_COMPONENTS: 35659,
        TEXTURE_2D_ARRAY: 35866,
        TEXTURE_BINDING_2D_ARRAY: 35869,
        R11F_G11F_B10F: 35898,
        UNSIGNED_INT_10F_11F_11F_REV: 35899,
        RGB9_E5: 35901,
        UNSIGNED_INT_5_9_9_9_REV: 35902,
        TRANSFORM_FEEDBACK_BUFFER_MODE: 35967,
        MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968,
        TRANSFORM_FEEDBACK_VARYINGS: 35971,
        TRANSFORM_FEEDBACK_BUFFER_START: 35972,
        TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973,
        TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976,
        RASTERIZER_DISCARD: 35977,
        MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978,
        MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979,
        INTERLEAVED_ATTRIBS: 35980,
        SEPARATE_ATTRIBS: 35981,
        TRANSFORM_FEEDBACK_BUFFER: 35982,
        TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983,
        RGBA32UI: 36208,
        RGB32UI: 36209,
        RGBA16UI: 36214,
        RGB16UI: 36215,
        RGBA8UI: 36220,
        RGB8UI: 36221,
        RGBA32I: 36226,
        RGB32I: 36227,
        RGBA16I: 36232,
        RGB16I: 36233,
        RGBA8I: 36238,
        RGB8I: 36239,
        RED_INTEGER: 36244,
        RGB_INTEGER: 36248,
        RGBA_INTEGER: 36249,
        SAMPLER_2D_ARRAY: 36289,
        SAMPLER_2D_ARRAY_SHADOW: 36292,
        SAMPLER_CUBE_SHADOW: 36293,
        UNSIGNED_INT_VEC2: 36294,
        UNSIGNED_INT_VEC3: 36295,
        UNSIGNED_INT_VEC4: 36296,
        INT_SAMPLER_2D: 36298,
        INT_SAMPLER_3D: 36299,
        INT_SAMPLER_CUBE: 36300,
        INT_SAMPLER_2D_ARRAY: 36303,
        UNSIGNED_INT_SAMPLER_2D: 36306,
        UNSIGNED_INT_SAMPLER_3D: 36307,
        UNSIGNED_INT_SAMPLER_CUBE: 36308,
        UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311,
        DEPTH_COMPONENT32F: 36012,
        DEPTH32F_STENCIL8: 36013,
        FLOAT_32_UNSIGNED_INT_24_8_REV: 36269,
        FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296,
        FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297,
        FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298,
        FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299,
        FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300,
        FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301,
        FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302,
        FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303,
        FRAMEBUFFER_DEFAULT: 33304,
        UNSIGNED_INT_24_8: 34042,
        DEPTH24_STENCIL8: 35056,
        UNSIGNED_NORMALIZED: 35863,
        DRAW_FRAMEBUFFER_BINDING: 36006,
        // Same as FRAMEBUFFER_BINDING
        READ_FRAMEBUFFER: 36008,
        DRAW_FRAMEBUFFER: 36009,
        READ_FRAMEBUFFER_BINDING: 36010,
        RENDERBUFFER_SAMPLES: 36011,
        FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052,
        MAX_COLOR_ATTACHMENTS: 36063,
        COLOR_ATTACHMENT1: 36065,
        COLOR_ATTACHMENT2: 36066,
        COLOR_ATTACHMENT3: 36067,
        COLOR_ATTACHMENT4: 36068,
        COLOR_ATTACHMENT5: 36069,
        COLOR_ATTACHMENT6: 36070,
        COLOR_ATTACHMENT7: 36071,
        COLOR_ATTACHMENT8: 36072,
        COLOR_ATTACHMENT9: 36073,
        COLOR_ATTACHMENT10: 36074,
        COLOR_ATTACHMENT11: 36075,
        COLOR_ATTACHMENT12: 36076,
        COLOR_ATTACHMENT13: 36077,
        COLOR_ATTACHMENT14: 36078,
        COLOR_ATTACHMENT15: 36079,
        FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182,
        MAX_SAMPLES: 36183,
        HALF_FLOAT: 5131,
        RG: 33319,
        RG_INTEGER: 33320,
        R8: 33321,
        RG8: 33323,
        R16F: 33325,
        R32F: 33326,
        RG16F: 33327,
        RG32F: 33328,
        R8I: 33329,
        R8UI: 33330,
        R16I: 33331,
        R16UI: 33332,
        R32I: 33333,
        R32UI: 33334,
        RG8I: 33335,
        RG8UI: 33336,
        RG16I: 33337,
        RG16UI: 33338,
        RG32I: 33339,
        RG32UI: 33340,
        VERTEX_ARRAY_BINDING: 34229,
        R8_SNORM: 36756,
        RG8_SNORM: 36757,
        RGB8_SNORM: 36758,
        RGBA8_SNORM: 36759,
        SIGNED_NORMALIZED: 36764,
        COPY_READ_BUFFER: 36662,
        COPY_WRITE_BUFFER: 36663,
        COPY_READ_BUFFER_BINDING: 36662,
        // Same as COPY_READ_BUFFER
        COPY_WRITE_BUFFER_BINDING: 36663,
        // Same as COPY_WRITE_BUFFER
        UNIFORM_BUFFER: 35345,
        UNIFORM_BUFFER_BINDING: 35368,
        UNIFORM_BUFFER_START: 35369,
        UNIFORM_BUFFER_SIZE: 35370,
        MAX_VERTEX_UNIFORM_BLOCKS: 35371,
        MAX_FRAGMENT_UNIFORM_BLOCKS: 35373,
        MAX_COMBINED_UNIFORM_BLOCKS: 35374,
        MAX_UNIFORM_BUFFER_BINDINGS: 35375,
        MAX_UNIFORM_BLOCK_SIZE: 35376,
        MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377,
        MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379,
        UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380,
        ACTIVE_UNIFORM_BLOCKS: 35382,
        UNIFORM_TYPE: 35383,
        UNIFORM_SIZE: 35384,
        UNIFORM_BLOCK_INDEX: 35386,
        UNIFORM_OFFSET: 35387,
        UNIFORM_ARRAY_STRIDE: 35388,
        UNIFORM_MATRIX_STRIDE: 35389,
        UNIFORM_IS_ROW_MAJOR: 35390,
        UNIFORM_BLOCK_BINDING: 35391,
        UNIFORM_BLOCK_DATA_SIZE: 35392,
        UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394,
        UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395,
        UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396,
        UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398,
        INVALID_INDEX: 4294967295,
        MAX_VERTEX_OUTPUT_COMPONENTS: 37154,
        MAX_FRAGMENT_INPUT_COMPONENTS: 37157,
        MAX_SERVER_WAIT_TIMEOUT: 37137,
        OBJECT_TYPE: 37138,
        SYNC_CONDITION: 37139,
        SYNC_STATUS: 37140,
        SYNC_FLAGS: 37141,
        SYNC_FENCE: 37142,
        SYNC_GPU_COMMANDS_COMPLETE: 37143,
        UNSIGNALED: 37144,
        SIGNALED: 37145,
        ALREADY_SIGNALED: 37146,
        TIMEOUT_EXPIRED: 37147,
        CONDITION_SATISFIED: 37148,
        WAIT_FAILED: 37149,
        SYNC_FLUSH_COMMANDS_BIT: 1,
        VERTEX_ATTRIB_ARRAY_DIVISOR: 35070,
        ANY_SAMPLES_PASSED: 35887,
        ANY_SAMPLES_PASSED_CONSERVATIVE: 36202,
        SAMPLER_BINDING: 35097,
        RGB10_A2UI: 36975,
        INT_2_10_10_10_REV: 36255,
        TRANSFORM_FEEDBACK: 36386,
        TRANSFORM_FEEDBACK_PAUSED: 36387,
        TRANSFORM_FEEDBACK_ACTIVE: 36388,
        TRANSFORM_FEEDBACK_BINDING: 36389,
        COMPRESSED_R11_EAC: 37488,
        COMPRESSED_SIGNED_R11_EAC: 37489,
        COMPRESSED_RG11_EAC: 37490,
        COMPRESSED_SIGNED_RG11_EAC: 37491,
        COMPRESSED_RGB8_ETC2: 37492,
        COMPRESSED_SRGB8_ETC2: 37493,
        COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 37494,
        COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 37495,
        COMPRESSED_RGBA8_ETC2_EAC: 37496,
        COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 37497,
        TEXTURE_IMMUTABLE_FORMAT: 37167,
        MAX_ELEMENT_INDEX: 36203,
        TEXTURE_IMMUTABLE_LEVELS: 33503,
        // Extensions
        MAX_TEXTURE_MAX_ANISOTROPY_EXT: 34047
      };
      WebGLConstants_default = Object.freeze(WebGLConstants);
    }
  });

  // packages/engine/Source/Core/ComponentDatatype.js
  var ComponentDatatype, ComponentDatatype_default;
  var init_ComponentDatatype = __esm({
    "packages/engine/Source/Core/ComponentDatatype.js"() {
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_WebGLConstants();
      ComponentDatatype = {
        /**
         * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type
         * of an element in <code>Int8Array</code>.
         *
         * @type {number}
         * @constant
         */
        BYTE: WebGLConstants_default.BYTE,
        /**
         * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type
         * of an element in <code>Uint8Array</code>.
         *
         * @type {number}
         * @constant
         */
        UNSIGNED_BYTE: WebGLConstants_default.UNSIGNED_BYTE,
        /**
         * 16-bit signed short corresponding to <code>SHORT</code> and the type
         * of an element in <code>Int16Array</code>.
         *
         * @type {number}
         * @constant
         */
        SHORT: WebGLConstants_default.SHORT,
        /**
         * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type
         * of an element in <code>Uint16Array</code>.
         *
         * @type {number}
         * @constant
         */
        UNSIGNED_SHORT: WebGLConstants_default.UNSIGNED_SHORT,
        /**
         * 32-bit signed int corresponding to <code>INT</code> and the type
         * of an element in <code>Int32Array</code>.
         *
         * @memberOf ComponentDatatype
         *
         * @type {number}
         * @constant
         */
        INT: WebGLConstants_default.INT,
        /**
         * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type
         * of an element in <code>Uint32Array</code>.
         *
         * @memberOf ComponentDatatype
         *
         * @type {number}
         * @constant
         */
        UNSIGNED_INT: WebGLConstants_default.UNSIGNED_INT,
        /**
         * 32-bit floating-point corresponding to <code>FLOAT</code> and the type
         * of an element in <code>Float32Array</code>.
         *
         * @type {number}
         * @constant
         */
        FLOAT: WebGLConstants_default.FLOAT,
        /**
         * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;
         * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})
         * and the type of an element in <code>Float64Array</code>.
         *
         * @memberOf ComponentDatatype
         *
         * @type {number}
         * @constant
         * @default 0x140A
         */
        DOUBLE: WebGLConstants_default.DOUBLE
      };
      ComponentDatatype.getSizeInBytes = function(componentDatatype) {
        if (!defined_default(componentDatatype)) {
          throw new DeveloperError_default("value is required.");
        }
        switch (componentDatatype) {
          case ComponentDatatype.BYTE:
            return Int8Array.BYTES_PER_ELEMENT;
          case ComponentDatatype.UNSIGNED_BYTE:
            return Uint8Array.BYTES_PER_ELEMENT;
          case ComponentDatatype.SHORT:
            return Int16Array.BYTES_PER_ELEMENT;
          case ComponentDatatype.UNSIGNED_SHORT:
            return Uint16Array.BYTES_PER_ELEMENT;
          case ComponentDatatype.INT:
            return Int32Array.BYTES_PER_ELEMENT;
          case ComponentDatatype.UNSIGNED_INT:
            return Uint32Array.BYTES_PER_ELEMENT;
          case ComponentDatatype.FLOAT:
            return Float32Array.BYTES_PER_ELEMENT;
          case ComponentDatatype.DOUBLE:
            return Float64Array.BYTES_PER_ELEMENT;
          default:
            throw new DeveloperError_default("componentDatatype is not a valid value.");
        }
      };
      ComponentDatatype.fromTypedArray = function(array) {
        if (array instanceof Int8Array) {
          return ComponentDatatype.BYTE;
        }
        if (array instanceof Uint8Array) {
          return ComponentDatatype.UNSIGNED_BYTE;
        }
        if (array instanceof Int16Array) {
          return ComponentDatatype.SHORT;
        }
        if (array instanceof Uint16Array) {
          return ComponentDatatype.UNSIGNED_SHORT;
        }
        if (array instanceof Int32Array) {
          return ComponentDatatype.INT;
        }
        if (array instanceof Uint32Array) {
          return ComponentDatatype.UNSIGNED_INT;
        }
        if (array instanceof Float32Array) {
          return ComponentDatatype.FLOAT;
        }
        if (array instanceof Float64Array) {
          return ComponentDatatype.DOUBLE;
        }
        throw new DeveloperError_default(
          "array must be an Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, or Float64Array."
        );
      };
      ComponentDatatype.validate = function(componentDatatype) {
        return defined_default(componentDatatype) && (componentDatatype === ComponentDatatype.BYTE || componentDatatype === ComponentDatatype.UNSIGNED_BYTE || componentDatatype === ComponentDatatype.SHORT || componentDatatype === ComponentDatatype.UNSIGNED_SHORT || componentDatatype === ComponentDatatype.INT || componentDatatype === ComponentDatatype.UNSIGNED_INT || componentDatatype === ComponentDatatype.FLOAT || componentDatatype === ComponentDatatype.DOUBLE);
      };
      ComponentDatatype.createTypedArray = function(componentDatatype, valuesOrLength) {
        if (!defined_default(componentDatatype)) {
          throw new DeveloperError_default("componentDatatype is required.");
        }
        if (!defined_default(valuesOrLength)) {
          throw new DeveloperError_default("valuesOrLength is required.");
        }
        switch (componentDatatype) {
          case ComponentDatatype.BYTE:
            return new Int8Array(valuesOrLength);
          case ComponentDatatype.UNSIGNED_BYTE:
            return new Uint8Array(valuesOrLength);
          case ComponentDatatype.SHORT:
            return new Int16Array(valuesOrLength);
          case ComponentDatatype.UNSIGNED_SHORT:
            return new Uint16Array(valuesOrLength);
          case ComponentDatatype.INT:
            return new Int32Array(valuesOrLength);
          case ComponentDatatype.UNSIGNED_INT:
            return new Uint32Array(valuesOrLength);
          case ComponentDatatype.FLOAT:
            return new Float32Array(valuesOrLength);
          case ComponentDatatype.DOUBLE:
            return new Float64Array(valuesOrLength);
          default:
            throw new DeveloperError_default("componentDatatype is not a valid value.");
        }
      };
      ComponentDatatype.createArrayBufferView = function(componentDatatype, buffer, byteOffset, length) {
        if (!defined_default(componentDatatype)) {
          throw new DeveloperError_default("componentDatatype is required.");
        }
        if (!defined_default(buffer)) {
          throw new DeveloperError_default("buffer is required.");
        }
        byteOffset = defaultValue_default(byteOffset, 0);
        length = defaultValue_default(
          length,
          (buffer.byteLength - byteOffset) / ComponentDatatype.getSizeInBytes(componentDatatype)
        );
        switch (componentDatatype) {
          case ComponentDatatype.BYTE:
            return new Int8Array(buffer, byteOffset, length);
          case ComponentDatatype.UNSIGNED_BYTE:
            return new Uint8Array(buffer, byteOffset, length);
          case ComponentDatatype.SHORT:
            return new Int16Array(buffer, byteOffset, length);
          case ComponentDatatype.UNSIGNED_SHORT:
            return new Uint16Array(buffer, byteOffset, length);
          case ComponentDatatype.INT:
            return new Int32Array(buffer, byteOffset, length);
          case ComponentDatatype.UNSIGNED_INT:
            return new Uint32Array(buffer, byteOffset, length);
          case ComponentDatatype.FLOAT:
            return new Float32Array(buffer, byteOffset, length);
          case ComponentDatatype.DOUBLE:
            return new Float64Array(buffer, byteOffset, length);
          default:
            throw new DeveloperError_default("componentDatatype is not a valid value.");
        }
      };
      ComponentDatatype.fromName = function(name) {
        switch (name) {
          case "BYTE":
            return ComponentDatatype.BYTE;
          case "UNSIGNED_BYTE":
            return ComponentDatatype.UNSIGNED_BYTE;
          case "SHORT":
            return ComponentDatatype.SHORT;
          case "UNSIGNED_SHORT":
            return ComponentDatatype.UNSIGNED_SHORT;
          case "INT":
            return ComponentDatatype.INT;
          case "UNSIGNED_INT":
            return ComponentDatatype.UNSIGNED_INT;
          case "FLOAT":
            return ComponentDatatype.FLOAT;
          case "DOUBLE":
            return ComponentDatatype.DOUBLE;
          default:
            throw new DeveloperError_default("name is not a valid value.");
        }
      };
      ComponentDatatype_default = Object.freeze(ComponentDatatype);
    }
  });

  // packages/engine/Source/Core/GeometryType.js
  var GeometryType, GeometryType_default;
  var init_GeometryType = __esm({
    "packages/engine/Source/Core/GeometryType.js"() {
      GeometryType = {
        NONE: 0,
        TRIANGLES: 1,
        LINES: 2,
        POLYLINES: 3
      };
      GeometryType_default = Object.freeze(GeometryType);
    }
  });

  // packages/engine/Source/Core/Matrix2.js
  function Matrix2(column0Row0, column1Row0, column0Row1, column1Row1) {
    this[0] = defaultValue_default(column0Row0, 0);
    this[1] = defaultValue_default(column0Row1, 0);
    this[2] = defaultValue_default(column1Row0, 0);
    this[3] = defaultValue_default(column1Row1, 0);
  }
  var scaleScratch13, scaleScratch23, scratchColumn3, scaleScratch33, scaleScratch43, scaleScratch53, Matrix2_default;
  var init_Matrix2 = __esm({
    "packages/engine/Source/Core/Matrix2.js"() {
      init_Cartesian2();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      Matrix2.packedLength = 4;
      Matrix2.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value[0];
        array[startingIndex++] = value[1];
        array[startingIndex++] = value[2];
        array[startingIndex++] = value[3];
        return array;
      };
      Matrix2.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Matrix2();
        }
        result[0] = array[startingIndex++];
        result[1] = array[startingIndex++];
        result[2] = array[startingIndex++];
        result[3] = array[startingIndex++];
        return result;
      };
      Matrix2.packArray = function(array, result) {
        Check_default.defined("array", array);
        const length = array.length;
        const resultLength = length * 4;
        if (!defined_default(result)) {
          result = new Array(resultLength);
        } else if (!Array.isArray(result) && result.length !== resultLength) {
          throw new DeveloperError_default(
            "If result is a typed array, it must have exactly array.length * 4 elements"
          );
        } else if (result.length !== resultLength) {
          result.length = resultLength;
        }
        for (let i = 0; i < length; ++i) {
          Matrix2.pack(array[i], result, i * 4);
        }
        return result;
      };
      Matrix2.unpackArray = function(array, result) {
        Check_default.defined("array", array);
        Check_default.typeOf.number.greaterThanOrEquals("array.length", array.length, 4);
        if (array.length % 4 !== 0) {
          throw new DeveloperError_default("array length must be a multiple of 4.");
        }
        const length = array.length;
        if (!defined_default(result)) {
          result = new Array(length / 4);
        } else {
          result.length = length / 4;
        }
        for (let i = 0; i < length; i += 4) {
          const index = i / 4;
          result[index] = Matrix2.unpack(array, i, result[index]);
        }
        return result;
      };
      Matrix2.clone = function(matrix, result) {
        if (!defined_default(matrix)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Matrix2(matrix[0], matrix[2], matrix[1], matrix[3]);
        }
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[3];
        return result;
      };
      Matrix2.fromArray = Matrix2.unpack;
      Matrix2.fromColumnMajorArray = function(values, result) {
        Check_default.defined("values", values);
        return Matrix2.clone(values, result);
      };
      Matrix2.fromRowMajorArray = function(values, result) {
        Check_default.defined("values", values);
        if (!defined_default(result)) {
          return new Matrix2(values[0], values[1], values[2], values[3]);
        }
        result[0] = values[0];
        result[1] = values[2];
        result[2] = values[1];
        result[3] = values[3];
        return result;
      };
      Matrix2.fromScale = function(scale, result) {
        Check_default.typeOf.object("scale", scale);
        if (!defined_default(result)) {
          return new Matrix2(scale.x, 0, 0, scale.y);
        }
        result[0] = scale.x;
        result[1] = 0;
        result[2] = 0;
        result[3] = scale.y;
        return result;
      };
      Matrix2.fromUniformScale = function(scale, result) {
        Check_default.typeOf.number("scale", scale);
        if (!defined_default(result)) {
          return new Matrix2(scale, 0, 0, scale);
        }
        result[0] = scale;
        result[1] = 0;
        result[2] = 0;
        result[3] = scale;
        return result;
      };
      Matrix2.fromRotation = function(angle, result) {
        Check_default.typeOf.number("angle", angle);
        const cosAngle = Math.cos(angle);
        const sinAngle = Math.sin(angle);
        if (!defined_default(result)) {
          return new Matrix2(cosAngle, -sinAngle, sinAngle, cosAngle);
        }
        result[0] = cosAngle;
        result[1] = sinAngle;
        result[2] = -sinAngle;
        result[3] = cosAngle;
        return result;
      };
      Matrix2.toArray = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        if (!defined_default(result)) {
          return [matrix[0], matrix[1], matrix[2], matrix[3]];
        }
        result[0] = matrix[0];
        result[1] = matrix[1];
        result[2] = matrix[2];
        result[3] = matrix[3];
        return result;
      };
      Matrix2.getElementIndex = function(column, row) {
        Check_default.typeOf.number.greaterThanOrEquals("row", row, 0);
        Check_default.typeOf.number.lessThanOrEquals("row", row, 1);
        Check_default.typeOf.number.greaterThanOrEquals("column", column, 0);
        Check_default.typeOf.number.lessThanOrEquals("column", column, 1);
        return column * 2 + row;
      };
      Matrix2.getColumn = function(matrix, index, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 1);
        Check_default.typeOf.object("result", result);
        const startIndex = index * 2;
        const x = matrix[startIndex];
        const y = matrix[startIndex + 1];
        result.x = x;
        result.y = y;
        return result;
      };
      Matrix2.setColumn = function(matrix, index, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 1);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result = Matrix2.clone(matrix, result);
        const startIndex = index * 2;
        result[startIndex] = cartesian11.x;
        result[startIndex + 1] = cartesian11.y;
        return result;
      };
      Matrix2.getRow = function(matrix, index, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 1);
        Check_default.typeOf.object("result", result);
        const x = matrix[index];
        const y = matrix[index + 2];
        result.x = x;
        result.y = y;
        return result;
      };
      Matrix2.setRow = function(matrix, index, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        Check_default.typeOf.number.lessThanOrEquals("index", index, 1);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        result = Matrix2.clone(matrix, result);
        result[index] = cartesian11.x;
        result[index + 2] = cartesian11.y;
        return result;
      };
      scaleScratch13 = new Cartesian2_default();
      Matrix2.setScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("scale", scale);
        Check_default.typeOf.object("result", result);
        const existingScale = Matrix2.getScale(matrix, scaleScratch13);
        const scaleRatioX = scale.x / existingScale.x;
        const scaleRatioY = scale.y / existingScale.y;
        result[0] = matrix[0] * scaleRatioX;
        result[1] = matrix[1] * scaleRatioX;
        result[2] = matrix[2] * scaleRatioY;
        result[3] = matrix[3] * scaleRatioY;
        return result;
      };
      scaleScratch23 = new Cartesian2_default();
      Matrix2.setUniformScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scale", scale);
        Check_default.typeOf.object("result", result);
        const existingScale = Matrix2.getScale(matrix, scaleScratch23);
        const scaleRatioX = scale / existingScale.x;
        const scaleRatioY = scale / existingScale.y;
        result[0] = matrix[0] * scaleRatioX;
        result[1] = matrix[1] * scaleRatioX;
        result[2] = matrix[2] * scaleRatioY;
        result[3] = matrix[3] * scaleRatioY;
        return result;
      };
      scratchColumn3 = new Cartesian2_default();
      Matrix2.getScale = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result.x = Cartesian2_default.magnitude(
          Cartesian2_default.fromElements(matrix[0], matrix[1], scratchColumn3)
        );
        result.y = Cartesian2_default.magnitude(
          Cartesian2_default.fromElements(matrix[2], matrix[3], scratchColumn3)
        );
        return result;
      };
      scaleScratch33 = new Cartesian2_default();
      Matrix2.getMaximumScale = function(matrix) {
        Matrix2.getScale(matrix, scaleScratch33);
        return Cartesian2_default.maximumComponent(scaleScratch33);
      };
      scaleScratch43 = new Cartesian2_default();
      Matrix2.setRotation = function(matrix, rotation, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const scale = Matrix2.getScale(matrix, scaleScratch43);
        result[0] = rotation[0] * scale.x;
        result[1] = rotation[1] * scale.x;
        result[2] = rotation[2] * scale.y;
        result[3] = rotation[3] * scale.y;
        return result;
      };
      scaleScratch53 = new Cartesian2_default();
      Matrix2.getRotation = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const scale = Matrix2.getScale(matrix, scaleScratch53);
        result[0] = matrix[0] / scale.x;
        result[1] = matrix[1] / scale.x;
        result[2] = matrix[2] / scale.y;
        result[3] = matrix[3] / scale.y;
        return result;
      };
      Matrix2.multiply = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        const column0Row0 = left[0] * right[0] + left[2] * right[1];
        const column1Row0 = left[0] * right[2] + left[2] * right[3];
        const column0Row1 = left[1] * right[0] + left[3] * right[1];
        const column1Row1 = left[1] * right[2] + left[3] * right[3];
        result[0] = column0Row0;
        result[1] = column0Row1;
        result[2] = column1Row0;
        result[3] = column1Row1;
        return result;
      };
      Matrix2.add = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result[0] = left[0] + right[0];
        result[1] = left[1] + right[1];
        result[2] = left[2] + right[2];
        result[3] = left[3] + right[3];
        return result;
      };
      Matrix2.subtract = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result[0] = left[0] - right[0];
        result[1] = left[1] - right[1];
        result[2] = left[2] - right[2];
        result[3] = left[3] - right[3];
        return result;
      };
      Matrix2.multiplyByVector = function(matrix, cartesian11, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const x = matrix[0] * cartesian11.x + matrix[2] * cartesian11.y;
        const y = matrix[1] * cartesian11.x + matrix[3] * cartesian11.y;
        result.x = x;
        result.y = y;
        return result;
      };
      Matrix2.multiplyByScalar = function(matrix, scalar, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0] * scalar;
        result[1] = matrix[1] * scalar;
        result[2] = matrix[2] * scalar;
        result[3] = matrix[3] * scalar;
        return result;
      };
      Matrix2.multiplyByScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("scale", scale);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0] * scale.x;
        result[1] = matrix[1] * scale.x;
        result[2] = matrix[2] * scale.y;
        result[3] = matrix[3] * scale.y;
        return result;
      };
      Matrix2.multiplyByUniformScale = function(matrix, scale, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.number("scale", scale);
        Check_default.typeOf.object("result", result);
        result[0] = matrix[0] * scale;
        result[1] = matrix[1] * scale;
        result[2] = matrix[2] * scale;
        result[3] = matrix[3] * scale;
        return result;
      };
      Matrix2.negate = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result[0] = -matrix[0];
        result[1] = -matrix[1];
        result[2] = -matrix[2];
        result[3] = -matrix[3];
        return result;
      };
      Matrix2.transpose = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        const column0Row0 = matrix[0];
        const column0Row1 = matrix[2];
        const column1Row0 = matrix[1];
        const column1Row1 = matrix[3];
        result[0] = column0Row0;
        result[1] = column0Row1;
        result[2] = column1Row0;
        result[3] = column1Row1;
        return result;
      };
      Matrix2.abs = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        Check_default.typeOf.object("result", result);
        result[0] = Math.abs(matrix[0]);
        result[1] = Math.abs(matrix[1]);
        result[2] = Math.abs(matrix[2]);
        result[3] = Math.abs(matrix[3]);
        return result;
      };
      Matrix2.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left[0] === right[0] && left[1] === right[1] && left[2] === right[2] && left[3] === right[3];
      };
      Matrix2.equalsArray = function(matrix, array, offset) {
        return matrix[0] === array[offset] && matrix[1] === array[offset + 1] && matrix[2] === array[offset + 2] && matrix[3] === array[offset + 3];
      };
      Matrix2.equalsEpsilon = function(left, right, epsilon) {
        epsilon = defaultValue_default(epsilon, 0);
        return left === right || defined_default(left) && defined_default(right) && Math.abs(left[0] - right[0]) <= epsilon && Math.abs(left[1] - right[1]) <= epsilon && Math.abs(left[2] - right[2]) <= epsilon && Math.abs(left[3] - right[3]) <= epsilon;
      };
      Matrix2.IDENTITY = Object.freeze(new Matrix2(1, 0, 0, 1));
      Matrix2.ZERO = Object.freeze(new Matrix2(0, 0, 0, 0));
      Matrix2.COLUMN0ROW0 = 0;
      Matrix2.COLUMN0ROW1 = 1;
      Matrix2.COLUMN1ROW0 = 2;
      Matrix2.COLUMN1ROW1 = 3;
      Object.defineProperties(Matrix2.prototype, {
        /**
         * Gets the number of items in the collection.
         * @memberof Matrix2.prototype
         *
         * @type {number}
         */
        length: {
          get: function() {
            return Matrix2.packedLength;
          }
        }
      });
      Matrix2.prototype.clone = function(result) {
        return Matrix2.clone(this, result);
      };
      Matrix2.prototype.equals = function(right) {
        return Matrix2.equals(this, right);
      };
      Matrix2.prototype.equalsEpsilon = function(right, epsilon) {
        return Matrix2.equalsEpsilon(this, right, epsilon);
      };
      Matrix2.prototype.toString = function() {
        return `(${this[0]}, ${this[2]})
(${this[1]}, ${this[3]})`;
      };
      Matrix2_default = Matrix2;
    }
  });

  // packages/engine/Source/Core/PrimitiveType.js
  var PrimitiveType, PrimitiveType_default;
  var init_PrimitiveType = __esm({
    "packages/engine/Source/Core/PrimitiveType.js"() {
      init_WebGLConstants();
      PrimitiveType = {
        /**
         * Points primitive where each vertex (or index) is a separate point.
         *
         * @type {number}
         * @constant
         */
        POINTS: WebGLConstants_default.POINTS,
        /**
         * Lines primitive where each two vertices (or indices) is a line segment.  Line segments are not necessarily connected.
         *
         * @type {number}
         * @constant
         */
        LINES: WebGLConstants_default.LINES,
        /**
         * Line loop primitive where each vertex (or index) after the first connects a line to
         * the previous vertex, and the last vertex implicitly connects to the first.
         *
         * @type {number}
         * @constant
         */
        LINE_LOOP: WebGLConstants_default.LINE_LOOP,
        /**
         * Line strip primitive where each vertex (or index) after the first connects a line to the previous vertex.
         *
         * @type {number}
         * @constant
         */
        LINE_STRIP: WebGLConstants_default.LINE_STRIP,
        /**
         * Triangles primitive where each three vertices (or indices) is a triangle.  Triangles do not necessarily share edges.
         *
         * @type {number}
         * @constant
         */
        TRIANGLES: WebGLConstants_default.TRIANGLES,
        /**
         * Triangle strip primitive where each vertex (or index) after the first two connect to
         * the previous two vertices forming a triangle.  For example, this can be used to model a wall.
         *
         * @type {number}
         * @constant
         */
        TRIANGLE_STRIP: WebGLConstants_default.TRIANGLE_STRIP,
        /**
         * Triangle fan primitive where each vertex (or index) after the first two connect to
         * the previous vertex and the first vertex forming a triangle.  For example, this can be used
         * to model a cone or circle.
         *
         * @type {number}
         * @constant
         */
        TRIANGLE_FAN: WebGLConstants_default.TRIANGLE_FAN
      };
      PrimitiveType.isLines = function(primitiveType) {
        return primitiveType === PrimitiveType.LINES || primitiveType === PrimitiveType.LINE_LOOP || primitiveType === PrimitiveType.LINE_STRIP;
      };
      PrimitiveType.isTriangles = function(primitiveType) {
        return primitiveType === PrimitiveType.TRIANGLES || primitiveType === PrimitiveType.TRIANGLE_STRIP || primitiveType === PrimitiveType.TRIANGLE_FAN;
      };
      PrimitiveType.validate = function(primitiveType) {
        return primitiveType === PrimitiveType.POINTS || primitiveType === PrimitiveType.LINES || primitiveType === PrimitiveType.LINE_LOOP || primitiveType === PrimitiveType.LINE_STRIP || primitiveType === PrimitiveType.TRIANGLES || primitiveType === PrimitiveType.TRIANGLE_STRIP || primitiveType === PrimitiveType.TRIANGLE_FAN;
      };
      PrimitiveType_default = Object.freeze(PrimitiveType);
    }
  });

  // packages/engine/Source/Core/Fullscreen.js
  var _supportsFullscreen, _names, Fullscreen, Fullscreen_default;
  var init_Fullscreen = __esm({
    "packages/engine/Source/Core/Fullscreen.js"() {
      init_defined();
      _names = {
        requestFullscreen: void 0,
        exitFullscreen: void 0,
        fullscreenEnabled: void 0,
        fullscreenElement: void 0,
        fullscreenchange: void 0,
        fullscreenerror: void 0
      };
      Fullscreen = {};
      Object.defineProperties(Fullscreen, {
        /**
         * The element that is currently fullscreen, if any.  To simply check if the
         * browser is in fullscreen mode or not, use {@link Fullscreen#fullscreen}.
         * @memberof Fullscreen
         * @type {object}
         * @readonly
         */
        element: {
          get: function() {
            if (!Fullscreen.supportsFullscreen()) {
              return void 0;
            }
            return document[_names.fullscreenElement];
          }
        },
        /**
         * The name of the event on the document that is fired when fullscreen is
         * entered or exited.  This event name is intended for use with addEventListener.
         * In your event handler, to determine if the browser is in fullscreen mode or not,
         * use {@link Fullscreen#fullscreen}.
         * @memberof Fullscreen
         * @type {string}
         * @readonly
         */
        changeEventName: {
          get: function() {
            if (!Fullscreen.supportsFullscreen()) {
              return void 0;
            }
            return _names.fullscreenchange;
          }
        },
        /**
         * The name of the event that is fired when a fullscreen error
         * occurs.  This event name is intended for use with addEventListener.
         * @memberof Fullscreen
         * @type {string}
         * @readonly
         */
        errorEventName: {
          get: function() {
            if (!Fullscreen.supportsFullscreen()) {
              return void 0;
            }
            return _names.fullscreenerror;
          }
        },
        /**
         * Determine whether the browser will allow an element to be made fullscreen, or not.
         * For example, by default, iframes cannot go fullscreen unless the containing page
         * adds an "allowfullscreen" attribute (or prefixed equivalent).
         * @memberof Fullscreen
         * @type {boolean}
         * @readonly
         */
        enabled: {
          get: function() {
            if (!Fullscreen.supportsFullscreen()) {
              return void 0;
            }
            return document[_names.fullscreenEnabled];
          }
        },
        /**
         * Determines if the browser is currently in fullscreen mode.
         * @memberof Fullscreen
         * @type {boolean}
         * @readonly
         */
        fullscreen: {
          get: function() {
            if (!Fullscreen.supportsFullscreen()) {
              return void 0;
            }
            return Fullscreen.element !== null;
          }
        }
      });
      Fullscreen.supportsFullscreen = function() {
        if (defined_default(_supportsFullscreen)) {
          return _supportsFullscreen;
        }
        _supportsFullscreen = false;
        const body = document.body;
        if (typeof body.requestFullscreen === "function") {
          _names.requestFullscreen = "requestFullscreen";
          _names.exitFullscreen = "exitFullscreen";
          _names.fullscreenEnabled = "fullscreenEnabled";
          _names.fullscreenElement = "fullscreenElement";
          _names.fullscreenchange = "fullscreenchange";
          _names.fullscreenerror = "fullscreenerror";
          _supportsFullscreen = true;
          return _supportsFullscreen;
        }
        const prefixes = ["webkit", "moz", "o", "ms", "khtml"];
        let name;
        for (let i = 0, len = prefixes.length; i < len; ++i) {
          const prefix = prefixes[i];
          name = `${prefix}RequestFullscreen`;
          if (typeof body[name] === "function") {
            _names.requestFullscreen = name;
            _supportsFullscreen = true;
          } else {
            name = `${prefix}RequestFullScreen`;
            if (typeof body[name] === "function") {
              _names.requestFullscreen = name;
              _supportsFullscreen = true;
            }
          }
          name = `${prefix}ExitFullscreen`;
          if (typeof document[name] === "function") {
            _names.exitFullscreen = name;
          } else {
            name = `${prefix}CancelFullScreen`;
            if (typeof document[name] === "function") {
              _names.exitFullscreen = name;
            }
          }
          name = `${prefix}FullscreenEnabled`;
          if (document[name] !== void 0) {
            _names.fullscreenEnabled = name;
          } else {
            name = `${prefix}FullScreenEnabled`;
            if (document[name] !== void 0) {
              _names.fullscreenEnabled = name;
            }
          }
          name = `${prefix}FullscreenElement`;
          if (document[name] !== void 0) {
            _names.fullscreenElement = name;
          } else {
            name = `${prefix}FullScreenElement`;
            if (document[name] !== void 0) {
              _names.fullscreenElement = name;
            }
          }
          name = `${prefix}fullscreenchange`;
          if (document[`on${name}`] !== void 0) {
            if (prefix === "ms") {
              name = "MSFullscreenChange";
            }
            _names.fullscreenchange = name;
          }
          name = `${prefix}fullscreenerror`;
          if (document[`on${name}`] !== void 0) {
            if (prefix === "ms") {
              name = "MSFullscreenError";
            }
            _names.fullscreenerror = name;
          }
        }
        return _supportsFullscreen;
      };
      Fullscreen.requestFullscreen = function(element, vrDevice) {
        if (!Fullscreen.supportsFullscreen()) {
          return;
        }
        element[_names.requestFullscreen]({ vrDisplay: vrDevice });
      };
      Fullscreen.exitFullscreen = function() {
        if (!Fullscreen.supportsFullscreen()) {
          return;
        }
        document[_names.exitFullscreen]();
      };
      Fullscreen._names = _names;
      Fullscreen_default = Fullscreen;
    }
  });

  // packages/engine/Source/Core/FeatureDetection.js
  function extractVersion(versionString) {
    const parts = versionString.split(".");
    for (let i = 0, len = parts.length; i < len; ++i) {
      parts[i] = parseInt(parts[i], 10);
    }
    return parts;
  }
  function isChrome() {
    if (!defined_default(isChromeResult)) {
      isChromeResult = false;
      if (!isEdge()) {
        const fields = / Chrome\/([\.0-9]+)/.exec(theNavigator.userAgent);
        if (fields !== null) {
          isChromeResult = true;
          chromeVersionResult = extractVersion(fields[1]);
        }
      }
    }
    return isChromeResult;
  }
  function chromeVersion() {
    return isChrome() && chromeVersionResult;
  }
  function isSafari() {
    if (!defined_default(isSafariResult)) {
      isSafariResult = false;
      if (!isChrome() && !isEdge() && / Safari\/[\.0-9]+/.test(theNavigator.userAgent)) {
        const fields = / Version\/([\.0-9]+)/.exec(theNavigator.userAgent);
        if (fields !== null) {
          isSafariResult = true;
          safariVersionResult = extractVersion(fields[1]);
        }
      }
    }
    return isSafariResult;
  }
  function safariVersion() {
    return isSafari() && safariVersionResult;
  }
  function isWebkit() {
    if (!defined_default(isWebkitResult)) {
      isWebkitResult = false;
      const fields = / AppleWebKit\/([\.0-9]+)(\+?)/.exec(theNavigator.userAgent);
      if (fields !== null) {
        isWebkitResult = true;
        webkitVersionResult = extractVersion(fields[1]);
        webkitVersionResult.isNightly = !!fields[2];
      }
    }
    return isWebkitResult;
  }
  function webkitVersion() {
    return isWebkit() && webkitVersionResult;
  }
  function isInternetExplorer() {
    if (!defined_default(isInternetExplorerResult)) {
      isInternetExplorerResult = false;
      let fields;
      if (theNavigator.appName === "Microsoft Internet Explorer") {
        fields = /MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(theNavigator.userAgent);
        if (fields !== null) {
          isInternetExplorerResult = true;
          internetExplorerVersionResult = extractVersion(fields[1]);
        }
      } else if (theNavigator.appName === "Netscape") {
        fields = /Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(
          theNavigator.userAgent
        );
        if (fields !== null) {
          isInternetExplorerResult = true;
          internetExplorerVersionResult = extractVersion(fields[1]);
        }
      }
    }
    return isInternetExplorerResult;
  }
  function internetExplorerVersion() {
    return isInternetExplorer() && internetExplorerVersionResult;
  }
  function isEdge() {
    if (!defined_default(isEdgeResult)) {
      isEdgeResult = false;
      const fields = / Edg\/([\.0-9]+)/.exec(theNavigator.userAgent);
      if (fields !== null) {
        isEdgeResult = true;
        edgeVersionResult = extractVersion(fields[1]);
      }
    }
    return isEdgeResult;
  }
  function edgeVersion() {
    return isEdge() && edgeVersionResult;
  }
  function isFirefox() {
    if (!defined_default(isFirefoxResult)) {
      isFirefoxResult = false;
      const fields = /Firefox\/([\.0-9]+)/.exec(theNavigator.userAgent);
      if (fields !== null) {
        isFirefoxResult = true;
        firefoxVersionResult = extractVersion(fields[1]);
      }
    }
    return isFirefoxResult;
  }
  function isWindows() {
    if (!defined_default(isWindowsResult)) {
      isWindowsResult = /Windows/i.test(theNavigator.appVersion);
    }
    return isWindowsResult;
  }
  function isIPadOrIOS() {
    if (!defined_default(isIPadOrIOSResult)) {
      isIPadOrIOSResult = navigator.platform === "iPhone" || navigator.platform === "iPod" || navigator.platform === "iPad";
    }
    return isIPadOrIOSResult;
  }
  function firefoxVersion() {
    return isFirefox() && firefoxVersionResult;
  }
  function supportsPointerEvents() {
    if (!defined_default(hasPointerEvents)) {
      hasPointerEvents = !isFirefox() && typeof PointerEvent !== "undefined" && (!defined_default(theNavigator.pointerEnabled) || theNavigator.pointerEnabled);
    }
    return hasPointerEvents;
  }
  function supportsImageRenderingPixelated() {
    if (!defined_default(supportsImageRenderingPixelatedResult)) {
      const canvas = document.createElement("canvas");
      canvas.setAttribute(
        "style",
        "image-rendering: -moz-crisp-edges;image-rendering: pixelated;"
      );
      const tmp2 = canvas.style.imageRendering;
      supportsImageRenderingPixelatedResult = defined_default(tmp2) && tmp2 !== "";
      if (supportsImageRenderingPixelatedResult) {
        imageRenderingValueResult = tmp2;
      }
    }
    return supportsImageRenderingPixelatedResult;
  }
  function imageRenderingValue() {
    return supportsImageRenderingPixelated() ? imageRenderingValueResult : void 0;
  }
  function supportsWebP() {
    if (!supportsWebP.initialized) {
      throw new DeveloperError_default(
        "You must call FeatureDetection.supportsWebP.initialize and wait for the promise to resolve before calling FeatureDetection.supportsWebP"
      );
    }
    return supportsWebP._result;
  }
  var theNavigator, isChromeResult, chromeVersionResult, isSafariResult, safariVersionResult, isWebkitResult, webkitVersionResult, isInternetExplorerResult, internetExplorerVersionResult, isEdgeResult, edgeVersionResult, isFirefoxResult, firefoxVersionResult, isWindowsResult, isIPadOrIOSResult, hasPointerEvents, imageRenderingValueResult, supportsImageRenderingPixelatedResult, typedArrayTypes, FeatureDetection, FeatureDetection_default;
  var init_FeatureDetection = __esm({
    "packages/engine/Source/Core/FeatureDetection.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Fullscreen();
      if (typeof navigator !== "undefined") {
        theNavigator = navigator;
      } else {
        theNavigator = {};
      }
      supportsWebP._promise = void 0;
      supportsWebP._result = void 0;
      supportsWebP.initialize = function() {
        if (defined_default(supportsWebP._promise)) {
          return supportsWebP._promise;
        }
        supportsWebP._promise = new Promise((resolve) => {
          const image = new Image();
          image.onload = function() {
            supportsWebP._result = image.width > 0 && image.height > 0;
            resolve(supportsWebP._result);
          };
          image.onerror = function() {
            supportsWebP._result = false;
            resolve(supportsWebP._result);
          };
          image.src = "data:image/webp;base64,UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA";
        });
        return supportsWebP._promise;
      };
      Object.defineProperties(supportsWebP, {
        initialized: {
          get: function() {
            return defined_default(supportsWebP._result);
          }
        }
      });
      typedArrayTypes = [];
      if (typeof ArrayBuffer !== "undefined") {
        typedArrayTypes.push(
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array
        );
        if (typeof Uint8ClampedArray !== "undefined") {
          typedArrayTypes.push(Uint8ClampedArray);
        }
        if (typeof Uint8ClampedArray !== "undefined") {
          typedArrayTypes.push(Uint8ClampedArray);
        }
        if (typeof BigInt64Array !== "undefined") {
          typedArrayTypes.push(BigInt64Array);
        }
        if (typeof BigUint64Array !== "undefined") {
          typedArrayTypes.push(BigUint64Array);
        }
      }
      FeatureDetection = {
        isChrome,
        chromeVersion,
        isSafari,
        safariVersion,
        isWebkit,
        webkitVersion,
        isInternetExplorer,
        internetExplorerVersion,
        isEdge,
        edgeVersion,
        isFirefox,
        firefoxVersion,
        isWindows,
        isIPadOrIOS,
        hardwareConcurrency: defaultValue_default(theNavigator.hardwareConcurrency, 3),
        supportsPointerEvents,
        supportsImageRenderingPixelated,
        supportsWebP,
        imageRenderingValue,
        typedArrayTypes
      };
      FeatureDetection.supportsBasis = function(scene) {
        return FeatureDetection.supportsWebAssembly() && scene.context.supportsBasis;
      };
      FeatureDetection.supportsFullscreen = function() {
        return Fullscreen_default.supportsFullscreen();
      };
      FeatureDetection.supportsTypedArrays = function() {
        return typeof ArrayBuffer !== "undefined";
      };
      FeatureDetection.supportsBigInt64Array = function() {
        return typeof BigInt64Array !== "undefined";
      };
      FeatureDetection.supportsBigUint64Array = function() {
        return typeof BigUint64Array !== "undefined";
      };
      FeatureDetection.supportsBigInt = function() {
        return typeof BigInt !== "undefined";
      };
      FeatureDetection.supportsWebWorkers = function() {
        return typeof Worker !== "undefined";
      };
      FeatureDetection.supportsWebAssembly = function() {
        return typeof WebAssembly !== "undefined";
      };
      FeatureDetection.supportsWebgl2 = function(scene) {
        Check_default.defined("scene", scene);
        return scene.context.webgl2;
      };
      FeatureDetection.supportsEsmWebWorkers = function() {
        return !isFirefox() || parseInt(firefoxVersionResult) >= 114;
      };
      FeatureDetection_default = FeatureDetection;
    }
  });

  // packages/engine/Source/Core/Quaternion.js
  function Quaternion(x, y, z, w) {
    this.x = defaultValue_default(x, 0);
    this.y = defaultValue_default(y, 0);
    this.z = defaultValue_default(z, 0);
    this.w = defaultValue_default(w, 0);
  }
  var fromAxisAngleScratch, fromRotationMatrixNext, fromRotationMatrixQuat, scratchHPRQuaternion, scratchHeadingQuaternion, scratchPitchQuaternion, scratchRollQuaternion, sampledQuaternionAxis, sampledQuaternionRotation, sampledQuaternionTempQuaternion, sampledQuaternionQuaternion0, sampledQuaternionQuaternion0Conjugate, lerpScratch4, slerpEndNegated, slerpScaledP, slerpScaledR, squadScratchCartesian0, squadScratchCartesian1, squadScratchQuaternion0, squadScratchQuaternion1, fastSlerpScratchQuaternion, opmu, u, v, bT, bD, Quaternion_default;
  var init_Quaternion = __esm({
    "packages/engine/Source/Core/Quaternion.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_FeatureDetection();
      init_Math();
      init_Matrix3();
      fromAxisAngleScratch = new Cartesian3_default();
      Quaternion.fromAxisAngle = function(axis, angle, result) {
        Check_default.typeOf.object("axis", axis);
        Check_default.typeOf.number("angle", angle);
        const halfAngle = angle / 2;
        const s = Math.sin(halfAngle);
        fromAxisAngleScratch = Cartesian3_default.normalize(axis, fromAxisAngleScratch);
        const x = fromAxisAngleScratch.x * s;
        const y = fromAxisAngleScratch.y * s;
        const z = fromAxisAngleScratch.z * s;
        const w = Math.cos(halfAngle);
        if (!defined_default(result)) {
          return new Quaternion(x, y, z, w);
        }
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      fromRotationMatrixNext = [1, 2, 0];
      fromRotationMatrixQuat = new Array(3);
      Quaternion.fromRotationMatrix = function(matrix, result) {
        Check_default.typeOf.object("matrix", matrix);
        let root;
        let x;
        let y;
        let z;
        let w;
        const m00 = matrix[Matrix3_default.COLUMN0ROW0];
        const m11 = matrix[Matrix3_default.COLUMN1ROW1];
        const m22 = matrix[Matrix3_default.COLUMN2ROW2];
        const trace = m00 + m11 + m22;
        if (trace > 0) {
          root = Math.sqrt(trace + 1);
          w = 0.5 * root;
          root = 0.5 / root;
          x = (matrix[Matrix3_default.COLUMN1ROW2] - matrix[Matrix3_default.COLUMN2ROW1]) * root;
          y = (matrix[Matrix3_default.COLUMN2ROW0] - matrix[Matrix3_default.COLUMN0ROW2]) * root;
          z = (matrix[Matrix3_default.COLUMN0ROW1] - matrix[Matrix3_default.COLUMN1ROW0]) * root;
        } else {
          const next = fromRotationMatrixNext;
          let i = 0;
          if (m11 > m00) {
            i = 1;
          }
          if (m22 > m00 && m22 > m11) {
            i = 2;
          }
          const j = next[i];
          const k = next[j];
          root = Math.sqrt(
            matrix[Matrix3_default.getElementIndex(i, i)] - matrix[Matrix3_default.getElementIndex(j, j)] - matrix[Matrix3_default.getElementIndex(k, k)] + 1
          );
          const quat = fromRotationMatrixQuat;
          quat[i] = 0.5 * root;
          root = 0.5 / root;
          w = (matrix[Matrix3_default.getElementIndex(k, j)] - matrix[Matrix3_default.getElementIndex(j, k)]) * root;
          quat[j] = (matrix[Matrix3_default.getElementIndex(j, i)] + matrix[Matrix3_default.getElementIndex(i, j)]) * root;
          quat[k] = (matrix[Matrix3_default.getElementIndex(k, i)] + matrix[Matrix3_default.getElementIndex(i, k)]) * root;
          x = -quat[0];
          y = -quat[1];
          z = -quat[2];
        }
        if (!defined_default(result)) {
          return new Quaternion(x, y, z, w);
        }
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      scratchHPRQuaternion = new Quaternion();
      scratchHeadingQuaternion = new Quaternion();
      scratchPitchQuaternion = new Quaternion();
      scratchRollQuaternion = new Quaternion();
      Quaternion.fromHeadingPitchRoll = function(headingPitchRoll, result) {
        Check_default.typeOf.object("headingPitchRoll", headingPitchRoll);
        scratchRollQuaternion = Quaternion.fromAxisAngle(
          Cartesian3_default.UNIT_X,
          headingPitchRoll.roll,
          scratchHPRQuaternion
        );
        scratchPitchQuaternion = Quaternion.fromAxisAngle(
          Cartesian3_default.UNIT_Y,
          -headingPitchRoll.pitch,
          result
        );
        result = Quaternion.multiply(
          scratchPitchQuaternion,
          scratchRollQuaternion,
          scratchPitchQuaternion
        );
        scratchHeadingQuaternion = Quaternion.fromAxisAngle(
          Cartesian3_default.UNIT_Z,
          -headingPitchRoll.heading,
          scratchHPRQuaternion
        );
        return Quaternion.multiply(scratchHeadingQuaternion, result, result);
      };
      sampledQuaternionAxis = new Cartesian3_default();
      sampledQuaternionRotation = new Cartesian3_default();
      sampledQuaternionTempQuaternion = new Quaternion();
      sampledQuaternionQuaternion0 = new Quaternion();
      sampledQuaternionQuaternion0Conjugate = new Quaternion();
      Quaternion.packedLength = 4;
      Quaternion.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.x;
        array[startingIndex++] = value.y;
        array[startingIndex++] = value.z;
        array[startingIndex] = value.w;
        return array;
      };
      Quaternion.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Quaternion();
        }
        result.x = array[startingIndex];
        result.y = array[startingIndex + 1];
        result.z = array[startingIndex + 2];
        result.w = array[startingIndex + 3];
        return result;
      };
      Quaternion.packedInterpolationLength = 3;
      Quaternion.convertPackedArrayForInterpolation = function(packedArray, startingIndex, lastIndex, result) {
        Quaternion.unpack(
          packedArray,
          lastIndex * 4,
          sampledQuaternionQuaternion0Conjugate
        );
        Quaternion.conjugate(
          sampledQuaternionQuaternion0Conjugate,
          sampledQuaternionQuaternion0Conjugate
        );
        for (let i = 0, len = lastIndex - startingIndex + 1; i < len; i++) {
          const offset = i * 3;
          Quaternion.unpack(
            packedArray,
            (startingIndex + i) * 4,
            sampledQuaternionTempQuaternion
          );
          Quaternion.multiply(
            sampledQuaternionTempQuaternion,
            sampledQuaternionQuaternion0Conjugate,
            sampledQuaternionTempQuaternion
          );
          if (sampledQuaternionTempQuaternion.w < 0) {
            Quaternion.negate(
              sampledQuaternionTempQuaternion,
              sampledQuaternionTempQuaternion
            );
          }
          Quaternion.computeAxis(
            sampledQuaternionTempQuaternion,
            sampledQuaternionAxis
          );
          const angle = Quaternion.computeAngle(sampledQuaternionTempQuaternion);
          if (!defined_default(result)) {
            result = [];
          }
          result[offset] = sampledQuaternionAxis.x * angle;
          result[offset + 1] = sampledQuaternionAxis.y * angle;
          result[offset + 2] = sampledQuaternionAxis.z * angle;
        }
      };
      Quaternion.unpackInterpolationResult = function(array, sourceArray, firstIndex, lastIndex, result) {
        if (!defined_default(result)) {
          result = new Quaternion();
        }
        Cartesian3_default.fromArray(array, 0, sampledQuaternionRotation);
        const magnitude = Cartesian3_default.magnitude(sampledQuaternionRotation);
        Quaternion.unpack(sourceArray, lastIndex * 4, sampledQuaternionQuaternion0);
        if (magnitude === 0) {
          Quaternion.clone(Quaternion.IDENTITY, sampledQuaternionTempQuaternion);
        } else {
          Quaternion.fromAxisAngle(
            sampledQuaternionRotation,
            magnitude,
            sampledQuaternionTempQuaternion
          );
        }
        return Quaternion.multiply(
          sampledQuaternionTempQuaternion,
          sampledQuaternionQuaternion0,
          result
        );
      };
      Quaternion.clone = function(quaternion, result) {
        if (!defined_default(quaternion)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Quaternion(
            quaternion.x,
            quaternion.y,
            quaternion.z,
            quaternion.w
          );
        }
        result.x = quaternion.x;
        result.y = quaternion.y;
        result.z = quaternion.z;
        result.w = quaternion.w;
        return result;
      };
      Quaternion.conjugate = function(quaternion, result) {
        Check_default.typeOf.object("quaternion", quaternion);
        Check_default.typeOf.object("result", result);
        result.x = -quaternion.x;
        result.y = -quaternion.y;
        result.z = -quaternion.z;
        result.w = quaternion.w;
        return result;
      };
      Quaternion.magnitudeSquared = function(quaternion) {
        Check_default.typeOf.object("quaternion", quaternion);
        return quaternion.x * quaternion.x + quaternion.y * quaternion.y + quaternion.z * quaternion.z + quaternion.w * quaternion.w;
      };
      Quaternion.magnitude = function(quaternion) {
        return Math.sqrt(Quaternion.magnitudeSquared(quaternion));
      };
      Quaternion.normalize = function(quaternion, result) {
        Check_default.typeOf.object("result", result);
        const inverseMagnitude = 1 / Quaternion.magnitude(quaternion);
        const x = quaternion.x * inverseMagnitude;
        const y = quaternion.y * inverseMagnitude;
        const z = quaternion.z * inverseMagnitude;
        const w = quaternion.w * inverseMagnitude;
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      Quaternion.inverse = function(quaternion, result) {
        Check_default.typeOf.object("result", result);
        const magnitudeSquared = Quaternion.magnitudeSquared(quaternion);
        result = Quaternion.conjugate(quaternion, result);
        return Quaternion.multiplyByScalar(result, 1 / magnitudeSquared, result);
      };
      Quaternion.add = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x + right.x;
        result.y = left.y + right.y;
        result.z = left.z + right.z;
        result.w = left.w + right.w;
        return result;
      };
      Quaternion.subtract = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.x = left.x - right.x;
        result.y = left.y - right.y;
        result.z = left.z - right.z;
        result.w = left.w - right.w;
        return result;
      };
      Quaternion.negate = function(quaternion, result) {
        Check_default.typeOf.object("quaternion", quaternion);
        Check_default.typeOf.object("result", result);
        result.x = -quaternion.x;
        result.y = -quaternion.y;
        result.z = -quaternion.z;
        result.w = -quaternion.w;
        return result;
      };
      Quaternion.dot = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
      };
      Quaternion.multiply = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        const leftX = left.x;
        const leftY = left.y;
        const leftZ = left.z;
        const leftW = left.w;
        const rightX = right.x;
        const rightY = right.y;
        const rightZ = right.z;
        const rightW = right.w;
        const x = leftW * rightX + leftX * rightW + leftY * rightZ - leftZ * rightY;
        const y = leftW * rightY - leftX * rightZ + leftY * rightW + leftZ * rightX;
        const z = leftW * rightZ + leftX * rightY - leftY * rightX + leftZ * rightW;
        const w = leftW * rightW - leftX * rightX - leftY * rightY - leftZ * rightZ;
        result.x = x;
        result.y = y;
        result.z = z;
        result.w = w;
        return result;
      };
      Quaternion.multiplyByScalar = function(quaternion, scalar, result) {
        Check_default.typeOf.object("quaternion", quaternion);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.x = quaternion.x * scalar;
        result.y = quaternion.y * scalar;
        result.z = quaternion.z * scalar;
        result.w = quaternion.w * scalar;
        return result;
      };
      Quaternion.divideByScalar = function(quaternion, scalar, result) {
        Check_default.typeOf.object("quaternion", quaternion);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.x = quaternion.x / scalar;
        result.y = quaternion.y / scalar;
        result.z = quaternion.z / scalar;
        result.w = quaternion.w / scalar;
        return result;
      };
      Quaternion.computeAxis = function(quaternion, result) {
        Check_default.typeOf.object("quaternion", quaternion);
        Check_default.typeOf.object("result", result);
        const w = quaternion.w;
        if (Math.abs(w - 1) < Math_default.EPSILON6 || Math.abs(w + 1) < Math_default.EPSILON6) {
          result.x = 1;
          result.y = result.z = 0;
          return result;
        }
        const scalar = 1 / Math.sqrt(1 - w * w);
        result.x = quaternion.x * scalar;
        result.y = quaternion.y * scalar;
        result.z = quaternion.z * scalar;
        return result;
      };
      Quaternion.computeAngle = function(quaternion) {
        Check_default.typeOf.object("quaternion", quaternion);
        if (Math.abs(quaternion.w - 1) < Math_default.EPSILON6) {
          return 0;
        }
        return 2 * Math.acos(quaternion.w);
      };
      lerpScratch4 = new Quaternion();
      Quaternion.lerp = function(start, end, t, result) {
        Check_default.typeOf.object("start", start);
        Check_default.typeOf.object("end", end);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        lerpScratch4 = Quaternion.multiplyByScalar(end, t, lerpScratch4);
        result = Quaternion.multiplyByScalar(start, 1 - t, result);
        return Quaternion.add(lerpScratch4, result, result);
      };
      slerpEndNegated = new Quaternion();
      slerpScaledP = new Quaternion();
      slerpScaledR = new Quaternion();
      Quaternion.slerp = function(start, end, t, result) {
        Check_default.typeOf.object("start", start);
        Check_default.typeOf.object("end", end);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        let dot = Quaternion.dot(start, end);
        let r = end;
        if (dot < 0) {
          dot = -dot;
          r = slerpEndNegated = Quaternion.negate(end, slerpEndNegated);
        }
        if (1 - dot < Math_default.EPSILON6) {
          return Quaternion.lerp(start, r, t, result);
        }
        const theta = Math.acos(dot);
        slerpScaledP = Quaternion.multiplyByScalar(
          start,
          Math.sin((1 - t) * theta),
          slerpScaledP
        );
        slerpScaledR = Quaternion.multiplyByScalar(
          r,
          Math.sin(t * theta),
          slerpScaledR
        );
        result = Quaternion.add(slerpScaledP, slerpScaledR, result);
        return Quaternion.multiplyByScalar(result, 1 / Math.sin(theta), result);
      };
      Quaternion.log = function(quaternion, result) {
        Check_default.typeOf.object("quaternion", quaternion);
        Check_default.typeOf.object("result", result);
        const theta = Math_default.acosClamped(quaternion.w);
        let thetaOverSinTheta = 0;
        if (theta !== 0) {
          thetaOverSinTheta = theta / Math.sin(theta);
        }
        return Cartesian3_default.multiplyByScalar(quaternion, thetaOverSinTheta, result);
      };
      Quaternion.exp = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        Check_default.typeOf.object("result", result);
        const theta = Cartesian3_default.magnitude(cartesian11);
        let sinThetaOverTheta = 0;
        if (theta !== 0) {
          sinThetaOverTheta = Math.sin(theta) / theta;
        }
        result.x = cartesian11.x * sinThetaOverTheta;
        result.y = cartesian11.y * sinThetaOverTheta;
        result.z = cartesian11.z * sinThetaOverTheta;
        result.w = Math.cos(theta);
        return result;
      };
      squadScratchCartesian0 = new Cartesian3_default();
      squadScratchCartesian1 = new Cartesian3_default();
      squadScratchQuaternion0 = new Quaternion();
      squadScratchQuaternion1 = new Quaternion();
      Quaternion.computeInnerQuadrangle = function(q0, q12, q22, result) {
        Check_default.typeOf.object("q0", q0);
        Check_default.typeOf.object("q1", q12);
        Check_default.typeOf.object("q2", q22);
        Check_default.typeOf.object("result", result);
        const qInv = Quaternion.conjugate(q12, squadScratchQuaternion0);
        Quaternion.multiply(qInv, q22, squadScratchQuaternion1);
        const cart0 = Quaternion.log(squadScratchQuaternion1, squadScratchCartesian0);
        Quaternion.multiply(qInv, q0, squadScratchQuaternion1);
        const cart1 = Quaternion.log(squadScratchQuaternion1, squadScratchCartesian1);
        Cartesian3_default.add(cart0, cart1, cart0);
        Cartesian3_default.multiplyByScalar(cart0, 0.25, cart0);
        Cartesian3_default.negate(cart0, cart0);
        Quaternion.exp(cart0, squadScratchQuaternion0);
        return Quaternion.multiply(q12, squadScratchQuaternion0, result);
      };
      Quaternion.squad = function(q0, q12, s0, s1, t, result) {
        Check_default.typeOf.object("q0", q0);
        Check_default.typeOf.object("q1", q12);
        Check_default.typeOf.object("s0", s0);
        Check_default.typeOf.object("s1", s1);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        const slerp0 = Quaternion.slerp(q0, q12, t, squadScratchQuaternion0);
        const slerp1 = Quaternion.slerp(s0, s1, t, squadScratchQuaternion1);
        return Quaternion.slerp(slerp0, slerp1, 2 * t * (1 - t), result);
      };
      fastSlerpScratchQuaternion = new Quaternion();
      opmu = 1.9011074535173003;
      u = FeatureDetection_default.supportsTypedArrays() ? new Float32Array(8) : [];
      v = FeatureDetection_default.supportsTypedArrays() ? new Float32Array(8) : [];
      bT = FeatureDetection_default.supportsTypedArrays() ? new Float32Array(8) : [];
      bD = FeatureDetection_default.supportsTypedArrays() ? new Float32Array(8) : [];
      for (let i = 0; i < 7; ++i) {
        const s = i + 1;
        const t = 2 * s + 1;
        u[i] = 1 / (s * t);
        v[i] = s / t;
      }
      u[7] = opmu / (8 * 17);
      v[7] = opmu * 8 / 17;
      Quaternion.fastSlerp = function(start, end, t, result) {
        Check_default.typeOf.object("start", start);
        Check_default.typeOf.object("end", end);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        let x = Quaternion.dot(start, end);
        let sign2;
        if (x >= 0) {
          sign2 = 1;
        } else {
          sign2 = -1;
          x = -x;
        }
        const xm1 = x - 1;
        const d = 1 - t;
        const sqrT = t * t;
        const sqrD = d * d;
        for (let i = 7; i >= 0; --i) {
          bT[i] = (u[i] * sqrT - v[i]) * xm1;
          bD[i] = (u[i] * sqrD - v[i]) * xm1;
        }
        const cT = sign2 * t * (1 + bT[0] * (1 + bT[1] * (1 + bT[2] * (1 + bT[3] * (1 + bT[4] * (1 + bT[5] * (1 + bT[6] * (1 + bT[7]))))))));
        const cD = d * (1 + bD[0] * (1 + bD[1] * (1 + bD[2] * (1 + bD[3] * (1 + bD[4] * (1 + bD[5] * (1 + bD[6] * (1 + bD[7]))))))));
        const temp = Quaternion.multiplyByScalar(
          start,
          cD,
          fastSlerpScratchQuaternion
        );
        Quaternion.multiplyByScalar(end, cT, result);
        return Quaternion.add(temp, result, result);
      };
      Quaternion.fastSquad = function(q0, q12, s0, s1, t, result) {
        Check_default.typeOf.object("q0", q0);
        Check_default.typeOf.object("q1", q12);
        Check_default.typeOf.object("s0", s0);
        Check_default.typeOf.object("s1", s1);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        const slerp0 = Quaternion.fastSlerp(q0, q12, t, squadScratchQuaternion0);
        const slerp1 = Quaternion.fastSlerp(s0, s1, t, squadScratchQuaternion1);
        return Quaternion.fastSlerp(slerp0, slerp1, 2 * t * (1 - t), result);
      };
      Quaternion.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.x === right.x && left.y === right.y && left.z === right.z && left.w === right.w;
      };
      Quaternion.equalsEpsilon = function(left, right, epsilon) {
        epsilon = defaultValue_default(epsilon, 0);
        return left === right || defined_default(left) && defined_default(right) && Math.abs(left.x - right.x) <= epsilon && Math.abs(left.y - right.y) <= epsilon && Math.abs(left.z - right.z) <= epsilon && Math.abs(left.w - right.w) <= epsilon;
      };
      Quaternion.ZERO = Object.freeze(new Quaternion(0, 0, 0, 0));
      Quaternion.IDENTITY = Object.freeze(new Quaternion(0, 0, 0, 1));
      Quaternion.prototype.clone = function(result) {
        return Quaternion.clone(this, result);
      };
      Quaternion.prototype.equals = function(right) {
        return Quaternion.equals(this, right);
      };
      Quaternion.prototype.equalsEpsilon = function(right, epsilon) {
        return Quaternion.equalsEpsilon(this, right, epsilon);
      };
      Quaternion.prototype.toString = function() {
        return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;
      };
      Quaternion_default = Quaternion;
    }
  });

  // packages/engine/Source/Core/binarySearch.js
  function binarySearch(array, itemToFind, comparator) {
    Check_default.defined("array", array);
    Check_default.defined("itemToFind", itemToFind);
    Check_default.defined("comparator", comparator);
    let low = 0;
    let high = array.length - 1;
    let i;
    let comparison;
    while (low <= high) {
      i = ~~((low + high) / 2);
      comparison = comparator(array[i], itemToFind);
      if (comparison < 0) {
        low = i + 1;
        continue;
      }
      if (comparison > 0) {
        high = i - 1;
        continue;
      }
      return i;
    }
    return ~(high + 1);
  }
  var binarySearch_default;
  var init_binarySearch = __esm({
    "packages/engine/Source/Core/binarySearch.js"() {
      init_Check();
      binarySearch_default = binarySearch;
    }
  });

  // packages/engine/Source/Core/EarthOrientationParametersSample.js
  function EarthOrientationParametersSample(xPoleWander, yPoleWander, xPoleOffset, yPoleOffset, ut1MinusUtc) {
    this.xPoleWander = xPoleWander;
    this.yPoleWander = yPoleWander;
    this.xPoleOffset = xPoleOffset;
    this.yPoleOffset = yPoleOffset;
    this.ut1MinusUtc = ut1MinusUtc;
  }
  var EarthOrientationParametersSample_default;
  var init_EarthOrientationParametersSample = __esm({
    "packages/engine/Source/Core/EarthOrientationParametersSample.js"() {
      EarthOrientationParametersSample_default = EarthOrientationParametersSample;
    }
  });

  // packages/engine/Source/Core/isLeapYear.js
  function isLeapYear(year) {
    if (year === null || isNaN(year)) {
      throw new DeveloperError_default("year is required and must be a number.");
    }
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  }
  var isLeapYear_default;
  var init_isLeapYear = __esm({
    "packages/engine/Source/Core/isLeapYear.js"() {
      init_DeveloperError();
      isLeapYear_default = isLeapYear;
    }
  });

  // packages/engine/Source/Core/GregorianDate.js
  function GregorianDate(year, month, day, hour, minute, second, millisecond, isLeapSecond) {
    const minimumYear = 1;
    const minimumMonth = 1;
    const minimumDay = 1;
    const minimumHour = 0;
    const minimumMinute = 0;
    const minimumSecond = 0;
    const minimumMillisecond = 0;
    year = defaultValue_default(year, minimumYear);
    month = defaultValue_default(month, minimumMonth);
    day = defaultValue_default(day, minimumDay);
    hour = defaultValue_default(hour, minimumHour);
    minute = defaultValue_default(minute, minimumMinute);
    second = defaultValue_default(second, minimumSecond);
    millisecond = defaultValue_default(millisecond, minimumMillisecond);
    isLeapSecond = defaultValue_default(isLeapSecond, false);
    validateRange();
    validateDate();
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond;
    this.isLeapSecond = isLeapSecond;
    function validateRange() {
      const maximumYear = 9999;
      const maximumMonth = 12;
      const maximumDay = 31;
      const maximumHour = 23;
      const maximumMinute = 59;
      const maximumSecond = 59;
      const excludedMaximumMilisecond = 1e3;
      Check_default.typeOf.number.greaterThanOrEquals("Year", year, minimumYear);
      Check_default.typeOf.number.lessThanOrEquals("Year", year, maximumYear);
      Check_default.typeOf.number.greaterThanOrEquals("Month", month, minimumMonth);
      Check_default.typeOf.number.lessThanOrEquals("Month", month, maximumMonth);
      Check_default.typeOf.number.greaterThanOrEquals("Day", day, minimumDay);
      Check_default.typeOf.number.lessThanOrEquals("Day", day, maximumDay);
      Check_default.typeOf.number.greaterThanOrEquals("Hour", hour, minimumHour);
      Check_default.typeOf.number.lessThanOrEquals("Hour", hour, maximumHour);
      Check_default.typeOf.number.greaterThanOrEquals("Minute", minute, minimumMinute);
      Check_default.typeOf.number.lessThanOrEquals("Minute", minute, maximumMinute);
      Check_default.typeOf.bool("IsLeapSecond", isLeapSecond);
      Check_default.typeOf.number.greaterThanOrEquals("Second", second, minimumSecond);
      Check_default.typeOf.number.lessThanOrEquals(
        "Second",
        second,
        isLeapSecond ? maximumSecond + 1 : maximumSecond
      );
      Check_default.typeOf.number.greaterThanOrEquals(
        "Millisecond",
        millisecond,
        minimumMillisecond
      );
      Check_default.typeOf.number.lessThan(
        "Millisecond",
        millisecond,
        excludedMaximumMilisecond
      );
    }
    function validateDate() {
      const daysInMonth2 = month === 2 && isLeapYear_default(year) ? daysInYear[month - 1] + 1 : daysInYear[month - 1];
      if (day > daysInMonth2) {
        throw new DeveloperError_default("Month and Day represents invalid date");
      }
    }
  }
  var daysInYear, GregorianDate_default;
  var init_GregorianDate = __esm({
    "packages/engine/Source/Core/GregorianDate.js"() {
      init_Check();
      init_defaultValue();
      init_DeveloperError();
      init_isLeapYear();
      daysInYear = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      GregorianDate_default = GregorianDate;
    }
  });

  // packages/engine/Source/Core/LeapSecond.js
  function LeapSecond(date, offset) {
    this.julianDate = date;
    this.offset = offset;
  }
  var LeapSecond_default;
  var init_LeapSecond = __esm({
    "packages/engine/Source/Core/LeapSecond.js"() {
      LeapSecond_default = LeapSecond;
    }
  });

  // packages/engine/Source/Core/TimeConstants.js
  var TimeConstants, TimeConstants_default;
  var init_TimeConstants = __esm({
    "packages/engine/Source/Core/TimeConstants.js"() {
      TimeConstants = {
        /**
         * The number of seconds in one millisecond: <code>0.001</code>
         * @type {number}
         * @constant
         */
        SECONDS_PER_MILLISECOND: 1e-3,
        /**
         * The number of seconds in one minute: <code>60</code>.
         * @type {number}
         * @constant
         */
        SECONDS_PER_MINUTE: 60,
        /**
         * The number of minutes in one hour: <code>60</code>.
         * @type {number}
         * @constant
         */
        MINUTES_PER_HOUR: 60,
        /**
         * The number of hours in one day: <code>24</code>.
         * @type {number}
         * @constant
         */
        HOURS_PER_DAY: 24,
        /**
         * The number of seconds in one hour: <code>3600</code>.
         * @type {number}
         * @constant
         */
        SECONDS_PER_HOUR: 3600,
        /**
         * The number of minutes in one day: <code>1440</code>.
         * @type {number}
         * @constant
         */
        MINUTES_PER_DAY: 1440,
        /**
         * The number of seconds in one day, ignoring leap seconds: <code>86400</code>.
         * @type {number}
         * @constant
         */
        SECONDS_PER_DAY: 86400,
        /**
         * The number of days in one Julian century: <code>36525</code>.
         * @type {number}
         * @constant
         */
        DAYS_PER_JULIAN_CENTURY: 36525,
        /**
         * One trillionth of a second.
         * @type {number}
         * @constant
         */
        PICOSECOND: 1e-9,
        /**
         * The number of days to subtract from a Julian date to determine the
         * modified Julian date, which gives the number of days since midnight
         * on November 17, 1858.
         * @type {number}
         * @constant
         */
        MODIFIED_JULIAN_DATE_DIFFERENCE: 24000005e-1
      };
      TimeConstants_default = Object.freeze(TimeConstants);
    }
  });

  // packages/engine/Source/Core/TimeStandard.js
  var TimeStandard, TimeStandard_default;
  var init_TimeStandard = __esm({
    "packages/engine/Source/Core/TimeStandard.js"() {
      TimeStandard = {
        /**
         * Represents the coordinated Universal Time (UTC) time standard.
         *
         * UTC is related to TAI according to the relationship
         * <code>UTC = TAI - deltaT</code> where <code>deltaT</code> is the number of leap
         * seconds which have been introduced as of the time in TAI.
         *
         * @type {number}
         * @constant
         */
        UTC: 0,
        /**
         * Represents the International Atomic Time (TAI) time standard.
         * TAI is the principal time standard to which the other time standards are related.
         *
         * @type {number}
         * @constant
         */
        TAI: 1
      };
      TimeStandard_default = Object.freeze(TimeStandard);
    }
  });

  // packages/engine/Source/Core/JulianDate.js
  function compareLeapSecondDates(leapSecond, dateToFind) {
    return JulianDate.compare(leapSecond.julianDate, dateToFind.julianDate);
  }
  function convertUtcToTai(julianDate) {
    binarySearchScratchLeapSecond.julianDate = julianDate;
    const leapSeconds = JulianDate.leapSeconds;
    let index = binarySearch_default(
      leapSeconds,
      binarySearchScratchLeapSecond,
      compareLeapSecondDates
    );
    if (index < 0) {
      index = ~index;
    }
    if (index >= leapSeconds.length) {
      index = leapSeconds.length - 1;
    }
    let offset = leapSeconds[index].offset;
    if (index > 0) {
      const difference = JulianDate.secondsDifference(
        leapSeconds[index].julianDate,
        julianDate
      );
      if (difference > offset) {
        index--;
        offset = leapSeconds[index].offset;
      }
    }
    JulianDate.addSeconds(julianDate, offset, julianDate);
  }
  function convertTaiToUtc(julianDate, result) {
    binarySearchScratchLeapSecond.julianDate = julianDate;
    const leapSeconds = JulianDate.leapSeconds;
    let index = binarySearch_default(
      leapSeconds,
      binarySearchScratchLeapSecond,
      compareLeapSecondDates
    );
    if (index < 0) {
      index = ~index;
    }
    if (index === 0) {
      return JulianDate.addSeconds(julianDate, -leapSeconds[0].offset, result);
    }
    if (index >= leapSeconds.length) {
      return JulianDate.addSeconds(
        julianDate,
        -leapSeconds[index - 1].offset,
        result
      );
    }
    const difference = JulianDate.secondsDifference(
      leapSeconds[index].julianDate,
      julianDate
    );
    if (difference === 0) {
      return JulianDate.addSeconds(
        julianDate,
        -leapSeconds[index].offset,
        result
      );
    }
    if (difference <= 1) {
      return void 0;
    }
    return JulianDate.addSeconds(
      julianDate,
      -leapSeconds[--index].offset,
      result
    );
  }
  function setComponents(wholeDays, secondsOfDay, julianDate) {
    const extraDays = secondsOfDay / TimeConstants_default.SECONDS_PER_DAY | 0;
    wholeDays += extraDays;
    secondsOfDay -= TimeConstants_default.SECONDS_PER_DAY * extraDays;
    if (secondsOfDay < 0) {
      wholeDays--;
      secondsOfDay += TimeConstants_default.SECONDS_PER_DAY;
    }
    julianDate.dayNumber = wholeDays;
    julianDate.secondsOfDay = secondsOfDay;
    return julianDate;
  }
  function computeJulianDateComponents(year, month, day, hour, minute, second, millisecond) {
    const a3 = (month - 14) / 12 | 0;
    const b = year + 4800 + a3;
    let dayNumber = (1461 * b / 4 | 0) + (367 * (month - 2 - 12 * a3) / 12 | 0) - (3 * ((b + 100) / 100 | 0) / 4 | 0) + day - 32075;
    hour = hour - 12;
    if (hour < 0) {
      hour += 24;
    }
    const secondsOfDay = second + (hour * TimeConstants_default.SECONDS_PER_HOUR + minute * TimeConstants_default.SECONDS_PER_MINUTE + millisecond * TimeConstants_default.SECONDS_PER_MILLISECOND);
    if (secondsOfDay >= 43200) {
      dayNumber -= 1;
    }
    return [dayNumber, secondsOfDay];
  }
  function JulianDate(julianDayNumber, secondsOfDay, timeStandard) {
    this.dayNumber = void 0;
    this.secondsOfDay = void 0;
    julianDayNumber = defaultValue_default(julianDayNumber, 0);
    secondsOfDay = defaultValue_default(secondsOfDay, 0);
    timeStandard = defaultValue_default(timeStandard, TimeStandard_default.UTC);
    const wholeDays = julianDayNumber | 0;
    secondsOfDay = secondsOfDay + (julianDayNumber - wholeDays) * TimeConstants_default.SECONDS_PER_DAY;
    setComponents(wholeDays, secondsOfDay, this);
    if (timeStandard === TimeStandard_default.UTC) {
      convertUtcToTai(this);
    }
  }
  var gregorianDateScratch, daysInMonth, daysInLeapFeburary, binarySearchScratchLeapSecond, matchCalendarYear, matchCalendarMonth, matchOrdinalDate, matchWeekDate, matchCalendarDate, utcOffset, matchHours, matchHoursMinutes, matchHoursMinutesSeconds, iso8601ErrorMessage, toGregorianDateScratch, JulianDate_default;
  var init_JulianDate = __esm({
    "packages/engine/Source/Core/JulianDate.js"() {
      init_binarySearch();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_GregorianDate();
      init_isLeapYear();
      init_LeapSecond();
      init_TimeConstants();
      init_TimeStandard();
      gregorianDateScratch = new GregorianDate_default();
      daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      daysInLeapFeburary = 29;
      binarySearchScratchLeapSecond = new LeapSecond_default();
      matchCalendarYear = /^(\d{4})$/;
      matchCalendarMonth = /^(\d{4})-(\d{2})$/;
      matchOrdinalDate = /^(\d{4})-?(\d{3})$/;
      matchWeekDate = /^(\d{4})-?W(\d{2})-?(\d{1})?$/;
      matchCalendarDate = /^(\d{4})-?(\d{2})-?(\d{2})$/;
      utcOffset = /([Z+\-])?(\d{2})?:?(\d{2})?$/;
      matchHours = /^(\d{2})(\.\d+)?/.source + utcOffset.source;
      matchHoursMinutes = /^(\d{2}):?(\d{2})(\.\d+)?/.source + utcOffset.source;
      matchHoursMinutesSeconds = /^(\d{2}):?(\d{2}):?(\d{2})(\.\d+)?/.source + utcOffset.source;
      iso8601ErrorMessage = "Invalid ISO 8601 date.";
      JulianDate.fromGregorianDate = function(date, result) {
        if (!(date instanceof GregorianDate_default)) {
          throw new DeveloperError_default("date must be a valid GregorianDate.");
        }
        const components = computeJulianDateComponents(
          date.year,
          date.month,
          date.day,
          date.hour,
          date.minute,
          date.second,
          date.millisecond
        );
        if (!defined_default(result)) {
          return new JulianDate(components[0], components[1], TimeStandard_default.UTC);
        }
        setComponents(components[0], components[1], result);
        convertUtcToTai(result);
        return result;
      };
      JulianDate.fromDate = function(date, result) {
        if (!(date instanceof Date) || isNaN(date.getTime())) {
          throw new DeveloperError_default("date must be a valid JavaScript Date.");
        }
        const components = computeJulianDateComponents(
          date.getUTCFullYear(),
          date.getUTCMonth() + 1,
          date.getUTCDate(),
          date.getUTCHours(),
          date.getUTCMinutes(),
          date.getUTCSeconds(),
          date.getUTCMilliseconds()
        );
        if (!defined_default(result)) {
          return new JulianDate(components[0], components[1], TimeStandard_default.UTC);
        }
        setComponents(components[0], components[1], result);
        convertUtcToTai(result);
        return result;
      };
      JulianDate.fromIso8601 = function(iso8601String, result) {
        if (typeof iso8601String !== "string") {
          throw new DeveloperError_default(iso8601ErrorMessage);
        }
        iso8601String = iso8601String.replace(",", ".");
        let tokens = iso8601String.split("T");
        let year;
        let month = 1;
        let day = 1;
        let hour = 0;
        let minute = 0;
        let second = 0;
        let millisecond = 0;
        const date = tokens[0];
        const time = tokens[1];
        let tmp2;
        let inLeapYear;
        if (!defined_default(date)) {
          throw new DeveloperError_default(iso8601ErrorMessage);
        }
        let dashCount;
        tokens = date.match(matchCalendarDate);
        if (tokens !== null) {
          dashCount = date.split("-").length - 1;
          if (dashCount > 0 && dashCount !== 2) {
            throw new DeveloperError_default(iso8601ErrorMessage);
          }
          year = +tokens[1];
          month = +tokens[2];
          day = +tokens[3];
        } else {
          tokens = date.match(matchCalendarMonth);
          if (tokens !== null) {
            year = +tokens[1];
            month = +tokens[2];
          } else {
            tokens = date.match(matchCalendarYear);
            if (tokens !== null) {
              year = +tokens[1];
            } else {
              let dayOfYear;
              tokens = date.match(matchOrdinalDate);
              if (tokens !== null) {
                year = +tokens[1];
                dayOfYear = +tokens[2];
                inLeapYear = isLeapYear_default(year);
                if (dayOfYear < 1 || inLeapYear && dayOfYear > 366 || !inLeapYear && dayOfYear > 365) {
                  throw new DeveloperError_default(iso8601ErrorMessage);
                }
              } else {
                tokens = date.match(matchWeekDate);
                if (tokens !== null) {
                  year = +tokens[1];
                  const weekNumber = +tokens[2];
                  const dayOfWeek = +tokens[3] || 0;
                  dashCount = date.split("-").length - 1;
                  if (dashCount > 0 && (!defined_default(tokens[3]) && dashCount !== 1 || defined_default(tokens[3]) && dashCount !== 2)) {
                    throw new DeveloperError_default(iso8601ErrorMessage);
                  }
                  const january4 = new Date(Date.UTC(year, 0, 4));
                  dayOfYear = weekNumber * 7 + dayOfWeek - january4.getUTCDay() - 3;
                } else {
                  throw new DeveloperError_default(iso8601ErrorMessage);
                }
              }
              tmp2 = new Date(Date.UTC(year, 0, 1));
              tmp2.setUTCDate(dayOfYear);
              month = tmp2.getUTCMonth() + 1;
              day = tmp2.getUTCDate();
            }
          }
        }
        inLeapYear = isLeapYear_default(year);
        if (month < 1 || month > 12 || day < 1 || (month !== 2 || !inLeapYear) && day > daysInMonth[month - 1] || inLeapYear && month === 2 && day > daysInLeapFeburary) {
          throw new DeveloperError_default(iso8601ErrorMessage);
        }
        let offsetIndex;
        if (defined_default(time)) {
          tokens = time.match(matchHoursMinutesSeconds);
          if (tokens !== null) {
            dashCount = time.split(":").length - 1;
            if (dashCount > 0 && dashCount !== 2 && dashCount !== 3) {
              throw new DeveloperError_default(iso8601ErrorMessage);
            }
            hour = +tokens[1];
            minute = +tokens[2];
            second = +tokens[3];
            millisecond = +(tokens[4] || 0) * 1e3;
            offsetIndex = 5;
          } else {
            tokens = time.match(matchHoursMinutes);
            if (tokens !== null) {
              dashCount = time.split(":").length - 1;
              if (dashCount > 2) {
                throw new DeveloperError_default(iso8601ErrorMessage);
              }
              hour = +tokens[1];
              minute = +tokens[2];
              second = +(tokens[3] || 0) * 60;
              offsetIndex = 4;
            } else {
              tokens = time.match(matchHours);
              if (tokens !== null) {
                hour = +tokens[1];
                minute = +(tokens[2] || 0) * 60;
                offsetIndex = 3;
              } else {
                throw new DeveloperError_default(iso8601ErrorMessage);
              }
            }
          }
          if (minute >= 60 || second >= 61 || hour > 24 || hour === 24 && (minute > 0 || second > 0 || millisecond > 0)) {
            throw new DeveloperError_default(iso8601ErrorMessage);
          }
          const offset = tokens[offsetIndex];
          const offsetHours = +tokens[offsetIndex + 1];
          const offsetMinutes = +(tokens[offsetIndex + 2] || 0);
          switch (offset) {
            case "+":
              hour = hour - offsetHours;
              minute = minute - offsetMinutes;
              break;
            case "-":
              hour = hour + offsetHours;
              minute = minute + offsetMinutes;
              break;
            case "Z":
              break;
            default:
              minute = minute + new Date(
                Date.UTC(year, month - 1, day, hour, minute)
              ).getTimezoneOffset();
              break;
          }
        }
        const isLeapSecond = second === 60;
        if (isLeapSecond) {
          second--;
        }
        while (minute >= 60) {
          minute -= 60;
          hour++;
        }
        while (hour >= 24) {
          hour -= 24;
          day++;
        }
        tmp2 = inLeapYear && month === 2 ? daysInLeapFeburary : daysInMonth[month - 1];
        while (day > tmp2) {
          day -= tmp2;
          month++;
          if (month > 12) {
            month -= 12;
            year++;
          }
          tmp2 = inLeapYear && month === 2 ? daysInLeapFeburary : daysInMonth[month - 1];
        }
        while (minute < 0) {
          minute += 60;
          hour--;
        }
        while (hour < 0) {
          hour += 24;
          day--;
        }
        while (day < 1) {
          month--;
          if (month < 1) {
            month += 12;
            year--;
          }
          tmp2 = inLeapYear && month === 2 ? daysInLeapFeburary : daysInMonth[month - 1];
          day += tmp2;
        }
        const components = computeJulianDateComponents(
          year,
          month,
          day,
          hour,
          minute,
          second,
          millisecond
        );
        if (!defined_default(result)) {
          result = new JulianDate(components[0], components[1], TimeStandard_default.UTC);
        } else {
          setComponents(components[0], components[1], result);
          convertUtcToTai(result);
        }
        if (isLeapSecond) {
          JulianDate.addSeconds(result, 1, result);
        }
        return result;
      };
      JulianDate.now = function(result) {
        return JulianDate.fromDate(/* @__PURE__ */ new Date(), result);
      };
      toGregorianDateScratch = new JulianDate(0, 0, TimeStandard_default.TAI);
      JulianDate.toGregorianDate = function(julianDate, result) {
        if (!defined_default(julianDate)) {
          throw new DeveloperError_default("julianDate is required.");
        }
        let isLeapSecond = false;
        let thisUtc = convertTaiToUtc(julianDate, toGregorianDateScratch);
        if (!defined_default(thisUtc)) {
          JulianDate.addSeconds(julianDate, -1, toGregorianDateScratch);
          thisUtc = convertTaiToUtc(toGregorianDateScratch, toGregorianDateScratch);
          isLeapSecond = true;
        }
        let julianDayNumber = thisUtc.dayNumber;
        const secondsOfDay = thisUtc.secondsOfDay;
        if (secondsOfDay >= 43200) {
          julianDayNumber += 1;
        }
        let L = julianDayNumber + 68569 | 0;
        const N = 4 * L / 146097 | 0;
        L = L - ((146097 * N + 3) / 4 | 0) | 0;
        const I = 4e3 * (L + 1) / 1461001 | 0;
        L = L - (1461 * I / 4 | 0) + 31 | 0;
        const J = 80 * L / 2447 | 0;
        const day = L - (2447 * J / 80 | 0) | 0;
        L = J / 11 | 0;
        const month = J + 2 - 12 * L | 0;
        const year = 100 * (N - 49) + I + L | 0;
        let hour = secondsOfDay / TimeConstants_default.SECONDS_PER_HOUR | 0;
        let remainingSeconds = secondsOfDay - hour * TimeConstants_default.SECONDS_PER_HOUR;
        const minute = remainingSeconds / TimeConstants_default.SECONDS_PER_MINUTE | 0;
        remainingSeconds = remainingSeconds - minute * TimeConstants_default.SECONDS_PER_MINUTE;
        let second = remainingSeconds | 0;
        const millisecond = (remainingSeconds - second) / TimeConstants_default.SECONDS_PER_MILLISECOND;
        hour += 12;
        if (hour > 23) {
          hour -= 24;
        }
        if (isLeapSecond) {
          second += 1;
        }
        if (!defined_default(result)) {
          return new GregorianDate_default(
            year,
            month,
            day,
            hour,
            minute,
            second,
            millisecond,
            isLeapSecond
          );
        }
        result.year = year;
        result.month = month;
        result.day = day;
        result.hour = hour;
        result.minute = minute;
        result.second = second;
        result.millisecond = millisecond;
        result.isLeapSecond = isLeapSecond;
        return result;
      };
      JulianDate.toDate = function(julianDate) {
        if (!defined_default(julianDate)) {
          throw new DeveloperError_default("julianDate is required.");
        }
        const gDate = JulianDate.toGregorianDate(julianDate, gregorianDateScratch);
        let second = gDate.second;
        if (gDate.isLeapSecond) {
          second -= 1;
        }
        return new Date(
          Date.UTC(
            gDate.year,
            gDate.month - 1,
            gDate.day,
            gDate.hour,
            gDate.minute,
            second,
            gDate.millisecond
          )
        );
      };
      JulianDate.toIso8601 = function(julianDate, precision) {
        if (!defined_default(julianDate)) {
          throw new DeveloperError_default("julianDate is required.");
        }
        const gDate = JulianDate.toGregorianDate(julianDate, gregorianDateScratch);
        let year = gDate.year;
        let month = gDate.month;
        let day = gDate.day;
        let hour = gDate.hour;
        const minute = gDate.minute;
        const second = gDate.second;
        const millisecond = gDate.millisecond;
        if (year === 1e4 && month === 1 && day === 1 && hour === 0 && minute === 0 && second === 0 && millisecond === 0) {
          year = 9999;
          month = 12;
          day = 31;
          hour = 24;
        }
        let millisecondStr;
        if (!defined_default(precision) && millisecond !== 0) {
          millisecondStr = (millisecond * 0.01).toString().replace(".", "");
          return `${year.toString().padStart(4, "0")}-${month.toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}T${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}:${second.toString().padStart(2, "0")}.${millisecondStr}Z`;
        }
        if (!defined_default(precision) || precision === 0) {
          return `${year.toString().padStart(4, "0")}-${month.toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}T${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}:${second.toString().padStart(2, "0")}Z`;
        }
        millisecondStr = (millisecond * 0.01).toFixed(precision).replace(".", "").slice(0, precision);
        return `${year.toString().padStart(4, "0")}-${month.toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}T${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}:${second.toString().padStart(2, "0")}.${millisecondStr}Z`;
      };
      JulianDate.clone = function(julianDate, result) {
        if (!defined_default(julianDate)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new JulianDate(
            julianDate.dayNumber,
            julianDate.secondsOfDay,
            TimeStandard_default.TAI
          );
        }
        result.dayNumber = julianDate.dayNumber;
        result.secondsOfDay = julianDate.secondsOfDay;
        return result;
      };
      JulianDate.compare = function(left, right) {
        if (!defined_default(left)) {
          throw new DeveloperError_default("left is required.");
        }
        if (!defined_default(right)) {
          throw new DeveloperError_default("right is required.");
        }
        const julianDayNumberDifference = left.dayNumber - right.dayNumber;
        if (julianDayNumberDifference !== 0) {
          return julianDayNumberDifference;
        }
        return left.secondsOfDay - right.secondsOfDay;
      };
      JulianDate.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.dayNumber === right.dayNumber && left.secondsOfDay === right.secondsOfDay;
      };
      JulianDate.equalsEpsilon = function(left, right, epsilon) {
        epsilon = defaultValue_default(epsilon, 0);
        return left === right || defined_default(left) && defined_default(right) && Math.abs(JulianDate.secondsDifference(left, right)) <= epsilon;
      };
      JulianDate.totalDays = function(julianDate) {
        if (!defined_default(julianDate)) {
          throw new DeveloperError_default("julianDate is required.");
        }
        return julianDate.dayNumber + julianDate.secondsOfDay / TimeConstants_default.SECONDS_PER_DAY;
      };
      JulianDate.secondsDifference = function(left, right) {
        if (!defined_default(left)) {
          throw new DeveloperError_default("left is required.");
        }
        if (!defined_default(right)) {
          throw new DeveloperError_default("right is required.");
        }
        const dayDifference = (left.dayNumber - right.dayNumber) * TimeConstants_default.SECONDS_PER_DAY;
        return dayDifference + (left.secondsOfDay - right.secondsOfDay);
      };
      JulianDate.daysDifference = function(left, right) {
        if (!defined_default(left)) {
          throw new DeveloperError_default("left is required.");
        }
        if (!defined_default(right)) {
          throw new DeveloperError_default("right is required.");
        }
        const dayDifference = left.dayNumber - right.dayNumber;
        const secondDifference = (left.secondsOfDay - right.secondsOfDay) / TimeConstants_default.SECONDS_PER_DAY;
        return dayDifference + secondDifference;
      };
      JulianDate.computeTaiMinusUtc = function(julianDate) {
        binarySearchScratchLeapSecond.julianDate = julianDate;
        const leapSeconds = JulianDate.leapSeconds;
        let index = binarySearch_default(
          leapSeconds,
          binarySearchScratchLeapSecond,
          compareLeapSecondDates
        );
        if (index < 0) {
          index = ~index;
          --index;
          if (index < 0) {
            index = 0;
          }
        }
        return leapSeconds[index].offset;
      };
      JulianDate.addSeconds = function(julianDate, seconds, result) {
        if (!defined_default(julianDate)) {
          throw new DeveloperError_default("julianDate is required.");
        }
        if (!defined_default(seconds)) {
          throw new DeveloperError_default("seconds is required.");
        }
        if (!defined_default(result)) {
          throw new DeveloperError_default("result is required.");
        }
        return setComponents(
          julianDate.dayNumber,
          julianDate.secondsOfDay + seconds,
          result
        );
      };
      JulianDate.addMinutes = function(julianDate, minutes, result) {
        if (!defined_default(julianDate)) {
          throw new DeveloperError_default("julianDate is required.");
        }
        if (!defined_default(minutes)) {
          throw new DeveloperError_default("minutes is required.");
        }
        if (!defined_default(result)) {
          throw new DeveloperError_default("result is required.");
        }
        const newSecondsOfDay = julianDate.secondsOfDay + minutes * TimeConstants_default.SECONDS_PER_MINUTE;
        return setComponents(julianDate.dayNumber, newSecondsOfDay, result);
      };
      JulianDate.addHours = function(julianDate, hours, result) {
        if (!defined_default(julianDate)) {
          throw new DeveloperError_default("julianDate is required.");
        }
        if (!defined_default(hours)) {
          throw new DeveloperError_default("hours is required.");
        }
        if (!defined_default(result)) {
          throw new DeveloperError_default("result is required.");
        }
        const newSecondsOfDay = julianDate.secondsOfDay + hours * TimeConstants_default.SECONDS_PER_HOUR;
        return setComponents(julianDate.dayNumber, newSecondsOfDay, result);
      };
      JulianDate.addDays = function(julianDate, days, result) {
        if (!defined_default(julianDate)) {
          throw new DeveloperError_default("julianDate is required.");
        }
        if (!defined_default(days)) {
          throw new DeveloperError_default("days is required.");
        }
        if (!defined_default(result)) {
          throw new DeveloperError_default("result is required.");
        }
        const newJulianDayNumber = julianDate.dayNumber + days;
        return setComponents(newJulianDayNumber, julianDate.secondsOfDay, result);
      };
      JulianDate.lessThan = function(left, right) {
        return JulianDate.compare(left, right) < 0;
      };
      JulianDate.lessThanOrEquals = function(left, right) {
        return JulianDate.compare(left, right) <= 0;
      };
      JulianDate.greaterThan = function(left, right) {
        return JulianDate.compare(left, right) > 0;
      };
      JulianDate.greaterThanOrEquals = function(left, right) {
        return JulianDate.compare(left, right) >= 0;
      };
      JulianDate.prototype.clone = function(result) {
        return JulianDate.clone(this, result);
      };
      JulianDate.prototype.equals = function(right) {
        return JulianDate.equals(this, right);
      };
      JulianDate.prototype.equalsEpsilon = function(right, epsilon) {
        return JulianDate.equalsEpsilon(this, right, epsilon);
      };
      JulianDate.prototype.toString = function() {
        return JulianDate.toIso8601(this);
      };
      JulianDate.leapSeconds = [
        new LeapSecond_default(new JulianDate(2441317, 43210, TimeStandard_default.TAI), 10),
        // January 1, 1972 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2441499, 43211, TimeStandard_default.TAI), 11),
        // July 1, 1972 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2441683, 43212, TimeStandard_default.TAI), 12),
        // January 1, 1973 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2442048, 43213, TimeStandard_default.TAI), 13),
        // January 1, 1974 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2442413, 43214, TimeStandard_default.TAI), 14),
        // January 1, 1975 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2442778, 43215, TimeStandard_default.TAI), 15),
        // January 1, 1976 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2443144, 43216, TimeStandard_default.TAI), 16),
        // January 1, 1977 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2443509, 43217, TimeStandard_default.TAI), 17),
        // January 1, 1978 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2443874, 43218, TimeStandard_default.TAI), 18),
        // January 1, 1979 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2444239, 43219, TimeStandard_default.TAI), 19),
        // January 1, 1980 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2444786, 43220, TimeStandard_default.TAI), 20),
        // July 1, 1981 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2445151, 43221, TimeStandard_default.TAI), 21),
        // July 1, 1982 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2445516, 43222, TimeStandard_default.TAI), 22),
        // July 1, 1983 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2446247, 43223, TimeStandard_default.TAI), 23),
        // July 1, 1985 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2447161, 43224, TimeStandard_default.TAI), 24),
        // January 1, 1988 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2447892, 43225, TimeStandard_default.TAI), 25),
        // January 1, 1990 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2448257, 43226, TimeStandard_default.TAI), 26),
        // January 1, 1991 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2448804, 43227, TimeStandard_default.TAI), 27),
        // July 1, 1992 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2449169, 43228, TimeStandard_default.TAI), 28),
        // July 1, 1993 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2449534, 43229, TimeStandard_default.TAI), 29),
        // July 1, 1994 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2450083, 43230, TimeStandard_default.TAI), 30),
        // January 1, 1996 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2450630, 43231, TimeStandard_default.TAI), 31),
        // July 1, 1997 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2451179, 43232, TimeStandard_default.TAI), 32),
        // January 1, 1999 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2453736, 43233, TimeStandard_default.TAI), 33),
        // January 1, 2006 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2454832, 43234, TimeStandard_default.TAI), 34),
        // January 1, 2009 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2456109, 43235, TimeStandard_default.TAI), 35),
        // July 1, 2012 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2457204, 43236, TimeStandard_default.TAI), 36),
        // July 1, 2015 00:00:00 UTC
        new LeapSecond_default(new JulianDate(2457754, 43237, TimeStandard_default.TAI), 37)
        // January 1, 2017 00:00:00 UTC
      ];
      JulianDate_default = JulianDate;
    }
  });

  // node_modules/urijs/src/punycode.js
  var require_punycode = __commonJS({
    "node_modules/urijs/src/punycode.js"(exports2, module) {
      /*! https://mths.be/punycode v1.4.0 by @mathias */
      (function(root) {
        var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
        var freeModule = typeof module == "object" && module && !module.nodeType && module;
        var freeGlobal = typeof global == "object" && global;
        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
          root = freeGlobal;
        }
        var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
          "overflow": "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
        function error(type) {
          throw new RangeError(errors[type]);
        }
        function map(array, fn) {
          var length = array.length;
          var result = [];
          while (length--) {
            result[length] = fn(array[length]);
          }
          return result;
        }
        function mapDomain(string, fn) {
          var parts = string.split("@");
          var result = "";
          if (parts.length > 1) {
            result = parts[0] + "@";
            string = parts[1];
          }
          string = string.replace(regexSeparators, ".");
          var labels = string.split(".");
          var encoded = map(labels, fn).join(".");
          return result + encoded;
        }
        function ucs2decode(string) {
          var output = [], counter = 0, length = string.length, value, extra;
          while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
              extra = string.charCodeAt(counter++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        function ucs2encode(array) {
          return map(array, function(value) {
            var output = "";
            if (value > 65535) {
              value -= 65536;
              output += stringFromCharCode(value >>> 10 & 1023 | 55296);
              value = 56320 | value & 1023;
            }
            output += stringFromCharCode(value);
            return output;
          }).join("");
        }
        function basicToDigit(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        }
        function digitToBasic(digit, flag) {
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }
        function adapt(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        }
        function decode3(input) {
          var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
          basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }
          for (j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
              error("not-basic");
            }
            output.push(input.charCodeAt(j));
          }
          for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
            for (oldi = i, w = 1, k = base; ; k += base) {
              if (index >= inputLength) {
                error("invalid-input");
              }
              digit = basicToDigit(input.charCodeAt(index++));
              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error("overflow");
              }
              i += digit * w;
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (digit < t) {
                break;
              }
              baseMinusT = base - t;
              if (w > floor(maxInt / baseMinusT)) {
                error("overflow");
              }
              w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
              error("overflow");
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
          }
          return ucs2encode(output);
        }
        function encode(input) {
          var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
          input = ucs2decode(input);
          inputLength = input.length;
          n = initialN;
          delta = 0;
          bias = initialBias;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < 128) {
              output.push(stringFromCharCode(currentValue));
            }
          }
          handledCPCount = basicLength = output.length;
          if (basicLength) {
            output.push(delimiter);
          }
          while (handledCPCount < inputLength) {
            for (m = maxInt, j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error("overflow");
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue < n && ++delta > maxInt) {
                error("overflow");
              }
              if (currentValue == n) {
                for (q = delta, k = base; ; k += base) {
                  t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) {
                    break;
                  }
                  qMinusT = q - t;
                  baseMinusT = base - t;
                  output.push(
                    stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                  );
                  q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }
            ++delta;
            ++n;
          }
          return output.join("");
        }
        function toUnicode(input) {
          return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode3(string.slice(4).toLowerCase()) : string;
          });
        }
        function toASCII(input) {
          return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
          });
        }
        punycode = {
          /**
           * A string representing the current Punycode.js version number.
           * @memberOf punycode
           * @type String
           */
          "version": "1.3.2",
          /**
           * An object of methods to convert from JavaScript's internal character
           * representation (UCS-2) to Unicode code points, and back.
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode
           * @type Object
           */
          "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
          },
          "decode": decode3,
          "encode": encode,
          "toASCII": toASCII,
          "toUnicode": toUnicode
        };
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          define("punycode", function() {
            return punycode;
          });
        } else if (freeExports && freeModule) {
          if (module.exports == freeExports) {
            freeModule.exports = punycode;
          } else {
            for (key in punycode) {
              punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
            }
          }
        } else {
          root.punycode = punycode;
        }
      })(exports2);
    }
  });

  // node_modules/urijs/src/IPv6.js
  var require_IPv6 = __commonJS({
    "node_modules/urijs/src/IPv6.js"(exports2, module) {
      /*!
       * URI.js - Mutating URLs
       * IPv6 Support
       *
       * Version: 1.19.11
       *
       * Author: Rodney Rehm
       * Web: http://medialize.github.io/URI.js/
       *
       * Licensed under
       *   MIT License http://www.opensource.org/licenses/mit-license
       *
       */
      (function(root, factory) {
        "use strict";
        if (typeof module === "object" && module.exports) {
          module.exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          root.IPv6 = factory(root);
        }
      })(exports2, function(root) {
        "use strict";
        var _IPv6 = root && root.IPv6;
        function bestPresentation(address) {
          var _address = address.toLowerCase();
          var segments = _address.split(":");
          var length = segments.length;
          var total = 8;
          if (segments[0] === "" && segments[1] === "" && segments[2] === "") {
            segments.shift();
            segments.shift();
          } else if (segments[0] === "" && segments[1] === "") {
            segments.shift();
          } else if (segments[length - 1] === "" && segments[length - 2] === "") {
            segments.pop();
          }
          length = segments.length;
          if (segments[length - 1].indexOf(".") !== -1) {
            total = 7;
          }
          var pos;
          for (pos = 0; pos < length; pos++) {
            if (segments[pos] === "") {
              break;
            }
          }
          if (pos < total) {
            segments.splice(pos, 1, "0000");
            while (segments.length < total) {
              segments.splice(pos, 0, "0000");
            }
          }
          var _segments;
          for (var i = 0; i < total; i++) {
            _segments = segments[i].split("");
            for (var j = 0; j < 3; j++) {
              if (_segments[0] === "0" && _segments.length > 1) {
                _segments.splice(0, 1);
              } else {
                break;
              }
            }
            segments[i] = _segments.join("");
          }
          var best = -1;
          var _best = 0;
          var _current = 0;
          var current = -1;
          var inzeroes = false;
          for (i = 0; i < total; i++) {
            if (inzeroes) {
              if (segments[i] === "0") {
                _current += 1;
              } else {
                inzeroes = false;
                if (_current > _best) {
                  best = current;
                  _best = _current;
                }
              }
            } else {
              if (segments[i] === "0") {
                inzeroes = true;
                current = i;
                _current = 1;
              }
            }
          }
          if (_current > _best) {
            best = current;
            _best = _current;
          }
          if (_best > 1) {
            segments.splice(best, _best, "");
          }
          length = segments.length;
          var result = "";
          if (segments[0] === "") {
            result = ":";
          }
          for (i = 0; i < length; i++) {
            result += segments[i];
            if (i === length - 1) {
              break;
            }
            result += ":";
          }
          if (segments[length - 1] === "") {
            result += ":";
          }
          return result;
        }
        function noConflict() {
          if (root.IPv6 === this) {
            root.IPv6 = _IPv6;
          }
          return this;
        }
        return {
          best: bestPresentation,
          noConflict
        };
      });
    }
  });

  // node_modules/urijs/src/SecondLevelDomains.js
  var require_SecondLevelDomains = __commonJS({
    "node_modules/urijs/src/SecondLevelDomains.js"(exports2, module) {
      /*!
       * URI.js - Mutating URLs
       * Second Level Domain (SLD) Support
       *
       * Version: 1.19.11
       *
       * Author: Rodney Rehm
       * Web: http://medialize.github.io/URI.js/
       *
       * Licensed under
       *   MIT License http://www.opensource.org/licenses/mit-license
       *
       */
      (function(root, factory) {
        "use strict";
        if (typeof module === "object" && module.exports) {
          module.exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          root.SecondLevelDomains = factory(root);
        }
      })(exports2, function(root) {
        "use strict";
        var _SecondLevelDomains = root && root.SecondLevelDomains;
        var SLD = {
          // list of known Second Level Domains
          // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
          // ----
          // publicsuffix.org is more current and actually used by a couple of browsers internally.
          // downside is it also contains domains like "dyndns.org" - which is fine for the security
          // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
          // ----
          list: {
            "ac": " com gov mil net org ",
            "ae": " ac co gov mil name net org pro sch ",
            "af": " com edu gov net org ",
            "al": " com edu gov mil net org ",
            "ao": " co ed gv it og pb ",
            "ar": " com edu gob gov int mil net org tur ",
            "at": " ac co gv or ",
            "au": " asn com csiro edu gov id net org ",
            "ba": " co com edu gov mil net org rs unbi unmo unsa untz unze ",
            "bb": " biz co com edu gov info net org store tv ",
            "bh": " biz cc com edu gov info net org ",
            "bn": " com edu gov net org ",
            "bo": " com edu gob gov int mil net org tv ",
            "br": " adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ",
            "bs": " com edu gov net org ",
            "bz": " du et om ov rg ",
            "ca": " ab bc mb nb nf nl ns nt nu on pe qc sk yk ",
            "ck": " biz co edu gen gov info net org ",
            "cn": " ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ",
            "co": " com edu gov mil net nom org ",
            "cr": " ac c co ed fi go or sa ",
            "cy": " ac biz com ekloges gov ltd name net org parliament press pro tm ",
            "do": " art com edu gob gov mil net org sld web ",
            "dz": " art asso com edu gov net org pol ",
            "ec": " com edu fin gov info med mil net org pro ",
            "eg": " com edu eun gov mil name net org sci ",
            "er": " com edu gov ind mil net org rochest w ",
            "es": " com edu gob nom org ",
            "et": " biz com edu gov info name net org ",
            "fj": " ac biz com info mil name net org pro ",
            "fk": " ac co gov net nom org ",
            "fr": " asso com f gouv nom prd presse tm ",
            "gg": " co net org ",
            "gh": " com edu gov mil org ",
            "gn": " ac com gov net org ",
            "gr": " com edu gov mil net org ",
            "gt": " com edu gob ind mil net org ",
            "gu": " com edu gov net org ",
            "hk": " com edu gov idv net org ",
            "hu": " 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ",
            "id": " ac co go mil net or sch web ",
            "il": " ac co gov idf k12 muni net org ",
            "in": " ac co edu ernet firm gen gov i ind mil net nic org res ",
            "iq": " com edu gov i mil net org ",
            "ir": " ac co dnssec gov i id net org sch ",
            "it": " edu gov ",
            "je": " co net org ",
            "jo": " com edu gov mil name net org sch ",
            "jp": " ac ad co ed go gr lg ne or ",
            "ke": " ac co go info me mobi ne or sc ",
            "kh": " com edu gov mil net org per ",
            "ki": " biz com de edu gov info mob net org tel ",
            "km": " asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ",
            "kn": " edu gov net org ",
            "kr": " ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ",
            "kw": " com edu gov net org ",
            "ky": " com edu gov net org ",
            "kz": " com edu gov mil net org ",
            "lb": " com edu gov net org ",
            "lk": " assn com edu gov grp hotel int ltd net ngo org sch soc web ",
            "lr": " com edu gov net org ",
            "lv": " asn com conf edu gov id mil net org ",
            "ly": " com edu gov id med net org plc sch ",
            "ma": " ac co gov m net org press ",
            "mc": " asso tm ",
            "me": " ac co edu gov its net org priv ",
            "mg": " com edu gov mil nom org prd tm ",
            "mk": " com edu gov inf name net org pro ",
            "ml": " com edu gov net org presse ",
            "mn": " edu gov org ",
            "mo": " com edu gov net org ",
            "mt": " com edu gov net org ",
            "mv": " aero biz com coop edu gov info int mil museum name net org pro ",
            "mw": " ac co com coop edu gov int museum net org ",
            "mx": " com edu gob net org ",
            "my": " com edu gov mil name net org sch ",
            "nf": " arts com firm info net other per rec store web ",
            "ng": " biz com edu gov mil mobi name net org sch ",
            "ni": " ac co com edu gob mil net nom org ",
            "np": " com edu gov mil net org ",
            "nr": " biz com edu gov info net org ",
            "om": " ac biz co com edu gov med mil museum net org pro sch ",
            "pe": " com edu gob mil net nom org sld ",
            "ph": " com edu gov i mil net ngo org ",
            "pk": " biz com edu fam gob gok gon gop gos gov net org web ",
            "pl": " art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ",
            "pr": " ac biz com edu est gov info isla name net org pro prof ",
            "ps": " com edu gov net org plo sec ",
            "pw": " belau co ed go ne or ",
            "ro": " arts com firm info nom nt org rec store tm www ",
            "rs": " ac co edu gov in org ",
            "sb": " com edu gov net org ",
            "sc": " com edu gov net org ",
            "sh": " co com edu gov net nom org ",
            "sl": " com edu gov net org ",
            "st": " co com consulado edu embaixada gov mil net org principe saotome store ",
            "sv": " com edu gob org red ",
            "sz": " ac co org ",
            "tr": " av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ",
            "tt": " aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ",
            "tw": " club com ebiz edu game gov idv mil net org ",
            "mu": " ac co com gov net or org ",
            "mz": " ac co edu gov org ",
            "na": " co com ",
            "nz": " ac co cri geek gen govt health iwi maori mil net org parliament school ",
            "pa": " abo ac com edu gob ing med net nom org sld ",
            "pt": " com edu gov int net nome org publ ",
            "py": " com edu gov mil net org ",
            "qa": " com edu gov mil net org ",
            "re": " asso com nom ",
            "ru": " ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ",
            "rw": " ac co com edu gouv gov int mil net ",
            "sa": " com edu gov med net org pub sch ",
            "sd": " com edu gov info med net org tv ",
            "se": " a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ",
            "sg": " com edu gov idn net org per ",
            "sn": " art com edu gouv org perso univ ",
            "sy": " com edu gov mil net news org ",
            "th": " ac co go in mi net or ",
            "tj": " ac biz co com edu go gov info int mil name net nic org test web ",
            "tn": " agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ",
            "tz": " ac co go ne or ",
            "ua": " biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ",
            "ug": " ac co go ne or org sc ",
            "uk": " ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ",
            "us": " dni fed isa kids nsn ",
            "uy": " com edu gub mil net org ",
            "ve": " co com edu gob info mil net org web ",
            "vi": " co com k12 net org ",
            "vn": " ac biz com edu gov health info int name net org pro ",
            "ye": " co com gov ltd me net org plc ",
            "yu": " ac co edu gov org ",
            "za": " ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ",
            "zm": " ac co com edu gov net org sch ",
            // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains
            "com": "ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ",
            "net": "gb jp se uk ",
            "org": "ae",
            "de": "com "
          },
          // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
          // in both performance and memory footprint. No initialization required.
          // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
          // Following methods use lastIndexOf() rather than array.split() in order
          // to avoid any memory allocations.
          has: function(domain) {
            var tldOffset = domain.lastIndexOf(".");
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
              return false;
            }
            var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
            if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
              return false;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
              return false;
            }
            return sldList.indexOf(" " + domain.slice(sldOffset + 1, tldOffset) + " ") >= 0;
          },
          is: function(domain) {
            var tldOffset = domain.lastIndexOf(".");
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
              return false;
            }
            var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
            if (sldOffset >= 0) {
              return false;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
              return false;
            }
            return sldList.indexOf(" " + domain.slice(0, tldOffset) + " ") >= 0;
          },
          get: function(domain) {
            var tldOffset = domain.lastIndexOf(".");
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
              return null;
            }
            var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
            if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
              return null;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
              return null;
            }
            if (sldList.indexOf(" " + domain.slice(sldOffset + 1, tldOffset) + " ") < 0) {
              return null;
            }
            return domain.slice(sldOffset + 1);
          },
          noConflict: function() {
            if (root.SecondLevelDomains === this) {
              root.SecondLevelDomains = _SecondLevelDomains;
            }
            return this;
          }
        };
        return SLD;
      });
    }
  });

  // node_modules/urijs/src/URI.js
  var require_URI = __commonJS({
    "node_modules/urijs/src/URI.js"(exports2, module) {
      /*!
       * URI.js - Mutating URLs
       *
       * Version: 1.19.11
       *
       * Author: Rodney Rehm
       * Web: http://medialize.github.io/URI.js/
       *
       * Licensed under
       *   MIT License http://www.opensource.org/licenses/mit-license
       *
       */
      (function(root, factory) {
        "use strict";
        if (typeof module === "object" && module.exports) {
          module.exports = factory(require_punycode(), require_IPv6(), require_SecondLevelDomains());
        } else if (typeof define === "function" && define.amd) {
          define(["./punycode", "./IPv6", "./SecondLevelDomains"], factory);
        } else {
          root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
        }
      })(exports2, function(punycode, IPv6, SLD, root) {
        "use strict";
        var _URI = root && root.URI;
        function URI(url, base) {
          var _urlSupplied = arguments.length >= 1;
          var _baseSupplied = arguments.length >= 2;
          if (!(this instanceof URI)) {
            if (_urlSupplied) {
              if (_baseSupplied) {
                return new URI(url, base);
              }
              return new URI(url);
            }
            return new URI();
          }
          if (url === void 0) {
            if (_urlSupplied) {
              throw new TypeError("undefined is not a valid argument for URI");
            }
            if (typeof location !== "undefined") {
              url = location.href + "";
            } else {
              url = "";
            }
          }
          if (url === null) {
            if (_urlSupplied) {
              throw new TypeError("null is not a valid argument for URI");
            }
          }
          this.href(url);
          if (base !== void 0) {
            return this.absoluteTo(base);
          }
          return this;
        }
        function isInteger(value) {
          return /^[0-9]+$/.test(value);
        }
        URI.version = "1.19.11";
        var p = URI.prototype;
        var hasOwn = Object.prototype.hasOwnProperty;
        function escapeRegEx(string) {
          return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
        }
        function getType(value) {
          if (value === void 0) {
            return "Undefined";
          }
          return String(Object.prototype.toString.call(value)).slice(8, -1);
        }
        function isArray(obj) {
          return getType(obj) === "Array";
        }
        function filterArrayValues(data, value) {
          var lookup = {};
          var i, length;
          if (getType(value) === "RegExp") {
            lookup = null;
          } else if (isArray(value)) {
            for (i = 0, length = value.length; i < length; i++) {
              lookup[value[i]] = true;
            }
          } else {
            lookup[value] = true;
          }
          for (i = 0, length = data.length; i < length; i++) {
            var _match = lookup && lookup[data[i]] !== void 0 || !lookup && value.test(data[i]);
            if (_match) {
              data.splice(i, 1);
              length--;
              i--;
            }
          }
          return data;
        }
        function arrayContains(list, value) {
          var i, length;
          if (isArray(value)) {
            for (i = 0, length = value.length; i < length; i++) {
              if (!arrayContains(list, value[i])) {
                return false;
              }
            }
            return true;
          }
          var _type = getType(value);
          for (i = 0, length = list.length; i < length; i++) {
            if (_type === "RegExp") {
              if (typeof list[i] === "string" && list[i].match(value)) {
                return true;
              }
            } else if (list[i] === value) {
              return true;
            }
          }
          return false;
        }
        function arraysEqual(one, two) {
          if (!isArray(one) || !isArray(two)) {
            return false;
          }
          if (one.length !== two.length) {
            return false;
          }
          one.sort();
          two.sort();
          for (var i = 0, l = one.length; i < l; i++) {
            if (one[i] !== two[i]) {
              return false;
            }
          }
          return true;
        }
        function trimSlashes(text) {
          var trim_expression = /^\/+|\/+$/g;
          return text.replace(trim_expression, "");
        }
        URI._parts = function() {
          return {
            protocol: null,
            username: null,
            password: null,
            hostname: null,
            urn: null,
            port: null,
            path: null,
            query: null,
            fragment: null,
            // state
            preventInvalidHostname: URI.preventInvalidHostname,
            duplicateQueryParameters: URI.duplicateQueryParameters,
            escapeQuerySpace: URI.escapeQuerySpace
          };
        };
        URI.preventInvalidHostname = false;
        URI.duplicateQueryParameters = false;
        URI.escapeQuerySpace = true;
        URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
        URI.idn_expression = /[^a-z0-9\._-]/i;
        URI.punycode_expression = /(xn--)/i;
        URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
        URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
        URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
        URI.findUri = {
          // valid "scheme://" or "www."
          start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
          // everything up to the next whitespace
          end: /[\s\r\n]|$/,
          // trim trailing punctuation captured by end RegExp
          trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
          // balanced parens inclusion (), [], {}, <>
          parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g
        };
        URI.leading_whitespace_expression = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;
        URI.ascii_tab_whitespace = /[\u0009\u000A\u000D]+/g;
        URI.defaultPorts = {
          http: "80",
          https: "443",
          ftp: "21",
          gopher: "70",
          ws: "80",
          wss: "443"
        };
        URI.hostProtocols = [
          "http",
          "https"
        ];
        URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
        URI.domAttributes = {
          "a": "href",
          "blockquote": "cite",
          "link": "href",
          "base": "href",
          "script": "src",
          "form": "action",
          "img": "src",
          "area": "href",
          "iframe": "src",
          "embed": "src",
          "source": "src",
          "track": "src",
          "input": "src",
          // but only if type="image"
          "audio": "src",
          "video": "src"
        };
        URI.getDomAttribute = function(node) {
          if (!node || !node.nodeName) {
            return void 0;
          }
          var nodeName = node.nodeName.toLowerCase();
          if (nodeName === "input" && node.type !== "image") {
            return void 0;
          }
          return URI.domAttributes[nodeName];
        };
        function escapeForDumbFirefox36(value) {
          return escape(value);
        }
        function strictEncodeURIComponent(string) {
          return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, "%2A");
        }
        URI.encode = strictEncodeURIComponent;
        URI.decode = decodeURIComponent;
        URI.iso8859 = function() {
          URI.encode = escape;
          URI.decode = unescape;
        };
        URI.unicode = function() {
          URI.encode = strictEncodeURIComponent;
          URI.decode = decodeURIComponent;
        };
        URI.characters = {
          pathname: {
            encode: {
              // RFC3986 2.1: For consistency, URI producers and normalizers should
              // use uppercase hexadecimal digits for all percent-encodings.
              expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
              map: {
                // -._~!'()*
                "%24": "$",
                "%26": "&",
                "%2B": "+",
                "%2C": ",",
                "%3B": ";",
                "%3D": "=",
                "%3A": ":",
                "%40": "@"
              }
            },
            decode: {
              expression: /[\/\?#]/g,
              map: {
                "/": "%2F",
                "?": "%3F",
                "#": "%23"
              }
            }
          },
          reserved: {
            encode: {
              // RFC3986 2.1: For consistency, URI producers and normalizers should
              // use uppercase hexadecimal digits for all percent-encodings.
              expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
              map: {
                // gen-delims
                "%3A": ":",
                "%2F": "/",
                "%3F": "?",
                "%23": "#",
                "%5B": "[",
                "%5D": "]",
                "%40": "@",
                // sub-delims
                "%21": "!",
                "%24": "$",
                "%26": "&",
                "%27": "'",
                "%28": "(",
                "%29": ")",
                "%2A": "*",
                "%2B": "+",
                "%2C": ",",
                "%3B": ";",
                "%3D": "="
              }
            }
          },
          urnpath: {
            // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
            // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
            // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
            // note that the colon character is not featured in the encoding map; this is because URI.js
            // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
            // should not appear unencoded in a segment itself.
            // See also the note above about RFC3986 and capitalalized hex digits.
            encode: {
              expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
              map: {
                "%21": "!",
                "%24": "$",
                "%27": "'",
                "%28": "(",
                "%29": ")",
                "%2A": "*",
                "%2B": "+",
                "%2C": ",",
                "%3B": ";",
                "%3D": "=",
                "%40": "@"
              }
            },
            // These characters are the characters called out by RFC2141 as "reserved" characters that
            // should never appear in a URN, plus the colon character (see note above).
            decode: {
              expression: /[\/\?#:]/g,
              map: {
                "/": "%2F",
                "?": "%3F",
                "#": "%23",
                ":": "%3A"
              }
            }
          }
        };
        URI.encodeQuery = function(string, escapeQuerySpace) {
          var escaped = URI.encode(string + "");
          if (escapeQuerySpace === void 0) {
            escapeQuerySpace = URI.escapeQuerySpace;
          }
          return escapeQuerySpace ? escaped.replace(/%20/g, "+") : escaped;
        };
        URI.decodeQuery = function(string, escapeQuerySpace) {
          string += "";
          if (escapeQuerySpace === void 0) {
            escapeQuerySpace = URI.escapeQuerySpace;
          }
          try {
            return URI.decode(escapeQuerySpace ? string.replace(/\+/g, "%20") : string);
          } catch (e) {
            return string;
          }
        };
        var _parts = { "encode": "encode", "decode": "decode" };
        var _part;
        var generateAccessor = function(_group, _part2) {
          return function(string) {
            try {
              return URI[_part2](string + "").replace(URI.characters[_group][_part2].expression, function(c) {
                return URI.characters[_group][_part2].map[c];
              });
            } catch (e) {
              return string;
            }
          };
        };
        for (_part in _parts) {
          URI[_part + "PathSegment"] = generateAccessor("pathname", _parts[_part]);
          URI[_part + "UrnPathSegment"] = generateAccessor("urnpath", _parts[_part]);
        }
        var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
          return function(string) {
            var actualCodingFunc;
            if (!_innerCodingFuncName) {
              actualCodingFunc = URI[_codingFuncName];
            } else {
              actualCodingFunc = function(string2) {
                return URI[_codingFuncName](URI[_innerCodingFuncName](string2));
              };
            }
            var segments = (string + "").split(_sep);
            for (var i = 0, length = segments.length; i < length; i++) {
              segments[i] = actualCodingFunc(segments[i]);
            }
            return segments.join(_sep);
          };
        };
        URI.decodePath = generateSegmentedPathFunction("/", "decodePathSegment");
        URI.decodeUrnPath = generateSegmentedPathFunction(":", "decodeUrnPathSegment");
        URI.recodePath = generateSegmentedPathFunction("/", "encodePathSegment", "decode");
        URI.recodeUrnPath = generateSegmentedPathFunction(":", "encodeUrnPathSegment", "decode");
        URI.encodeReserved = generateAccessor("reserved", "encode");
        URI.parse = function(string, parts) {
          var pos;
          if (!parts) {
            parts = {
              preventInvalidHostname: URI.preventInvalidHostname
            };
          }
          string = string.replace(URI.leading_whitespace_expression, "");
          string = string.replace(URI.ascii_tab_whitespace, "");
          pos = string.indexOf("#");
          if (pos > -1) {
            parts.fragment = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
          }
          pos = string.indexOf("?");
          if (pos > -1) {
            parts.query = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
          }
          string = string.replace(/^(https?|ftp|wss?)?:+[/\\]*/i, "$1://");
          string = string.replace(/^[/\\]{2,}/i, "//");
          if (string.substring(0, 2) === "//") {
            parts.protocol = null;
            string = string.substring(2);
            string = URI.parseAuthority(string, parts);
          } else {
            pos = string.indexOf(":");
            if (pos > -1) {
              parts.protocol = string.substring(0, pos) || null;
              if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
                parts.protocol = void 0;
              } else if (string.substring(pos + 1, pos + 3).replace(/\\/g, "/") === "//") {
                string = string.substring(pos + 3);
                string = URI.parseAuthority(string, parts);
              } else {
                string = string.substring(pos + 1);
                parts.urn = true;
              }
            }
          }
          parts.path = string;
          return parts;
        };
        URI.parseHost = function(string, parts) {
          if (!string) {
            string = "";
          }
          string = string.replace(/\\/g, "/");
          var pos = string.indexOf("/");
          var bracketPos;
          var t;
          if (pos === -1) {
            pos = string.length;
          }
          if (string.charAt(0) === "[") {
            bracketPos = string.indexOf("]");
            parts.hostname = string.substring(1, bracketPos) || null;
            parts.port = string.substring(bracketPos + 2, pos) || null;
            if (parts.port === "/") {
              parts.port = null;
            }
          } else {
            var firstColon = string.indexOf(":");
            var firstSlash = string.indexOf("/");
            var nextColon = string.indexOf(":", firstColon + 1);
            if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
              parts.hostname = string.substring(0, pos) || null;
              parts.port = null;
            } else {
              t = string.substring(0, pos).split(":");
              parts.hostname = t[0] || null;
              parts.port = t[1] || null;
            }
          }
          if (parts.hostname && string.substring(pos).charAt(0) !== "/") {
            pos++;
            string = "/" + string;
          }
          if (parts.preventInvalidHostname) {
            URI.ensureValidHostname(parts.hostname, parts.protocol);
          }
          if (parts.port) {
            URI.ensureValidPort(parts.port);
          }
          return string.substring(pos) || "/";
        };
        URI.parseAuthority = function(string, parts) {
          string = URI.parseUserinfo(string, parts);
          return URI.parseHost(string, parts);
        };
        URI.parseUserinfo = function(string, parts) {
          var _string = string;
          var firstBackSlash = string.indexOf("\\");
          if (firstBackSlash !== -1) {
            string = string.replace(/\\/g, "/");
          }
          var firstSlash = string.indexOf("/");
          var pos = string.lastIndexOf("@", firstSlash > -1 ? firstSlash : string.length - 1);
          var t;
          if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
            t = string.substring(0, pos).split(":");
            parts.username = t[0] ? URI.decode(t[0]) : null;
            t.shift();
            parts.password = t[0] ? URI.decode(t.join(":")) : null;
            string = _string.substring(pos + 1);
          } else {
            parts.username = null;
            parts.password = null;
          }
          return string;
        };
        URI.parseQuery = function(string, escapeQuerySpace) {
          if (!string) {
            return {};
          }
          string = string.replace(/&+/g, "&").replace(/^\?*&*|&+$/g, "");
          if (!string) {
            return {};
          }
          var items = {};
          var splits = string.split("&");
          var length = splits.length;
          var v3, name, value;
          for (var i = 0; i < length; i++) {
            v3 = splits[i].split("=");
            name = URI.decodeQuery(v3.shift(), escapeQuerySpace);
            value = v3.length ? URI.decodeQuery(v3.join("="), escapeQuerySpace) : null;
            if (name === "__proto__") {
              continue;
            } else if (hasOwn.call(items, name)) {
              if (typeof items[name] === "string" || items[name] === null) {
                items[name] = [items[name]];
              }
              items[name].push(value);
            } else {
              items[name] = value;
            }
          }
          return items;
        };
        URI.build = function(parts) {
          var t = "";
          var requireAbsolutePath = false;
          if (parts.protocol) {
            t += parts.protocol + ":";
          }
          if (!parts.urn && (t || parts.hostname)) {
            t += "//";
            requireAbsolutePath = true;
          }
          t += URI.buildAuthority(parts) || "";
          if (typeof parts.path === "string") {
            if (parts.path.charAt(0) !== "/" && requireAbsolutePath) {
              t += "/";
            }
            t += parts.path;
          }
          if (typeof parts.query === "string" && parts.query) {
            t += "?" + parts.query;
          }
          if (typeof parts.fragment === "string" && parts.fragment) {
            t += "#" + parts.fragment;
          }
          return t;
        };
        URI.buildHost = function(parts) {
          var t = "";
          if (!parts.hostname) {
            return "";
          } else if (URI.ip6_expression.test(parts.hostname)) {
            t += "[" + parts.hostname + "]";
          } else {
            t += parts.hostname;
          }
          if (parts.port) {
            t += ":" + parts.port;
          }
          return t;
        };
        URI.buildAuthority = function(parts) {
          return URI.buildUserinfo(parts) + URI.buildHost(parts);
        };
        URI.buildUserinfo = function(parts) {
          var t = "";
          if (parts.username) {
            t += URI.encode(parts.username);
          }
          if (parts.password) {
            t += ":" + URI.encode(parts.password);
          }
          if (t) {
            t += "@";
          }
          return t;
        };
        URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
          var t = "";
          var unique, key, i, length;
          for (key in data) {
            if (key === "__proto__") {
              continue;
            } else if (hasOwn.call(data, key)) {
              if (isArray(data[key])) {
                unique = {};
                for (i = 0, length = data[key].length; i < length; i++) {
                  if (data[key][i] !== void 0 && unique[data[key][i] + ""] === void 0) {
                    t += "&" + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
                    if (duplicateQueryParameters !== true) {
                      unique[data[key][i] + ""] = true;
                    }
                  }
                }
              } else if (data[key] !== void 0) {
                t += "&" + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
              }
            }
          }
          return t.substring(1);
        };
        URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
          return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? "=" + URI.encodeQuery(value, escapeQuerySpace) : "");
        };
        URI.addQuery = function(data, name, value) {
          if (typeof name === "object") {
            for (var key in name) {
              if (hasOwn.call(name, key)) {
                URI.addQuery(data, key, name[key]);
              }
            }
          } else if (typeof name === "string") {
            if (data[name] === void 0) {
              data[name] = value;
              return;
            } else if (typeof data[name] === "string") {
              data[name] = [data[name]];
            }
            if (!isArray(value)) {
              value = [value];
            }
            data[name] = (data[name] || []).concat(value);
          } else {
            throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
          }
        };
        URI.setQuery = function(data, name, value) {
          if (typeof name === "object") {
            for (var key in name) {
              if (hasOwn.call(name, key)) {
                URI.setQuery(data, key, name[key]);
              }
            }
          } else if (typeof name === "string") {
            data[name] = value === void 0 ? null : value;
          } else {
            throw new TypeError("URI.setQuery() accepts an object, string as the name parameter");
          }
        };
        URI.removeQuery = function(data, name, value) {
          var i, length, key;
          if (isArray(name)) {
            for (i = 0, length = name.length; i < length; i++) {
              data[name[i]] = void 0;
            }
          } else if (getType(name) === "RegExp") {
            for (key in data) {
              if (name.test(key)) {
                data[key] = void 0;
              }
            }
          } else if (typeof name === "object") {
            for (key in name) {
              if (hasOwn.call(name, key)) {
                URI.removeQuery(data, key, name[key]);
              }
            }
          } else if (typeof name === "string") {
            if (value !== void 0) {
              if (getType(value) === "RegExp") {
                if (!isArray(data[name]) && value.test(data[name])) {
                  data[name] = void 0;
                } else {
                  data[name] = filterArrayValues(data[name], value);
                }
              } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
                data[name] = void 0;
              } else if (isArray(data[name])) {
                data[name] = filterArrayValues(data[name], value);
              }
            } else {
              data[name] = void 0;
            }
          } else {
            throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");
          }
        };
        URI.hasQuery = function(data, name, value, withinArray) {
          switch (getType(name)) {
            case "String":
              break;
            case "RegExp":
              for (var key in data) {
                if (hasOwn.call(data, key)) {
                  if (name.test(key) && (value === void 0 || URI.hasQuery(data, key, value))) {
                    return true;
                  }
                }
              }
              return false;
            case "Object":
              for (var _key in name) {
                if (hasOwn.call(name, _key)) {
                  if (!URI.hasQuery(data, _key, name[_key])) {
                    return false;
                  }
                }
              }
              return true;
            default:
              throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter");
          }
          switch (getType(value)) {
            case "Undefined":
              return name in data;
            case "Boolean":
              var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
              return value === _booly;
            case "Function":
              return !!value(data[name], name, data);
            case "Array":
              if (!isArray(data[name])) {
                return false;
              }
              var op = withinArray ? arrayContains : arraysEqual;
              return op(data[name], value);
            case "RegExp":
              if (!isArray(data[name])) {
                return Boolean(data[name] && data[name].match(value));
              }
              if (!withinArray) {
                return false;
              }
              return arrayContains(data[name], value);
            case "Number":
              value = String(value);
            case "String":
              if (!isArray(data[name])) {
                return data[name] === value;
              }
              if (!withinArray) {
                return false;
              }
              return arrayContains(data[name], value);
            default:
              throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter");
          }
        };
        URI.joinPaths = function() {
          var input = [];
          var segments = [];
          var nonEmptySegments = 0;
          for (var i = 0; i < arguments.length; i++) {
            var url = new URI(arguments[i]);
            input.push(url);
            var _segments = url.segment();
            for (var s = 0; s < _segments.length; s++) {
              if (typeof _segments[s] === "string") {
                segments.push(_segments[s]);
              }
              if (_segments[s]) {
                nonEmptySegments++;
              }
            }
          }
          if (!segments.length || !nonEmptySegments) {
            return new URI("");
          }
          var uri = new URI("").segment(segments);
          if (input[0].path() === "" || input[0].path().slice(0, 1) === "/") {
            uri.path("/" + uri.path());
          }
          return uri.normalize();
        };
        URI.commonPath = function(one, two) {
          var length = Math.min(one.length, two.length);
          var pos;
          for (pos = 0; pos < length; pos++) {
            if (one.charAt(pos) !== two.charAt(pos)) {
              pos--;
              break;
            }
          }
          if (pos < 1) {
            return one.charAt(0) === two.charAt(0) && one.charAt(0) === "/" ? "/" : "";
          }
          if (one.charAt(pos) !== "/" || two.charAt(pos) !== "/") {
            pos = one.substring(0, pos).lastIndexOf("/");
          }
          return one.substring(0, pos + 1);
        };
        URI.withinString = function(string, callback, options) {
          options || (options = {});
          var _start = options.start || URI.findUri.start;
          var _end = options.end || URI.findUri.end;
          var _trim = options.trim || URI.findUri.trim;
          var _parens = options.parens || URI.findUri.parens;
          var _attributeOpen = /[a-z0-9-]=["']?$/i;
          _start.lastIndex = 0;
          while (true) {
            var match = _start.exec(string);
            if (!match) {
              break;
            }
            var start = match.index;
            if (options.ignoreHtml) {
              var attributeOpen = string.slice(Math.max(start - 3, 0), start);
              if (attributeOpen && _attributeOpen.test(attributeOpen)) {
                continue;
              }
            }
            var end = start + string.slice(start).search(_end);
            var slice = string.slice(start, end);
            var parensEnd = -1;
            while (true) {
              var parensMatch = _parens.exec(slice);
              if (!parensMatch) {
                break;
              }
              var parensMatchEnd = parensMatch.index + parensMatch[0].length;
              parensEnd = Math.max(parensEnd, parensMatchEnd);
            }
            if (parensEnd > -1) {
              slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, "");
            } else {
              slice = slice.replace(_trim, "");
            }
            if (slice.length <= match[0].length) {
              continue;
            }
            if (options.ignore && options.ignore.test(slice)) {
              continue;
            }
            end = start + slice.length;
            var result = callback(slice, start, end, string);
            if (result === void 0) {
              _start.lastIndex = end;
              continue;
            }
            result = String(result);
            string = string.slice(0, start) + result + string.slice(end);
            _start.lastIndex = start + result.length;
          }
          _start.lastIndex = 0;
          return string;
        };
        URI.ensureValidHostname = function(v3, protocol) {
          var hasHostname = !!v3;
          var hasProtocol = !!protocol;
          var rejectEmptyHostname = false;
          if (hasProtocol) {
            rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
          }
          if (rejectEmptyHostname && !hasHostname) {
            throw new TypeError("Hostname cannot be empty, if protocol is " + protocol);
          } else if (v3 && v3.match(URI.invalid_hostname_characters)) {
            if (!punycode) {
              throw new TypeError('Hostname "' + v3 + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
            }
            if (punycode.toASCII(v3).match(URI.invalid_hostname_characters)) {
              throw new TypeError('Hostname "' + v3 + '" contains characters other than [A-Z0-9.-:_]');
            }
          }
        };
        URI.ensureValidPort = function(v3) {
          if (!v3) {
            return;
          }
          var port = Number(v3);
          if (isInteger(port) && port > 0 && port < 65536) {
            return;
          }
          throw new TypeError('Port "' + v3 + '" is not a valid port');
        };
        URI.noConflict = function(removeAll) {
          if (removeAll) {
            var unconflicted = {
              URI: this.noConflict()
            };
            if (root.URITemplate && typeof root.URITemplate.noConflict === "function") {
              unconflicted.URITemplate = root.URITemplate.noConflict();
            }
            if (root.IPv6 && typeof root.IPv6.noConflict === "function") {
              unconflicted.IPv6 = root.IPv6.noConflict();
            }
            if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === "function") {
              unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
            }
            return unconflicted;
          } else if (root.URI === this) {
            root.URI = _URI;
          }
          return this;
        };
        p.build = function(deferBuild) {
          if (deferBuild === true) {
            this._deferred_build = true;
          } else if (deferBuild === void 0 || this._deferred_build) {
            this._string = URI.build(this._parts);
            this._deferred_build = false;
          }
          return this;
        };
        p.clone = function() {
          return new URI(this);
        };
        p.valueOf = p.toString = function() {
          return this.build(false)._string;
        };
        function generateSimpleAccessor(_part2) {
          return function(v3, build) {
            if (v3 === void 0) {
              return this._parts[_part2] || "";
            } else {
              this._parts[_part2] = v3 || null;
              this.build(!build);
              return this;
            }
          };
        }
        function generatePrefixAccessor(_part2, _key) {
          return function(v3, build) {
            if (v3 === void 0) {
              return this._parts[_part2] || "";
            } else {
              if (v3 !== null) {
                v3 = v3 + "";
                if (v3.charAt(0) === _key) {
                  v3 = v3.substring(1);
                }
              }
              this._parts[_part2] = v3;
              this.build(!build);
              return this;
            }
          };
        }
        p.protocol = generateSimpleAccessor("protocol");
        p.username = generateSimpleAccessor("username");
        p.password = generateSimpleAccessor("password");
        p.hostname = generateSimpleAccessor("hostname");
        p.port = generateSimpleAccessor("port");
        p.query = generatePrefixAccessor("query", "?");
        p.fragment = generatePrefixAccessor("fragment", "#");
        p.search = function(v3, build) {
          var t = this.query(v3, build);
          return typeof t === "string" && t.length ? "?" + t : t;
        };
        p.hash = function(v3, build) {
          var t = this.fragment(v3, build);
          return typeof t === "string" && t.length ? "#" + t : t;
        };
        p.pathname = function(v3, build) {
          if (v3 === void 0 || v3 === true) {
            var res = this._parts.path || (this._parts.hostname ? "/" : "");
            return v3 ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
          } else {
            if (this._parts.urn) {
              this._parts.path = v3 ? URI.recodeUrnPath(v3) : "";
            } else {
              this._parts.path = v3 ? URI.recodePath(v3) : "/";
            }
            this.build(!build);
            return this;
          }
        };
        p.path = p.pathname;
        p.href = function(href, build) {
          var key;
          if (href === void 0) {
            return this.toString();
          }
          this._string = "";
          this._parts = URI._parts();
          var _URI2 = href instanceof URI;
          var _object = typeof href === "object" && (href.hostname || href.path || href.pathname);
          if (href.nodeName) {
            var attribute = URI.getDomAttribute(href);
            href = href[attribute] || "";
            _object = false;
          }
          if (!_URI2 && _object && href.pathname !== void 0) {
            href = href.toString();
          }
          if (typeof href === "string" || href instanceof String) {
            this._parts = URI.parse(String(href), this._parts);
          } else if (_URI2 || _object) {
            var src = _URI2 ? href._parts : href;
            for (key in src) {
              if (key === "query") {
                continue;
              }
              if (hasOwn.call(this._parts, key)) {
                this._parts[key] = src[key];
              }
            }
            if (src.query) {
              this.query(src.query, false);
            }
          } else {
            throw new TypeError("invalid input");
          }
          this.build(!build);
          return this;
        };
        p.is = function(what) {
          var ip = false;
          var ip4 = false;
          var ip6 = false;
          var name = false;
          var sld = false;
          var idn = false;
          var punycode2 = false;
          var relative = !this._parts.urn;
          if (this._parts.hostname) {
            relative = false;
            ip4 = URI.ip4_expression.test(this._parts.hostname);
            ip6 = URI.ip6_expression.test(this._parts.hostname);
            ip = ip4 || ip6;
            name = !ip;
            sld = name && SLD && SLD.has(this._parts.hostname);
            idn = name && URI.idn_expression.test(this._parts.hostname);
            punycode2 = name && URI.punycode_expression.test(this._parts.hostname);
          }
          switch (what.toLowerCase()) {
            case "relative":
              return relative;
            case "absolute":
              return !relative;
            case "domain":
            case "name":
              return name;
            case "sld":
              return sld;
            case "ip":
              return ip;
            case "ip4":
            case "ipv4":
            case "inet4":
              return ip4;
            case "ip6":
            case "ipv6":
            case "inet6":
              return ip6;
            case "idn":
              return idn;
            case "url":
              return !this._parts.urn;
            case "urn":
              return !!this._parts.urn;
            case "punycode":
              return punycode2;
          }
          return null;
        };
        var _protocol = p.protocol;
        var _port = p.port;
        var _hostname = p.hostname;
        p.protocol = function(v3, build) {
          if (v3) {
            v3 = v3.replace(/:(\/\/)?$/, "");
            if (!v3.match(URI.protocol_expression)) {
              throw new TypeError('Protocol "' + v3 + `" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]`);
            }
          }
          return _protocol.call(this, v3, build);
        };
        p.scheme = p.protocol;
        p.port = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 !== void 0) {
            if (v3 === 0) {
              v3 = null;
            }
            if (v3) {
              v3 += "";
              if (v3.charAt(0) === ":") {
                v3 = v3.substring(1);
              }
              URI.ensureValidPort(v3);
            }
          }
          return _port.call(this, v3, build);
        };
        p.hostname = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 !== void 0) {
            var x = { preventInvalidHostname: this._parts.preventInvalidHostname };
            var res = URI.parseHost(v3, x);
            if (res !== "/") {
              throw new TypeError('Hostname "' + v3 + '" contains characters other than [A-Z0-9.-]');
            }
            v3 = x.hostname;
            if (this._parts.preventInvalidHostname) {
              URI.ensureValidHostname(v3, this._parts.protocol);
            }
          }
          return _hostname.call(this, v3, build);
        };
        p.origin = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 === void 0) {
            var protocol = this.protocol();
            var authority = this.authority();
            if (!authority) {
              return "";
            }
            return (protocol ? protocol + "://" : "") + this.authority();
          } else {
            var origin = URI(v3);
            this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
            return this;
          }
        };
        p.host = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 === void 0) {
            return this._parts.hostname ? URI.buildHost(this._parts) : "";
          } else {
            var res = URI.parseHost(v3, this._parts);
            if (res !== "/") {
              throw new TypeError('Hostname "' + v3 + '" contains characters other than [A-Z0-9.-]');
            }
            this.build(!build);
            return this;
          }
        };
        p.authority = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 === void 0) {
            return this._parts.hostname ? URI.buildAuthority(this._parts) : "";
          } else {
            var res = URI.parseAuthority(v3, this._parts);
            if (res !== "/") {
              throw new TypeError('Hostname "' + v3 + '" contains characters other than [A-Z0-9.-]');
            }
            this.build(!build);
            return this;
          }
        };
        p.userinfo = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 === void 0) {
            var t = URI.buildUserinfo(this._parts);
            return t ? t.substring(0, t.length - 1) : t;
          } else {
            if (v3[v3.length - 1] !== "@") {
              v3 += "@";
            }
            URI.parseUserinfo(v3, this._parts);
            this.build(!build);
            return this;
          }
        };
        p.resource = function(v3, build) {
          var parts;
          if (v3 === void 0) {
            return this.path() + this.search() + this.hash();
          }
          parts = URI.parse(v3);
          this._parts.path = parts.path;
          this._parts.query = parts.query;
          this._parts.fragment = parts.fragment;
          this.build(!build);
          return this;
        };
        p.subdomain = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 === void 0) {
            if (!this._parts.hostname || this.is("IP")) {
              return "";
            }
            var end = this._parts.hostname.length - this.domain().length - 1;
            return this._parts.hostname.substring(0, end) || "";
          } else {
            var e = this._parts.hostname.length - this.domain().length;
            var sub = this._parts.hostname.substring(0, e);
            var replace = new RegExp("^" + escapeRegEx(sub));
            if (v3 && v3.charAt(v3.length - 1) !== ".") {
              v3 += ".";
            }
            if (v3.indexOf(":") !== -1) {
              throw new TypeError("Domains cannot contain colons");
            }
            if (v3) {
              URI.ensureValidHostname(v3, this._parts.protocol);
            }
            this._parts.hostname = this._parts.hostname.replace(replace, v3);
            this.build(!build);
            return this;
          }
        };
        p.domain = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (typeof v3 === "boolean") {
            build = v3;
            v3 = void 0;
          }
          if (v3 === void 0) {
            if (!this._parts.hostname || this.is("IP")) {
              return "";
            }
            var t = this._parts.hostname.match(/\./g);
            if (t && t.length < 2) {
              return this._parts.hostname;
            }
            var end = this._parts.hostname.length - this.tld(build).length - 1;
            end = this._parts.hostname.lastIndexOf(".", end - 1) + 1;
            return this._parts.hostname.substring(end) || "";
          } else {
            if (!v3) {
              throw new TypeError("cannot set domain empty");
            }
            if (v3.indexOf(":") !== -1) {
              throw new TypeError("Domains cannot contain colons");
            }
            URI.ensureValidHostname(v3, this._parts.protocol);
            if (!this._parts.hostname || this.is("IP")) {
              this._parts.hostname = v3;
            } else {
              var replace = new RegExp(escapeRegEx(this.domain()) + "$");
              this._parts.hostname = this._parts.hostname.replace(replace, v3);
            }
            this.build(!build);
            return this;
          }
        };
        p.tld = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (typeof v3 === "boolean") {
            build = v3;
            v3 = void 0;
          }
          if (v3 === void 0) {
            if (!this._parts.hostname || this.is("IP")) {
              return "";
            }
            var pos = this._parts.hostname.lastIndexOf(".");
            var tld = this._parts.hostname.substring(pos + 1);
            if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
              return SLD.get(this._parts.hostname) || tld;
            }
            return tld;
          } else {
            var replace;
            if (!v3) {
              throw new TypeError("cannot set TLD empty");
            } else if (v3.match(/[^a-zA-Z0-9-]/)) {
              if (SLD && SLD.is(v3)) {
                replace = new RegExp(escapeRegEx(this.tld()) + "$");
                this._parts.hostname = this._parts.hostname.replace(replace, v3);
              } else {
                throw new TypeError('TLD "' + v3 + '" contains characters other than [A-Z0-9]');
              }
            } else if (!this._parts.hostname || this.is("IP")) {
              throw new ReferenceError("cannot set TLD on non-domain host");
            } else {
              replace = new RegExp(escapeRegEx(this.tld()) + "$");
              this._parts.hostname = this._parts.hostname.replace(replace, v3);
            }
            this.build(!build);
            return this;
          }
        };
        p.directory = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 === void 0 || v3 === true) {
            if (!this._parts.path && !this._parts.hostname) {
              return "";
            }
            if (this._parts.path === "/") {
              return "/";
            }
            var end = this._parts.path.length - this.filename().length - 1;
            var res = this._parts.path.substring(0, end) || (this._parts.hostname ? "/" : "");
            return v3 ? URI.decodePath(res) : res;
          } else {
            var e = this._parts.path.length - this.filename().length;
            var directory = this._parts.path.substring(0, e);
            var replace = new RegExp("^" + escapeRegEx(directory));
            if (!this.is("relative")) {
              if (!v3) {
                v3 = "/";
              }
              if (v3.charAt(0) !== "/") {
                v3 = "/" + v3;
              }
            }
            if (v3 && v3.charAt(v3.length - 1) !== "/") {
              v3 += "/";
            }
            v3 = URI.recodePath(v3);
            this._parts.path = this._parts.path.replace(replace, v3);
            this.build(!build);
            return this;
          }
        };
        p.filename = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (typeof v3 !== "string") {
            if (!this._parts.path || this._parts.path === "/") {
              return "";
            }
            var pos = this._parts.path.lastIndexOf("/");
            var res = this._parts.path.substring(pos + 1);
            return v3 ? URI.decodePathSegment(res) : res;
          } else {
            var mutatedDirectory = false;
            if (v3.charAt(0) === "/") {
              v3 = v3.substring(1);
            }
            if (v3.match(/\.?\//)) {
              mutatedDirectory = true;
            }
            var replace = new RegExp(escapeRegEx(this.filename()) + "$");
            v3 = URI.recodePath(v3);
            this._parts.path = this._parts.path.replace(replace, v3);
            if (mutatedDirectory) {
              this.normalizePath(build);
            } else {
              this.build(!build);
            }
            return this;
          }
        };
        p.suffix = function(v3, build) {
          if (this._parts.urn) {
            return v3 === void 0 ? "" : this;
          }
          if (v3 === void 0 || v3 === true) {
            if (!this._parts.path || this._parts.path === "/") {
              return "";
            }
            var filename = this.filename();
            var pos = filename.lastIndexOf(".");
            var s, res;
            if (pos === -1) {
              return "";
            }
            s = filename.substring(pos + 1);
            res = /^[a-z0-9%]+$/i.test(s) ? s : "";
            return v3 ? URI.decodePathSegment(res) : res;
          } else {
            if (v3.charAt(0) === ".") {
              v3 = v3.substring(1);
            }
            var suffix = this.suffix();
            var replace;
            if (!suffix) {
              if (!v3) {
                return this;
              }
              this._parts.path += "." + URI.recodePath(v3);
            } else if (!v3) {
              replace = new RegExp(escapeRegEx("." + suffix) + "$");
            } else {
              replace = new RegExp(escapeRegEx(suffix) + "$");
            }
            if (replace) {
              v3 = URI.recodePath(v3);
              this._parts.path = this._parts.path.replace(replace, v3);
            }
            this.build(!build);
            return this;
          }
        };
        p.segment = function(segment, v3, build) {
          var separator = this._parts.urn ? ":" : "/";
          var path = this.path();
          var absolute = path.substring(0, 1) === "/";
          var segments = path.split(separator);
          if (segment !== void 0 && typeof segment !== "number") {
            build = v3;
            v3 = segment;
            segment = void 0;
          }
          if (segment !== void 0 && typeof segment !== "number") {
            throw new Error('Bad segment "' + segment + '", must be 0-based integer');
          }
          if (absolute) {
            segments.shift();
          }
          if (segment < 0) {
            segment = Math.max(segments.length + segment, 0);
          }
          if (v3 === void 0) {
            return segment === void 0 ? segments : segments[segment];
          } else if (segment === null || segments[segment] === void 0) {
            if (isArray(v3)) {
              segments = [];
              for (var i = 0, l = v3.length; i < l; i++) {
                if (!v3[i].length && (!segments.length || !segments[segments.length - 1].length)) {
                  continue;
                }
                if (segments.length && !segments[segments.length - 1].length) {
                  segments.pop();
                }
                segments.push(trimSlashes(v3[i]));
              }
            } else if (v3 || typeof v3 === "string") {
              v3 = trimSlashes(v3);
              if (segments[segments.length - 1] === "") {
                segments[segments.length - 1] = v3;
              } else {
                segments.push(v3);
              }
            }
          } else {
            if (v3) {
              segments[segment] = trimSlashes(v3);
            } else {
              segments.splice(segment, 1);
            }
          }
          if (absolute) {
            segments.unshift("");
          }
          return this.path(segments.join(separator), build);
        };
        p.segmentCoded = function(segment, v3, build) {
          var segments, i, l;
          if (typeof segment !== "number") {
            build = v3;
            v3 = segment;
            segment = void 0;
          }
          if (v3 === void 0) {
            segments = this.segment(segment, v3, build);
            if (!isArray(segments)) {
              segments = segments !== void 0 ? URI.decode(segments) : void 0;
            } else {
              for (i = 0, l = segments.length; i < l; i++) {
                segments[i] = URI.decode(segments[i]);
              }
            }
            return segments;
          }
          if (!isArray(v3)) {
            v3 = typeof v3 === "string" || v3 instanceof String ? URI.encode(v3) : v3;
          } else {
            for (i = 0, l = v3.length; i < l; i++) {
              v3[i] = URI.encode(v3[i]);
            }
          }
          return this.segment(segment, v3, build);
        };
        var q = p.query;
        p.query = function(v3, build) {
          if (v3 === true) {
            return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
          } else if (typeof v3 === "function") {
            var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
            var result = v3.call(this, data);
            this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!build);
            return this;
          } else if (v3 !== void 0 && typeof v3 !== "string") {
            this._parts.query = URI.buildQuery(v3, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!build);
            return this;
          } else {
            return q.call(this, v3, build);
          }
        };
        p.setQuery = function(name, value, build) {
          var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
          if (typeof name === "string" || name instanceof String) {
            data[name] = value !== void 0 ? value : null;
          } else if (typeof name === "object") {
            for (var key in name) {
              if (hasOwn.call(name, key)) {
                data[key] = name[key];
              }
            }
          } else {
            throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
          }
          this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
          if (typeof name !== "string") {
            build = value;
          }
          this.build(!build);
          return this;
        };
        p.addQuery = function(name, value, build) {
          var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
          URI.addQuery(data, name, value === void 0 ? null : value);
          this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
          if (typeof name !== "string") {
            build = value;
          }
          this.build(!build);
          return this;
        };
        p.removeQuery = function(name, value, build) {
          var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
          URI.removeQuery(data, name, value);
          this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
          if (typeof name !== "string") {
            build = value;
          }
          this.build(!build);
          return this;
        };
        p.hasQuery = function(name, value, withinArray) {
          var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
          return URI.hasQuery(data, name, value, withinArray);
        };
        p.setSearch = p.setQuery;
        p.addSearch = p.addQuery;
        p.removeSearch = p.removeQuery;
        p.hasSearch = p.hasQuery;
        p.normalize = function() {
          if (this._parts.urn) {
            return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
          }
          return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
        };
        p.normalizeProtocol = function(build) {
          if (typeof this._parts.protocol === "string") {
            this._parts.protocol = this._parts.protocol.toLowerCase();
            this.build(!build);
          }
          return this;
        };
        p.normalizeHostname = function(build) {
          if (this._parts.hostname) {
            if (this.is("IDN") && punycode) {
              this._parts.hostname = punycode.toASCII(this._parts.hostname);
            } else if (this.is("IPv6") && IPv6) {
              this._parts.hostname = IPv6.best(this._parts.hostname);
            }
            this._parts.hostname = this._parts.hostname.toLowerCase();
            this.build(!build);
          }
          return this;
        };
        p.normalizePort = function(build) {
          if (typeof this._parts.protocol === "string" && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
            this._parts.port = null;
            this.build(!build);
          }
          return this;
        };
        p.normalizePath = function(build) {
          var _path = this._parts.path;
          if (!_path) {
            return this;
          }
          if (this._parts.urn) {
            this._parts.path = URI.recodeUrnPath(this._parts.path);
            this.build(!build);
            return this;
          }
          if (this._parts.path === "/") {
            return this;
          }
          _path = URI.recodePath(_path);
          var _was_relative;
          var _leadingParents = "";
          var _parent, _pos;
          if (_path.charAt(0) !== "/") {
            _was_relative = true;
            _path = "/" + _path;
          }
          if (_path.slice(-3) === "/.." || _path.slice(-2) === "/.") {
            _path += "/";
          }
          _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, "/").replace(/\/{2,}/g, "/");
          if (_was_relative) {
            _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || "";
            if (_leadingParents) {
              _leadingParents = _leadingParents[0];
            }
          }
          while (true) {
            _parent = _path.search(/\/\.\.(\/|$)/);
            if (_parent === -1) {
              break;
            } else if (_parent === 0) {
              _path = _path.substring(3);
              continue;
            }
            _pos = _path.substring(0, _parent).lastIndexOf("/");
            if (_pos === -1) {
              _pos = _parent;
            }
            _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
          }
          if (_was_relative && this.is("relative")) {
            _path = _leadingParents + _path.substring(1);
          }
          this._parts.path = _path;
          this.build(!build);
          return this;
        };
        p.normalizePathname = p.normalizePath;
        p.normalizeQuery = function(build) {
          if (typeof this._parts.query === "string") {
            if (!this._parts.query.length) {
              this._parts.query = null;
            } else {
              this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
            }
            this.build(!build);
          }
          return this;
        };
        p.normalizeFragment = function(build) {
          if (!this._parts.fragment) {
            this._parts.fragment = null;
            this.build(!build);
          }
          return this;
        };
        p.normalizeSearch = p.normalizeQuery;
        p.normalizeHash = p.normalizeFragment;
        p.iso8859 = function() {
          var e = URI.encode;
          var d = URI.decode;
          URI.encode = escape;
          URI.decode = decodeURIComponent;
          try {
            this.normalize();
          } finally {
            URI.encode = e;
            URI.decode = d;
          }
          return this;
        };
        p.unicode = function() {
          var e = URI.encode;
          var d = URI.decode;
          URI.encode = strictEncodeURIComponent;
          URI.decode = unescape;
          try {
            this.normalize();
          } finally {
            URI.encode = e;
            URI.decode = d;
          }
          return this;
        };
        p.readable = function() {
          var uri = this.clone();
          uri.username("").password("").normalize();
          var t = "";
          if (uri._parts.protocol) {
            t += uri._parts.protocol + "://";
          }
          if (uri._parts.hostname) {
            if (uri.is("punycode") && punycode) {
              t += punycode.toUnicode(uri._parts.hostname);
              if (uri._parts.port) {
                t += ":" + uri._parts.port;
              }
            } else {
              t += uri.host();
            }
          }
          if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== "/") {
            t += "/";
          }
          t += uri.path(true);
          if (uri._parts.query) {
            var q3 = "";
            for (var i = 0, qp = uri._parts.query.split("&"), l = qp.length; i < l; i++) {
              var kv = (qp[i] || "").split("=");
              q3 += "&" + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, "%26");
              if (kv[1] !== void 0) {
                q3 += "=" + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, "%26");
              }
            }
            t += "?" + q3.substring(1);
          }
          t += URI.decodeQuery(uri.hash(), true);
          return t;
        };
        p.absoluteTo = function(base) {
          var resolved = this.clone();
          var properties = ["protocol", "username", "password", "hostname", "port"];
          var basedir, i, p2;
          if (this._parts.urn) {
            throw new Error("URNs do not have any generally defined hierarchical components");
          }
          if (!(base instanceof URI)) {
            base = new URI(base);
          }
          if (resolved._parts.protocol) {
            return resolved;
          } else {
            resolved._parts.protocol = base._parts.protocol;
          }
          if (this._parts.hostname) {
            return resolved;
          }
          for (i = 0; p2 = properties[i]; i++) {
            resolved._parts[p2] = base._parts[p2];
          }
          if (!resolved._parts.path) {
            resolved._parts.path = base._parts.path;
            if (!resolved._parts.query) {
              resolved._parts.query = base._parts.query;
            }
          } else {
            if (resolved._parts.path.substring(-2) === "..") {
              resolved._parts.path += "/";
            }
            if (resolved.path().charAt(0) !== "/") {
              basedir = base.directory();
              basedir = basedir ? basedir : base.path().indexOf("/") === 0 ? "/" : "";
              resolved._parts.path = (basedir ? basedir + "/" : "") + resolved._parts.path;
              resolved.normalizePath();
            }
          }
          resolved.build();
          return resolved;
        };
        p.relativeTo = function(base) {
          var relative = this.clone().normalize();
          var relativeParts, baseParts, common, relativePath, basePath;
          if (relative._parts.urn) {
            throw new Error("URNs do not have any generally defined hierarchical components");
          }
          base = new URI(base).normalize();
          relativeParts = relative._parts;
          baseParts = base._parts;
          relativePath = relative.path();
          basePath = base.path();
          if (relativePath.charAt(0) !== "/") {
            throw new Error("URI is already relative");
          }
          if (basePath.charAt(0) !== "/") {
            throw new Error("Cannot calculate a URI relative to another relative URI");
          }
          if (relativeParts.protocol === baseParts.protocol) {
            relativeParts.protocol = null;
          }
          if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
            return relative.build();
          }
          if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
            return relative.build();
          }
          if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
            relativeParts.hostname = null;
            relativeParts.port = null;
          } else {
            return relative.build();
          }
          if (relativePath === basePath) {
            relativeParts.path = "";
            return relative.build();
          }
          common = URI.commonPath(relativePath, basePath);
          if (!common) {
            return relative.build();
          }
          var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, "").replace(/.*?\//g, "../");
          relativeParts.path = parents + relativeParts.path.substring(common.length) || "./";
          return relative.build();
        };
        p.equals = function(uri) {
          var one = this.clone();
          var two = new URI(uri);
          var one_map = {};
          var two_map = {};
          var checked = {};
          var one_query, two_query, key;
          one.normalize();
          two.normalize();
          if (one.toString() === two.toString()) {
            return true;
          }
          one_query = one.query();
          two_query = two.query();
          one.query("");
          two.query("");
          if (one.toString() !== two.toString()) {
            return false;
          }
          if (one_query.length !== two_query.length) {
            return false;
          }
          one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
          two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);
          for (key in one_map) {
            if (hasOwn.call(one_map, key)) {
              if (!isArray(one_map[key])) {
                if (one_map[key] !== two_map[key]) {
                  return false;
                }
              } else if (!arraysEqual(one_map[key], two_map[key])) {
                return false;
              }
              checked[key] = true;
            }
          }
          for (key in two_map) {
            if (hasOwn.call(two_map, key)) {
              if (!checked[key]) {
                return false;
              }
            }
          }
          return true;
        };
        p.preventInvalidHostname = function(v3) {
          this._parts.preventInvalidHostname = !!v3;
          return this;
        };
        p.duplicateQueryParameters = function(v3) {
          this._parts.duplicateQueryParameters = !!v3;
          return this;
        };
        p.escapeQuerySpace = function(v3) {
          this._parts.escapeQuerySpace = !!v3;
          return this;
        };
        return URI;
      });
    }
  });

  // packages/engine/Source/Core/appendForwardSlash.js
  function appendForwardSlash(url) {
    if (url.length === 0 || url[url.length - 1] !== "/") {
      url = `${url}/`;
    }
    return url;
  }
  var appendForwardSlash_default;
  var init_appendForwardSlash = __esm({
    "packages/engine/Source/Core/appendForwardSlash.js"() {
      appendForwardSlash_default = appendForwardSlash;
    }
  });

  // packages/engine/Source/Core/clone.js
  function clone(object, deep) {
    if (object === null || typeof object !== "object") {
      return object;
    }
    deep = defaultValue_default(deep, false);
    const result = new object.constructor();
    for (const propertyName in object) {
      if (object.hasOwnProperty(propertyName)) {
        let value = object[propertyName];
        if (deep) {
          value = clone(value, deep);
        }
        result[propertyName] = value;
      }
    }
    return result;
  }
  var clone_default;
  var init_clone = __esm({
    "packages/engine/Source/Core/clone.js"() {
      init_defaultValue();
      clone_default = clone;
    }
  });

  // packages/engine/Source/Core/combine.js
  function combine(object1, object2, deep) {
    deep = defaultValue_default(deep, false);
    const result = {};
    const object1Defined = defined_default(object1);
    const object2Defined = defined_default(object2);
    let property;
    let object1Value;
    let object2Value;
    if (object1Defined) {
      for (property in object1) {
        if (object1.hasOwnProperty(property)) {
          object1Value = object1[property];
          if (object2Defined && deep && typeof object1Value === "object" && object2.hasOwnProperty(property)) {
            object2Value = object2[property];
            if (typeof object2Value === "object") {
              result[property] = combine(object1Value, object2Value, deep);
            } else {
              result[property] = object1Value;
            }
          } else {
            result[property] = object1Value;
          }
        }
      }
    }
    if (object2Defined) {
      for (property in object2) {
        if (object2.hasOwnProperty(property) && !result.hasOwnProperty(property)) {
          object2Value = object2[property];
          result[property] = object2Value;
        }
      }
    }
    return result;
  }
  var combine_default;
  var init_combine = __esm({
    "packages/engine/Source/Core/combine.js"() {
      init_defaultValue();
      init_defined();
      combine_default = combine;
    }
  });

  // packages/engine/Source/Core/defer.js
  function defer() {
    let resolve;
    let reject;
    const promise = new Promise(function(res, rej) {
      resolve = res;
      reject = rej;
    });
    return {
      resolve,
      reject,
      promise
    };
  }
  var defer_default;
  var init_defer = __esm({
    "packages/engine/Source/Core/defer.js"() {
      defer_default = defer;
    }
  });

  // packages/engine/Source/Core/getAbsoluteUri.js
  function getAbsoluteUri(relative, base) {
    let documentObject;
    if (typeof document !== "undefined") {
      documentObject = document;
    }
    return getAbsoluteUri._implementation(relative, base, documentObject);
  }
  var import_urijs, getAbsoluteUri_default;
  var init_getAbsoluteUri = __esm({
    "packages/engine/Source/Core/getAbsoluteUri.js"() {
      import_urijs = __toESM(require_URI(), 1);
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      getAbsoluteUri._implementation = function(relative, base, documentObject) {
        if (!defined_default(relative)) {
          throw new DeveloperError_default("relative uri is required.");
        }
        if (!defined_default(base)) {
          if (typeof documentObject === "undefined") {
            return relative;
          }
          base = defaultValue_default(documentObject.baseURI, documentObject.location.href);
        }
        const relativeUri = new import_urijs.default(relative);
        if (relativeUri.scheme() !== "") {
          return relativeUri.toString();
        }
        return relativeUri.absoluteTo(base).toString();
      };
      getAbsoluteUri_default = getAbsoluteUri;
    }
  });

  // packages/engine/Source/Core/getBaseUri.js
  function getBaseUri(uri, includeQuery) {
    if (!defined_default(uri)) {
      throw new DeveloperError_default("uri is required.");
    }
    let basePath = "";
    const i = uri.lastIndexOf("/");
    if (i !== -1) {
      basePath = uri.substring(0, i + 1);
    }
    if (!includeQuery) {
      return basePath;
    }
    uri = new import_urijs2.default(uri);
    if (uri.query().length !== 0) {
      basePath += `?${uri.query()}`;
    }
    if (uri.fragment().length !== 0) {
      basePath += `#${uri.fragment()}`;
    }
    return basePath;
  }
  var import_urijs2, getBaseUri_default;
  var init_getBaseUri = __esm({
    "packages/engine/Source/Core/getBaseUri.js"() {
      import_urijs2 = __toESM(require_URI(), 1);
      init_defined();
      init_DeveloperError();
      getBaseUri_default = getBaseUri;
    }
  });

  // packages/engine/Source/Core/getExtensionFromUri.js
  function getExtensionFromUri(uri) {
    if (!defined_default(uri)) {
      throw new DeveloperError_default("uri is required.");
    }
    const uriObject = new import_urijs3.default(uri);
    uriObject.normalize();
    let path = uriObject.path();
    let index = path.lastIndexOf("/");
    if (index !== -1) {
      path = path.substr(index + 1);
    }
    index = path.lastIndexOf(".");
    if (index === -1) {
      path = "";
    } else {
      path = path.substr(index + 1);
    }
    return path;
  }
  var import_urijs3, getExtensionFromUri_default;
  var init_getExtensionFromUri = __esm({
    "packages/engine/Source/Core/getExtensionFromUri.js"() {
      import_urijs3 = __toESM(require_URI(), 1);
      init_defined();
      init_DeveloperError();
      getExtensionFromUri_default = getExtensionFromUri;
    }
  });

  // packages/engine/Source/Core/getImagePixels.js
  function getImagePixels(image, width, height) {
    if (!defined_default(width)) {
      width = image.width;
    }
    if (!defined_default(height)) {
      height = image.height;
    }
    let context2DsByHeight = context2DsByWidthAndHeight[width];
    if (!defined_default(context2DsByHeight)) {
      context2DsByHeight = {};
      context2DsByWidthAndHeight[width] = context2DsByHeight;
    }
    let context2d = context2DsByHeight[height];
    if (!defined_default(context2d)) {
      const canvas = document.createElement("canvas");
      canvas.width = width;
      canvas.height = height;
      context2d = canvas.getContext("2d", { willReadFrequently: true });
      context2d.globalCompositeOperation = "copy";
      context2DsByHeight[height] = context2d;
    }
    context2d.drawImage(image, 0, 0, width, height);
    return context2d.getImageData(0, 0, width, height).data;
  }
  var context2DsByWidthAndHeight, getImagePixels_default;
  var init_getImagePixels = __esm({
    "packages/engine/Source/Core/getImagePixels.js"() {
      init_defined();
      context2DsByWidthAndHeight = {};
      getImagePixels_default = getImagePixels;
    }
  });

  // packages/engine/Source/Core/isBlobUri.js
  function isBlobUri(uri) {
    Check_default.typeOf.string("uri", uri);
    return blobUriRegex.test(uri);
  }
  var blobUriRegex, isBlobUri_default;
  var init_isBlobUri = __esm({
    "packages/engine/Source/Core/isBlobUri.js"() {
      init_Check();
      blobUriRegex = /^blob:/i;
      isBlobUri_default = isBlobUri;
    }
  });

  // packages/engine/Source/Core/isCrossOriginUrl.js
  function isCrossOriginUrl(url) {
    if (!defined_default(a)) {
      a = document.createElement("a");
    }
    a.href = window.location.href;
    const host = a.host;
    const protocol = a.protocol;
    a.href = url;
    a.href = a.href;
    return protocol !== a.protocol || host !== a.host;
  }
  var a, isCrossOriginUrl_default;
  var init_isCrossOriginUrl = __esm({
    "packages/engine/Source/Core/isCrossOriginUrl.js"() {
      init_defined();
      isCrossOriginUrl_default = isCrossOriginUrl;
    }
  });

  // packages/engine/Source/Core/isDataUri.js
  function isDataUri(uri) {
    Check_default.typeOf.string("uri", uri);
    return dataUriRegex.test(uri);
  }
  var dataUriRegex, isDataUri_default;
  var init_isDataUri = __esm({
    "packages/engine/Source/Core/isDataUri.js"() {
      init_Check();
      dataUriRegex = /^data:/i;
      isDataUri_default = isDataUri;
    }
  });

  // packages/engine/Source/Core/loadAndExecuteScript.js
  function loadAndExecuteScript(url) {
    const script = document.createElement("script");
    script.async = true;
    script.src = url;
    return new Promise((resolve, reject) => {
      if (window.crossOriginIsolated) {
        script.setAttribute("crossorigin", "anonymous");
      }
      const head = document.getElementsByTagName("head")[0];
      script.onload = function() {
        script.onload = void 0;
        head.removeChild(script);
        resolve();
      };
      script.onerror = function(e) {
        reject(e);
      };
      head.appendChild(script);
    });
  }
  var loadAndExecuteScript_default;
  var init_loadAndExecuteScript = __esm({
    "packages/engine/Source/Core/loadAndExecuteScript.js"() {
      loadAndExecuteScript_default = loadAndExecuteScript;
    }
  });

  // packages/engine/Source/Core/objectToQuery.js
  function objectToQuery(obj) {
    if (!defined_default(obj)) {
      throw new DeveloperError_default("obj is required.");
    }
    let result = "";
    for (const propName in obj) {
      if (obj.hasOwnProperty(propName)) {
        const value = obj[propName];
        const part = `${encodeURIComponent(propName)}=`;
        if (Array.isArray(value)) {
          for (let i = 0, len = value.length; i < len; ++i) {
            result += `${part + encodeURIComponent(value[i])}&`;
          }
        } else {
          result += `${part + encodeURIComponent(value)}&`;
        }
      }
    }
    result = result.slice(0, -1);
    return result;
  }
  var objectToQuery_default;
  var init_objectToQuery = __esm({
    "packages/engine/Source/Core/objectToQuery.js"() {
      init_defined();
      init_DeveloperError();
      objectToQuery_default = objectToQuery;
    }
  });

  // packages/engine/Source/Core/queryToObject.js
  function queryToObject(queryString) {
    if (!defined_default(queryString)) {
      throw new DeveloperError_default("queryString is required.");
    }
    const result = {};
    if (queryString === "") {
      return result;
    }
    const parts = queryString.replace(/\+/g, "%20").split(/[&;]/);
    for (let i = 0, len = parts.length; i < len; ++i) {
      const subparts = parts[i].split("=");
      const name = decodeURIComponent(subparts[0]);
      let value = subparts[1];
      if (defined_default(value)) {
        value = decodeURIComponent(value);
      } else {
        value = "";
      }
      const resultValue = result[name];
      if (typeof resultValue === "string") {
        result[name] = [resultValue, value];
      } else if (Array.isArray(resultValue)) {
        resultValue.push(value);
      } else {
        result[name] = value;
      }
    }
    return result;
  }
  var queryToObject_default;
  var init_queryToObject = __esm({
    "packages/engine/Source/Core/queryToObject.js"() {
      init_defined();
      init_DeveloperError();
      queryToObject_default = queryToObject;
    }
  });

  // packages/engine/Source/Core/RequestState.js
  var RequestState, RequestState_default;
  var init_RequestState = __esm({
    "packages/engine/Source/Core/RequestState.js"() {
      RequestState = {
        /**
         * Initial unissued state.
         *
         * @type {number}
         * @constant
         */
        UNISSUED: 0,
        /**
         * Issued but not yet active. Will become active when open slots are available.
         *
         * @type {number}
         * @constant
         */
        ISSUED: 1,
        /**
         * Actual http request has been sent.
         *
         * @type {number}
         * @constant
         */
        ACTIVE: 2,
        /**
         * Request completed successfully.
         *
         * @type {number}
         * @constant
         */
        RECEIVED: 3,
        /**
         * Request was cancelled, either explicitly or automatically because of low priority.
         *
         * @type {number}
         * @constant
         */
        CANCELLED: 4,
        /**
         * Request failed.
         *
         * @type {number}
         * @constant
         */
        FAILED: 5
      };
      RequestState_default = Object.freeze(RequestState);
    }
  });

  // packages/engine/Source/Core/RequestType.js
  var RequestType, RequestType_default;
  var init_RequestType = __esm({
    "packages/engine/Source/Core/RequestType.js"() {
      RequestType = {
        /**
         * Terrain request.
         *
         * @type {number}
         * @constant
         */
        TERRAIN: 0,
        /**
         * Imagery request.
         *
         * @type {number}
         * @constant
         */
        IMAGERY: 1,
        /**
         * 3D Tiles request.
         *
         * @type {number}
         * @constant
         */
        TILES3D: 2,
        /**
         * Other request.
         *
         * @type {number}
         * @constant
         */
        OTHER: 3
      };
      RequestType_default = Object.freeze(RequestType);
    }
  });

  // packages/engine/Source/Core/Request.js
  function Request(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const throttleByServer = defaultValue_default(options.throttleByServer, false);
    const throttle = defaultValue_default(options.throttle, false);
    this.url = options.url;
    this.requestFunction = options.requestFunction;
    this.cancelFunction = options.cancelFunction;
    this.priorityFunction = options.priorityFunction;
    this.priority = defaultValue_default(options.priority, 0);
    this.throttle = throttle;
    this.throttleByServer = throttleByServer;
    this.type = defaultValue_default(options.type, RequestType_default.OTHER);
    this.serverKey = options.serverKey;
    this.state = RequestState_default.UNISSUED;
    this.deferred = void 0;
    this.cancelled = false;
  }
  var Request_default;
  var init_Request = __esm({
    "packages/engine/Source/Core/Request.js"() {
      init_defaultValue();
      init_defined();
      init_RequestState();
      init_RequestType();
      Request.prototype.cancel = function() {
        this.cancelled = true;
      };
      Request.prototype.clone = function(result) {
        if (!defined_default(result)) {
          return new Request(this);
        }
        result.url = this.url;
        result.requestFunction = this.requestFunction;
        result.cancelFunction = this.cancelFunction;
        result.priorityFunction = this.priorityFunction;
        result.priority = this.priority;
        result.throttle = this.throttle;
        result.throttleByServer = this.throttleByServer;
        result.type = this.type;
        result.serverKey = this.serverKey;
        result.state = RequestState_default.UNISSUED;
        result.deferred = void 0;
        result.cancelled = false;
        return result;
      };
      Request_default = Request;
    }
  });

  // packages/engine/Source/Core/parseResponseHeaders.js
  function parseResponseHeaders(headerString) {
    const headers = {};
    if (!headerString) {
      return headers;
    }
    const headerPairs = headerString.split("\r\n");
    for (let i = 0; i < headerPairs.length; ++i) {
      const headerPair = headerPairs[i];
      const index = headerPair.indexOf(": ");
      if (index > 0) {
        const key = headerPair.substring(0, index);
        const val = headerPair.substring(index + 2);
        headers[key] = val;
      }
    }
    return headers;
  }
  var parseResponseHeaders_default;
  var init_parseResponseHeaders = __esm({
    "packages/engine/Source/Core/parseResponseHeaders.js"() {
      parseResponseHeaders_default = parseResponseHeaders;
    }
  });

  // packages/engine/Source/Core/RequestErrorEvent.js
  function RequestErrorEvent(statusCode, response, responseHeaders) {
    this.statusCode = statusCode;
    this.response = response;
    this.responseHeaders = responseHeaders;
    if (typeof this.responseHeaders === "string") {
      this.responseHeaders = parseResponseHeaders_default(this.responseHeaders);
    }
  }
  var RequestErrorEvent_default;
  var init_RequestErrorEvent = __esm({
    "packages/engine/Source/Core/RequestErrorEvent.js"() {
      init_defined();
      init_parseResponseHeaders();
      RequestErrorEvent.prototype.toString = function() {
        let str = "Request has failed.";
        if (defined_default(this.statusCode)) {
          str += ` Status Code: ${this.statusCode}`;
        }
        return str;
      };
      RequestErrorEvent_default = RequestErrorEvent;
    }
  });

  // packages/engine/Source/Core/Event.js
  function Event() {
    this._listeners = [];
    this._scopes = [];
    this._toRemove = [];
    this._insideRaiseEvent = false;
  }
  function compareNumber(a3, b) {
    return b - a3;
  }
  var Event_default;
  var init_Event = __esm({
    "packages/engine/Source/Core/Event.js"() {
      init_Check();
      init_defined();
      Object.defineProperties(Event.prototype, {
        /**
         * The number of listeners currently subscribed to the event.
         * @memberof Event.prototype
         * @type {number}
         * @readonly
         */
        numberOfListeners: {
          get: function() {
            return this._listeners.length - this._toRemove.length;
          }
        }
      });
      Event.prototype.addEventListener = function(listener, scope) {
        Check_default.typeOf.func("listener", listener);
        this._listeners.push(listener);
        this._scopes.push(scope);
        const event = this;
        return function() {
          event.removeEventListener(listener, scope);
        };
      };
      Event.prototype.removeEventListener = function(listener, scope) {
        Check_default.typeOf.func("listener", listener);
        const listeners = this._listeners;
        const scopes = this._scopes;
        let index = -1;
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i] === listener && scopes[i] === scope) {
            index = i;
            break;
          }
        }
        if (index !== -1) {
          if (this._insideRaiseEvent) {
            this._toRemove.push(index);
            listeners[index] = void 0;
            scopes[index] = void 0;
          } else {
            listeners.splice(index, 1);
            scopes.splice(index, 1);
          }
          return true;
        }
        return false;
      };
      Event.prototype.raiseEvent = function() {
        this._insideRaiseEvent = true;
        let i;
        const listeners = this._listeners;
        const scopes = this._scopes;
        let length = listeners.length;
        for (i = 0; i < length; i++) {
          const listener = listeners[i];
          if (defined_default(listener)) {
            listeners[i].apply(scopes[i], arguments);
          }
        }
        const toRemove = this._toRemove;
        length = toRemove.length;
        if (length > 0) {
          toRemove.sort(compareNumber);
          for (i = 0; i < length; i++) {
            const index = toRemove[i];
            listeners.splice(index, 1);
            scopes.splice(index, 1);
          }
          toRemove.length = 0;
        }
        this._insideRaiseEvent = false;
      };
      Event_default = Event;
    }
  });

  // packages/engine/Source/Core/Heap.js
  function Heap(options) {
    Check_default.typeOf.object("options", options);
    Check_default.defined("options.comparator", options.comparator);
    this._comparator = options.comparator;
    this._array = [];
    this._length = 0;
    this._maximumLength = void 0;
  }
  function swap(array, a3, b) {
    const temp = array[a3];
    array[a3] = array[b];
    array[b] = temp;
  }
  var Heap_default;
  var init_Heap = __esm({
    "packages/engine/Source/Core/Heap.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      Object.defineProperties(Heap.prototype, {
        /**
         * Gets the length of the heap.
         *
         * @memberof Heap.prototype
         *
         * @type {number}
         * @readonly
         */
        length: {
          get: function() {
            return this._length;
          }
        },
        /**
         * Gets the internal array.
         *
         * @memberof Heap.prototype
         *
         * @type {Array}
         * @readonly
         */
        internalArray: {
          get: function() {
            return this._array;
          }
        },
        /**
         * Gets and sets the maximum length of the heap.
         *
         * @memberof Heap.prototype
         *
         * @type {number}
         */
        maximumLength: {
          get: function() {
            return this._maximumLength;
          },
          set: function(value) {
            Check_default.typeOf.number.greaterThanOrEquals("maximumLength", value, 0);
            const originalLength = this._length;
            if (value < originalLength) {
              const array = this._array;
              for (let i = value; i < originalLength; ++i) {
                array[i] = void 0;
              }
              this._length = value;
              array.length = value;
            }
            this._maximumLength = value;
          }
        },
        /**
         * The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.
         *
         * @memberof Heap.prototype
         *
         * @type {Heap.ComparatorCallback}
         */
        comparator: {
          get: function() {
            return this._comparator;
          }
        }
      });
      Heap.prototype.reserve = function(length) {
        length = defaultValue_default(length, this._length);
        this._array.length = length;
      };
      Heap.prototype.heapify = function(index) {
        index = defaultValue_default(index, 0);
        const length = this._length;
        const comparator = this._comparator;
        const array = this._array;
        let candidate = -1;
        let inserting = true;
        while (inserting) {
          const right = 2 * (index + 1);
          const left = right - 1;
          if (left < length && comparator(array[left], array[index]) < 0) {
            candidate = left;
          } else {
            candidate = index;
          }
          if (right < length && comparator(array[right], array[candidate]) < 0) {
            candidate = right;
          }
          if (candidate !== index) {
            swap(array, candidate, index);
            index = candidate;
          } else {
            inserting = false;
          }
        }
      };
      Heap.prototype.resort = function() {
        const length = this._length;
        for (let i = Math.ceil(length / 2); i >= 0; --i) {
          this.heapify(i);
        }
      };
      Heap.prototype.insert = function(element) {
        Check_default.defined("element", element);
        const array = this._array;
        const comparator = this._comparator;
        const maximumLength = this._maximumLength;
        let index = this._length++;
        if (index < array.length) {
          array[index] = element;
        } else {
          array.push(element);
        }
        while (index !== 0) {
          const parent = Math.floor((index - 1) / 2);
          if (comparator(array[index], array[parent]) < 0) {
            swap(array, index, parent);
            index = parent;
          } else {
            break;
          }
        }
        let removedElement;
        if (defined_default(maximumLength) && this._length > maximumLength) {
          removedElement = array[maximumLength];
          this._length = maximumLength;
        }
        return removedElement;
      };
      Heap.prototype.pop = function(index) {
        index = defaultValue_default(index, 0);
        if (this._length === 0) {
          return void 0;
        }
        Check_default.typeOf.number.lessThan("index", index, this._length);
        const array = this._array;
        const root = array[index];
        swap(array, index, --this._length);
        this.heapify(index);
        array[this._length] = void 0;
        return root;
      };
      Heap_default = Heap;
    }
  });

  // packages/engine/Source/Core/RequestScheduler.js
  function sortRequests(a3, b) {
    return a3.priority - b.priority;
  }
  function RequestScheduler() {
  }
  function updatePriority(request) {
    if (defined_default(request.priorityFunction)) {
      request.priority = request.priorityFunction();
    }
  }
  function issueRequest(request) {
    if (request.state === RequestState_default.UNISSUED) {
      request.state = RequestState_default.ISSUED;
      request.deferred = defer_default();
    }
    return request.deferred.promise;
  }
  function getRequestReceivedFunction(request) {
    return function(results) {
      if (request.state === RequestState_default.CANCELLED) {
        return;
      }
      const deferred = request.deferred;
      --statistics.numberOfActiveRequests;
      --numberOfActiveRequestsByServer[request.serverKey];
      requestCompletedEvent.raiseEvent();
      request.state = RequestState_default.RECEIVED;
      request.deferred = void 0;
      deferred.resolve(results);
    };
  }
  function getRequestFailedFunction(request) {
    return function(error) {
      if (request.state === RequestState_default.CANCELLED) {
        return;
      }
      ++statistics.numberOfFailedRequests;
      --statistics.numberOfActiveRequests;
      --numberOfActiveRequestsByServer[request.serverKey];
      requestCompletedEvent.raiseEvent(error);
      request.state = RequestState_default.FAILED;
      request.deferred.reject(error);
    };
  }
  function startRequest(request) {
    const promise = issueRequest(request);
    request.state = RequestState_default.ACTIVE;
    activeRequests.push(request);
    ++statistics.numberOfActiveRequests;
    ++statistics.numberOfActiveRequestsEver;
    ++numberOfActiveRequestsByServer[request.serverKey];
    request.requestFunction().then(getRequestReceivedFunction(request)).catch(getRequestFailedFunction(request));
    return promise;
  }
  function cancelRequest(request) {
    const active = request.state === RequestState_default.ACTIVE;
    request.state = RequestState_default.CANCELLED;
    ++statistics.numberOfCancelledRequests;
    if (defined_default(request.deferred)) {
      const deferred = request.deferred;
      request.deferred = void 0;
      deferred.reject();
    }
    if (active) {
      --statistics.numberOfActiveRequests;
      --numberOfActiveRequestsByServer[request.serverKey];
      ++statistics.numberOfCancelledActiveRequests;
    }
    if (defined_default(request.cancelFunction)) {
      request.cancelFunction();
    }
  }
  function updateStatistics() {
    if (!RequestScheduler.debugShowStatistics) {
      return;
    }
    if (statistics.numberOfActiveRequests === 0 && statistics.lastNumberOfActiveRequests > 0) {
      if (statistics.numberOfAttemptedRequests > 0) {
        console.log(
          `Number of attempted requests: ${statistics.numberOfAttemptedRequests}`
        );
        statistics.numberOfAttemptedRequests = 0;
      }
      if (statistics.numberOfCancelledRequests > 0) {
        console.log(
          `Number of cancelled requests: ${statistics.numberOfCancelledRequests}`
        );
        statistics.numberOfCancelledRequests = 0;
      }
      if (statistics.numberOfCancelledActiveRequests > 0) {
        console.log(
          `Number of cancelled active requests: ${statistics.numberOfCancelledActiveRequests}`
        );
        statistics.numberOfCancelledActiveRequests = 0;
      }
      if (statistics.numberOfFailedRequests > 0) {
        console.log(
          `Number of failed requests: ${statistics.numberOfFailedRequests}`
        );
        statistics.numberOfFailedRequests = 0;
      }
    }
    statistics.lastNumberOfActiveRequests = statistics.numberOfActiveRequests;
  }
  var import_urijs4, statistics, priorityHeapLength, requestHeap, activeRequests, numberOfActiveRequestsByServer, pageUri, requestCompletedEvent, RequestScheduler_default;
  var init_RequestScheduler = __esm({
    "packages/engine/Source/Core/RequestScheduler.js"() {
      import_urijs4 = __toESM(require_URI(), 1);
      init_Check();
      init_defaultValue();
      init_defer();
      init_defined();
      init_Event();
      init_Heap();
      init_isBlobUri();
      init_isDataUri();
      init_RequestState();
      statistics = {
        numberOfAttemptedRequests: 0,
        numberOfActiveRequests: 0,
        numberOfCancelledRequests: 0,
        numberOfCancelledActiveRequests: 0,
        numberOfFailedRequests: 0,
        numberOfActiveRequestsEver: 0,
        lastNumberOfActiveRequests: 0
      };
      priorityHeapLength = 20;
      requestHeap = new Heap_default({
        comparator: sortRequests
      });
      requestHeap.maximumLength = priorityHeapLength;
      requestHeap.reserve(priorityHeapLength);
      activeRequests = [];
      numberOfActiveRequestsByServer = {};
      pageUri = typeof document !== "undefined" ? new import_urijs4.default(document.location.href) : new import_urijs4.default();
      requestCompletedEvent = new Event_default();
      RequestScheduler.maximumRequests = 50;
      RequestScheduler.maximumRequestsPerServer = 18;
      RequestScheduler.requestsByServer = {};
      RequestScheduler.throttleRequests = true;
      RequestScheduler.debugShowStatistics = false;
      RequestScheduler.requestCompletedEvent = requestCompletedEvent;
      Object.defineProperties(RequestScheduler, {
        /**
         * Returns the statistics used by the request scheduler.
         *
         * @memberof RequestScheduler
         *
         * @type {object}
         * @readonly
         * @private
         */
        statistics: {
          get: function() {
            return statistics;
          }
        },
        /**
         * The maximum size of the priority heap. This limits the number of requests that are sorted by priority. Only applies to requests that are not yet active.
         *
         * @memberof RequestScheduler
         *
         * @type {number}
         * @default 20
         * @private
         */
        priorityHeapLength: {
          get: function() {
            return priorityHeapLength;
          },
          set: function(value) {
            if (value < priorityHeapLength) {
              while (requestHeap.length > value) {
                const request = requestHeap.pop();
                cancelRequest(request);
              }
            }
            priorityHeapLength = value;
            requestHeap.maximumLength = value;
            requestHeap.reserve(value);
          }
        }
      });
      RequestScheduler.serverHasOpenSlots = function(serverKey, desiredRequests) {
        desiredRequests = defaultValue_default(desiredRequests, 1);
        const maxRequests = defaultValue_default(
          RequestScheduler.requestsByServer[serverKey],
          RequestScheduler.maximumRequestsPerServer
        );
        const hasOpenSlotsServer = numberOfActiveRequestsByServer[serverKey] + desiredRequests <= maxRequests;
        return hasOpenSlotsServer;
      };
      RequestScheduler.heapHasOpenSlots = function(desiredRequests) {
        const hasOpenSlotsHeap = requestHeap.length + desiredRequests <= priorityHeapLength;
        return hasOpenSlotsHeap;
      };
      RequestScheduler.update = function() {
        let i;
        let request;
        let removeCount = 0;
        const activeLength = activeRequests.length;
        for (i = 0; i < activeLength; ++i) {
          request = activeRequests[i];
          if (request.cancelled) {
            cancelRequest(request);
          }
          if (request.state !== RequestState_default.ACTIVE) {
            ++removeCount;
            continue;
          }
          if (removeCount > 0) {
            activeRequests[i - removeCount] = request;
          }
        }
        activeRequests.length -= removeCount;
        const issuedRequests = requestHeap.internalArray;
        const issuedLength = requestHeap.length;
        for (i = 0; i < issuedLength; ++i) {
          updatePriority(issuedRequests[i]);
        }
        requestHeap.resort();
        const openSlots = Math.max(
          RequestScheduler.maximumRequests - activeRequests.length,
          0
        );
        let filledSlots = 0;
        while (filledSlots < openSlots && requestHeap.length > 0) {
          request = requestHeap.pop();
          if (request.cancelled) {
            cancelRequest(request);
            continue;
          }
          if (request.throttleByServer && !RequestScheduler.serverHasOpenSlots(request.serverKey)) {
            cancelRequest(request);
            continue;
          }
          startRequest(request);
          ++filledSlots;
        }
        updateStatistics();
      };
      RequestScheduler.getServerKey = function(url) {
        Check_default.typeOf.string("url", url);
        let uri = new import_urijs4.default(url);
        if (uri.scheme() === "") {
          uri = uri.absoluteTo(pageUri);
          uri.normalize();
        }
        let serverKey = uri.authority();
        if (!/:/.test(serverKey)) {
          serverKey = `${serverKey}:${uri.scheme() === "https" ? "443" : "80"}`;
        }
        const length = numberOfActiveRequestsByServer[serverKey];
        if (!defined_default(length)) {
          numberOfActiveRequestsByServer[serverKey] = 0;
        }
        return serverKey;
      };
      RequestScheduler.request = function(request) {
        Check_default.typeOf.object("request", request);
        Check_default.typeOf.string("request.url", request.url);
        Check_default.typeOf.func("request.requestFunction", request.requestFunction);
        if (isDataUri_default(request.url) || isBlobUri_default(request.url)) {
          requestCompletedEvent.raiseEvent();
          request.state = RequestState_default.RECEIVED;
          return request.requestFunction();
        }
        ++statistics.numberOfAttemptedRequests;
        if (!defined_default(request.serverKey)) {
          request.serverKey = RequestScheduler.getServerKey(request.url);
        }
        if (RequestScheduler.throttleRequests && request.throttleByServer && !RequestScheduler.serverHasOpenSlots(request.serverKey)) {
          return void 0;
        }
        if (!RequestScheduler.throttleRequests || !request.throttle) {
          return startRequest(request);
        }
        if (activeRequests.length >= RequestScheduler.maximumRequests) {
          return void 0;
        }
        updatePriority(request);
        const removedRequest = requestHeap.insert(request);
        if (defined_default(removedRequest)) {
          if (removedRequest === request) {
            return void 0;
          }
          cancelRequest(removedRequest);
        }
        return issueRequest(request);
      };
      RequestScheduler.clearForSpecs = function() {
        while (requestHeap.length > 0) {
          const request = requestHeap.pop();
          cancelRequest(request);
        }
        const length = activeRequests.length;
        for (let i = 0; i < length; ++i) {
          cancelRequest(activeRequests[i]);
        }
        activeRequests.length = 0;
        numberOfActiveRequestsByServer = {};
        statistics.numberOfAttemptedRequests = 0;
        statistics.numberOfActiveRequests = 0;
        statistics.numberOfCancelledRequests = 0;
        statistics.numberOfCancelledActiveRequests = 0;
        statistics.numberOfFailedRequests = 0;
        statistics.numberOfActiveRequestsEver = 0;
        statistics.lastNumberOfActiveRequests = 0;
      };
      RequestScheduler.numberOfActiveRequestsByServer = function(serverKey) {
        return numberOfActiveRequestsByServer[serverKey];
      };
      RequestScheduler.requestHeap = requestHeap;
      RequestScheduler_default = RequestScheduler;
    }
  });

  // packages/engine/Source/Core/TrustedServers.js
  function getAuthority(url) {
    const uri = new import_urijs5.default(url);
    uri.normalize();
    let authority = uri.authority();
    if (authority.length === 0) {
      return void 0;
    }
    uri.authority(authority);
    if (authority.indexOf("@") !== -1) {
      const parts = authority.split("@");
      authority = parts[1];
    }
    if (authority.indexOf(":") === -1) {
      let scheme = uri.scheme();
      if (scheme.length === 0) {
        scheme = window.location.protocol;
        scheme = scheme.substring(0, scheme.length - 1);
      }
      if (scheme === "http") {
        authority += ":80";
      } else if (scheme === "https") {
        authority += ":443";
      } else {
        return void 0;
      }
    }
    return authority;
  }
  var import_urijs5, TrustedServers, _servers, TrustedServers_default;
  var init_TrustedServers = __esm({
    "packages/engine/Source/Core/TrustedServers.js"() {
      import_urijs5 = __toESM(require_URI(), 1);
      init_defined();
      init_DeveloperError();
      TrustedServers = {};
      _servers = {};
      TrustedServers.add = function(host, port) {
        if (!defined_default(host)) {
          throw new DeveloperError_default("host is required.");
        }
        if (!defined_default(port) || port <= 0) {
          throw new DeveloperError_default("port is required to be greater than 0.");
        }
        const authority = `${host.toLowerCase()}:${port}`;
        if (!defined_default(_servers[authority])) {
          _servers[authority] = true;
        }
      };
      TrustedServers.remove = function(host, port) {
        if (!defined_default(host)) {
          throw new DeveloperError_default("host is required.");
        }
        if (!defined_default(port) || port <= 0) {
          throw new DeveloperError_default("port is required to be greater than 0.");
        }
        const authority = `${host.toLowerCase()}:${port}`;
        if (defined_default(_servers[authority])) {
          delete _servers[authority];
        }
      };
      TrustedServers.contains = function(url) {
        if (!defined_default(url)) {
          throw new DeveloperError_default("url is required.");
        }
        const authority = getAuthority(url);
        if (defined_default(authority) && defined_default(_servers[authority])) {
          return true;
        }
        return false;
      };
      TrustedServers.clear = function() {
        _servers = {};
      };
      TrustedServers_default = TrustedServers;
    }
  });

  // packages/engine/Source/Core/Resource.js
  function Resource(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    if (typeof options === "string") {
      options = {
        url: options
      };
    }
    Check_default.typeOf.string("options.url", options.url);
    this._url = void 0;
    this._templateValues = defaultClone(options.templateValues, {});
    this._queryParameters = defaultClone(options.queryParameters, {});
    this.headers = defaultClone(options.headers, {});
    this.request = defaultValue_default(options.request, new Request_default());
    this.proxy = options.proxy;
    this.retryCallback = options.retryCallback;
    this.retryAttempts = defaultValue_default(options.retryAttempts, 0);
    this._retryCount = 0;
    const parseUrl = defaultValue_default(options.parseUrl, true);
    if (parseUrl) {
      this.parseUrl(options.url, true, true);
    } else {
      this._url = options.url;
    }
    this._credits = options.credits;
  }
  function defaultClone(value, defaultValue2) {
    return defined_default(value) ? clone_default(value) : defaultValue2;
  }
  function parseQueryString(queryString) {
    if (queryString.length === 0) {
      return {};
    }
    if (queryString.indexOf("=") === -1) {
      return { [queryString]: void 0 };
    }
    return queryToObject_default(queryString);
  }
  function combineQueryParameters(q12, q22, preserveQueryParameters) {
    if (!preserveQueryParameters) {
      return combine_default(q12, q22);
    }
    const result = clone_default(q12, true);
    for (const param in q22) {
      if (q22.hasOwnProperty(param)) {
        let value = result[param];
        const q2Value = q22[param];
        if (defined_default(value)) {
          if (!Array.isArray(value)) {
            value = result[param] = [value];
          }
          result[param] = value.concat(q2Value);
        } else {
          result[param] = Array.isArray(q2Value) ? q2Value.slice() : q2Value;
        }
      }
    }
    return result;
  }
  function stringifyQuery(queryObject) {
    const keys = Object.keys(queryObject);
    if (keys.length === 0) {
      return "";
    }
    if (keys.length === 1 && !defined_default(queryObject[keys[0]])) {
      return `?${keys[0]}`;
    }
    return `?${objectToQuery_default(queryObject)}`;
  }
  function fetchImage(options) {
    const resource = options.resource;
    const flipY = options.flipY;
    const skipColorSpaceConversion = options.skipColorSpaceConversion;
    const preferImageBitmap = options.preferImageBitmap;
    const request = resource.request;
    request.url = resource.url;
    request.requestFunction = function() {
      let crossOrigin = false;
      if (!resource.isDataUri && !resource.isBlobUri) {
        crossOrigin = resource.isCrossOriginUrl;
      }
      const deferred = defer_default();
      Resource._Implementations.createImage(
        request,
        crossOrigin,
        deferred,
        flipY,
        skipColorSpaceConversion,
        preferImageBitmap
      );
      return deferred.promise;
    };
    const promise = RequestScheduler_default.request(request);
    if (!defined_default(promise)) {
      return;
    }
    return promise.catch(function(e) {
      if (request.state !== RequestState_default.FAILED) {
        return Promise.reject(e);
      }
      return resource.retryOnError(e).then(function(retry) {
        if (retry) {
          request.state = RequestState_default.UNISSUED;
          request.deferred = void 0;
          return fetchImage({
            resource,
            flipY,
            skipColorSpaceConversion,
            preferImageBitmap
          });
        }
        return Promise.reject(e);
      });
    });
  }
  function fetchJsonp(resource, callbackParameterName, functionName) {
    const callbackQuery = {};
    callbackQuery[callbackParameterName] = functionName;
    resource.setQueryParameters(callbackQuery);
    const request = resource.request;
    const url = resource.url;
    request.url = url;
    request.requestFunction = function() {
      const deferred = defer_default();
      window[functionName] = function(data) {
        deferred.resolve(data);
        try {
          delete window[functionName];
        } catch (e) {
          window[functionName] = void 0;
        }
      };
      Resource._Implementations.loadAndExecuteScript(url, functionName, deferred);
      return deferred.promise;
    };
    const promise = RequestScheduler_default.request(request);
    if (!defined_default(promise)) {
      return;
    }
    return promise.catch(function(e) {
      if (request.state !== RequestState_default.FAILED) {
        return Promise.reject(e);
      }
      return resource.retryOnError(e).then(function(retry) {
        if (retry) {
          request.state = RequestState_default.UNISSUED;
          request.deferred = void 0;
          return fetchJsonp(resource, callbackParameterName, functionName);
        }
        return Promise.reject(e);
      });
    });
  }
  function checkAndResetRequest(request) {
    if (request.state === RequestState_default.ISSUED || request.state === RequestState_default.ACTIVE) {
      throw new RuntimeError_default("The Resource is already being fetched.");
    }
    request.state = RequestState_default.UNISSUED;
    request.deferred = void 0;
  }
  function decodeDataUriText(isBase64, data) {
    const result = decodeURIComponent(data);
    if (isBase64) {
      return atob(result);
    }
    return result;
  }
  function decodeDataUriArrayBuffer(isBase64, data) {
    const byteString = decodeDataUriText(isBase64, data);
    const buffer = new ArrayBuffer(byteString.length);
    const view = new Uint8Array(buffer);
    for (let i = 0; i < byteString.length; i++) {
      view[i] = byteString.charCodeAt(i);
    }
    return buffer;
  }
  function decodeDataUri(dataUriRegexResult, responseType) {
    responseType = defaultValue_default(responseType, "");
    const mimeType = dataUriRegexResult[1];
    const isBase64 = !!dataUriRegexResult[2];
    const data = dataUriRegexResult[3];
    let buffer;
    let parser;
    switch (responseType) {
      case "":
      case "text":
        return decodeDataUriText(isBase64, data);
      case "arraybuffer":
        return decodeDataUriArrayBuffer(isBase64, data);
      case "blob":
        buffer = decodeDataUriArrayBuffer(isBase64, data);
        return new Blob([buffer], {
          type: mimeType
        });
      case "document":
        parser = new DOMParser();
        return parser.parseFromString(
          decodeDataUriText(isBase64, data),
          mimeType
        );
      case "json":
        return JSON.parse(decodeDataUriText(isBase64, data));
      default:
        throw new DeveloperError_default(`Unhandled responseType: ${responseType}`);
    }
  }
  function loadWithHttpRequest(url, responseType, method, data, headers, deferred, overrideMimeType) {
    fetch(url, {
      method,
      headers
    }).then(async (response) => {
      if (!response.ok) {
        const responseHeaders = {};
        response.headers.forEach((value, key) => {
          responseHeaders[key] = value;
        });
        deferred.reject(
          new RequestErrorEvent_default(response.status, response, responseHeaders)
        );
        return;
      }
      switch (responseType) {
        case "text":
          deferred.resolve(response.text());
          break;
        case "json":
          deferred.resolve(response.json());
          break;
        default:
          deferred.resolve(new Uint8Array(await response.arrayBuffer()).buffer);
          break;
      }
    }).catch(() => {
      deferred.reject(new RequestErrorEvent_default());
    });
  }
  var import_urijs6, xhrBlobSupported, supportsImageBitmapOptionsPromise, dataUriRegex2, noXMLHttpRequest, Resource_default;
  var init_Resource = __esm({
    "packages/engine/Source/Core/Resource.js"() {
      import_urijs6 = __toESM(require_URI(), 1);
      init_appendForwardSlash();
      init_Check();
      init_clone();
      init_combine();
      init_defaultValue();
      init_defer();
      init_defined();
      init_DeveloperError();
      init_getAbsoluteUri();
      init_getBaseUri();
      init_getExtensionFromUri();
      init_getImagePixels();
      init_isBlobUri();
      init_isCrossOriginUrl();
      init_isDataUri();
      init_loadAndExecuteScript();
      init_Math();
      init_objectToQuery();
      init_queryToObject();
      init_Request();
      init_RequestErrorEvent();
      init_RequestScheduler();
      init_RequestState();
      init_RuntimeError();
      init_TrustedServers();
      xhrBlobSupported = function() {
        try {
          const xhr = new XMLHttpRequest();
          xhr.open("GET", "#", true);
          xhr.responseType = "blob";
          return xhr.responseType === "blob";
        } catch (e) {
          return false;
        }
      }();
      Resource.createIfNeeded = function(resource) {
        if (resource instanceof Resource) {
          return resource.getDerivedResource({
            request: resource.request
          });
        }
        if (typeof resource !== "string") {
          return resource;
        }
        return new Resource({
          url: resource
        });
      };
      Resource.supportsImageBitmapOptions = function() {
        if (defined_default(supportsImageBitmapOptionsPromise)) {
          return supportsImageBitmapOptionsPromise;
        }
        if (typeof createImageBitmap !== "function") {
          supportsImageBitmapOptionsPromise = Promise.resolve(false);
          return supportsImageBitmapOptionsPromise;
        }
        const imageDataUri = "data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAABGdBTUEAAE4g3rEiDgAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAADElEQVQI12Ng6GAAAAEUAIngE3ZiAAAAAElFTkSuQmCC";
        supportsImageBitmapOptionsPromise = Resource.fetchBlob({
          url: imageDataUri
        }).then(function(blob) {
          const imageBitmapOptions = {
            imageOrientation: "flipY",
            // default is "none"
            premultiplyAlpha: "none",
            // default is "default"
            colorSpaceConversion: "none"
            // default is "default"
          };
          return Promise.all([
            createImageBitmap(blob, imageBitmapOptions),
            createImageBitmap(blob)
          ]);
        }).then(function(imageBitmaps) {
          const colorWithOptions = getImagePixels_default(imageBitmaps[0]);
          const colorWithDefaults = getImagePixels_default(imageBitmaps[1]);
          return colorWithOptions[1] !== colorWithDefaults[1];
        }).catch(function() {
          return false;
        });
        return supportsImageBitmapOptionsPromise;
      };
      Object.defineProperties(Resource, {
        /**
         * Returns true if blobs are supported.
         *
         * @memberof Resource
         * @type {boolean}
         *
         * @readonly
         */
        isBlobSupported: {
          get: function() {
            return xhrBlobSupported;
          }
        }
      });
      Object.defineProperties(Resource.prototype, {
        /**
         * Query parameters appended to the url.
         *
         * @memberof Resource.prototype
         * @type {object}
         *
         * @readonly
         */
        queryParameters: {
          get: function() {
            return this._queryParameters;
          }
        },
        /**
         * The key/value pairs used to replace template parameters in the url.
         *
         * @memberof Resource.prototype
         * @type {object}
         *
         * @readonly
         */
        templateValues: {
          get: function() {
            return this._templateValues;
          }
        },
        /**
         * The url to the resource with template values replaced, query string appended and encoded by proxy if one was set.
         *
         * @memberof Resource.prototype
         * @type {string}
         */
        url: {
          get: function() {
            return this.getUrlComponent(true, true);
          },
          set: function(value) {
            this.parseUrl(value, false, false);
          }
        },
        /**
         * The file extension of the resource.
         *
         * @memberof Resource.prototype
         * @type {string}
         *
         * @readonly
         */
        extension: {
          get: function() {
            return getExtensionFromUri_default(this._url);
          }
        },
        /**
         * True if the Resource refers to a data URI.
         *
         * @memberof Resource.prototype
         * @type {boolean}
         */
        isDataUri: {
          get: function() {
            return isDataUri_default(this._url);
          }
        },
        /**
         * True if the Resource refers to a blob URI.
         *
         * @memberof Resource.prototype
         * @type {boolean}
         */
        isBlobUri: {
          get: function() {
            return isBlobUri_default(this._url);
          }
        },
        /**
         * True if the Resource refers to a cross origin URL.
         *
         * @memberof Resource.prototype
         * @type {boolean}
         */
        isCrossOriginUrl: {
          get: function() {
            return isCrossOriginUrl_default(this._url);
          }
        },
        /**
         * True if the Resource has request headers. This is equivalent to checking if the headers property has any keys.
         *
         * @memberof Resource.prototype
         * @type {boolean}
         */
        hasHeaders: {
          get: function() {
            return Object.keys(this.headers).length > 0;
          }
        },
        /**
         * Gets the credits required for attribution of an asset.
         * @private
         */
        credits: {
          get: function() {
            return this._credits;
          }
        }
      });
      Resource.prototype.toString = function() {
        return this.getUrlComponent(true, true);
      };
      Resource.prototype.parseUrl = function(url, merge, preserveQuery, baseUrl) {
        let uri = new import_urijs6.default(url);
        const query = parseQueryString(uri.query());
        this._queryParameters = merge ? combineQueryParameters(query, this.queryParameters, preserveQuery) : query;
        uri.search("");
        uri.fragment("");
        if (defined_default(baseUrl) && uri.scheme() === "") {
          uri = uri.absoluteTo(getAbsoluteUri_default(baseUrl));
        }
        this._url = uri.toString();
      };
      Resource.prototype.getUrlComponent = function(query, proxy) {
        if (this.isDataUri) {
          return this._url;
        }
        let url = this._url;
        if (query) {
          url = `${url}${stringifyQuery(this.queryParameters)}`;
        }
        url = url.replace(/%7B/g, "{").replace(/%7D/g, "}");
        const templateValues = this._templateValues;
        if (Object.keys(templateValues).length > 0) {
          url = url.replace(/{(.*?)}/g, function(match, key) {
            const replacement = templateValues[key];
            if (defined_default(replacement)) {
              return encodeURIComponent(replacement);
            }
            return match;
          });
        }
        if (proxy && defined_default(this.proxy)) {
          url = this.proxy.getURL(url);
        }
        return url;
      };
      Resource.prototype.setQueryParameters = function(params, useAsDefault) {
        if (useAsDefault) {
          this._queryParameters = combineQueryParameters(
            this._queryParameters,
            params,
            false
          );
        } else {
          this._queryParameters = combineQueryParameters(
            params,
            this._queryParameters,
            false
          );
        }
      };
      Resource.prototype.appendQueryParameters = function(params) {
        this._queryParameters = combineQueryParameters(
          params,
          this._queryParameters,
          true
        );
      };
      Resource.prototype.setTemplateValues = function(template, useAsDefault) {
        if (useAsDefault) {
          this._templateValues = combine_default(this._templateValues, template);
        } else {
          this._templateValues = combine_default(template, this._templateValues);
        }
      };
      Resource.prototype.getDerivedResource = function(options) {
        const resource = this.clone();
        resource._retryCount = 0;
        if (defined_default(options.url)) {
          const preserveQuery = defaultValue_default(options.preserveQueryParameters, false);
          resource.parseUrl(options.url, true, preserveQuery, this._url);
        }
        if (defined_default(options.queryParameters)) {
          resource._queryParameters = combine_default(
            options.queryParameters,
            resource.queryParameters
          );
        }
        if (defined_default(options.templateValues)) {
          resource._templateValues = combine_default(
            options.templateValues,
            resource.templateValues
          );
        }
        if (defined_default(options.headers)) {
          resource.headers = combine_default(options.headers, resource.headers);
        }
        if (defined_default(options.proxy)) {
          resource.proxy = options.proxy;
        }
        if (defined_default(options.request)) {
          resource.request = options.request;
        }
        if (defined_default(options.retryCallback)) {
          resource.retryCallback = options.retryCallback;
        }
        if (defined_default(options.retryAttempts)) {
          resource.retryAttempts = options.retryAttempts;
        }
        return resource;
      };
      Resource.prototype.retryOnError = function(error) {
        const retryCallback = this.retryCallback;
        if (typeof retryCallback !== "function" || this._retryCount >= this.retryAttempts) {
          return Promise.resolve(false);
        }
        const that = this;
        return Promise.resolve(retryCallback(this, error)).then(function(result) {
          ++that._retryCount;
          return result;
        });
      };
      Resource.prototype.clone = function(result) {
        if (!defined_default(result)) {
          return new Resource({
            url: this._url,
            queryParameters: this.queryParameters,
            templateValues: this.templateValues,
            headers: this.headers,
            proxy: this.proxy,
            retryCallback: this.retryCallback,
            retryAttempts: this.retryAttempts,
            request: this.request.clone(),
            parseUrl: false,
            credits: defined_default(this.credits) ? this.credits.slice() : void 0
          });
        }
        result._url = this._url;
        result._queryParameters = clone_default(this._queryParameters);
        result._templateValues = clone_default(this._templateValues);
        result.headers = clone_default(this.headers);
        result.proxy = this.proxy;
        result.retryCallback = this.retryCallback;
        result.retryAttempts = this.retryAttempts;
        result._retryCount = 0;
        result.request = this.request.clone();
        return result;
      };
      Resource.prototype.getBaseUri = function(includeQuery) {
        return getBaseUri_default(this.getUrlComponent(includeQuery), includeQuery);
      };
      Resource.prototype.appendForwardSlash = function() {
        this._url = appendForwardSlash_default(this._url);
      };
      Resource.prototype.fetchArrayBuffer = function() {
        return this.fetch({
          responseType: "arraybuffer"
        });
      };
      Resource.fetchArrayBuffer = function(options) {
        const resource = new Resource(options);
        return resource.fetchArrayBuffer();
      };
      Resource.prototype.fetchBlob = function() {
        return this.fetch({
          responseType: "blob"
        });
      };
      Resource.fetchBlob = function(options) {
        const resource = new Resource(options);
        return resource.fetchBlob();
      };
      Resource.prototype.fetchImage = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const preferImageBitmap = defaultValue_default(options.preferImageBitmap, false);
        const preferBlob = defaultValue_default(options.preferBlob, false);
        const flipY = defaultValue_default(options.flipY, false);
        const skipColorSpaceConversion = defaultValue_default(
          options.skipColorSpaceConversion,
          false
        );
        checkAndResetRequest(this.request);
        if (!xhrBlobSupported || this.isDataUri || this.isBlobUri || !this.hasHeaders && !preferBlob) {
          return fetchImage({
            resource: this,
            flipY,
            skipColorSpaceConversion,
            preferImageBitmap
          });
        }
        const blobPromise = this.fetchBlob();
        if (!defined_default(blobPromise)) {
          return;
        }
        let supportsImageBitmap;
        let useImageBitmap;
        let generatedBlobResource;
        let generatedBlob;
        return Resource.supportsImageBitmapOptions().then(function(result) {
          supportsImageBitmap = result;
          useImageBitmap = supportsImageBitmap && preferImageBitmap;
          return blobPromise;
        }).then(function(blob) {
          if (!defined_default(blob)) {
            return;
          }
          generatedBlob = blob;
          if (useImageBitmap) {
            return Resource.createImageBitmapFromBlob(blob, {
              flipY,
              premultiplyAlpha: false,
              skipColorSpaceConversion
            });
          }
          const blobUrl = window.URL.createObjectURL(blob);
          generatedBlobResource = new Resource({
            url: blobUrl
          });
          return fetchImage({
            resource: generatedBlobResource,
            flipY,
            skipColorSpaceConversion,
            preferImageBitmap: false
          });
        }).then(function(image) {
          if (!defined_default(image)) {
            return;
          }
          image.blob = generatedBlob;
          if (useImageBitmap) {
            return image;
          }
          window.URL.revokeObjectURL(generatedBlobResource.url);
          return image;
        }).catch(function(error) {
          if (defined_default(generatedBlobResource)) {
            window.URL.revokeObjectURL(generatedBlobResource.url);
          }
          error.blob = generatedBlob;
          return Promise.reject(error);
        });
      };
      Resource.fetchImage = function(options) {
        const resource = new Resource(options);
        return resource.fetchImage({
          flipY: options.flipY,
          skipColorSpaceConversion: options.skipColorSpaceConversion,
          preferBlob: options.preferBlob,
          preferImageBitmap: options.preferImageBitmap
        });
      };
      Resource.prototype.fetchText = function() {
        return this.fetch({
          responseType: "text"
        });
      };
      Resource.fetchText = function(options) {
        const resource = new Resource(options);
        return resource.fetchText();
      };
      Resource.prototype.fetchJson = function() {
        const promise = this.fetch({
          responseType: "text",
          headers: {
            Accept: "application/json,*/*;q=0.01"
          }
        });
        if (!defined_default(promise)) {
          return void 0;
        }
        return promise.then(function(value) {
          if (!defined_default(value)) {
            return;
          }
          return JSON.parse(value);
        });
      };
      Resource.fetchJson = function(options) {
        const resource = new Resource(options);
        return resource.fetchJson();
      };
      Resource.prototype.fetchXML = function() {
        return this.fetch({
          responseType: "document",
          overrideMimeType: "text/xml"
        });
      };
      Resource.fetchXML = function(options) {
        const resource = new Resource(options);
        return resource.fetchXML();
      };
      Resource.prototype.fetchJsonp = function(callbackParameterName) {
        callbackParameterName = defaultValue_default(callbackParameterName, "callback");
        checkAndResetRequest(this.request);
        let functionName;
        do {
          functionName = `loadJsonp${Math_default.nextRandomNumber().toString().substring(2, 8)}`;
        } while (defined_default(window[functionName]));
        return fetchJsonp(this, callbackParameterName, functionName);
      };
      Resource.fetchJsonp = function(options) {
        const resource = new Resource(options);
        return resource.fetchJsonp(options.callbackParameterName);
      };
      Resource.prototype._makeRequest = function(options) {
        const resource = this;
        checkAndResetRequest(resource.request);
        const request = resource.request;
        const url = resource.url;
        request.url = url;
        request.requestFunction = function() {
          const responseType = options.responseType;
          const headers = combine_default(options.headers, resource.headers);
          const overrideMimeType = options.overrideMimeType;
          const method = options.method;
          const data = options.data;
          const deferred = defer_default();
          const xhr = Resource._Implementations.loadWithXhr(
            url,
            responseType,
            method,
            data,
            headers,
            deferred,
            overrideMimeType
          );
          if (defined_default(xhr) && defined_default(xhr.abort)) {
            request.cancelFunction = function() {
              xhr.abort();
            };
          }
          return deferred.promise;
        };
        const promise = RequestScheduler_default.request(request);
        if (!defined_default(promise)) {
          return;
        }
        return promise.then(function(data) {
          request.cancelFunction = void 0;
          return data;
        }).catch(function(e) {
          request.cancelFunction = void 0;
          if (request.state !== RequestState_default.FAILED) {
            return Promise.reject(e);
          }
          return resource.retryOnError(e).then(function(retry) {
            if (retry) {
              request.state = RequestState_default.UNISSUED;
              request.deferred = void 0;
              return resource.fetch(options);
            }
            return Promise.reject(e);
          });
        });
      };
      dataUriRegex2 = /^data:(.*?)(;base64)?,(.*)$/;
      Resource.prototype.fetch = function(options) {
        options = defaultClone(options, {});
        options.method = "GET";
        return this._makeRequest(options);
      };
      Resource.fetch = function(options) {
        const resource = new Resource(options);
        return resource.fetch({
          // Make copy of just the needed fields because headers can be passed to both the constructor and to fetch
          responseType: options.responseType,
          overrideMimeType: options.overrideMimeType
        });
      };
      Resource.prototype.delete = function(options) {
        options = defaultClone(options, {});
        options.method = "DELETE";
        return this._makeRequest(options);
      };
      Resource.delete = function(options) {
        const resource = new Resource(options);
        return resource.delete({
          // Make copy of just the needed fields because headers can be passed to both the constructor and to fetch
          responseType: options.responseType,
          overrideMimeType: options.overrideMimeType,
          data: options.data
        });
      };
      Resource.prototype.head = function(options) {
        options = defaultClone(options, {});
        options.method = "HEAD";
        return this._makeRequest(options);
      };
      Resource.head = function(options) {
        const resource = new Resource(options);
        return resource.head({
          // Make copy of just the needed fields because headers can be passed to both the constructor and to fetch
          responseType: options.responseType,
          overrideMimeType: options.overrideMimeType
        });
      };
      Resource.prototype.options = function(options) {
        options = defaultClone(options, {});
        options.method = "OPTIONS";
        return this._makeRequest(options);
      };
      Resource.options = function(options) {
        const resource = new Resource(options);
        return resource.options({
          // Make copy of just the needed fields because headers can be passed to both the constructor and to fetch
          responseType: options.responseType,
          overrideMimeType: options.overrideMimeType
        });
      };
      Resource.prototype.post = function(data, options) {
        Check_default.defined("data", data);
        options = defaultClone(options, {});
        options.method = "POST";
        options.data = data;
        return this._makeRequest(options);
      };
      Resource.post = function(options) {
        const resource = new Resource(options);
        return resource.post(options.data, {
          // Make copy of just the needed fields because headers can be passed to both the constructor and to post
          responseType: options.responseType,
          overrideMimeType: options.overrideMimeType
        });
      };
      Resource.prototype.put = function(data, options) {
        Check_default.defined("data", data);
        options = defaultClone(options, {});
        options.method = "PUT";
        options.data = data;
        return this._makeRequest(options);
      };
      Resource.put = function(options) {
        const resource = new Resource(options);
        return resource.put(options.data, {
          // Make copy of just the needed fields because headers can be passed to both the constructor and to post
          responseType: options.responseType,
          overrideMimeType: options.overrideMimeType
        });
      };
      Resource.prototype.patch = function(data, options) {
        Check_default.defined("data", data);
        options = defaultClone(options, {});
        options.method = "PATCH";
        options.data = data;
        return this._makeRequest(options);
      };
      Resource.patch = function(options) {
        const resource = new Resource(options);
        return resource.patch(options.data, {
          // Make copy of just the needed fields because headers can be passed to both the constructor and to post
          responseType: options.responseType,
          overrideMimeType: options.overrideMimeType
        });
      };
      Resource._Implementations = {};
      Resource._Implementations.loadImageElement = function(url, crossOrigin, deferred) {
        const image = new Image();
        image.onload = function() {
          if (image.naturalWidth === 0 && image.naturalHeight === 0 && image.width === 0 && image.height === 0) {
            image.width = 300;
            image.height = 150;
          }
          deferred.resolve(image);
        };
        image.onerror = function(e) {
          deferred.reject(e);
        };
        if (crossOrigin) {
          if (TrustedServers_default.contains(url)) {
            image.crossOrigin = "use-credentials";
          } else {
            image.crossOrigin = "";
          }
        }
        image.src = url;
      };
      Resource._Implementations.createImage = function(request, crossOrigin, deferred, flipY, skipColorSpaceConversion, preferImageBitmap) {
        const url = request.url;
        Resource.supportsImageBitmapOptions().then(function(supportsImageBitmap) {
          if (!(supportsImageBitmap && preferImageBitmap)) {
            Resource._Implementations.loadImageElement(url, crossOrigin, deferred);
            return;
          }
          const responseType = "blob";
          const method = "GET";
          const xhrDeferred = defer_default();
          const xhr = Resource._Implementations.loadWithXhr(
            url,
            responseType,
            method,
            void 0,
            void 0,
            xhrDeferred,
            void 0,
            void 0,
            void 0
          );
          if (defined_default(xhr) && defined_default(xhr.abort)) {
            request.cancelFunction = function() {
              xhr.abort();
            };
          }
          return xhrDeferred.promise.then(function(blob) {
            if (!defined_default(blob)) {
              deferred.reject(
                new RuntimeError_default(
                  `Successfully retrieved ${url} but it contained no content.`
                )
              );
              return;
            }
            return Resource.createImageBitmapFromBlob(blob, {
              flipY,
              premultiplyAlpha: false,
              skipColorSpaceConversion
            });
          }).then(function(image) {
            deferred.resolve(image);
          });
        }).catch(function(e) {
          deferred.reject(e);
        });
      };
      Resource.createImageBitmapFromBlob = function(blob, options) {
        Check_default.defined("options", options);
        Check_default.typeOf.bool("options.flipY", options.flipY);
        Check_default.typeOf.bool("options.premultiplyAlpha", options.premultiplyAlpha);
        Check_default.typeOf.bool(
          "options.skipColorSpaceConversion",
          options.skipColorSpaceConversion
        );
        return createImageBitmap(blob, {
          imageOrientation: options.flipY ? "flipY" : "none",
          premultiplyAlpha: options.premultiplyAlpha ? "premultiply" : "none",
          colorSpaceConversion: options.skipColorSpaceConversion ? "none" : "default"
        });
      };
      noXMLHttpRequest = typeof XMLHttpRequest === "undefined";
      Resource._Implementations.loadWithXhr = function(url, responseType, method, data, headers, deferred, overrideMimeType) {
        const dataUriRegexResult = dataUriRegex2.exec(url);
        if (dataUriRegexResult !== null) {
          deferred.resolve(decodeDataUri(dataUriRegexResult, responseType));
          return;
        }
        if (noXMLHttpRequest) {
          loadWithHttpRequest(
            url,
            responseType,
            method,
            data,
            headers,
            deferred,
            overrideMimeType
          );
          return;
        }
        const xhr = new XMLHttpRequest();
        if (TrustedServers_default.contains(url)) {
          xhr.withCredentials = true;
        }
        xhr.open(method, url, true);
        if (defined_default(overrideMimeType) && defined_default(xhr.overrideMimeType)) {
          xhr.overrideMimeType(overrideMimeType);
        }
        if (defined_default(headers)) {
          for (const key in headers) {
            if (headers.hasOwnProperty(key)) {
              xhr.setRequestHeader(key, headers[key]);
            }
          }
        }
        if (defined_default(responseType)) {
          xhr.responseType = responseType;
        }
        let localFile = false;
        if (typeof url === "string") {
          localFile = url.indexOf("file://") === 0 || typeof window !== "undefined" && window.location.origin === "file://";
        }
        xhr.onload = function() {
          if ((xhr.status < 200 || xhr.status >= 300) && !(localFile && xhr.status === 0)) {
            deferred.reject(
              new RequestErrorEvent_default(
                xhr.status,
                xhr.response,
                xhr.getAllResponseHeaders()
              )
            );
            return;
          }
          const response = xhr.response;
          const browserResponseType = xhr.responseType;
          if (method === "HEAD" || method === "OPTIONS") {
            const responseHeaderString = xhr.getAllResponseHeaders();
            const splitHeaders = responseHeaderString.trim().split(/[\r\n]+/);
            const responseHeaders = {};
            splitHeaders.forEach(function(line) {
              const parts = line.split(": ");
              const header = parts.shift();
              responseHeaders[header] = parts.join(": ");
            });
            deferred.resolve(responseHeaders);
            return;
          }
          if (xhr.status === 204) {
            deferred.resolve(void 0);
          } else if (defined_default(response) && (!defined_default(responseType) || browserResponseType === responseType)) {
            deferred.resolve(response);
          } else if (responseType === "json" && typeof response === "string") {
            try {
              deferred.resolve(JSON.parse(response));
            } catch (e) {
              deferred.reject(e);
            }
          } else if ((browserResponseType === "" || browserResponseType === "document") && defined_default(xhr.responseXML) && xhr.responseXML.hasChildNodes()) {
            deferred.resolve(xhr.responseXML);
          } else if ((browserResponseType === "" || browserResponseType === "text") && defined_default(xhr.responseText)) {
            deferred.resolve(xhr.responseText);
          } else {
            deferred.reject(
              new RuntimeError_default("Invalid XMLHttpRequest response type.")
            );
          }
        };
        xhr.onerror = function(e) {
          deferred.reject(new RequestErrorEvent_default());
        };
        xhr.send(data);
        return xhr;
      };
      Resource._Implementations.loadAndExecuteScript = function(url, functionName, deferred) {
        return loadAndExecuteScript_default(url, functionName).catch(function(e) {
          deferred.reject(e);
        });
      };
      Resource._DefaultImplementations = {};
      Resource._DefaultImplementations.createImage = Resource._Implementations.createImage;
      Resource._DefaultImplementations.loadWithXhr = Resource._Implementations.loadWithXhr;
      Resource._DefaultImplementations.loadAndExecuteScript = Resource._Implementations.loadAndExecuteScript;
      Resource.DEFAULT = Object.freeze(
        new Resource({
          url: typeof document === "undefined" ? "" : document.location.href.split("?")[0]
        })
      );
      Resource_default = Resource;
    }
  });

  // packages/engine/Source/Core/EarthOrientationParameters.js
  function EarthOrientationParameters(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this._dates = void 0;
    this._samples = void 0;
    this._dateColumn = -1;
    this._xPoleWanderRadiansColumn = -1;
    this._yPoleWanderRadiansColumn = -1;
    this._ut1MinusUtcSecondsColumn = -1;
    this._xCelestialPoleOffsetRadiansColumn = -1;
    this._yCelestialPoleOffsetRadiansColumn = -1;
    this._taiMinusUtcSecondsColumn = -1;
    this._columnCount = 0;
    this._lastIndex = -1;
    this._addNewLeapSeconds = defaultValue_default(options.addNewLeapSeconds, true);
    if (defined_default(options.data)) {
      onDataReady(this, options.data);
    } else {
      onDataReady(this, {
        columnNames: [
          "dateIso8601",
          "modifiedJulianDateUtc",
          "xPoleWanderRadians",
          "yPoleWanderRadians",
          "ut1MinusUtcSeconds",
          "lengthOfDayCorrectionSeconds",
          "xCelestialPoleOffsetRadians",
          "yCelestialPoleOffsetRadians",
          "taiMinusUtcSeconds"
        ],
        samples: []
      });
    }
  }
  function compareLeapSecondDates2(leapSecond, dateToFind) {
    return JulianDate_default.compare(leapSecond.julianDate, dateToFind);
  }
  function onDataReady(eop, eopData) {
    if (!defined_default(eopData.columnNames)) {
      throw new RuntimeError_default(
        "Error in loaded EOP data: The columnNames property is required."
      );
    }
    if (!defined_default(eopData.samples)) {
      throw new RuntimeError_default(
        "Error in loaded EOP data: The samples property is required."
      );
    }
    const dateColumn = eopData.columnNames.indexOf("modifiedJulianDateUtc");
    const xPoleWanderRadiansColumn = eopData.columnNames.indexOf(
      "xPoleWanderRadians"
    );
    const yPoleWanderRadiansColumn = eopData.columnNames.indexOf(
      "yPoleWanderRadians"
    );
    const ut1MinusUtcSecondsColumn = eopData.columnNames.indexOf(
      "ut1MinusUtcSeconds"
    );
    const xCelestialPoleOffsetRadiansColumn = eopData.columnNames.indexOf(
      "xCelestialPoleOffsetRadians"
    );
    const yCelestialPoleOffsetRadiansColumn = eopData.columnNames.indexOf(
      "yCelestialPoleOffsetRadians"
    );
    const taiMinusUtcSecondsColumn = eopData.columnNames.indexOf(
      "taiMinusUtcSeconds"
    );
    if (dateColumn < 0 || xPoleWanderRadiansColumn < 0 || yPoleWanderRadiansColumn < 0 || ut1MinusUtcSecondsColumn < 0 || xCelestialPoleOffsetRadiansColumn < 0 || yCelestialPoleOffsetRadiansColumn < 0 || taiMinusUtcSecondsColumn < 0) {
      throw new RuntimeError_default(
        "Error in loaded EOP data: The columnNames property must include modifiedJulianDateUtc, xPoleWanderRadians, yPoleWanderRadians, ut1MinusUtcSeconds, xCelestialPoleOffsetRadians, yCelestialPoleOffsetRadians, and taiMinusUtcSeconds columns"
      );
    }
    const samples = eop._samples = eopData.samples;
    const dates = eop._dates = [];
    eop._dateColumn = dateColumn;
    eop._xPoleWanderRadiansColumn = xPoleWanderRadiansColumn;
    eop._yPoleWanderRadiansColumn = yPoleWanderRadiansColumn;
    eop._ut1MinusUtcSecondsColumn = ut1MinusUtcSecondsColumn;
    eop._xCelestialPoleOffsetRadiansColumn = xCelestialPoleOffsetRadiansColumn;
    eop._yCelestialPoleOffsetRadiansColumn = yCelestialPoleOffsetRadiansColumn;
    eop._taiMinusUtcSecondsColumn = taiMinusUtcSecondsColumn;
    eop._columnCount = eopData.columnNames.length;
    eop._lastIndex = void 0;
    let lastTaiMinusUtc;
    const addNewLeapSeconds = eop._addNewLeapSeconds;
    for (let i = 0, len = samples.length; i < len; i += eop._columnCount) {
      const mjd = samples[i + dateColumn];
      const taiMinusUtc = samples[i + taiMinusUtcSecondsColumn];
      const day = mjd + TimeConstants_default.MODIFIED_JULIAN_DATE_DIFFERENCE;
      const date = new JulianDate_default(day, taiMinusUtc, TimeStandard_default.TAI);
      dates.push(date);
      if (addNewLeapSeconds) {
        if (taiMinusUtc !== lastTaiMinusUtc && defined_default(lastTaiMinusUtc)) {
          const leapSeconds = JulianDate_default.leapSeconds;
          const leapSecondIndex = binarySearch_default(
            leapSeconds,
            date,
            compareLeapSecondDates2
          );
          if (leapSecondIndex < 0) {
            const leapSecond = new LeapSecond_default(date, taiMinusUtc);
            leapSeconds.splice(~leapSecondIndex, 0, leapSecond);
          }
        }
        lastTaiMinusUtc = taiMinusUtc;
      }
    }
  }
  function fillResultFromIndex(eop, samples, index, columnCount, result) {
    const start = index * columnCount;
    result.xPoleWander = samples[start + eop._xPoleWanderRadiansColumn];
    result.yPoleWander = samples[start + eop._yPoleWanderRadiansColumn];
    result.xPoleOffset = samples[start + eop._xCelestialPoleOffsetRadiansColumn];
    result.yPoleOffset = samples[start + eop._yCelestialPoleOffsetRadiansColumn];
    result.ut1MinusUtc = samples[start + eop._ut1MinusUtcSecondsColumn];
  }
  function linearInterp(dx, y1, y2) {
    return y1 + dx * (y2 - y1);
  }
  function interpolate(eop, dates, samples, date, before, after, result) {
    const columnCount = eop._columnCount;
    if (after > dates.length - 1) {
      result.xPoleWander = 0;
      result.yPoleWander = 0;
      result.xPoleOffset = 0;
      result.yPoleOffset = 0;
      result.ut1MinusUtc = 0;
      return result;
    }
    const beforeDate = dates[before];
    const afterDate = dates[after];
    if (beforeDate.equals(afterDate) || date.equals(beforeDate)) {
      fillResultFromIndex(eop, samples, before, columnCount, result);
      return result;
    } else if (date.equals(afterDate)) {
      fillResultFromIndex(eop, samples, after, columnCount, result);
      return result;
    }
    const factor = JulianDate_default.secondsDifference(date, beforeDate) / JulianDate_default.secondsDifference(afterDate, beforeDate);
    const startBefore = before * columnCount;
    const startAfter = after * columnCount;
    let beforeUt1MinusUtc = samples[startBefore + eop._ut1MinusUtcSecondsColumn];
    let afterUt1MinusUtc = samples[startAfter + eop._ut1MinusUtcSecondsColumn];
    const offsetDifference = afterUt1MinusUtc - beforeUt1MinusUtc;
    if (offsetDifference > 0.5 || offsetDifference < -0.5) {
      const beforeTaiMinusUtc = samples[startBefore + eop._taiMinusUtcSecondsColumn];
      const afterTaiMinusUtc = samples[startAfter + eop._taiMinusUtcSecondsColumn];
      if (beforeTaiMinusUtc !== afterTaiMinusUtc) {
        if (afterDate.equals(date)) {
          beforeUt1MinusUtc = afterUt1MinusUtc;
        } else {
          afterUt1MinusUtc -= afterTaiMinusUtc - beforeTaiMinusUtc;
        }
      }
    }
    result.xPoleWander = linearInterp(
      factor,
      samples[startBefore + eop._xPoleWanderRadiansColumn],
      samples[startAfter + eop._xPoleWanderRadiansColumn]
    );
    result.yPoleWander = linearInterp(
      factor,
      samples[startBefore + eop._yPoleWanderRadiansColumn],
      samples[startAfter + eop._yPoleWanderRadiansColumn]
    );
    result.xPoleOffset = linearInterp(
      factor,
      samples[startBefore + eop._xCelestialPoleOffsetRadiansColumn],
      samples[startAfter + eop._xCelestialPoleOffsetRadiansColumn]
    );
    result.yPoleOffset = linearInterp(
      factor,
      samples[startBefore + eop._yCelestialPoleOffsetRadiansColumn],
      samples[startAfter + eop._yCelestialPoleOffsetRadiansColumn]
    );
    result.ut1MinusUtc = linearInterp(
      factor,
      beforeUt1MinusUtc,
      afterUt1MinusUtc
    );
    return result;
  }
  var EarthOrientationParameters_default;
  var init_EarthOrientationParameters = __esm({
    "packages/engine/Source/Core/EarthOrientationParameters.js"() {
      init_binarySearch();
      init_Check();
      init_defaultValue();
      init_defined();
      init_EarthOrientationParametersSample();
      init_JulianDate();
      init_LeapSecond();
      init_Resource();
      init_RuntimeError();
      init_TimeConstants();
      init_TimeStandard();
      EarthOrientationParameters.fromUrl = async function(url, options) {
        Check_default.defined("url", url);
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const resource = Resource_default.createIfNeeded(url);
        let eopData;
        try {
          eopData = await resource.fetchJson();
        } catch (e) {
          throw new RuntimeError_default(
            `An error occurred while retrieving the EOP data from the URL ${resource.url}.`
          );
        }
        return new EarthOrientationParameters({
          addNewLeapSeconds: options.addNewLeapSeconds,
          data: eopData
        });
      };
      EarthOrientationParameters.NONE = Object.freeze({
        compute: function(date, result) {
          if (!defined_default(result)) {
            result = new EarthOrientationParametersSample_default(0, 0, 0, 0, 0);
          } else {
            result.xPoleWander = 0;
            result.yPoleWander = 0;
            result.xPoleOffset = 0;
            result.yPoleOffset = 0;
            result.ut1MinusUtc = 0;
          }
          return result;
        }
      });
      EarthOrientationParameters.prototype.compute = function(date, result) {
        if (!defined_default(this._samples)) {
          return void 0;
        }
        if (!defined_default(result)) {
          result = new EarthOrientationParametersSample_default(0, 0, 0, 0, 0);
        }
        if (this._samples.length === 0) {
          result.xPoleWander = 0;
          result.yPoleWander = 0;
          result.xPoleOffset = 0;
          result.yPoleOffset = 0;
          result.ut1MinusUtc = 0;
          return result;
        }
        const dates = this._dates;
        const lastIndex = this._lastIndex;
        let before = 0;
        let after = 0;
        if (defined_default(lastIndex)) {
          const previousIndexDate = dates[lastIndex];
          const nextIndexDate = dates[lastIndex + 1];
          const isAfterPrevious = JulianDate_default.lessThanOrEquals(
            previousIndexDate,
            date
          );
          const isAfterLastSample = !defined_default(nextIndexDate);
          const isBeforeNext = isAfterLastSample || JulianDate_default.greaterThanOrEquals(nextIndexDate, date);
          if (isAfterPrevious && isBeforeNext) {
            before = lastIndex;
            if (!isAfterLastSample && nextIndexDate.equals(date)) {
              ++before;
            }
            after = before + 1;
            interpolate(this, dates, this._samples, date, before, after, result);
            return result;
          }
        }
        let index = binarySearch_default(dates, date, JulianDate_default.compare, this._dateColumn);
        if (index >= 0) {
          if (index < dates.length - 1 && dates[index + 1].equals(date)) {
            ++index;
          }
          before = index;
          after = index;
        } else {
          after = ~index;
          before = after - 1;
          if (before < 0) {
            before = 0;
          }
        }
        this._lastIndex = before;
        interpolate(this, dates, this._samples, date, before, after, result);
        return result;
      };
      EarthOrientationParameters_default = EarthOrientationParameters;
    }
  });

  // packages/engine/Source/Core/HeadingPitchRoll.js
  function HeadingPitchRoll(heading, pitch, roll) {
    this.heading = defaultValue_default(heading, 0);
    this.pitch = defaultValue_default(pitch, 0);
    this.roll = defaultValue_default(roll, 0);
  }
  var HeadingPitchRoll_default;
  var init_HeadingPitchRoll = __esm({
    "packages/engine/Source/Core/HeadingPitchRoll.js"() {
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      HeadingPitchRoll.fromQuaternion = function(quaternion, result) {
        if (!defined_default(quaternion)) {
          throw new DeveloperError_default("quaternion is required");
        }
        if (!defined_default(result)) {
          result = new HeadingPitchRoll();
        }
        const test = 2 * (quaternion.w * quaternion.y - quaternion.z * quaternion.x);
        const denominatorRoll = 1 - 2 * (quaternion.x * quaternion.x + quaternion.y * quaternion.y);
        const numeratorRoll = 2 * (quaternion.w * quaternion.x + quaternion.y * quaternion.z);
        const denominatorHeading = 1 - 2 * (quaternion.y * quaternion.y + quaternion.z * quaternion.z);
        const numeratorHeading = 2 * (quaternion.w * quaternion.z + quaternion.x * quaternion.y);
        result.heading = -Math.atan2(numeratorHeading, denominatorHeading);
        result.roll = Math.atan2(numeratorRoll, denominatorRoll);
        result.pitch = -Math_default.asinClamped(test);
        return result;
      };
      HeadingPitchRoll.fromDegrees = function(heading, pitch, roll, result) {
        if (!defined_default(heading)) {
          throw new DeveloperError_default("heading is required");
        }
        if (!defined_default(pitch)) {
          throw new DeveloperError_default("pitch is required");
        }
        if (!defined_default(roll)) {
          throw new DeveloperError_default("roll is required");
        }
        if (!defined_default(result)) {
          result = new HeadingPitchRoll();
        }
        result.heading = heading * Math_default.RADIANS_PER_DEGREE;
        result.pitch = pitch * Math_default.RADIANS_PER_DEGREE;
        result.roll = roll * Math_default.RADIANS_PER_DEGREE;
        return result;
      };
      HeadingPitchRoll.clone = function(headingPitchRoll, result) {
        if (!defined_default(headingPitchRoll)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new HeadingPitchRoll(
            headingPitchRoll.heading,
            headingPitchRoll.pitch,
            headingPitchRoll.roll
          );
        }
        result.heading = headingPitchRoll.heading;
        result.pitch = headingPitchRoll.pitch;
        result.roll = headingPitchRoll.roll;
        return result;
      };
      HeadingPitchRoll.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.heading === right.heading && left.pitch === right.pitch && left.roll === right.roll;
      };
      HeadingPitchRoll.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {
        return left === right || defined_default(left) && defined_default(right) && Math_default.equalsEpsilon(
          left.heading,
          right.heading,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          left.pitch,
          right.pitch,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          left.roll,
          right.roll,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      HeadingPitchRoll.prototype.clone = function(result) {
        return HeadingPitchRoll.clone(this, result);
      };
      HeadingPitchRoll.prototype.equals = function(right) {
        return HeadingPitchRoll.equals(this, right);
      };
      HeadingPitchRoll.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {
        return HeadingPitchRoll.equalsEpsilon(
          this,
          right,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      HeadingPitchRoll.prototype.toString = function() {
        return `(${this.heading}, ${this.pitch}, ${this.roll})`;
      };
      HeadingPitchRoll_default = HeadingPitchRoll;
    }
  });

  // packages/engine/Source/Core/buildModuleUrl.js
  function getBaseUrlFromCesiumScript() {
    const scripts = document.getElementsByTagName("script");
    for (let i = 0, len = scripts.length; i < len; ++i) {
      const src = scripts[i].getAttribute("src");
      const result = cesiumScriptRegex.exec(src);
      if (result !== null) {
        return result[1];
      }
    }
    return void 0;
  }
  function tryMakeAbsolute(url) {
    if (typeof document === "undefined") {
      return url;
    }
    if (!defined_default(a2)) {
      a2 = document.createElement("a");
    }
    a2.href = url;
    return a2.href;
  }
  function getCesiumBaseUrl() {
    if (defined_default(baseResource)) {
      return baseResource;
    }
    let baseUrlString;
    if (typeof CESIUM_BASE_URL !== "undefined") {
      baseUrlString = CESIUM_BASE_URL;
    } else if (defined_default(import_meta?.url)) {
      baseUrlString = getAbsoluteUri_default(".", import_meta.url);
    } else if (typeof define === "object" && defined_default(define.amd) && !define.amd.toUrlUndefined && defined_default(__require.toUrl)) {
      baseUrlString = getAbsoluteUri_default(
        "..",
        buildModuleUrl("Core/buildModuleUrl.js")
      );
    } else {
      baseUrlString = getBaseUrlFromCesiumScript();
    }
    if (!defined_default(baseUrlString)) {
      throw new DeveloperError_default(
        "Unable to determine Cesium base URL automatically, try defining a global variable called CESIUM_BASE_URL."
      );
    }
    baseResource = new Resource_default({
      url: tryMakeAbsolute(baseUrlString)
    });
    baseResource.appendForwardSlash();
    return baseResource;
  }
  function buildModuleUrlFromRequireToUrl(moduleID) {
    return tryMakeAbsolute(__require.toUrl(`../${moduleID}`));
  }
  function buildModuleUrlFromBaseUrl(moduleID) {
    const resource = getCesiumBaseUrl().getDerivedResource({
      url: moduleID
    });
    return resource.url;
  }
  function buildModuleUrl(relativeUrl) {
    if (!defined_default(implementation)) {
      if (typeof define === "object" && defined_default(define.amd) && !define.amd.toUrlUndefined && defined_default(__require.toUrl)) {
        implementation = buildModuleUrlFromRequireToUrl;
      } else {
        implementation = buildModuleUrlFromBaseUrl;
      }
    }
    const url = implementation(relativeUrl);
    return url;
  }
  var import_meta, cesiumScriptRegex, a2, baseResource, implementation, buildModuleUrl_default;
  var init_buildModuleUrl = __esm({
    "packages/engine/Source/Core/buildModuleUrl.js"() {
      init_defined();
      init_DeveloperError();
      init_getAbsoluteUri();
      init_Resource();
      import_meta = {};
      cesiumScriptRegex = /((?:.*\/)|^)Cesium\.js(?:\?|\#|$)/;
      buildModuleUrl._cesiumScriptRegex = cesiumScriptRegex;
      buildModuleUrl._buildModuleUrlFromBaseUrl = buildModuleUrlFromBaseUrl;
      buildModuleUrl._clearBaseResource = function() {
        baseResource = void 0;
      };
      buildModuleUrl.setBaseUrl = function(value) {
        baseResource = Resource_default.DEFAULT.getDerivedResource({
          url: value
        });
      };
      buildModuleUrl.getCesiumBaseUrl = getCesiumBaseUrl;
      buildModuleUrl_default = buildModuleUrl;
    }
  });

  // packages/engine/Source/Core/Iau2006XysSample.js
  function Iau2006XysSample(x, y, s) {
    this.x = x;
    this.y = y;
    this.s = s;
  }
  var Iau2006XysSample_default;
  var init_Iau2006XysSample = __esm({
    "packages/engine/Source/Core/Iau2006XysSample.js"() {
      Iau2006XysSample_default = Iau2006XysSample;
    }
  });

  // packages/engine/Source/Core/Iau2006XysData.js
  function Iau2006XysData(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this._xysFileUrlTemplate = Resource_default.createIfNeeded(
      options.xysFileUrlTemplate
    );
    this._interpolationOrder = defaultValue_default(options.interpolationOrder, 9);
    this._sampleZeroJulianEphemerisDate = defaultValue_default(
      options.sampleZeroJulianEphemerisDate,
      24423965e-1
    );
    this._sampleZeroDateTT = new JulianDate_default(
      this._sampleZeroJulianEphemerisDate,
      0,
      TimeStandard_default.TAI
    );
    this._stepSizeDays = defaultValue_default(options.stepSizeDays, 1);
    this._samplesPerXysFile = defaultValue_default(options.samplesPerXysFile, 1e3);
    this._totalSamples = defaultValue_default(options.totalSamples, 27426);
    this._samples = new Array(this._totalSamples * 3);
    this._chunkDownloadsInProgress = [];
    const order = this._interpolationOrder;
    const denom = this._denominators = new Array(order + 1);
    const xTable = this._xTable = new Array(order + 1);
    const stepN = Math.pow(this._stepSizeDays, order);
    for (let i = 0; i <= order; ++i) {
      denom[i] = stepN;
      xTable[i] = i * this._stepSizeDays;
      for (let j = 0; j <= order; ++j) {
        if (j !== i) {
          denom[i] *= i - j;
        }
      }
      denom[i] = 1 / denom[i];
    }
    this._work = new Array(order + 1);
    this._coef = new Array(order + 1);
  }
  function getDaysSinceEpoch(xys, dayTT, secondTT) {
    const dateTT = julianDateScratch;
    dateTT.dayNumber = dayTT;
    dateTT.secondsOfDay = secondTT;
    return JulianDate_default.daysDifference(dateTT, xys._sampleZeroDateTT);
  }
  function requestXysChunk(xysData, chunkIndex) {
    if (xysData._chunkDownloadsInProgress[chunkIndex]) {
      return xysData._chunkDownloadsInProgress[chunkIndex];
    }
    let chunkUrl;
    const xysFileUrlTemplate = xysData._xysFileUrlTemplate;
    if (defined_default(xysFileUrlTemplate)) {
      chunkUrl = xysFileUrlTemplate.getDerivedResource({
        templateValues: {
          0: chunkIndex
        }
      });
    } else {
      chunkUrl = new Resource_default({
        url: buildModuleUrl_default(`Assets/IAU2006_XYS/IAU2006_XYS_${chunkIndex}.json`)
      });
    }
    const promise = chunkUrl.fetchJson().then(function(chunk) {
      xysData._chunkDownloadsInProgress[chunkIndex] = false;
      const samples = xysData._samples;
      const newSamples = chunk.samples;
      const startIndex = chunkIndex * xysData._samplesPerXysFile * 3;
      for (let i = 0, len = newSamples.length; i < len; ++i) {
        samples[startIndex + i] = newSamples[i];
      }
    });
    xysData._chunkDownloadsInProgress[chunkIndex] = promise;
    return promise;
  }
  var julianDateScratch, Iau2006XysData_default;
  var init_Iau2006XysData = __esm({
    "packages/engine/Source/Core/Iau2006XysData.js"() {
      init_buildModuleUrl();
      init_defaultValue();
      init_defined();
      init_Iau2006XysSample();
      init_JulianDate();
      init_Resource();
      init_TimeStandard();
      julianDateScratch = new JulianDate_default(0, 0, TimeStandard_default.TAI);
      Iau2006XysData.prototype.preload = function(startDayTT, startSecondTT, stopDayTT, stopSecondTT) {
        const startDaysSinceEpoch = getDaysSinceEpoch(
          this,
          startDayTT,
          startSecondTT
        );
        const stopDaysSinceEpoch = getDaysSinceEpoch(this, stopDayTT, stopSecondTT);
        let startIndex = startDaysSinceEpoch / this._stepSizeDays - this._interpolationOrder / 2 | 0;
        if (startIndex < 0) {
          startIndex = 0;
        }
        let stopIndex = stopDaysSinceEpoch / this._stepSizeDays - this._interpolationOrder / 2 | 0 + this._interpolationOrder;
        if (stopIndex >= this._totalSamples) {
          stopIndex = this._totalSamples - 1;
        }
        const startChunk = startIndex / this._samplesPerXysFile | 0;
        const stopChunk = stopIndex / this._samplesPerXysFile | 0;
        const promises = [];
        for (let i = startChunk; i <= stopChunk; ++i) {
          promises.push(requestXysChunk(this, i));
        }
        return Promise.all(promises);
      };
      Iau2006XysData.prototype.computeXysRadians = function(dayTT, secondTT, result) {
        const daysSinceEpoch = getDaysSinceEpoch(this, dayTT, secondTT);
        if (daysSinceEpoch < 0) {
          return void 0;
        }
        const centerIndex = daysSinceEpoch / this._stepSizeDays | 0;
        if (centerIndex >= this._totalSamples) {
          return void 0;
        }
        const degree = this._interpolationOrder;
        let firstIndex = centerIndex - (degree / 2 | 0);
        if (firstIndex < 0) {
          firstIndex = 0;
        }
        let lastIndex = firstIndex + degree;
        if (lastIndex >= this._totalSamples) {
          lastIndex = this._totalSamples - 1;
          firstIndex = lastIndex - degree;
          if (firstIndex < 0) {
            firstIndex = 0;
          }
        }
        let isDataMissing = false;
        const samples = this._samples;
        if (!defined_default(samples[firstIndex * 3])) {
          requestXysChunk(this, firstIndex / this._samplesPerXysFile | 0);
          isDataMissing = true;
        }
        if (!defined_default(samples[lastIndex * 3])) {
          requestXysChunk(this, lastIndex / this._samplesPerXysFile | 0);
          isDataMissing = true;
        }
        if (isDataMissing) {
          return void 0;
        }
        if (!defined_default(result)) {
          result = new Iau2006XysSample_default(0, 0, 0);
        } else {
          result.x = 0;
          result.y = 0;
          result.s = 0;
        }
        const x = daysSinceEpoch - firstIndex * this._stepSizeDays;
        const work = this._work;
        const denom = this._denominators;
        const coef = this._coef;
        const xTable = this._xTable;
        let i, j;
        for (i = 0; i <= degree; ++i) {
          work[i] = x - xTable[i];
        }
        for (i = 0; i <= degree; ++i) {
          coef[i] = 1;
          for (j = 0; j <= degree; ++j) {
            if (j !== i) {
              coef[i] *= work[j];
            }
          }
          coef[i] *= denom[i];
          let sampleIndex = (firstIndex + i) * 3;
          result.x += coef[i] * samples[sampleIndex++];
          result.y += coef[i] * samples[sampleIndex++];
          result.s += coef[i] * samples[sampleIndex];
        }
        return result;
      };
      Iau2006XysData_default = Iau2006XysData;
    }
  });

  // packages/engine/Source/Core/Transforms.js
  var Transforms, vectorProductLocalFrame, degeneratePositionLocalFrame, localFrameToFixedFrameCache, scratchCalculateCartesian, scratchFirstCartesian, scratchSecondCartesian, scratchThirdCartesian, scratchHPRQuaternion2, scratchScale, scratchHPRMatrix4, scratchENUMatrix4, scratchHPRMatrix3, noScale, hprCenterScratch, ffScratch, hprTransformScratch, hprRotationScratch, hprQuaternionScratch, gmstConstant0, gmstConstant1, gmstConstant2, gmstConstant3, rateCoef, wgs84WRPrecessing, twoPiOverSecondsInDay, dateInUtc, ttMinusTai, j2000ttDays, xysScratch, eopScratch, rotation1Scratch, rotation2Scratch, pointToWindowCoordinatesTemp, normalScratch, rightScratch, upScratch, swizzleMatrix, scratchCartographic, scratchCartesian3Projection, scratchCenter, scratchRotation, scratchFromENU, scratchToENU, Transforms_default;
  var init_Transforms = __esm({
    "packages/engine/Source/Core/Transforms.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Cartesian4();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_EarthOrientationParameters();
      init_EarthOrientationParametersSample();
      init_Ellipsoid();
      init_HeadingPitchRoll();
      init_Iau2006XysData();
      init_Iau2006XysSample();
      init_JulianDate();
      init_Math();
      init_Matrix3();
      init_Matrix4();
      init_Quaternion();
      init_TimeConstants();
      Transforms = {};
      vectorProductLocalFrame = {
        up: {
          south: "east",
          north: "west",
          west: "south",
          east: "north"
        },
        down: {
          south: "west",
          north: "east",
          west: "north",
          east: "south"
        },
        south: {
          up: "west",
          down: "east",
          west: "down",
          east: "up"
        },
        north: {
          up: "east",
          down: "west",
          west: "up",
          east: "down"
        },
        west: {
          up: "north",
          down: "south",
          north: "down",
          south: "up"
        },
        east: {
          up: "south",
          down: "north",
          north: "up",
          south: "down"
        }
      };
      degeneratePositionLocalFrame = {
        north: [-1, 0, 0],
        east: [0, 1, 0],
        up: [0, 0, 1],
        south: [1, 0, 0],
        west: [0, -1, 0],
        down: [0, 0, -1]
      };
      localFrameToFixedFrameCache = {};
      scratchCalculateCartesian = {
        east: new Cartesian3_default(),
        north: new Cartesian3_default(),
        up: new Cartesian3_default(),
        west: new Cartesian3_default(),
        south: new Cartesian3_default(),
        down: new Cartesian3_default()
      };
      scratchFirstCartesian = new Cartesian3_default();
      scratchSecondCartesian = new Cartesian3_default();
      scratchThirdCartesian = new Cartesian3_default();
      Transforms.localFrameToFixedFrameGenerator = function(firstAxis, secondAxis) {
        if (!vectorProductLocalFrame.hasOwnProperty(firstAxis) || !vectorProductLocalFrame[firstAxis].hasOwnProperty(secondAxis)) {
          throw new DeveloperError_default(
            "firstAxis and secondAxis must be east, north, up, west, south or down."
          );
        }
        const thirdAxis = vectorProductLocalFrame[firstAxis][secondAxis];
        let resultat;
        const hashAxis = firstAxis + secondAxis;
        if (defined_default(localFrameToFixedFrameCache[hashAxis])) {
          resultat = localFrameToFixedFrameCache[hashAxis];
        } else {
          resultat = function(origin, ellipsoid, result) {
            if (!defined_default(origin)) {
              throw new DeveloperError_default("origin is required.");
            }
            if (isNaN(origin.x) || isNaN(origin.y) || isNaN(origin.z)) {
              throw new DeveloperError_default("origin has a NaN component");
            }
            if (!defined_default(result)) {
              result = new Matrix4_default();
            }
            if (Cartesian3_default.equalsEpsilon(origin, Cartesian3_default.ZERO, Math_default.EPSILON14)) {
              Cartesian3_default.unpack(
                degeneratePositionLocalFrame[firstAxis],
                0,
                scratchFirstCartesian
              );
              Cartesian3_default.unpack(
                degeneratePositionLocalFrame[secondAxis],
                0,
                scratchSecondCartesian
              );
              Cartesian3_default.unpack(
                degeneratePositionLocalFrame[thirdAxis],
                0,
                scratchThirdCartesian
              );
            } else if (Math_default.equalsEpsilon(origin.x, 0, Math_default.EPSILON14) && Math_default.equalsEpsilon(origin.y, 0, Math_default.EPSILON14)) {
              const sign2 = Math_default.sign(origin.z);
              Cartesian3_default.unpack(
                degeneratePositionLocalFrame[firstAxis],
                0,
                scratchFirstCartesian
              );
              if (firstAxis !== "east" && firstAxis !== "west") {
                Cartesian3_default.multiplyByScalar(
                  scratchFirstCartesian,
                  sign2,
                  scratchFirstCartesian
                );
              }
              Cartesian3_default.unpack(
                degeneratePositionLocalFrame[secondAxis],
                0,
                scratchSecondCartesian
              );
              if (secondAxis !== "east" && secondAxis !== "west") {
                Cartesian3_default.multiplyByScalar(
                  scratchSecondCartesian,
                  sign2,
                  scratchSecondCartesian
                );
              }
              Cartesian3_default.unpack(
                degeneratePositionLocalFrame[thirdAxis],
                0,
                scratchThirdCartesian
              );
              if (thirdAxis !== "east" && thirdAxis !== "west") {
                Cartesian3_default.multiplyByScalar(
                  scratchThirdCartesian,
                  sign2,
                  scratchThirdCartesian
                );
              }
            } else {
              ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
              ellipsoid.geodeticSurfaceNormal(origin, scratchCalculateCartesian.up);
              const up = scratchCalculateCartesian.up;
              const east = scratchCalculateCartesian.east;
              east.x = -origin.y;
              east.y = origin.x;
              east.z = 0;
              Cartesian3_default.normalize(east, scratchCalculateCartesian.east);
              Cartesian3_default.cross(up, east, scratchCalculateCartesian.north);
              Cartesian3_default.multiplyByScalar(
                scratchCalculateCartesian.up,
                -1,
                scratchCalculateCartesian.down
              );
              Cartesian3_default.multiplyByScalar(
                scratchCalculateCartesian.east,
                -1,
                scratchCalculateCartesian.west
              );
              Cartesian3_default.multiplyByScalar(
                scratchCalculateCartesian.north,
                -1,
                scratchCalculateCartesian.south
              );
              scratchFirstCartesian = scratchCalculateCartesian[firstAxis];
              scratchSecondCartesian = scratchCalculateCartesian[secondAxis];
              scratchThirdCartesian = scratchCalculateCartesian[thirdAxis];
            }
            result[0] = scratchFirstCartesian.x;
            result[1] = scratchFirstCartesian.y;
            result[2] = scratchFirstCartesian.z;
            result[3] = 0;
            result[4] = scratchSecondCartesian.x;
            result[5] = scratchSecondCartesian.y;
            result[6] = scratchSecondCartesian.z;
            result[7] = 0;
            result[8] = scratchThirdCartesian.x;
            result[9] = scratchThirdCartesian.y;
            result[10] = scratchThirdCartesian.z;
            result[11] = 0;
            result[12] = origin.x;
            result[13] = origin.y;
            result[14] = origin.z;
            result[15] = 1;
            return result;
          };
          localFrameToFixedFrameCache[hashAxis] = resultat;
        }
        return resultat;
      };
      Transforms.eastNorthUpToFixedFrame = Transforms.localFrameToFixedFrameGenerator(
        "east",
        "north"
      );
      Transforms.northEastDownToFixedFrame = Transforms.localFrameToFixedFrameGenerator(
        "north",
        "east"
      );
      Transforms.northUpEastToFixedFrame = Transforms.localFrameToFixedFrameGenerator(
        "north",
        "up"
      );
      Transforms.northWestUpToFixedFrame = Transforms.localFrameToFixedFrameGenerator(
        "north",
        "west"
      );
      scratchHPRQuaternion2 = new Quaternion_default();
      scratchScale = new Cartesian3_default(1, 1, 1);
      scratchHPRMatrix4 = new Matrix4_default();
      Transforms.headingPitchRollToFixedFrame = function(origin, headingPitchRoll, ellipsoid, fixedFrameTransform, result) {
        Check_default.typeOf.object("HeadingPitchRoll", headingPitchRoll);
        fixedFrameTransform = defaultValue_default(
          fixedFrameTransform,
          Transforms.eastNorthUpToFixedFrame
        );
        const hprQuaternion = Quaternion_default.fromHeadingPitchRoll(
          headingPitchRoll,
          scratchHPRQuaternion2
        );
        const hprMatrix = Matrix4_default.fromTranslationQuaternionRotationScale(
          Cartesian3_default.ZERO,
          hprQuaternion,
          scratchScale,
          scratchHPRMatrix4
        );
        result = fixedFrameTransform(origin, ellipsoid, result);
        return Matrix4_default.multiply(result, hprMatrix, result);
      };
      scratchENUMatrix4 = new Matrix4_default();
      scratchHPRMatrix3 = new Matrix3_default();
      Transforms.headingPitchRollQuaternion = function(origin, headingPitchRoll, ellipsoid, fixedFrameTransform, result) {
        Check_default.typeOf.object("HeadingPitchRoll", headingPitchRoll);
        const transform2 = Transforms.headingPitchRollToFixedFrame(
          origin,
          headingPitchRoll,
          ellipsoid,
          fixedFrameTransform,
          scratchENUMatrix4
        );
        const rotation = Matrix4_default.getMatrix3(transform2, scratchHPRMatrix3);
        return Quaternion_default.fromRotationMatrix(rotation, result);
      };
      noScale = new Cartesian3_default(1, 1, 1);
      hprCenterScratch = new Cartesian3_default();
      ffScratch = new Matrix4_default();
      hprTransformScratch = new Matrix4_default();
      hprRotationScratch = new Matrix3_default();
      hprQuaternionScratch = new Quaternion_default();
      Transforms.fixedFrameToHeadingPitchRoll = function(transform2, ellipsoid, fixedFrameTransform, result) {
        Check_default.defined("transform", transform2);
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        fixedFrameTransform = defaultValue_default(
          fixedFrameTransform,
          Transforms.eastNorthUpToFixedFrame
        );
        if (!defined_default(result)) {
          result = new HeadingPitchRoll_default();
        }
        const center = Matrix4_default.getTranslation(transform2, hprCenterScratch);
        if (Cartesian3_default.equals(center, Cartesian3_default.ZERO)) {
          result.heading = 0;
          result.pitch = 0;
          result.roll = 0;
          return result;
        }
        let toFixedFrame = Matrix4_default.inverseTransformation(
          fixedFrameTransform(center, ellipsoid, ffScratch),
          ffScratch
        );
        let transformCopy = Matrix4_default.setScale(transform2, noScale, hprTransformScratch);
        transformCopy = Matrix4_default.setTranslation(
          transformCopy,
          Cartesian3_default.ZERO,
          transformCopy
        );
        toFixedFrame = Matrix4_default.multiply(toFixedFrame, transformCopy, toFixedFrame);
        let quaternionRotation = Quaternion_default.fromRotationMatrix(
          Matrix4_default.getMatrix3(toFixedFrame, hprRotationScratch),
          hprQuaternionScratch
        );
        quaternionRotation = Quaternion_default.normalize(
          quaternionRotation,
          quaternionRotation
        );
        return HeadingPitchRoll_default.fromQuaternion(quaternionRotation, result);
      };
      gmstConstant0 = 6 * 3600 + 41 * 60 + 50.54841;
      gmstConstant1 = 8640184812866e-6;
      gmstConstant2 = 0.093104;
      gmstConstant3 = -62e-7;
      rateCoef = 11772758384668e-32;
      wgs84WRPrecessing = 72921158553e-15;
      twoPiOverSecondsInDay = Math_default.TWO_PI / 86400;
      dateInUtc = new JulianDate_default();
      Transforms.computeTemeToPseudoFixedMatrix = function(date, result) {
        if (!defined_default(date)) {
          throw new DeveloperError_default("date is required.");
        }
        dateInUtc = JulianDate_default.addSeconds(
          date,
          -JulianDate_default.computeTaiMinusUtc(date),
          dateInUtc
        );
        const utcDayNumber = dateInUtc.dayNumber;
        const utcSecondsIntoDay = dateInUtc.secondsOfDay;
        let t;
        const diffDays = utcDayNumber - 2451545;
        if (utcSecondsIntoDay >= 43200) {
          t = (diffDays + 0.5) / TimeConstants_default.DAYS_PER_JULIAN_CENTURY;
        } else {
          t = (diffDays - 0.5) / TimeConstants_default.DAYS_PER_JULIAN_CENTURY;
        }
        const gmst0 = gmstConstant0 + t * (gmstConstant1 + t * (gmstConstant2 + t * gmstConstant3));
        const angle = gmst0 * twoPiOverSecondsInDay % Math_default.TWO_PI;
        const ratio = wgs84WRPrecessing + rateCoef * (utcDayNumber - 24515455e-1);
        const secondsSinceMidnight = (utcSecondsIntoDay + TimeConstants_default.SECONDS_PER_DAY * 0.5) % TimeConstants_default.SECONDS_PER_DAY;
        const gha = angle + ratio * secondsSinceMidnight;
        const cosGha = Math.cos(gha);
        const sinGha = Math.sin(gha);
        if (!defined_default(result)) {
          return new Matrix3_default(
            cosGha,
            sinGha,
            0,
            -sinGha,
            cosGha,
            0,
            0,
            0,
            1
          );
        }
        result[0] = cosGha;
        result[1] = -sinGha;
        result[2] = 0;
        result[3] = sinGha;
        result[4] = cosGha;
        result[5] = 0;
        result[6] = 0;
        result[7] = 0;
        result[8] = 1;
        return result;
      };
      Transforms.iau2006XysData = new Iau2006XysData_default();
      Transforms.earthOrientationParameters = EarthOrientationParameters_default.NONE;
      ttMinusTai = 32.184;
      j2000ttDays = 2451545;
      Transforms.preloadIcrfFixed = function(timeInterval) {
        const startDayTT = timeInterval.start.dayNumber;
        const startSecondTT = timeInterval.start.secondsOfDay + ttMinusTai;
        const stopDayTT = timeInterval.stop.dayNumber;
        const stopSecondTT = timeInterval.stop.secondsOfDay + ttMinusTai;
        return Transforms.iau2006XysData.preload(
          startDayTT,
          startSecondTT,
          stopDayTT,
          stopSecondTT
        );
      };
      Transforms.computeIcrfToFixedMatrix = function(date, result) {
        if (!defined_default(date)) {
          throw new DeveloperError_default("date is required.");
        }
        if (!defined_default(result)) {
          result = new Matrix3_default();
        }
        const fixedToIcrfMtx = Transforms.computeFixedToIcrfMatrix(date, result);
        if (!defined_default(fixedToIcrfMtx)) {
          return void 0;
        }
        return Matrix3_default.transpose(fixedToIcrfMtx, result);
      };
      xysScratch = new Iau2006XysSample_default(0, 0, 0);
      eopScratch = new EarthOrientationParametersSample_default(
        0,
        0,
        0,
        0,
        0,
        0
      );
      rotation1Scratch = new Matrix3_default();
      rotation2Scratch = new Matrix3_default();
      Transforms.computeFixedToIcrfMatrix = function(date, result) {
        if (!defined_default(date)) {
          throw new DeveloperError_default("date is required.");
        }
        if (!defined_default(result)) {
          result = new Matrix3_default();
        }
        const eop = Transforms.earthOrientationParameters.compute(date, eopScratch);
        if (!defined_default(eop)) {
          return void 0;
        }
        const dayTT = date.dayNumber;
        const secondTT = date.secondsOfDay + ttMinusTai;
        const xys = Transforms.iau2006XysData.computeXysRadians(
          dayTT,
          secondTT,
          xysScratch
        );
        if (!defined_default(xys)) {
          return void 0;
        }
        const x = xys.x + eop.xPoleOffset;
        const y = xys.y + eop.yPoleOffset;
        const a3 = 1 / (1 + Math.sqrt(1 - x * x - y * y));
        const rotation1 = rotation1Scratch;
        rotation1[0] = 1 - a3 * x * x;
        rotation1[3] = -a3 * x * y;
        rotation1[6] = x;
        rotation1[1] = -a3 * x * y;
        rotation1[4] = 1 - a3 * y * y;
        rotation1[7] = y;
        rotation1[2] = -x;
        rotation1[5] = -y;
        rotation1[8] = 1 - a3 * (x * x + y * y);
        const rotation2 = Matrix3_default.fromRotationZ(-xys.s, rotation2Scratch);
        const matrixQ = Matrix3_default.multiply(rotation1, rotation2, rotation1Scratch);
        const dateUt1day = date.dayNumber;
        const dateUt1sec = date.secondsOfDay - JulianDate_default.computeTaiMinusUtc(date) + eop.ut1MinusUtc;
        const daysSinceJ2000 = dateUt1day - 2451545;
        const fractionOfDay = dateUt1sec / TimeConstants_default.SECONDS_PER_DAY;
        let era = 0.779057273264 + fractionOfDay + 0.00273781191135448 * (daysSinceJ2000 + fractionOfDay);
        era = era % 1 * Math_default.TWO_PI;
        const earthRotation = Matrix3_default.fromRotationZ(era, rotation2Scratch);
        const pfToIcrf = Matrix3_default.multiply(matrixQ, earthRotation, rotation1Scratch);
        const cosxp = Math.cos(eop.xPoleWander);
        const cosyp = Math.cos(eop.yPoleWander);
        const sinxp = Math.sin(eop.xPoleWander);
        const sinyp = Math.sin(eop.yPoleWander);
        let ttt = dayTT - j2000ttDays + secondTT / TimeConstants_default.SECONDS_PER_DAY;
        ttt /= 36525;
        const sp = -47e-6 * ttt * Math_default.RADIANS_PER_DEGREE / 3600;
        const cossp = Math.cos(sp);
        const sinsp = Math.sin(sp);
        const fToPfMtx = rotation2Scratch;
        fToPfMtx[0] = cosxp * cossp;
        fToPfMtx[1] = cosxp * sinsp;
        fToPfMtx[2] = sinxp;
        fToPfMtx[3] = -cosyp * sinsp + sinyp * sinxp * cossp;
        fToPfMtx[4] = cosyp * cossp + sinyp * sinxp * sinsp;
        fToPfMtx[5] = -sinyp * cosxp;
        fToPfMtx[6] = -sinyp * sinsp - cosyp * sinxp * cossp;
        fToPfMtx[7] = sinyp * cossp - cosyp * sinxp * sinsp;
        fToPfMtx[8] = cosyp * cosxp;
        return Matrix3_default.multiply(pfToIcrf, fToPfMtx, result);
      };
      pointToWindowCoordinatesTemp = new Cartesian4_default();
      Transforms.pointToWindowCoordinates = function(modelViewProjectionMatrix, viewportTransformation, point, result) {
        result = Transforms.pointToGLWindowCoordinates(
          modelViewProjectionMatrix,
          viewportTransformation,
          point,
          result
        );
        result.y = 2 * viewportTransformation[5] - result.y;
        return result;
      };
      Transforms.pointToGLWindowCoordinates = function(modelViewProjectionMatrix, viewportTransformation, point, result) {
        if (!defined_default(modelViewProjectionMatrix)) {
          throw new DeveloperError_default("modelViewProjectionMatrix is required.");
        }
        if (!defined_default(viewportTransformation)) {
          throw new DeveloperError_default("viewportTransformation is required.");
        }
        if (!defined_default(point)) {
          throw new DeveloperError_default("point is required.");
        }
        if (!defined_default(result)) {
          result = new Cartesian2_default();
        }
        const tmp2 = pointToWindowCoordinatesTemp;
        Matrix4_default.multiplyByVector(
          modelViewProjectionMatrix,
          Cartesian4_default.fromElements(point.x, point.y, point.z, 1, tmp2),
          tmp2
        );
        Cartesian4_default.multiplyByScalar(tmp2, 1 / tmp2.w, tmp2);
        Matrix4_default.multiplyByVector(viewportTransformation, tmp2, tmp2);
        return Cartesian2_default.fromCartesian4(tmp2, result);
      };
      normalScratch = new Cartesian3_default();
      rightScratch = new Cartesian3_default();
      upScratch = new Cartesian3_default();
      Transforms.rotationMatrixFromPositionVelocity = function(position, velocity, ellipsoid, result) {
        if (!defined_default(position)) {
          throw new DeveloperError_default("position is required.");
        }
        if (!defined_default(velocity)) {
          throw new DeveloperError_default("velocity is required.");
        }
        const normal2 = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84).geodeticSurfaceNormal(
          position,
          normalScratch
        );
        let right = Cartesian3_default.cross(velocity, normal2, rightScratch);
        if (Cartesian3_default.equalsEpsilon(right, Cartesian3_default.ZERO, Math_default.EPSILON6)) {
          right = Cartesian3_default.clone(Cartesian3_default.UNIT_X, right);
        }
        const up = Cartesian3_default.cross(right, velocity, upScratch);
        Cartesian3_default.normalize(up, up);
        Cartesian3_default.cross(velocity, up, right);
        Cartesian3_default.negate(right, right);
        Cartesian3_default.normalize(right, right);
        if (!defined_default(result)) {
          result = new Matrix3_default();
        }
        result[0] = velocity.x;
        result[1] = velocity.y;
        result[2] = velocity.z;
        result[3] = right.x;
        result[4] = right.y;
        result[5] = right.z;
        result[6] = up.x;
        result[7] = up.y;
        result[8] = up.z;
        return result;
      };
      swizzleMatrix = new Matrix4_default(
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        1
      );
      scratchCartographic = new Cartographic_default();
      scratchCartesian3Projection = new Cartesian3_default();
      scratchCenter = new Cartesian3_default();
      scratchRotation = new Matrix3_default();
      scratchFromENU = new Matrix4_default();
      scratchToENU = new Matrix4_default();
      Transforms.basisTo2D = function(projection, matrix, result) {
        if (!defined_default(projection)) {
          throw new DeveloperError_default("projection is required.");
        }
        if (!defined_default(matrix)) {
          throw new DeveloperError_default("matrix is required.");
        }
        if (!defined_default(result)) {
          throw new DeveloperError_default("result is required.");
        }
        const rtcCenter = Matrix4_default.getTranslation(matrix, scratchCenter);
        const ellipsoid = projection.ellipsoid;
        let projectedPosition;
        if (Cartesian3_default.equals(rtcCenter, Cartesian3_default.ZERO)) {
          projectedPosition = Cartesian3_default.clone(
            Cartesian3_default.ZERO,
            scratchCartesian3Projection
          );
        } else {
          const cartographic2 = ellipsoid.cartesianToCartographic(
            rtcCenter,
            scratchCartographic
          );
          projectedPosition = projection.project(
            cartographic2,
            scratchCartesian3Projection
          );
          Cartesian3_default.fromElements(
            projectedPosition.z,
            projectedPosition.x,
            projectedPosition.y,
            projectedPosition
          );
        }
        const fromENU = Transforms.eastNorthUpToFixedFrame(
          rtcCenter,
          ellipsoid,
          scratchFromENU
        );
        const toENU = Matrix4_default.inverseTransformation(fromENU, scratchToENU);
        const rotation = Matrix4_default.getMatrix3(matrix, scratchRotation);
        const local = Matrix4_default.multiplyByMatrix3(toENU, rotation, result);
        Matrix4_default.multiply(swizzleMatrix, local, result);
        Matrix4_default.setTranslation(result, projectedPosition, result);
        return result;
      };
      Transforms.wgs84To2DModelMatrix = function(projection, center, result) {
        if (!defined_default(projection)) {
          throw new DeveloperError_default("projection is required.");
        }
        if (!defined_default(center)) {
          throw new DeveloperError_default("center is required.");
        }
        if (!defined_default(result)) {
          throw new DeveloperError_default("result is required.");
        }
        const ellipsoid = projection.ellipsoid;
        const fromENU = Transforms.eastNorthUpToFixedFrame(
          center,
          ellipsoid,
          scratchFromENU
        );
        const toENU = Matrix4_default.inverseTransformation(fromENU, scratchToENU);
        const cartographic2 = ellipsoid.cartesianToCartographic(
          center,
          scratchCartographic
        );
        const projectedPosition = projection.project(
          cartographic2,
          scratchCartesian3Projection
        );
        Cartesian3_default.fromElements(
          projectedPosition.z,
          projectedPosition.x,
          projectedPosition.y,
          projectedPosition
        );
        const translation2 = Matrix4_default.fromTranslation(
          projectedPosition,
          scratchFromENU
        );
        Matrix4_default.multiply(swizzleMatrix, toENU, result);
        Matrix4_default.multiply(translation2, result, result);
        return result;
      };
      Transforms_default = Transforms;
    }
  });

  // packages/engine/Source/Core/Geometry.js
  function Geometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    Check_default.typeOf.object("options.attributes", options.attributes);
    this.attributes = options.attributes;
    this.indices = options.indices;
    this.primitiveType = defaultValue_default(
      options.primitiveType,
      PrimitiveType_default.TRIANGLES
    );
    this.boundingSphere = options.boundingSphere;
    this.geometryType = defaultValue_default(options.geometryType, GeometryType_default.NONE);
    this.boundingSphereCV = options.boundingSphereCV;
    this.offsetAttribute = options.offsetAttribute;
  }
  var rectangleCenterScratch, enuCenterScratch, fixedFrameToEnuScratch, boundingRectanglePointsCartographicScratch, boundingRectanglePointsEnuScratch, points2DScratch, pointEnuScratch, enuRotationScratch, enuRotationMatrixScratch, rotation2DScratch, Geometry_default;
  var init_Geometry = __esm({
    "packages/engine/Source/Core/Geometry.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_GeometryType();
      init_Matrix2();
      init_Matrix3();
      init_Matrix4();
      init_PrimitiveType();
      init_Quaternion();
      init_Rectangle();
      init_Transforms();
      Geometry.computeNumberOfVertices = function(geometry) {
        Check_default.typeOf.object("geometry", geometry);
        let numberOfVertices = -1;
        for (const property in geometry.attributes) {
          if (geometry.attributes.hasOwnProperty(property) && defined_default(geometry.attributes[property]) && defined_default(geometry.attributes[property].values)) {
            const attribute = geometry.attributes[property];
            const num = attribute.values.length / attribute.componentsPerAttribute;
            if (numberOfVertices !== num && numberOfVertices !== -1) {
              throw new DeveloperError_default(
                "All attribute lists must have the same number of attributes."
              );
            }
            numberOfVertices = num;
          }
        }
        return numberOfVertices;
      };
      rectangleCenterScratch = new Cartographic_default();
      enuCenterScratch = new Cartesian3_default();
      fixedFrameToEnuScratch = new Matrix4_default();
      boundingRectanglePointsCartographicScratch = [
        new Cartographic_default(),
        new Cartographic_default(),
        new Cartographic_default()
      ];
      boundingRectanglePointsEnuScratch = [
        new Cartesian2_default(),
        new Cartesian2_default(),
        new Cartesian2_default()
      ];
      points2DScratch = [new Cartesian2_default(), new Cartesian2_default(), new Cartesian2_default()];
      pointEnuScratch = new Cartesian3_default();
      enuRotationScratch = new Quaternion_default();
      enuRotationMatrixScratch = new Matrix4_default();
      rotation2DScratch = new Matrix2_default();
      Geometry._textureCoordinateRotationPoints = function(positions, stRotation, ellipsoid, boundingRectangle) {
        let i;
        const rectangleCenter = Rectangle_default.center(
          boundingRectangle,
          rectangleCenterScratch
        );
        const enuCenter = Cartographic_default.toCartesian(
          rectangleCenter,
          ellipsoid,
          enuCenterScratch
        );
        const enuToFixedFrame = Transforms_default.eastNorthUpToFixedFrame(
          enuCenter,
          ellipsoid,
          fixedFrameToEnuScratch
        );
        const fixedFrameToEnu = Matrix4_default.inverse(
          enuToFixedFrame,
          fixedFrameToEnuScratch
        );
        const boundingPointsEnu = boundingRectanglePointsEnuScratch;
        const boundingPointsCarto = boundingRectanglePointsCartographicScratch;
        boundingPointsCarto[0].longitude = boundingRectangle.west;
        boundingPointsCarto[0].latitude = boundingRectangle.south;
        boundingPointsCarto[1].longitude = boundingRectangle.west;
        boundingPointsCarto[1].latitude = boundingRectangle.north;
        boundingPointsCarto[2].longitude = boundingRectangle.east;
        boundingPointsCarto[2].latitude = boundingRectangle.south;
        let posEnu = pointEnuScratch;
        for (i = 0; i < 3; i++) {
          Cartographic_default.toCartesian(boundingPointsCarto[i], ellipsoid, posEnu);
          posEnu = Matrix4_default.multiplyByPointAsVector(fixedFrameToEnu, posEnu, posEnu);
          boundingPointsEnu[i].x = posEnu.x;
          boundingPointsEnu[i].y = posEnu.y;
        }
        const rotation = Quaternion_default.fromAxisAngle(
          Cartesian3_default.UNIT_Z,
          -stRotation,
          enuRotationScratch
        );
        const textureMatrix = Matrix3_default.fromQuaternion(
          rotation,
          enuRotationMatrixScratch
        );
        const positionsLength = positions.length;
        let enuMinX = Number.POSITIVE_INFINITY;
        let enuMinY = Number.POSITIVE_INFINITY;
        let enuMaxX = Number.NEGATIVE_INFINITY;
        let enuMaxY = Number.NEGATIVE_INFINITY;
        for (i = 0; i < positionsLength; i++) {
          posEnu = Matrix4_default.multiplyByPointAsVector(
            fixedFrameToEnu,
            positions[i],
            posEnu
          );
          posEnu = Matrix3_default.multiplyByVector(textureMatrix, posEnu, posEnu);
          enuMinX = Math.min(enuMinX, posEnu.x);
          enuMinY = Math.min(enuMinY, posEnu.y);
          enuMaxX = Math.max(enuMaxX, posEnu.x);
          enuMaxY = Math.max(enuMaxY, posEnu.y);
        }
        const toDesiredInComputed = Matrix2_default.fromRotation(
          stRotation,
          rotation2DScratch
        );
        const points2D = points2DScratch;
        points2D[0].x = enuMinX;
        points2D[0].y = enuMinY;
        points2D[1].x = enuMinX;
        points2D[1].y = enuMaxY;
        points2D[2].x = enuMaxX;
        points2D[2].y = enuMinY;
        const boundingEnuMin = boundingPointsEnu[0];
        const boundingPointsWidth = boundingPointsEnu[2].x - boundingEnuMin.x;
        const boundingPointsHeight = boundingPointsEnu[1].y - boundingEnuMin.y;
        for (i = 0; i < 3; i++) {
          const point2D = points2D[i];
          Matrix2_default.multiplyByVector(toDesiredInComputed, point2D, point2D);
          point2D.x = (point2D.x - boundingEnuMin.x) / boundingPointsWidth;
          point2D.y = (point2D.y - boundingEnuMin.y) / boundingPointsHeight;
        }
        const minXYCorner = points2D[0];
        const maxYCorner = points2D[1];
        const maxXCorner = points2D[2];
        const result = new Array(6);
        Cartesian2_default.pack(minXYCorner, result);
        Cartesian2_default.pack(maxYCorner, result, 2);
        Cartesian2_default.pack(maxXCorner, result, 4);
        return result;
      };
      Geometry_default = Geometry;
    }
  });

  // packages/engine/Source/Core/GeometryAttribute.js
  function GeometryAttribute(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    if (!defined_default(options.componentDatatype)) {
      throw new DeveloperError_default("options.componentDatatype is required.");
    }
    if (!defined_default(options.componentsPerAttribute)) {
      throw new DeveloperError_default("options.componentsPerAttribute is required.");
    }
    if (options.componentsPerAttribute < 1 || options.componentsPerAttribute > 4) {
      throw new DeveloperError_default(
        "options.componentsPerAttribute must be between 1 and 4."
      );
    }
    if (!defined_default(options.values)) {
      throw new DeveloperError_default("options.values is required.");
    }
    this.componentDatatype = options.componentDatatype;
    this.componentsPerAttribute = options.componentsPerAttribute;
    this.normalize = defaultValue_default(options.normalize, false);
    this.values = options.values;
  }
  var GeometryAttribute_default;
  var init_GeometryAttribute = __esm({
    "packages/engine/Source/Core/GeometryAttribute.js"() {
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      GeometryAttribute_default = GeometryAttribute;
    }
  });

  // packages/engine/Source/Core/GeometryAttributes.js
  function GeometryAttributes(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this.position = options.position;
    this.normal = options.normal;
    this.st = options.st;
    this.bitangent = options.bitangent;
    this.tangent = options.tangent;
    this.color = options.color;
  }
  var GeometryAttributes_default;
  var init_GeometryAttributes = __esm({
    "packages/engine/Source/Core/GeometryAttributes.js"() {
      init_defaultValue();
      GeometryAttributes_default = GeometryAttributes;
    }
  });

  // packages/engine/Source/Scene/AttributeType.js
  var AttributeType, AttributeType_default;
  var init_AttributeType = __esm({
    "packages/engine/Source/Scene/AttributeType.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Cartesian4();
      init_Check();
      init_DeveloperError();
      init_Matrix2();
      init_Matrix3();
      init_Matrix4();
      AttributeType = {
        /**
         * The attribute is a single component.
         *
         * @type {string}
         * @constant
         */
        SCALAR: "SCALAR",
        /**
         * The attribute is a two-component vector.
         *
         * @type {string}
         * @constant
         */
        VEC2: "VEC2",
        /**
         * The attribute is a three-component vector.
         *
         * @type {string}
         * @constant
         */
        VEC3: "VEC3",
        /**
         * The attribute is a four-component vector.
         *
         * @type {string}
         * @constant
         */
        VEC4: "VEC4",
        /**
         * The attribute is a 2x2 matrix.
         *
         * @type {string}
         * @constant
         */
        MAT2: "MAT2",
        /**
         * The attribute is a 3x3 matrix.
         *
         * @type {string}
         * @constant
         */
        MAT3: "MAT3",
        /**
         * The attribute is a 4x4 matrix.
         *
         * @type {string}
         * @constant
         */
        MAT4: "MAT4"
      };
      AttributeType.getMathType = function(attributeType) {
        switch (attributeType) {
          case AttributeType.SCALAR:
            return Number;
          case AttributeType.VEC2:
            return Cartesian2_default;
          case AttributeType.VEC3:
            return Cartesian3_default;
          case AttributeType.VEC4:
            return Cartesian4_default;
          case AttributeType.MAT2:
            return Matrix2_default;
          case AttributeType.MAT3:
            return Matrix3_default;
          case AttributeType.MAT4:
            return Matrix4_default;
          default:
            throw new DeveloperError_default("attributeType is not a valid value.");
        }
      };
      AttributeType.getNumberOfComponents = function(attributeType) {
        switch (attributeType) {
          case AttributeType.SCALAR:
            return 1;
          case AttributeType.VEC2:
            return 2;
          case AttributeType.VEC3:
            return 3;
          case AttributeType.VEC4:
          case AttributeType.MAT2:
            return 4;
          case AttributeType.MAT3:
            return 9;
          case AttributeType.MAT4:
            return 16;
          default:
            throw new DeveloperError_default("attributeType is not a valid value.");
        }
      };
      AttributeType.getAttributeLocationCount = function(attributeType) {
        switch (attributeType) {
          case AttributeType.SCALAR:
          case AttributeType.VEC2:
          case AttributeType.VEC3:
          case AttributeType.VEC4:
            return 1;
          case AttributeType.MAT2:
            return 2;
          case AttributeType.MAT3:
            return 3;
          case AttributeType.MAT4:
            return 4;
          default:
            throw new DeveloperError_default("attributeType is not a valid value.");
        }
      };
      AttributeType.getGlslType = function(attributeType) {
        Check_default.typeOf.string("attributeType", attributeType);
        switch (attributeType) {
          case AttributeType.SCALAR:
            return "float";
          case AttributeType.VEC2:
            return "vec2";
          case AttributeType.VEC3:
            return "vec3";
          case AttributeType.VEC4:
            return "vec4";
          case AttributeType.MAT2:
            return "mat2";
          case AttributeType.MAT3:
            return "mat3";
          case AttributeType.MAT4:
            return "mat4";
          default:
            throw new DeveloperError_default("attributeType is not a valid value.");
        }
      };
      AttributeType_default = Object.freeze(AttributeType);
    }
  });

  // packages/engine/Source/Core/AttributeCompression.js
  function forceUint8(value) {
    uint8ForceArray[0] = value;
    return uint8ForceArray[0];
  }
  function zigZagDecode(value) {
    return value >> 1 ^ -(value & 1);
  }
  var RIGHT_SHIFT, LEFT_SHIFT, AttributeCompression, octEncodeScratch, uint8ForceArray, scratchEncodeCart2, AttributeCompression_default;
  var init_AttributeCompression = __esm({
    "packages/engine/Source/Core/AttributeCompression.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_ComponentDatatype();
      init_Check();
      init_defined();
      init_DeveloperError();
      init_Math();
      init_AttributeType();
      RIGHT_SHIFT = 1 / 256;
      LEFT_SHIFT = 256;
      AttributeCompression = {};
      AttributeCompression.octEncodeInRange = function(vector, rangeMax, result) {
        Check_default.defined("vector", vector);
        Check_default.defined("result", result);
        const magSquared = Cartesian3_default.magnitudeSquared(vector);
        if (Math.abs(magSquared - 1) > Math_default.EPSILON6) {
          throw new DeveloperError_default("vector must be normalized.");
        }
        result.x = vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));
        result.y = vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));
        if (vector.z < 0) {
          const x = result.x;
          const y = result.y;
          result.x = (1 - Math.abs(y)) * Math_default.signNotZero(x);
          result.y = (1 - Math.abs(x)) * Math_default.signNotZero(y);
        }
        result.x = Math_default.toSNorm(result.x, rangeMax);
        result.y = Math_default.toSNorm(result.y, rangeMax);
        return result;
      };
      AttributeCompression.octEncode = function(vector, result) {
        return AttributeCompression.octEncodeInRange(vector, 255, result);
      };
      octEncodeScratch = new Cartesian2_default();
      uint8ForceArray = new Uint8Array(1);
      AttributeCompression.octEncodeToCartesian4 = function(vector, result) {
        AttributeCompression.octEncodeInRange(vector, 65535, octEncodeScratch);
        result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);
        result.y = forceUint8(octEncodeScratch.x);
        result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);
        result.w = forceUint8(octEncodeScratch.y);
        return result;
      };
      AttributeCompression.octDecodeInRange = function(x, y, rangeMax, result) {
        Check_default.defined("result", result);
        if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {
          throw new DeveloperError_default(
            `x and y must be unsigned normalized integers between 0 and ${rangeMax}`
          );
        }
        result.x = Math_default.fromSNorm(x, rangeMax);
        result.y = Math_default.fromSNorm(y, rangeMax);
        result.z = 1 - (Math.abs(result.x) + Math.abs(result.y));
        if (result.z < 0) {
          const oldVX = result.x;
          result.x = (1 - Math.abs(result.y)) * Math_default.signNotZero(oldVX);
          result.y = (1 - Math.abs(oldVX)) * Math_default.signNotZero(result.y);
        }
        return Cartesian3_default.normalize(result, result);
      };
      AttributeCompression.octDecode = function(x, y, result) {
        return AttributeCompression.octDecodeInRange(x, y, 255, result);
      };
      AttributeCompression.octDecodeFromCartesian4 = function(encoded, result) {
        Check_default.typeOf.object("encoded", encoded);
        Check_default.typeOf.object("result", result);
        const x = encoded.x;
        const y = encoded.y;
        const z = encoded.z;
        const w = encoded.w;
        if (x < 0 || x > 255 || y < 0 || y > 255 || z < 0 || z > 255 || w < 0 || w > 255) {
          throw new DeveloperError_default(
            "x, y, z, and w must be unsigned normalized integers between 0 and 255"
          );
        }
        const xOct16 = x * LEFT_SHIFT + y;
        const yOct16 = z * LEFT_SHIFT + w;
        return AttributeCompression.octDecodeInRange(xOct16, yOct16, 65535, result);
      };
      AttributeCompression.octPackFloat = function(encoded) {
        Check_default.defined("encoded", encoded);
        return 256 * encoded.x + encoded.y;
      };
      scratchEncodeCart2 = new Cartesian2_default();
      AttributeCompression.octEncodeFloat = function(vector) {
        AttributeCompression.octEncode(vector, scratchEncodeCart2);
        return AttributeCompression.octPackFloat(scratchEncodeCart2);
      };
      AttributeCompression.octDecodeFloat = function(value, result) {
        Check_default.defined("value", value);
        const temp = value / 256;
        const x = Math.floor(temp);
        const y = (temp - x) * 256;
        return AttributeCompression.octDecode(x, y, result);
      };
      AttributeCompression.octPack = function(v12, v22, v3, result) {
        Check_default.defined("v1", v12);
        Check_default.defined("v2", v22);
        Check_default.defined("v3", v3);
        Check_default.defined("result", result);
        const encoded1 = AttributeCompression.octEncodeFloat(v12);
        const encoded2 = AttributeCompression.octEncodeFloat(v22);
        const encoded3 = AttributeCompression.octEncode(v3, scratchEncodeCart2);
        result.x = 65536 * encoded3.x + encoded1;
        result.y = 65536 * encoded3.y + encoded2;
        return result;
      };
      AttributeCompression.octUnpack = function(packed, v12, v22, v3) {
        Check_default.defined("packed", packed);
        Check_default.defined("v1", v12);
        Check_default.defined("v2", v22);
        Check_default.defined("v3", v3);
        let temp = packed.x / 65536;
        const x = Math.floor(temp);
        const encodedFloat1 = (temp - x) * 65536;
        temp = packed.y / 65536;
        const y = Math.floor(temp);
        const encodedFloat2 = (temp - y) * 65536;
        AttributeCompression.octDecodeFloat(encodedFloat1, v12);
        AttributeCompression.octDecodeFloat(encodedFloat2, v22);
        AttributeCompression.octDecode(x, y, v3);
      };
      AttributeCompression.compressTextureCoordinates = function(textureCoordinates) {
        Check_default.defined("textureCoordinates", textureCoordinates);
        const x = textureCoordinates.x * 4095 | 0;
        const y = textureCoordinates.y * 4095 | 0;
        return 4096 * x + y;
      };
      AttributeCompression.decompressTextureCoordinates = function(compressed, result) {
        Check_default.defined("compressed", compressed);
        Check_default.defined("result", result);
        const temp = compressed / 4096;
        const xZeroTo4095 = Math.floor(temp);
        result.x = xZeroTo4095 / 4095;
        result.y = (compressed - xZeroTo4095 * 4096) / 4095;
        return result;
      };
      AttributeCompression.zigZagDeltaDecode = function(uBuffer, vBuffer, heightBuffer) {
        Check_default.defined("uBuffer", uBuffer);
        Check_default.defined("vBuffer", vBuffer);
        Check_default.typeOf.number.equals(
          "uBuffer.length",
          "vBuffer.length",
          uBuffer.length,
          vBuffer.length
        );
        if (defined_default(heightBuffer)) {
          Check_default.typeOf.number.equals(
            "uBuffer.length",
            "heightBuffer.length",
            uBuffer.length,
            heightBuffer.length
          );
        }
        const count = uBuffer.length;
        let u3 = 0;
        let v3 = 0;
        let height = 0;
        for (let i = 0; i < count; ++i) {
          u3 += zigZagDecode(uBuffer[i]);
          v3 += zigZagDecode(vBuffer[i]);
          uBuffer[i] = u3;
          vBuffer[i] = v3;
          if (defined_default(heightBuffer)) {
            height += zigZagDecode(heightBuffer[i]);
            heightBuffer[i] = height;
          }
        }
      };
      AttributeCompression.dequantize = function(typedArray, componentDatatype, type, count) {
        Check_default.defined("typedArray", typedArray);
        Check_default.defined("componentDatatype", componentDatatype);
        Check_default.defined("type", type);
        Check_default.defined("count", count);
        const componentsPerAttribute = AttributeType_default.getNumberOfComponents(type);
        let divisor;
        switch (componentDatatype) {
          case ComponentDatatype_default.BYTE:
            divisor = 127;
            break;
          case ComponentDatatype_default.UNSIGNED_BYTE:
            divisor = 255;
            break;
          case ComponentDatatype_default.SHORT:
            divisor = 32767;
            break;
          case ComponentDatatype_default.UNSIGNED_SHORT:
            divisor = 65535;
            break;
          case ComponentDatatype_default.INT:
            divisor = 2147483647;
            break;
          case ComponentDatatype_default.UNSIGNED_INT:
            divisor = 4294967295;
            break;
          default:
            throw new DeveloperError_default(
              `Cannot dequantize component datatype: ${componentDatatype}`
            );
        }
        const dequantizedTypedArray = new Float32Array(
          count * componentsPerAttribute
        );
        for (let i = 0; i < count; i++) {
          for (let j = 0; j < componentsPerAttribute; j++) {
            const index = i * componentsPerAttribute + j;
            dequantizedTypedArray[index] = Math.max(
              typedArray[index] / divisor,
              -1
            );
          }
        }
        return dequantizedTypedArray;
      };
      AttributeCompression.decodeRGB565 = function(typedArray, result) {
        Check_default.defined("typedArray", typedArray);
        const expectedLength = typedArray.length * 3;
        if (defined_default(result)) {
          Check_default.typeOf.number.equals(
            "result.length",
            "typedArray.length * 3",
            result.length,
            expectedLength
          );
        }
        const count = typedArray.length;
        if (!defined_default(result)) {
          result = new Float32Array(count * 3);
        }
        const mask5 = (1 << 5) - 1;
        const mask6 = (1 << 6) - 1;
        const normalize5 = 1 / 31;
        const normalize6 = 1 / 63;
        for (let i = 0; i < count; i++) {
          const value = typedArray[i];
          const red = value >> 11;
          const green = value >> 5 & mask6;
          const blue = value & mask5;
          const offset = 3 * i;
          result[offset] = red * normalize5;
          result[offset + 1] = green * normalize6;
          result[offset + 2] = blue * normalize5;
        }
        return result;
      };
      AttributeCompression_default = AttributeCompression;
    }
  });

  // packages/engine/Source/Core/barycentricCoordinates.js
  function barycentricCoordinates(point, p0, p1, p2, result) {
    Check_default.defined("point", point);
    Check_default.defined("p0", p0);
    Check_default.defined("p1", p1);
    Check_default.defined("p2", p2);
    if (!defined_default(result)) {
      result = new Cartesian3_default();
    }
    let v02;
    let v12;
    let v22;
    let dot00;
    let dot01;
    let dot02;
    let dot11;
    let dot12;
    if (!defined_default(p0.z)) {
      if (Cartesian2_default.equalsEpsilon(point, p0, Math_default.EPSILON14)) {
        return Cartesian3_default.clone(Cartesian3_default.UNIT_X, result);
      }
      if (Cartesian2_default.equalsEpsilon(point, p1, Math_default.EPSILON14)) {
        return Cartesian3_default.clone(Cartesian3_default.UNIT_Y, result);
      }
      if (Cartesian2_default.equalsEpsilon(point, p2, Math_default.EPSILON14)) {
        return Cartesian3_default.clone(Cartesian3_default.UNIT_Z, result);
      }
      v02 = Cartesian2_default.subtract(p1, p0, scratchCartesian1);
      v12 = Cartesian2_default.subtract(p2, p0, scratchCartesian2);
      v22 = Cartesian2_default.subtract(point, p0, scratchCartesian32);
      dot00 = Cartesian2_default.dot(v02, v02);
      dot01 = Cartesian2_default.dot(v02, v12);
      dot02 = Cartesian2_default.dot(v02, v22);
      dot11 = Cartesian2_default.dot(v12, v12);
      dot12 = Cartesian2_default.dot(v12, v22);
    } else {
      if (Cartesian3_default.equalsEpsilon(point, p0, Math_default.EPSILON14)) {
        return Cartesian3_default.clone(Cartesian3_default.UNIT_X, result);
      }
      if (Cartesian3_default.equalsEpsilon(point, p1, Math_default.EPSILON14)) {
        return Cartesian3_default.clone(Cartesian3_default.UNIT_Y, result);
      }
      if (Cartesian3_default.equalsEpsilon(point, p2, Math_default.EPSILON14)) {
        return Cartesian3_default.clone(Cartesian3_default.UNIT_Z, result);
      }
      v02 = Cartesian3_default.subtract(p1, p0, scratchCartesian1);
      v12 = Cartesian3_default.subtract(p2, p0, scratchCartesian2);
      v22 = Cartesian3_default.subtract(point, p0, scratchCartesian32);
      dot00 = Cartesian3_default.dot(v02, v02);
      dot01 = Cartesian3_default.dot(v02, v12);
      dot02 = Cartesian3_default.dot(v02, v22);
      dot11 = Cartesian3_default.dot(v12, v12);
      dot12 = Cartesian3_default.dot(v12, v22);
    }
    result.y = dot11 * dot02 - dot01 * dot12;
    result.z = dot00 * dot12 - dot01 * dot02;
    const q = dot00 * dot11 - dot01 * dot01;
    if (q === 0) {
      return void 0;
    }
    result.y /= q;
    result.z /= q;
    result.x = 1 - result.y - result.z;
    return result;
  }
  var scratchCartesian1, scratchCartesian2, scratchCartesian32, barycentricCoordinates_default;
  var init_barycentricCoordinates = __esm({
    "packages/engine/Source/Core/barycentricCoordinates.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Check();
      init_defined();
      init_Math();
      scratchCartesian1 = new Cartesian3_default();
      scratchCartesian2 = new Cartesian3_default();
      scratchCartesian32 = new Cartesian3_default();
      barycentricCoordinates_default = barycentricCoordinates;
    }
  });

  // packages/engine/Source/Core/EncodedCartesian3.js
  function EncodedCartesian3() {
    this.high = Cartesian3_default.clone(Cartesian3_default.ZERO);
    this.low = Cartesian3_default.clone(Cartesian3_default.ZERO);
  }
  var scratchEncode, encodedP, EncodedCartesian3_default;
  var init_EncodedCartesian3 = __esm({
    "packages/engine/Source/Core/EncodedCartesian3.js"() {
      init_Cartesian3();
      init_Check();
      init_defined();
      EncodedCartesian3.encode = function(value, result) {
        Check_default.typeOf.number("value", value);
        if (!defined_default(result)) {
          result = {
            high: 0,
            low: 0
          };
        }
        let doubleHigh;
        if (value >= 0) {
          doubleHigh = Math.floor(value / 65536) * 65536;
          result.high = doubleHigh;
          result.low = value - doubleHigh;
        } else {
          doubleHigh = Math.floor(-value / 65536) * 65536;
          result.high = -doubleHigh;
          result.low = value + doubleHigh;
        }
        return result;
      };
      scratchEncode = {
        high: 0,
        low: 0
      };
      EncodedCartesian3.fromCartesian = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        if (!defined_default(result)) {
          result = new EncodedCartesian3();
        }
        const high = result.high;
        const low = result.low;
        EncodedCartesian3.encode(cartesian11.x, scratchEncode);
        high.x = scratchEncode.high;
        low.x = scratchEncode.low;
        EncodedCartesian3.encode(cartesian11.y, scratchEncode);
        high.y = scratchEncode.high;
        low.y = scratchEncode.low;
        EncodedCartesian3.encode(cartesian11.z, scratchEncode);
        high.z = scratchEncode.high;
        low.z = scratchEncode.low;
        return result;
      };
      encodedP = new EncodedCartesian3();
      EncodedCartesian3.writeElements = function(cartesian11, cartesianArray, index) {
        Check_default.defined("cartesianArray", cartesianArray);
        Check_default.typeOf.number("index", index);
        Check_default.typeOf.number.greaterThanOrEquals("index", index, 0);
        EncodedCartesian3.fromCartesian(cartesian11, encodedP);
        const high = encodedP.high;
        const low = encodedP.low;
        cartesianArray[index] = high.x;
        cartesianArray[index + 1] = high.y;
        cartesianArray[index + 2] = high.z;
        cartesianArray[index + 3] = low.x;
        cartesianArray[index + 4] = low.y;
        cartesianArray[index + 5] = low.z;
      };
      EncodedCartesian3_default = EncodedCartesian3;
    }
  });

  // packages/engine/Source/Core/IndexDatatype.js
  var IndexDatatype, IndexDatatype_default;
  var init_IndexDatatype = __esm({
    "packages/engine/Source/Core/IndexDatatype.js"() {
      init_defined();
      init_DeveloperError();
      init_Math();
      init_WebGLConstants();
      IndexDatatype = {
        /**
         * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type
         * of an element in <code>Uint8Array</code>.
         *
         * @type {number}
         * @constant
         */
        UNSIGNED_BYTE: WebGLConstants_default.UNSIGNED_BYTE,
        /**
         * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type
         * of an element in <code>Uint16Array</code>.
         *
         * @type {number}
         * @constant
         */
        UNSIGNED_SHORT: WebGLConstants_default.UNSIGNED_SHORT,
        /**
         * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type
         * of an element in <code>Uint32Array</code>.
         *
         * @type {number}
         * @constant
         */
        UNSIGNED_INT: WebGLConstants_default.UNSIGNED_INT
      };
      IndexDatatype.getSizeInBytes = function(indexDatatype) {
        switch (indexDatatype) {
          case IndexDatatype.UNSIGNED_BYTE:
            return Uint8Array.BYTES_PER_ELEMENT;
          case IndexDatatype.UNSIGNED_SHORT:
            return Uint16Array.BYTES_PER_ELEMENT;
          case IndexDatatype.UNSIGNED_INT:
            return Uint32Array.BYTES_PER_ELEMENT;
        }
        throw new DeveloperError_default(
          "indexDatatype is required and must be a valid IndexDatatype constant."
        );
      };
      IndexDatatype.fromSizeInBytes = function(sizeInBytes) {
        switch (sizeInBytes) {
          case 2:
            return IndexDatatype.UNSIGNED_SHORT;
          case 4:
            return IndexDatatype.UNSIGNED_INT;
          case 1:
            return IndexDatatype.UNSIGNED_BYTE;
          default:
            throw new DeveloperError_default(
              "Size in bytes cannot be mapped to an IndexDatatype"
            );
        }
      };
      IndexDatatype.validate = function(indexDatatype) {
        return defined_default(indexDatatype) && (indexDatatype === IndexDatatype.UNSIGNED_BYTE || indexDatatype === IndexDatatype.UNSIGNED_SHORT || indexDatatype === IndexDatatype.UNSIGNED_INT);
      };
      IndexDatatype.createTypedArray = function(numberOfVertices, indicesLengthOrArray) {
        if (!defined_default(numberOfVertices)) {
          throw new DeveloperError_default("numberOfVertices is required.");
        }
        if (numberOfVertices >= Math_default.SIXTY_FOUR_KILOBYTES) {
          return new Uint32Array(indicesLengthOrArray);
        }
        return new Uint16Array(indicesLengthOrArray);
      };
      IndexDatatype.createTypedArrayFromArrayBuffer = function(numberOfVertices, sourceArray, byteOffset, length) {
        if (!defined_default(numberOfVertices)) {
          throw new DeveloperError_default("numberOfVertices is required.");
        }
        if (!defined_default(sourceArray)) {
          throw new DeveloperError_default("sourceArray is required.");
        }
        if (!defined_default(byteOffset)) {
          throw new DeveloperError_default("byteOffset is required.");
        }
        if (numberOfVertices >= Math_default.SIXTY_FOUR_KILOBYTES) {
          return new Uint32Array(sourceArray, byteOffset, length);
        }
        return new Uint16Array(sourceArray, byteOffset, length);
      };
      IndexDatatype.fromTypedArray = function(array) {
        if (array instanceof Uint8Array) {
          return IndexDatatype.UNSIGNED_BYTE;
        }
        if (array instanceof Uint16Array) {
          return IndexDatatype.UNSIGNED_SHORT;
        }
        if (array instanceof Uint32Array) {
          return IndexDatatype.UNSIGNED_INT;
        }
        throw new DeveloperError_default(
          "array must be a Uint8Array, Uint16Array, or Uint32Array."
        );
      };
      IndexDatatype_default = Object.freeze(IndexDatatype);
    }
  });

  // packages/engine/Source/Core/QuadraticRealPolynomial.js
  function addWithCancellationCheck(left, right, tolerance) {
    const difference = left + right;
    if (Math_default.sign(left) !== Math_default.sign(right) && Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {
      return 0;
    }
    return difference;
  }
  var QuadraticRealPolynomial, QuadraticRealPolynomial_default;
  var init_QuadraticRealPolynomial = __esm({
    "packages/engine/Source/Core/QuadraticRealPolynomial.js"() {
      init_DeveloperError();
      init_Math();
      QuadraticRealPolynomial = {};
      QuadraticRealPolynomial.computeDiscriminant = function(a3, b, c) {
        if (typeof a3 !== "number") {
          throw new DeveloperError_default("a is a required number.");
        }
        if (typeof b !== "number") {
          throw new DeveloperError_default("b is a required number.");
        }
        if (typeof c !== "number") {
          throw new DeveloperError_default("c is a required number.");
        }
        const discriminant = b * b - 4 * a3 * c;
        return discriminant;
      };
      QuadraticRealPolynomial.computeRealRoots = function(a3, b, c) {
        if (typeof a3 !== "number") {
          throw new DeveloperError_default("a is a required number.");
        }
        if (typeof b !== "number") {
          throw new DeveloperError_default("b is a required number.");
        }
        if (typeof c !== "number") {
          throw new DeveloperError_default("c is a required number.");
        }
        let ratio;
        if (a3 === 0) {
          if (b === 0) {
            return [];
          }
          return [-c / b];
        } else if (b === 0) {
          if (c === 0) {
            return [0, 0];
          }
          const cMagnitude = Math.abs(c);
          const aMagnitude = Math.abs(a3);
          if (cMagnitude < aMagnitude && cMagnitude / aMagnitude < Math_default.EPSILON14) {
            return [0, 0];
          } else if (cMagnitude > aMagnitude && aMagnitude / cMagnitude < Math_default.EPSILON14) {
            return [];
          }
          ratio = -c / a3;
          if (ratio < 0) {
            return [];
          }
          const root = Math.sqrt(ratio);
          return [-root, root];
        } else if (c === 0) {
          ratio = -b / a3;
          if (ratio < 0) {
            return [ratio, 0];
          }
          return [0, ratio];
        }
        const b2 = b * b;
        const four_ac = 4 * a3 * c;
        const radicand = addWithCancellationCheck(b2, -four_ac, Math_default.EPSILON14);
        if (radicand < 0) {
          return [];
        }
        const q = -0.5 * addWithCancellationCheck(
          b,
          Math_default.sign(b) * Math.sqrt(radicand),
          Math_default.EPSILON14
        );
        if (b > 0) {
          return [q / a3, c / q];
        }
        return [c / q, q / a3];
      };
      QuadraticRealPolynomial_default = QuadraticRealPolynomial;
    }
  });

  // packages/engine/Source/Core/CubicRealPolynomial.js
  function computeRealRoots(a3, b, c, d) {
    const A = a3;
    const B = b / 3;
    const C = c / 3;
    const D = d;
    const AC = A * C;
    const BD = B * D;
    const B2 = B * B;
    const C2 = C * C;
    const delta1 = A * C - B2;
    const delta2 = A * D - B * C;
    const delta3 = B * D - C2;
    const discriminant = 4 * delta1 * delta3 - delta2 * delta2;
    let temp;
    let temp1;
    if (discriminant < 0) {
      let ABar;
      let CBar;
      let DBar;
      if (B2 * BD >= AC * C2) {
        ABar = A;
        CBar = delta1;
        DBar = -2 * B * delta1 + A * delta2;
      } else {
        ABar = D;
        CBar = delta3;
        DBar = -D * delta2 + 2 * C * delta3;
      }
      const s = DBar < 0 ? -1 : 1;
      const temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);
      temp1 = -DBar + temp0;
      const x = temp1 / 2;
      const p = x < 0 ? -Math.pow(-x, 1 / 3) : Math.pow(x, 1 / 3);
      const q = temp1 === temp0 ? -p : -CBar / p;
      temp = CBar <= 0 ? p + q : -DBar / (p * p + q * q + CBar);
      if (B2 * BD >= AC * C2) {
        return [(temp - B) / A];
      }
      return [-D / (temp + C)];
    }
    const CBarA = delta1;
    const DBarA = -2 * B * delta1 + A * delta2;
    const CBarD = delta3;
    const DBarD = -D * delta2 + 2 * C * delta3;
    const squareRootOfDiscriminant = Math.sqrt(discriminant);
    const halfSquareRootOf3 = Math.sqrt(3) / 2;
    let theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3);
    temp = 2 * Math.sqrt(-CBarA);
    let cosine = Math.cos(theta);
    temp1 = temp * cosine;
    let temp3 = temp * (-cosine / 2 - halfSquareRootOf3 * Math.sin(theta));
    const numeratorLarge = temp1 + temp3 > 2 * B ? temp1 - B : temp3 - B;
    const denominatorLarge = A;
    const root1 = numeratorLarge / denominatorLarge;
    theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3);
    temp = 2 * Math.sqrt(-CBarD);
    cosine = Math.cos(theta);
    temp1 = temp * cosine;
    temp3 = temp * (-cosine / 2 - halfSquareRootOf3 * Math.sin(theta));
    const numeratorSmall = -D;
    const denominatorSmall = temp1 + temp3 < 2 * C ? temp1 + C : temp3 + C;
    const root3 = numeratorSmall / denominatorSmall;
    const E = denominatorLarge * denominatorSmall;
    const F = -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;
    const G = numeratorLarge * numeratorSmall;
    const root2 = (C * F - B * G) / (-B * F + C * E);
    if (root1 <= root2) {
      if (root1 <= root3) {
        if (root2 <= root3) {
          return [root1, root2, root3];
        }
        return [root1, root3, root2];
      }
      return [root3, root1, root2];
    }
    if (root1 <= root3) {
      return [root2, root1, root3];
    }
    if (root2 <= root3) {
      return [root2, root3, root1];
    }
    return [root3, root2, root1];
  }
  var CubicRealPolynomial, CubicRealPolynomial_default;
  var init_CubicRealPolynomial = __esm({
    "packages/engine/Source/Core/CubicRealPolynomial.js"() {
      init_DeveloperError();
      init_QuadraticRealPolynomial();
      CubicRealPolynomial = {};
      CubicRealPolynomial.computeDiscriminant = function(a3, b, c, d) {
        if (typeof a3 !== "number") {
          throw new DeveloperError_default("a is a required number.");
        }
        if (typeof b !== "number") {
          throw new DeveloperError_default("b is a required number.");
        }
        if (typeof c !== "number") {
          throw new DeveloperError_default("c is a required number.");
        }
        if (typeof d !== "number") {
          throw new DeveloperError_default("d is a required number.");
        }
        const a22 = a3 * a3;
        const b2 = b * b;
        const c2 = c * c;
        const d2 = d * d;
        const discriminant = 18 * a3 * b * c * d + b2 * c2 - 27 * a22 * d2 - 4 * (a3 * c2 * c + b2 * b * d);
        return discriminant;
      };
      CubicRealPolynomial.computeRealRoots = function(a3, b, c, d) {
        if (typeof a3 !== "number") {
          throw new DeveloperError_default("a is a required number.");
        }
        if (typeof b !== "number") {
          throw new DeveloperError_default("b is a required number.");
        }
        if (typeof c !== "number") {
          throw new DeveloperError_default("c is a required number.");
        }
        if (typeof d !== "number") {
          throw new DeveloperError_default("d is a required number.");
        }
        let roots;
        let ratio;
        if (a3 === 0) {
          return QuadraticRealPolynomial_default.computeRealRoots(b, c, d);
        } else if (b === 0) {
          if (c === 0) {
            if (d === 0) {
              return [0, 0, 0];
            }
            ratio = -d / a3;
            const root = ratio < 0 ? -Math.pow(-ratio, 1 / 3) : Math.pow(ratio, 1 / 3);
            return [root, root, root];
          } else if (d === 0) {
            roots = QuadraticRealPolynomial_default.computeRealRoots(a3, 0, c);
            if (roots.Length === 0) {
              return [0];
            }
            return [roots[0], 0, roots[1]];
          }
          return computeRealRoots(a3, 0, c, d);
        } else if (c === 0) {
          if (d === 0) {
            ratio = -b / a3;
            if (ratio < 0) {
              return [ratio, 0, 0];
            }
            return [0, 0, ratio];
          }
          return computeRealRoots(a3, b, 0, d);
        } else if (d === 0) {
          roots = QuadraticRealPolynomial_default.computeRealRoots(a3, b, c);
          if (roots.length === 0) {
            return [0];
          } else if (roots[1] <= 0) {
            return [roots[0], roots[1], 0];
          } else if (roots[0] >= 0) {
            return [0, roots[0], roots[1]];
          }
          return [roots[0], 0, roots[1]];
        }
        return computeRealRoots(a3, b, c, d);
      };
      CubicRealPolynomial_default = CubicRealPolynomial;
    }
  });

  // packages/engine/Source/Core/QuarticRealPolynomial.js
  function original(a3, a22, a1, a0) {
    const a3Squared = a3 * a3;
    const p = a22 - 3 * a3Squared / 8;
    const q = a1 - a22 * a3 / 2 + a3Squared * a3 / 8;
    const r = a0 - a1 * a3 / 4 + a22 * a3Squared / 16 - 3 * a3Squared * a3Squared / 256;
    const cubicRoots = CubicRealPolynomial_default.computeRealRoots(
      1,
      2 * p,
      p * p - 4 * r,
      -q * q
    );
    if (cubicRoots.length > 0) {
      const temp = -a3 / 4;
      const hSquared = cubicRoots[cubicRoots.length - 1];
      if (Math.abs(hSquared) < Math_default.EPSILON14) {
        const roots = QuadraticRealPolynomial_default.computeRealRoots(1, p, r);
        if (roots.length === 2) {
          const root0 = roots[0];
          const root1 = roots[1];
          let y;
          if (root0 >= 0 && root1 >= 0) {
            const y0 = Math.sqrt(root0);
            const y1 = Math.sqrt(root1);
            return [temp - y1, temp - y0, temp + y0, temp + y1];
          } else if (root0 >= 0 && root1 < 0) {
            y = Math.sqrt(root0);
            return [temp - y, temp + y];
          } else if (root0 < 0 && root1 >= 0) {
            y = Math.sqrt(root1);
            return [temp - y, temp + y];
          }
        }
        return [];
      } else if (hSquared > 0) {
        const h = Math.sqrt(hSquared);
        const m = (p + hSquared - q / h) / 2;
        const n = (p + hSquared + q / h) / 2;
        const roots1 = QuadraticRealPolynomial_default.computeRealRoots(1, h, m);
        const roots2 = QuadraticRealPolynomial_default.computeRealRoots(1, -h, n);
        if (roots1.length !== 0) {
          roots1[0] += temp;
          roots1[1] += temp;
          if (roots2.length !== 0) {
            roots2[0] += temp;
            roots2[1] += temp;
            if (roots1[1] <= roots2[0]) {
              return [roots1[0], roots1[1], roots2[0], roots2[1]];
            } else if (roots2[1] <= roots1[0]) {
              return [roots2[0], roots2[1], roots1[0], roots1[1]];
            } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {
              return [roots2[0], roots1[0], roots1[1], roots2[1]];
            } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {
              return [roots1[0], roots2[0], roots2[1], roots1[1]];
            } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {
              return [roots2[0], roots1[0], roots2[1], roots1[1]];
            }
            return [roots1[0], roots2[0], roots1[1], roots2[1]];
          }
          return roots1;
        }
        if (roots2.length !== 0) {
          roots2[0] += temp;
          roots2[1] += temp;
          return roots2;
        }
        return [];
      }
    }
    return [];
  }
  function neumark(a3, a22, a1, a0) {
    const a1Squared = a1 * a1;
    const a2Squared = a22 * a22;
    const a3Squared = a3 * a3;
    const p = -2 * a22;
    const q = a1 * a3 + a2Squared - 4 * a0;
    const r = a3Squared * a0 - a1 * a22 * a3 + a1Squared;
    const cubicRoots = CubicRealPolynomial_default.computeRealRoots(1, p, q, r);
    if (cubicRoots.length > 0) {
      const y = cubicRoots[0];
      const temp = a22 - y;
      const tempSquared = temp * temp;
      const g1 = a3 / 2;
      const h1 = temp / 2;
      const m = tempSquared - 4 * a0;
      const mError = tempSquared + 4 * Math.abs(a0);
      const n = a3Squared - 4 * y;
      const nError = a3Squared + 4 * Math.abs(y);
      let g2;
      let h2;
      if (y < 0 || m * nError < n * mError) {
        const squareRootOfN = Math.sqrt(n);
        g2 = squareRootOfN / 2;
        h2 = squareRootOfN === 0 ? 0 : (a3 * h1 - a1) / squareRootOfN;
      } else {
        const squareRootOfM = Math.sqrt(m);
        g2 = squareRootOfM === 0 ? 0 : (a3 * h1 - a1) / squareRootOfM;
        h2 = squareRootOfM / 2;
      }
      let G;
      let g;
      if (g1 === 0 && g2 === 0) {
        G = 0;
        g = 0;
      } else if (Math_default.sign(g1) === Math_default.sign(g2)) {
        G = g1 + g2;
        g = y / G;
      } else {
        g = g1 - g2;
        G = y / g;
      }
      let H;
      let h;
      if (h1 === 0 && h2 === 0) {
        H = 0;
        h = 0;
      } else if (Math_default.sign(h1) === Math_default.sign(h2)) {
        H = h1 + h2;
        h = a0 / H;
      } else {
        h = h1 - h2;
        H = a0 / h;
      }
      const roots1 = QuadraticRealPolynomial_default.computeRealRoots(1, G, H);
      const roots2 = QuadraticRealPolynomial_default.computeRealRoots(1, g, h);
      if (roots1.length !== 0) {
        if (roots2.length !== 0) {
          if (roots1[1] <= roots2[0]) {
            return [roots1[0], roots1[1], roots2[0], roots2[1]];
          } else if (roots2[1] <= roots1[0]) {
            return [roots2[0], roots2[1], roots1[0], roots1[1]];
          } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {
            return [roots2[0], roots1[0], roots1[1], roots2[1]];
          } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {
            return [roots1[0], roots2[0], roots2[1], roots1[1]];
          } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {
            return [roots2[0], roots1[0], roots2[1], roots1[1]];
          }
          return [roots1[0], roots2[0], roots1[1], roots2[1]];
        }
        return roots1;
      }
      if (roots2.length !== 0) {
        return roots2;
      }
    }
    return [];
  }
  var QuarticRealPolynomial, QuarticRealPolynomial_default;
  var init_QuarticRealPolynomial = __esm({
    "packages/engine/Source/Core/QuarticRealPolynomial.js"() {
      init_CubicRealPolynomial();
      init_DeveloperError();
      init_Math();
      init_QuadraticRealPolynomial();
      QuarticRealPolynomial = {};
      QuarticRealPolynomial.computeDiscriminant = function(a3, b, c, d, e) {
        if (typeof a3 !== "number") {
          throw new DeveloperError_default("a is a required number.");
        }
        if (typeof b !== "number") {
          throw new DeveloperError_default("b is a required number.");
        }
        if (typeof c !== "number") {
          throw new DeveloperError_default("c is a required number.");
        }
        if (typeof d !== "number") {
          throw new DeveloperError_default("d is a required number.");
        }
        if (typeof e !== "number") {
          throw new DeveloperError_default("e is a required number.");
        }
        const a22 = a3 * a3;
        const a32 = a22 * a3;
        const b2 = b * b;
        const b3 = b2 * b;
        const c2 = c * c;
        const c32 = c2 * c;
        const d2 = d * d;
        const d3 = d2 * d;
        const e2 = e * e;
        const e3 = e2 * e;
        const discriminant = b2 * c2 * d2 - 4 * b3 * d3 - 4 * a3 * c32 * d2 + 18 * a3 * b * c * d3 - 27 * a22 * d2 * d2 + 256 * a32 * e3 + e * (18 * b3 * c * d - 4 * b2 * c32 + 16 * a3 * c2 * c2 - 80 * a3 * b * c2 * d - 6 * a3 * b2 * d2 + 144 * a22 * c * d2) + e2 * (144 * a3 * b2 * c - 27 * b2 * b2 - 128 * a22 * c2 - 192 * a22 * b * d);
        return discriminant;
      };
      QuarticRealPolynomial.computeRealRoots = function(a3, b, c, d, e) {
        if (typeof a3 !== "number") {
          throw new DeveloperError_default("a is a required number.");
        }
        if (typeof b !== "number") {
          throw new DeveloperError_default("b is a required number.");
        }
        if (typeof c !== "number") {
          throw new DeveloperError_default("c is a required number.");
        }
        if (typeof d !== "number") {
          throw new DeveloperError_default("d is a required number.");
        }
        if (typeof e !== "number") {
          throw new DeveloperError_default("e is a required number.");
        }
        if (Math.abs(a3) < Math_default.EPSILON15) {
          return CubicRealPolynomial_default.computeRealRoots(b, c, d, e);
        }
        const a32 = b / a3;
        const a22 = c / a3;
        const a1 = d / a3;
        const a0 = e / a3;
        let k = a32 < 0 ? 1 : 0;
        k += a22 < 0 ? k + 1 : k;
        k += a1 < 0 ? k + 1 : k;
        k += a0 < 0 ? k + 1 : k;
        switch (k) {
          case 0:
            return original(a32, a22, a1, a0);
          case 1:
            return neumark(a32, a22, a1, a0);
          case 2:
            return neumark(a32, a22, a1, a0);
          case 3:
            return original(a32, a22, a1, a0);
          case 4:
            return original(a32, a22, a1, a0);
          case 5:
            return neumark(a32, a22, a1, a0);
          case 6:
            return original(a32, a22, a1, a0);
          case 7:
            return original(a32, a22, a1, a0);
          case 8:
            return neumark(a32, a22, a1, a0);
          case 9:
            return original(a32, a22, a1, a0);
          case 10:
            return original(a32, a22, a1, a0);
          case 11:
            return neumark(a32, a22, a1, a0);
          case 12:
            return original(a32, a22, a1, a0);
          case 13:
            return original(a32, a22, a1, a0);
          case 14:
            return original(a32, a22, a1, a0);
          case 15:
            return original(a32, a22, a1, a0);
          default:
            return void 0;
        }
      };
      QuarticRealPolynomial_default = QuarticRealPolynomial;
    }
  });

  // packages/engine/Source/Core/Ray.js
  function Ray(origin, direction2) {
    direction2 = Cartesian3_default.clone(defaultValue_default(direction2, Cartesian3_default.ZERO));
    if (!Cartesian3_default.equals(direction2, Cartesian3_default.ZERO)) {
      Cartesian3_default.normalize(direction2, direction2);
    }
    this.origin = Cartesian3_default.clone(defaultValue_default(origin, Cartesian3_default.ZERO));
    this.direction = direction2;
  }
  var Ray_default;
  var init_Ray = __esm({
    "packages/engine/Source/Core/Ray.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      Ray.clone = function(ray, result) {
        if (!defined_default(ray)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Ray(ray.origin, ray.direction);
        }
        result.origin = Cartesian3_default.clone(ray.origin);
        result.direction = Cartesian3_default.clone(ray.direction);
        return result;
      };
      Ray.getPoint = function(ray, t, result) {
        Check_default.typeOf.object("ray", ray);
        Check_default.typeOf.number("t", t);
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        result = Cartesian3_default.multiplyByScalar(ray.direction, t, result);
        return Cartesian3_default.add(ray.origin, result, result);
      };
      Ray_default = Ray;
    }
  });

  // packages/engine/Source/Core/IntersectionTests.js
  function solveQuadratic(a3, b, c, result) {
    const det = b * b - 4 * a3 * c;
    if (det < 0) {
      return void 0;
    } else if (det > 0) {
      const denom = 1 / (2 * a3);
      const disc = Math.sqrt(det);
      const root0 = (-b + disc) * denom;
      const root1 = (-b - disc) * denom;
      if (root0 < root1) {
        result.root0 = root0;
        result.root1 = root1;
      } else {
        result.root0 = root1;
        result.root1 = root0;
      }
      return result;
    }
    const root = -b / (2 * a3);
    if (root === 0) {
      return void 0;
    }
    result.root0 = result.root1 = root;
    return result;
  }
  function raySphere(ray, sphere, result) {
    if (!defined_default(result)) {
      result = new Interval_default();
    }
    const origin = ray.origin;
    const direction2 = ray.direction;
    const center = sphere.center;
    const radiusSquared = sphere.radius * sphere.radius;
    const diff = Cartesian3_default.subtract(origin, center, scratchPVec);
    const a3 = Cartesian3_default.dot(direction2, direction2);
    const b = 2 * Cartesian3_default.dot(direction2, diff);
    const c = Cartesian3_default.magnitudeSquared(diff) - radiusSquared;
    const roots = solveQuadratic(a3, b, c, raySphereRoots);
    if (!defined_default(roots)) {
      return void 0;
    }
    result.start = roots.root0;
    result.stop = roots.root1;
    return result;
  }
  function addWithCancellationCheck2(left, right, tolerance) {
    const difference = left + right;
    if (Math_default.sign(left) !== Math_default.sign(right) && Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {
      return 0;
    }
    return difference;
  }
  var IntersectionTests, scratchEdge0, scratchEdge1, scratchPVec, scratchTVec, scratchQVec, scratchLineSegmentTriangleRay, raySphereRoots, scratchLineSegmentRay, scratchQ, scratchW, firstAxisScratch, secondAxisScratch, thirdAxisScratch, referenceScratch, bCart, bScratch, btScratch, diScratch, dScratch, cScratch, tempMatrix, aScratch, sScratch, closestScratch, surfPointScratch, lineSegmentPlaneDifference, IntersectionTests_default;
  var init_IntersectionTests = __esm({
    "packages/engine/Source/Core/IntersectionTests.js"() {
      init_Cartesian3();
      init_Cartographic();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Interval();
      init_Math();
      init_Matrix3();
      init_QuadraticRealPolynomial();
      init_QuarticRealPolynomial();
      init_Ray();
      IntersectionTests = {};
      IntersectionTests.rayPlane = function(ray, plane, result) {
        if (!defined_default(ray)) {
          throw new DeveloperError_default("ray is required.");
        }
        if (!defined_default(plane)) {
          throw new DeveloperError_default("plane is required.");
        }
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        const origin = ray.origin;
        const direction2 = ray.direction;
        const normal2 = plane.normal;
        const denominator = Cartesian3_default.dot(normal2, direction2);
        if (Math.abs(denominator) < Math_default.EPSILON15) {
          return void 0;
        }
        const t = (-plane.distance - Cartesian3_default.dot(normal2, origin)) / denominator;
        if (t < 0) {
          return void 0;
        }
        result = Cartesian3_default.multiplyByScalar(direction2, t, result);
        return Cartesian3_default.add(origin, result, result);
      };
      scratchEdge0 = new Cartesian3_default();
      scratchEdge1 = new Cartesian3_default();
      scratchPVec = new Cartesian3_default();
      scratchTVec = new Cartesian3_default();
      scratchQVec = new Cartesian3_default();
      IntersectionTests.rayTriangleParametric = function(ray, p0, p1, p2, cullBackFaces) {
        if (!defined_default(ray)) {
          throw new DeveloperError_default("ray is required.");
        }
        if (!defined_default(p0)) {
          throw new DeveloperError_default("p0 is required.");
        }
        if (!defined_default(p1)) {
          throw new DeveloperError_default("p1 is required.");
        }
        if (!defined_default(p2)) {
          throw new DeveloperError_default("p2 is required.");
        }
        cullBackFaces = defaultValue_default(cullBackFaces, false);
        const origin = ray.origin;
        const direction2 = ray.direction;
        const edge0 = Cartesian3_default.subtract(p1, p0, scratchEdge0);
        const edge1 = Cartesian3_default.subtract(p2, p0, scratchEdge1);
        const p = Cartesian3_default.cross(direction2, edge1, scratchPVec);
        const det = Cartesian3_default.dot(edge0, p);
        let tvec;
        let q;
        let u3;
        let v3;
        let t;
        if (cullBackFaces) {
          if (det < Math_default.EPSILON6) {
            return void 0;
          }
          tvec = Cartesian3_default.subtract(origin, p0, scratchTVec);
          u3 = Cartesian3_default.dot(tvec, p);
          if (u3 < 0 || u3 > det) {
            return void 0;
          }
          q = Cartesian3_default.cross(tvec, edge0, scratchQVec);
          v3 = Cartesian3_default.dot(direction2, q);
          if (v3 < 0 || u3 + v3 > det) {
            return void 0;
          }
          t = Cartesian3_default.dot(edge1, q) / det;
        } else {
          if (Math.abs(det) < Math_default.EPSILON6) {
            return void 0;
          }
          const invDet = 1 / det;
          tvec = Cartesian3_default.subtract(origin, p0, scratchTVec);
          u3 = Cartesian3_default.dot(tvec, p) * invDet;
          if (u3 < 0 || u3 > 1) {
            return void 0;
          }
          q = Cartesian3_default.cross(tvec, edge0, scratchQVec);
          v3 = Cartesian3_default.dot(direction2, q) * invDet;
          if (v3 < 0 || u3 + v3 > 1) {
            return void 0;
          }
          t = Cartesian3_default.dot(edge1, q) * invDet;
        }
        return t;
      };
      IntersectionTests.rayTriangle = function(ray, p0, p1, p2, cullBackFaces, result) {
        const t = IntersectionTests.rayTriangleParametric(
          ray,
          p0,
          p1,
          p2,
          cullBackFaces
        );
        if (!defined_default(t) || t < 0) {
          return void 0;
        }
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        Cartesian3_default.multiplyByScalar(ray.direction, t, result);
        return Cartesian3_default.add(ray.origin, result, result);
      };
      scratchLineSegmentTriangleRay = new Ray_default();
      IntersectionTests.lineSegmentTriangle = function(v02, v12, p0, p1, p2, cullBackFaces, result) {
        if (!defined_default(v02)) {
          throw new DeveloperError_default("v0 is required.");
        }
        if (!defined_default(v12)) {
          throw new DeveloperError_default("v1 is required.");
        }
        if (!defined_default(p0)) {
          throw new DeveloperError_default("p0 is required.");
        }
        if (!defined_default(p1)) {
          throw new DeveloperError_default("p1 is required.");
        }
        if (!defined_default(p2)) {
          throw new DeveloperError_default("p2 is required.");
        }
        const ray = scratchLineSegmentTriangleRay;
        Cartesian3_default.clone(v02, ray.origin);
        Cartesian3_default.subtract(v12, v02, ray.direction);
        Cartesian3_default.normalize(ray.direction, ray.direction);
        const t = IntersectionTests.rayTriangleParametric(
          ray,
          p0,
          p1,
          p2,
          cullBackFaces
        );
        if (!defined_default(t) || t < 0 || t > Cartesian3_default.distance(v02, v12)) {
          return void 0;
        }
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        Cartesian3_default.multiplyByScalar(ray.direction, t, result);
        return Cartesian3_default.add(ray.origin, result, result);
      };
      raySphereRoots = {
        root0: 0,
        root1: 0
      };
      IntersectionTests.raySphere = function(ray, sphere, result) {
        if (!defined_default(ray)) {
          throw new DeveloperError_default("ray is required.");
        }
        if (!defined_default(sphere)) {
          throw new DeveloperError_default("sphere is required.");
        }
        result = raySphere(ray, sphere, result);
        if (!defined_default(result) || result.stop < 0) {
          return void 0;
        }
        result.start = Math.max(result.start, 0);
        return result;
      };
      scratchLineSegmentRay = new Ray_default();
      IntersectionTests.lineSegmentSphere = function(p0, p1, sphere, result) {
        if (!defined_default(p0)) {
          throw new DeveloperError_default("p0 is required.");
        }
        if (!defined_default(p1)) {
          throw new DeveloperError_default("p1 is required.");
        }
        if (!defined_default(sphere)) {
          throw new DeveloperError_default("sphere is required.");
        }
        const ray = scratchLineSegmentRay;
        Cartesian3_default.clone(p0, ray.origin);
        const direction2 = Cartesian3_default.subtract(p1, p0, ray.direction);
        const maxT = Cartesian3_default.magnitude(direction2);
        Cartesian3_default.normalize(direction2, direction2);
        result = raySphere(ray, sphere, result);
        if (!defined_default(result) || result.stop < 0 || result.start > maxT) {
          return void 0;
        }
        result.start = Math.max(result.start, 0);
        result.stop = Math.min(result.stop, maxT);
        return result;
      };
      scratchQ = new Cartesian3_default();
      scratchW = new Cartesian3_default();
      IntersectionTests.rayEllipsoid = function(ray, ellipsoid) {
        if (!defined_default(ray)) {
          throw new DeveloperError_default("ray is required.");
        }
        if (!defined_default(ellipsoid)) {
          throw new DeveloperError_default("ellipsoid is required.");
        }
        const inverseRadii = ellipsoid.oneOverRadii;
        const q = Cartesian3_default.multiplyComponents(inverseRadii, ray.origin, scratchQ);
        const w = Cartesian3_default.multiplyComponents(
          inverseRadii,
          ray.direction,
          scratchW
        );
        const q22 = Cartesian3_default.magnitudeSquared(q);
        const qw = Cartesian3_default.dot(q, w);
        let difference, w2, product, discriminant, temp;
        if (q22 > 1) {
          if (qw >= 0) {
            return void 0;
          }
          const qw2 = qw * qw;
          difference = q22 - 1;
          w2 = Cartesian3_default.magnitudeSquared(w);
          product = w2 * difference;
          if (qw2 < product) {
            return void 0;
          } else if (qw2 > product) {
            discriminant = qw * qw - product;
            temp = -qw + Math.sqrt(discriminant);
            const root0 = temp / w2;
            const root1 = difference / temp;
            if (root0 < root1) {
              return new Interval_default(root0, root1);
            }
            return {
              start: root1,
              stop: root0
            };
          }
          const root = Math.sqrt(difference / w2);
          return new Interval_default(root, root);
        } else if (q22 < 1) {
          difference = q22 - 1;
          w2 = Cartesian3_default.magnitudeSquared(w);
          product = w2 * difference;
          discriminant = qw * qw - product;
          temp = -qw + Math.sqrt(discriminant);
          return new Interval_default(0, temp / w2);
        }
        if (qw < 0) {
          w2 = Cartesian3_default.magnitudeSquared(w);
          return new Interval_default(0, -qw / w2);
        }
        return void 0;
      };
      IntersectionTests.quadraticVectorExpression = function(A, b, c, x, w) {
        const xSquared = x * x;
        const wSquared = w * w;
        const l2 = (A[Matrix3_default.COLUMN1ROW1] - A[Matrix3_default.COLUMN2ROW2]) * wSquared;
        const l1 = w * (x * addWithCancellationCheck2(
          A[Matrix3_default.COLUMN1ROW0],
          A[Matrix3_default.COLUMN0ROW1],
          Math_default.EPSILON15
        ) + b.y);
        const l0 = A[Matrix3_default.COLUMN0ROW0] * xSquared + A[Matrix3_default.COLUMN2ROW2] * wSquared + x * b.x + c;
        const r1 = wSquared * addWithCancellationCheck2(
          A[Matrix3_default.COLUMN2ROW1],
          A[Matrix3_default.COLUMN1ROW2],
          Math_default.EPSILON15
        );
        const r0 = w * (x * addWithCancellationCheck2(A[Matrix3_default.COLUMN2ROW0], A[Matrix3_default.COLUMN0ROW2]) + b.z);
        let cosines;
        const solutions = [];
        if (r0 === 0 && r1 === 0) {
          cosines = QuadraticRealPolynomial_default.computeRealRoots(l2, l1, l0);
          if (cosines.length === 0) {
            return solutions;
          }
          const cosine0 = cosines[0];
          const sine0 = Math.sqrt(Math.max(1 - cosine0 * cosine0, 0));
          solutions.push(new Cartesian3_default(x, w * cosine0, w * -sine0));
          solutions.push(new Cartesian3_default(x, w * cosine0, w * sine0));
          if (cosines.length === 2) {
            const cosine1 = cosines[1];
            const sine1 = Math.sqrt(Math.max(1 - cosine1 * cosine1, 0));
            solutions.push(new Cartesian3_default(x, w * cosine1, w * -sine1));
            solutions.push(new Cartesian3_default(x, w * cosine1, w * sine1));
          }
          return solutions;
        }
        const r0Squared = r0 * r0;
        const r1Squared = r1 * r1;
        const l2Squared = l2 * l2;
        const r0r1 = r0 * r1;
        const c4 = l2Squared + r1Squared;
        const c32 = 2 * (l1 * l2 + r0r1);
        const c2 = 2 * l0 * l2 + l1 * l1 - r1Squared + r0Squared;
        const c1 = 2 * (l0 * l1 - r0r1);
        const c0 = l0 * l0 - r0Squared;
        if (c4 === 0 && c32 === 0 && c2 === 0 && c1 === 0) {
          return solutions;
        }
        cosines = QuarticRealPolynomial_default.computeRealRoots(c4, c32, c2, c1, c0);
        const length = cosines.length;
        if (length === 0) {
          return solutions;
        }
        for (let i = 0; i < length; ++i) {
          const cosine = cosines[i];
          const cosineSquared = cosine * cosine;
          const sineSquared = Math.max(1 - cosineSquared, 0);
          const sine = Math.sqrt(sineSquared);
          let left;
          if (Math_default.sign(l2) === Math_default.sign(l0)) {
            left = addWithCancellationCheck2(
              l2 * cosineSquared + l0,
              l1 * cosine,
              Math_default.EPSILON12
            );
          } else if (Math_default.sign(l0) === Math_default.sign(l1 * cosine)) {
            left = addWithCancellationCheck2(
              l2 * cosineSquared,
              l1 * cosine + l0,
              Math_default.EPSILON12
            );
          } else {
            left = addWithCancellationCheck2(
              l2 * cosineSquared + l1 * cosine,
              l0,
              Math_default.EPSILON12
            );
          }
          const right = addWithCancellationCheck2(
            r1 * cosine,
            r0,
            Math_default.EPSILON15
          );
          const product = left * right;
          if (product < 0) {
            solutions.push(new Cartesian3_default(x, w * cosine, w * sine));
          } else if (product > 0) {
            solutions.push(new Cartesian3_default(x, w * cosine, w * -sine));
          } else if (sine !== 0) {
            solutions.push(new Cartesian3_default(x, w * cosine, w * -sine));
            solutions.push(new Cartesian3_default(x, w * cosine, w * sine));
            ++i;
          } else {
            solutions.push(new Cartesian3_default(x, w * cosine, w * sine));
          }
        }
        return solutions;
      };
      firstAxisScratch = new Cartesian3_default();
      secondAxisScratch = new Cartesian3_default();
      thirdAxisScratch = new Cartesian3_default();
      referenceScratch = new Cartesian3_default();
      bCart = new Cartesian3_default();
      bScratch = new Matrix3_default();
      btScratch = new Matrix3_default();
      diScratch = new Matrix3_default();
      dScratch = new Matrix3_default();
      cScratch = new Matrix3_default();
      tempMatrix = new Matrix3_default();
      aScratch = new Matrix3_default();
      sScratch = new Cartesian3_default();
      closestScratch = new Cartesian3_default();
      surfPointScratch = new Cartographic_default();
      IntersectionTests.grazingAltitudeLocation = function(ray, ellipsoid) {
        if (!defined_default(ray)) {
          throw new DeveloperError_default("ray is required.");
        }
        if (!defined_default(ellipsoid)) {
          throw new DeveloperError_default("ellipsoid is required.");
        }
        const position = ray.origin;
        const direction2 = ray.direction;
        if (!Cartesian3_default.equals(position, Cartesian3_default.ZERO)) {
          const normal2 = ellipsoid.geodeticSurfaceNormal(position, firstAxisScratch);
          if (Cartesian3_default.dot(direction2, normal2) >= 0) {
            return position;
          }
        }
        const intersects = defined_default(this.rayEllipsoid(ray, ellipsoid));
        const f = ellipsoid.transformPositionToScaledSpace(
          direction2,
          firstAxisScratch
        );
        const firstAxis = Cartesian3_default.normalize(f, f);
        const reference = Cartesian3_default.mostOrthogonalAxis(f, referenceScratch);
        const secondAxis = Cartesian3_default.normalize(
          Cartesian3_default.cross(reference, firstAxis, secondAxisScratch),
          secondAxisScratch
        );
        const thirdAxis = Cartesian3_default.normalize(
          Cartesian3_default.cross(firstAxis, secondAxis, thirdAxisScratch),
          thirdAxisScratch
        );
        const B = bScratch;
        B[0] = firstAxis.x;
        B[1] = firstAxis.y;
        B[2] = firstAxis.z;
        B[3] = secondAxis.x;
        B[4] = secondAxis.y;
        B[5] = secondAxis.z;
        B[6] = thirdAxis.x;
        B[7] = thirdAxis.y;
        B[8] = thirdAxis.z;
        const B_T = Matrix3_default.transpose(B, btScratch);
        const D_I = Matrix3_default.fromScale(ellipsoid.radii, diScratch);
        const D = Matrix3_default.fromScale(ellipsoid.oneOverRadii, dScratch);
        const C = cScratch;
        C[0] = 0;
        C[1] = -direction2.z;
        C[2] = direction2.y;
        C[3] = direction2.z;
        C[4] = 0;
        C[5] = -direction2.x;
        C[6] = -direction2.y;
        C[7] = direction2.x;
        C[8] = 0;
        const temp = Matrix3_default.multiply(
          Matrix3_default.multiply(B_T, D, tempMatrix),
          C,
          tempMatrix
        );
        const A = Matrix3_default.multiply(
          Matrix3_default.multiply(temp, D_I, aScratch),
          B,
          aScratch
        );
        const b = Matrix3_default.multiplyByVector(temp, position, bCart);
        const solutions = IntersectionTests.quadraticVectorExpression(
          A,
          Cartesian3_default.negate(b, firstAxisScratch),
          0,
          0,
          1
        );
        let s;
        let altitude;
        const length = solutions.length;
        if (length > 0) {
          let closest = Cartesian3_default.clone(Cartesian3_default.ZERO, closestScratch);
          let maximumValue = Number.NEGATIVE_INFINITY;
          for (let i = 0; i < length; ++i) {
            s = Matrix3_default.multiplyByVector(
              D_I,
              Matrix3_default.multiplyByVector(B, solutions[i], sScratch),
              sScratch
            );
            const v3 = Cartesian3_default.normalize(
              Cartesian3_default.subtract(s, position, referenceScratch),
              referenceScratch
            );
            const dotProduct = Cartesian3_default.dot(v3, direction2);
            if (dotProduct > maximumValue) {
              maximumValue = dotProduct;
              closest = Cartesian3_default.clone(s, closest);
            }
          }
          const surfacePoint = ellipsoid.cartesianToCartographic(
            closest,
            surfPointScratch
          );
          maximumValue = Math_default.clamp(maximumValue, 0, 1);
          altitude = Cartesian3_default.magnitude(
            Cartesian3_default.subtract(closest, position, referenceScratch)
          ) * Math.sqrt(1 - maximumValue * maximumValue);
          altitude = intersects ? -altitude : altitude;
          surfacePoint.height = altitude;
          return ellipsoid.cartographicToCartesian(surfacePoint, new Cartesian3_default());
        }
        return void 0;
      };
      lineSegmentPlaneDifference = new Cartesian3_default();
      IntersectionTests.lineSegmentPlane = function(endPoint0, endPoint1, plane, result) {
        if (!defined_default(endPoint0)) {
          throw new DeveloperError_default("endPoint0 is required.");
        }
        if (!defined_default(endPoint1)) {
          throw new DeveloperError_default("endPoint1 is required.");
        }
        if (!defined_default(plane)) {
          throw new DeveloperError_default("plane is required.");
        }
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        const difference = Cartesian3_default.subtract(
          endPoint1,
          endPoint0,
          lineSegmentPlaneDifference
        );
        const normal2 = plane.normal;
        const nDotDiff = Cartesian3_default.dot(normal2, difference);
        if (Math.abs(nDotDiff) < Math_default.EPSILON6) {
          return void 0;
        }
        const nDotP0 = Cartesian3_default.dot(normal2, endPoint0);
        const t = -(plane.distance + nDotP0) / nDotDiff;
        if (t < 0 || t > 1) {
          return void 0;
        }
        Cartesian3_default.multiplyByScalar(difference, t, result);
        Cartesian3_default.add(endPoint0, result, result);
        return result;
      };
      IntersectionTests.trianglePlaneIntersection = function(p0, p1, p2, plane) {
        if (!defined_default(p0) || !defined_default(p1) || !defined_default(p2) || !defined_default(plane)) {
          throw new DeveloperError_default("p0, p1, p2, and plane are required.");
        }
        const planeNormal = plane.normal;
        const planeD = plane.distance;
        const p0Behind = Cartesian3_default.dot(planeNormal, p0) + planeD < 0;
        const p1Behind = Cartesian3_default.dot(planeNormal, p1) + planeD < 0;
        const p2Behind = Cartesian3_default.dot(planeNormal, p2) + planeD < 0;
        let numBehind = 0;
        numBehind += p0Behind ? 1 : 0;
        numBehind += p1Behind ? 1 : 0;
        numBehind += p2Behind ? 1 : 0;
        let u12, u22;
        if (numBehind === 1 || numBehind === 2) {
          u12 = new Cartesian3_default();
          u22 = new Cartesian3_default();
        }
        if (numBehind === 1) {
          if (p0Behind) {
            IntersectionTests.lineSegmentPlane(p0, p1, plane, u12);
            IntersectionTests.lineSegmentPlane(p0, p2, plane, u22);
            return {
              positions: [p0, p1, p2, u12, u22],
              indices: [
                // Behind
                0,
                3,
                4,
                // In front
                1,
                2,
                4,
                1,
                4,
                3
              ]
            };
          } else if (p1Behind) {
            IntersectionTests.lineSegmentPlane(p1, p2, plane, u12);
            IntersectionTests.lineSegmentPlane(p1, p0, plane, u22);
            return {
              positions: [p0, p1, p2, u12, u22],
              indices: [
                // Behind
                1,
                3,
                4,
                // In front
                2,
                0,
                4,
                2,
                4,
                3
              ]
            };
          } else if (p2Behind) {
            IntersectionTests.lineSegmentPlane(p2, p0, plane, u12);
            IntersectionTests.lineSegmentPlane(p2, p1, plane, u22);
            return {
              positions: [p0, p1, p2, u12, u22],
              indices: [
                // Behind
                2,
                3,
                4,
                // In front
                0,
                1,
                4,
                0,
                4,
                3
              ]
            };
          }
        } else if (numBehind === 2) {
          if (!p0Behind) {
            IntersectionTests.lineSegmentPlane(p1, p0, plane, u12);
            IntersectionTests.lineSegmentPlane(p2, p0, plane, u22);
            return {
              positions: [p0, p1, p2, u12, u22],
              indices: [
                // Behind
                1,
                2,
                4,
                1,
                4,
                3,
                // In front
                0,
                3,
                4
              ]
            };
          } else if (!p1Behind) {
            IntersectionTests.lineSegmentPlane(p2, p1, plane, u12);
            IntersectionTests.lineSegmentPlane(p0, p1, plane, u22);
            return {
              positions: [p0, p1, p2, u12, u22],
              indices: [
                // Behind
                2,
                0,
                4,
                2,
                4,
                3,
                // In front
                1,
                3,
                4
              ]
            };
          } else if (!p2Behind) {
            IntersectionTests.lineSegmentPlane(p0, p2, plane, u12);
            IntersectionTests.lineSegmentPlane(p1, p2, plane, u22);
            return {
              positions: [p0, p1, p2, u12, u22],
              indices: [
                // Behind
                0,
                1,
                4,
                0,
                4,
                3,
                // In front
                2,
                3,
                4
              ]
            };
          }
        }
        return void 0;
      };
      IntersectionTests_default = IntersectionTests;
    }
  });

  // packages/engine/Source/Core/Plane.js
  function Plane(normal2, distance) {
    Check_default.typeOf.object("normal", normal2);
    if (!Math_default.equalsEpsilon(
      Cartesian3_default.magnitude(normal2),
      1,
      Math_default.EPSILON6
    )) {
      throw new DeveloperError_default("normal must be normalized.");
    }
    Check_default.typeOf.number("distance", distance);
    this.normal = Cartesian3_default.clone(normal2);
    this.distance = distance;
  }
  var scratchNormal, scratchCartesian, scratchInverseTranspose, scratchPlaneCartesian4, scratchTransformNormal, Plane_default;
  var init_Plane = __esm({
    "packages/engine/Source/Core/Plane.js"() {
      init_Cartesian3();
      init_Cartesian4();
      init_Check();
      init_defined();
      init_DeveloperError();
      init_Math();
      init_Matrix4();
      Plane.fromPointNormal = function(point, normal2, result) {
        Check_default.typeOf.object("point", point);
        Check_default.typeOf.object("normal", normal2);
        if (!Math_default.equalsEpsilon(
          Cartesian3_default.magnitude(normal2),
          1,
          Math_default.EPSILON6
        )) {
          throw new DeveloperError_default("normal must be normalized.");
        }
        const distance = -Cartesian3_default.dot(normal2, point);
        if (!defined_default(result)) {
          return new Plane(normal2, distance);
        }
        Cartesian3_default.clone(normal2, result.normal);
        result.distance = distance;
        return result;
      };
      scratchNormal = new Cartesian3_default();
      Plane.fromCartesian4 = function(coefficients, result) {
        Check_default.typeOf.object("coefficients", coefficients);
        const normal2 = Cartesian3_default.fromCartesian4(coefficients, scratchNormal);
        const distance = coefficients.w;
        if (!Math_default.equalsEpsilon(
          Cartesian3_default.magnitude(normal2),
          1,
          Math_default.EPSILON6
        )) {
          throw new DeveloperError_default("normal must be normalized.");
        }
        if (!defined_default(result)) {
          return new Plane(normal2, distance);
        }
        Cartesian3_default.clone(normal2, result.normal);
        result.distance = distance;
        return result;
      };
      Plane.getPointDistance = function(plane, point) {
        Check_default.typeOf.object("plane", plane);
        Check_default.typeOf.object("point", point);
        return Cartesian3_default.dot(plane.normal, point) + plane.distance;
      };
      scratchCartesian = new Cartesian3_default();
      Plane.projectPointOntoPlane = function(plane, point, result) {
        Check_default.typeOf.object("plane", plane);
        Check_default.typeOf.object("point", point);
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        const pointDistance = Plane.getPointDistance(plane, point);
        const scaledNormal = Cartesian3_default.multiplyByScalar(
          plane.normal,
          pointDistance,
          scratchCartesian
        );
        return Cartesian3_default.subtract(point, scaledNormal, result);
      };
      scratchInverseTranspose = new Matrix4_default();
      scratchPlaneCartesian4 = new Cartesian4_default();
      scratchTransformNormal = new Cartesian3_default();
      Plane.transform = function(plane, transform2, result) {
        Check_default.typeOf.object("plane", plane);
        Check_default.typeOf.object("transform", transform2);
        const normal2 = plane.normal;
        const distance = plane.distance;
        const inverseTranspose2 = Matrix4_default.inverseTranspose(
          transform2,
          scratchInverseTranspose
        );
        let planeAsCartesian4 = Cartesian4_default.fromElements(
          normal2.x,
          normal2.y,
          normal2.z,
          distance,
          scratchPlaneCartesian4
        );
        planeAsCartesian4 = Matrix4_default.multiplyByVector(
          inverseTranspose2,
          planeAsCartesian4,
          planeAsCartesian4
        );
        const transformedNormal = Cartesian3_default.fromCartesian4(
          planeAsCartesian4,
          scratchTransformNormal
        );
        planeAsCartesian4 = Cartesian4_default.divideByScalar(
          planeAsCartesian4,
          Cartesian3_default.magnitude(transformedNormal),
          planeAsCartesian4
        );
        return Plane.fromCartesian4(planeAsCartesian4, result);
      };
      Plane.clone = function(plane, result) {
        Check_default.typeOf.object("plane", plane);
        if (!defined_default(result)) {
          return new Plane(plane.normal, plane.distance);
        }
        Cartesian3_default.clone(plane.normal, result.normal);
        result.distance = plane.distance;
        return result;
      };
      Plane.equals = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        return left.distance === right.distance && Cartesian3_default.equals(left.normal, right.normal);
      };
      Plane.ORIGIN_XY_PLANE = Object.freeze(new Plane(Cartesian3_default.UNIT_Z, 0));
      Plane.ORIGIN_YZ_PLANE = Object.freeze(new Plane(Cartesian3_default.UNIT_X, 0));
      Plane.ORIGIN_ZX_PLANE = Object.freeze(new Plane(Cartesian3_default.UNIT_Y, 0));
      Plane_default = Plane;
    }
  });

  // packages/engine/Source/Core/Tipsify.js
  var Tipsify, Tipsify_default;
  var init_Tipsify = __esm({
    "packages/engine/Source/Core/Tipsify.js"() {
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      Tipsify = {};
      Tipsify.calculateACMR = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const indices = options.indices;
        let maximumIndex = options.maximumIndex;
        const cacheSize = defaultValue_default(options.cacheSize, 24);
        if (!defined_default(indices)) {
          throw new DeveloperError_default("indices is required.");
        }
        const numIndices = indices.length;
        if (numIndices < 3 || numIndices % 3 !== 0) {
          throw new DeveloperError_default("indices length must be a multiple of three.");
        }
        if (maximumIndex <= 0) {
          throw new DeveloperError_default("maximumIndex must be greater than zero.");
        }
        if (cacheSize < 3) {
          throw new DeveloperError_default("cacheSize must be greater than two.");
        }
        if (!defined_default(maximumIndex)) {
          maximumIndex = 0;
          let currentIndex = 0;
          let intoIndices = indices[currentIndex];
          while (currentIndex < numIndices) {
            if (intoIndices > maximumIndex) {
              maximumIndex = intoIndices;
            }
            ++currentIndex;
            intoIndices = indices[currentIndex];
          }
        }
        const vertexTimeStamps = [];
        for (let i = 0; i < maximumIndex + 1; i++) {
          vertexTimeStamps[i] = 0;
        }
        let s = cacheSize + 1;
        for (let j = 0; j < numIndices; ++j) {
          if (s - vertexTimeStamps[indices[j]] > cacheSize) {
            vertexTimeStamps[indices[j]] = s;
            ++s;
          }
        }
        return (s - cacheSize + 1) / (numIndices / 3);
      };
      Tipsify.tipsify = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const indices = options.indices;
        const maximumIndex = options.maximumIndex;
        const cacheSize = defaultValue_default(options.cacheSize, 24);
        let cursor;
        function skipDeadEnd(vertices2, deadEnd2, indices2, maximumIndexPlusOne2) {
          while (deadEnd2.length >= 1) {
            const d = deadEnd2[deadEnd2.length - 1];
            deadEnd2.splice(deadEnd2.length - 1, 1);
            if (vertices2[d].numLiveTriangles > 0) {
              return d;
            }
          }
          while (cursor < maximumIndexPlusOne2) {
            if (vertices2[cursor].numLiveTriangles > 0) {
              ++cursor;
              return cursor - 1;
            }
            ++cursor;
          }
          return -1;
        }
        function getNextVertex(indices2, cacheSize2, oneRing2, vertices2, s2, deadEnd2, maximumIndexPlusOne2) {
          let n = -1;
          let p;
          let m = -1;
          let itOneRing = 0;
          while (itOneRing < oneRing2.length) {
            const index2 = oneRing2[itOneRing];
            if (vertices2[index2].numLiveTriangles) {
              p = 0;
              if (s2 - vertices2[index2].timeStamp + 2 * vertices2[index2].numLiveTriangles <= cacheSize2) {
                p = s2 - vertices2[index2].timeStamp;
              }
              if (p > m || m === -1) {
                m = p;
                n = index2;
              }
            }
            ++itOneRing;
          }
          if (n === -1) {
            return skipDeadEnd(vertices2, deadEnd2, indices2, maximumIndexPlusOne2);
          }
          return n;
        }
        if (!defined_default(indices)) {
          throw new DeveloperError_default("indices is required.");
        }
        const numIndices = indices.length;
        if (numIndices < 3 || numIndices % 3 !== 0) {
          throw new DeveloperError_default("indices length must be a multiple of three.");
        }
        if (maximumIndex <= 0) {
          throw new DeveloperError_default("maximumIndex must be greater than zero.");
        }
        if (cacheSize < 3) {
          throw new DeveloperError_default("cacheSize must be greater than two.");
        }
        let maximumIndexPlusOne = 0;
        let currentIndex = 0;
        let intoIndices = indices[currentIndex];
        const endIndex = numIndices;
        if (defined_default(maximumIndex)) {
          maximumIndexPlusOne = maximumIndex + 1;
        } else {
          while (currentIndex < endIndex) {
            if (intoIndices > maximumIndexPlusOne) {
              maximumIndexPlusOne = intoIndices;
            }
            ++currentIndex;
            intoIndices = indices[currentIndex];
          }
          if (maximumIndexPlusOne === -1) {
            return 0;
          }
          ++maximumIndexPlusOne;
        }
        const vertices = [];
        let i;
        for (i = 0; i < maximumIndexPlusOne; i++) {
          vertices[i] = {
            numLiveTriangles: 0,
            timeStamp: 0,
            vertexTriangles: []
          };
        }
        currentIndex = 0;
        let triangle = 0;
        while (currentIndex < endIndex) {
          vertices[indices[currentIndex]].vertexTriangles.push(triangle);
          ++vertices[indices[currentIndex]].numLiveTriangles;
          vertices[indices[currentIndex + 1]].vertexTriangles.push(triangle);
          ++vertices[indices[currentIndex + 1]].numLiveTriangles;
          vertices[indices[currentIndex + 2]].vertexTriangles.push(triangle);
          ++vertices[indices[currentIndex + 2]].numLiveTriangles;
          ++triangle;
          currentIndex += 3;
        }
        let f = 0;
        let s = cacheSize + 1;
        cursor = 1;
        let oneRing = [];
        const deadEnd = [];
        let vertex;
        let intoVertices;
        let currentOutputIndex = 0;
        const outputIndices = [];
        const numTriangles = numIndices / 3;
        const triangleEmitted = [];
        for (i = 0; i < numTriangles; i++) {
          triangleEmitted[i] = false;
        }
        let index;
        let limit;
        while (f !== -1) {
          oneRing = [];
          intoVertices = vertices[f];
          limit = intoVertices.vertexTriangles.length;
          for (let k = 0; k < limit; ++k) {
            triangle = intoVertices.vertexTriangles[k];
            if (!triangleEmitted[triangle]) {
              triangleEmitted[triangle] = true;
              currentIndex = triangle + triangle + triangle;
              for (let j = 0; j < 3; ++j) {
                index = indices[currentIndex];
                oneRing.push(index);
                deadEnd.push(index);
                outputIndices[currentOutputIndex] = index;
                ++currentOutputIndex;
                vertex = vertices[index];
                --vertex.numLiveTriangles;
                if (s - vertex.timeStamp > cacheSize) {
                  vertex.timeStamp = s;
                  ++s;
                }
                ++currentIndex;
              }
            }
          }
          f = getNextVertex(
            indices,
            cacheSize,
            oneRing,
            vertices,
            s,
            deadEnd,
            maximumIndexPlusOne
          );
        }
        return outputIndices;
      };
      Tipsify_default = Tipsify;
    }
  });

  // packages/engine/Source/Core/GeometryPipeline.js
  function addTriangle(lines, index, i0, i1, i2) {
    lines[index++] = i0;
    lines[index++] = i1;
    lines[index++] = i1;
    lines[index++] = i2;
    lines[index++] = i2;
    lines[index] = i0;
  }
  function trianglesToLines(triangles) {
    const count = triangles.length;
    const size = count / 3 * 6;
    const lines = IndexDatatype_default.createTypedArray(count, size);
    let index = 0;
    for (let i = 0; i < count; i += 3, index += 6) {
      addTriangle(lines, index, triangles[i], triangles[i + 1], triangles[i + 2]);
    }
    return lines;
  }
  function triangleStripToLines(triangles) {
    const count = triangles.length;
    if (count >= 3) {
      const size = (count - 2) * 6;
      const lines = IndexDatatype_default.createTypedArray(count, size);
      addTriangle(lines, 0, triangles[0], triangles[1], triangles[2]);
      let index = 6;
      for (let i = 3; i < count; ++i, index += 6) {
        addTriangle(
          lines,
          index,
          triangles[i - 1],
          triangles[i],
          triangles[i - 2]
        );
      }
      return lines;
    }
    return new Uint16Array();
  }
  function triangleFanToLines(triangles) {
    if (triangles.length > 0) {
      const count = triangles.length - 1;
      const size = (count - 1) * 6;
      const lines = IndexDatatype_default.createTypedArray(count, size);
      const base = triangles[0];
      let index = 0;
      for (let i = 1; i < count; ++i, index += 6) {
        addTriangle(lines, index, base, triangles[i], triangles[i + 1]);
      }
      return lines;
    }
    return new Uint16Array();
  }
  function copyAttributesDescriptions(attributes) {
    const newAttributes = {};
    for (const attribute in attributes) {
      if (attributes.hasOwnProperty(attribute) && defined_default(attributes[attribute]) && defined_default(attributes[attribute].values)) {
        const attr = attributes[attribute];
        newAttributes[attribute] = new GeometryAttribute_default({
          componentDatatype: attr.componentDatatype,
          componentsPerAttribute: attr.componentsPerAttribute,
          normalize: attr.normalize,
          values: []
        });
      }
    }
    return newAttributes;
  }
  function copyVertex(destinationAttributes, sourceAttributes, index) {
    for (const attribute in sourceAttributes) {
      if (sourceAttributes.hasOwnProperty(attribute) && defined_default(sourceAttributes[attribute]) && defined_default(sourceAttributes[attribute].values)) {
        const attr = sourceAttributes[attribute];
        for (let k = 0; k < attr.componentsPerAttribute; ++k) {
          destinationAttributes[attribute].values.push(
            attr.values[index * attr.componentsPerAttribute + k]
          );
        }
      }
    }
  }
  function transformPoint(matrix, attribute) {
    if (defined_default(attribute)) {
      const values = attribute.values;
      const length = values.length;
      for (let i = 0; i < length; i += 3) {
        Cartesian3_default.unpack(values, i, scratchCartesian33);
        Matrix4_default.multiplyByPoint(matrix, scratchCartesian33, scratchCartesian33);
        Cartesian3_default.pack(scratchCartesian33, values, i);
      }
    }
  }
  function transformVector(matrix, attribute) {
    if (defined_default(attribute)) {
      const values = attribute.values;
      const length = values.length;
      for (let i = 0; i < length; i += 3) {
        Cartesian3_default.unpack(values, i, scratchCartesian33);
        Matrix3_default.multiplyByVector(matrix, scratchCartesian33, scratchCartesian33);
        scratchCartesian33 = Cartesian3_default.normalize(
          scratchCartesian33,
          scratchCartesian33
        );
        Cartesian3_default.pack(scratchCartesian33, values, i);
      }
    }
  }
  function findAttributesInAllGeometries(instances, propertyName) {
    const length = instances.length;
    const attributesInAllGeometries = {};
    const attributes0 = instances[0][propertyName].attributes;
    let name;
    for (name in attributes0) {
      if (attributes0.hasOwnProperty(name) && defined_default(attributes0[name]) && defined_default(attributes0[name].values)) {
        const attribute = attributes0[name];
        let numberOfComponents = attribute.values.length;
        let inAllGeometries = true;
        for (let i = 1; i < length; ++i) {
          const otherAttribute = instances[i][propertyName].attributes[name];
          if (!defined_default(otherAttribute) || attribute.componentDatatype !== otherAttribute.componentDatatype || attribute.componentsPerAttribute !== otherAttribute.componentsPerAttribute || attribute.normalize !== otherAttribute.normalize) {
            inAllGeometries = false;
            break;
          }
          numberOfComponents += otherAttribute.values.length;
        }
        if (inAllGeometries) {
          attributesInAllGeometries[name] = new GeometryAttribute_default({
            componentDatatype: attribute.componentDatatype,
            componentsPerAttribute: attribute.componentsPerAttribute,
            normalize: attribute.normalize,
            values: ComponentDatatype_default.createTypedArray(
              attribute.componentDatatype,
              numberOfComponents
            )
          });
        }
      }
    }
    return attributesInAllGeometries;
  }
  function combineGeometries(instances, propertyName) {
    const length = instances.length;
    let name;
    let i;
    let j;
    let k;
    const m = instances[0].modelMatrix;
    const haveIndices = defined_default(instances[0][propertyName].indices);
    const primitiveType = instances[0][propertyName].primitiveType;
    for (i = 1; i < length; ++i) {
      if (!Matrix4_default.equals(instances[i].modelMatrix, m)) {
        throw new DeveloperError_default("All instances must have the same modelMatrix.");
      }
      if (defined_default(instances[i][propertyName].indices) !== haveIndices) {
        throw new DeveloperError_default(
          "All instance geometries must have an indices or not have one."
        );
      }
      if (instances[i][propertyName].primitiveType !== primitiveType) {
        throw new DeveloperError_default(
          "All instance geometries must have the same primitiveType."
        );
      }
    }
    const attributes = findAttributesInAllGeometries(instances, propertyName);
    let values;
    let sourceValues;
    let sourceValuesLength;
    for (name in attributes) {
      if (attributes.hasOwnProperty(name)) {
        values = attributes[name].values;
        k = 0;
        for (i = 0; i < length; ++i) {
          sourceValues = instances[i][propertyName].attributes[name].values;
          sourceValuesLength = sourceValues.length;
          for (j = 0; j < sourceValuesLength; ++j) {
            values[k++] = sourceValues[j];
          }
        }
      }
    }
    let indices;
    if (haveIndices) {
      let numberOfIndices = 0;
      for (i = 0; i < length; ++i) {
        numberOfIndices += instances[i][propertyName].indices.length;
      }
      const numberOfVertices = Geometry_default.computeNumberOfVertices(
        new Geometry_default({
          attributes,
          primitiveType: PrimitiveType_default.POINTS
        })
      );
      const destIndices = IndexDatatype_default.createTypedArray(
        numberOfVertices,
        numberOfIndices
      );
      let destOffset = 0;
      let offset = 0;
      for (i = 0; i < length; ++i) {
        const sourceIndices = instances[i][propertyName].indices;
        const sourceIndicesLen = sourceIndices.length;
        for (k = 0; k < sourceIndicesLen; ++k) {
          destIndices[destOffset++] = offset + sourceIndices[k];
        }
        offset += Geometry_default.computeNumberOfVertices(instances[i][propertyName]);
      }
      indices = destIndices;
    }
    let center = new Cartesian3_default();
    let radius = 0;
    let bs;
    for (i = 0; i < length; ++i) {
      bs = instances[i][propertyName].boundingSphere;
      if (!defined_default(bs)) {
        center = void 0;
        break;
      }
      Cartesian3_default.add(bs.center, center, center);
    }
    if (defined_default(center)) {
      Cartesian3_default.divideByScalar(center, length, center);
      for (i = 0; i < length; ++i) {
        bs = instances[i][propertyName].boundingSphere;
        const tempRadius = Cartesian3_default.magnitude(
          Cartesian3_default.subtract(bs.center, center, tempScratch)
        ) + bs.radius;
        if (tempRadius > radius) {
          radius = tempRadius;
        }
      }
    }
    return new Geometry_default({
      attributes,
      indices,
      primitiveType,
      boundingSphere: defined_default(center) ? new BoundingSphere_default(center, radius) : void 0
    });
  }
  function indexTriangles(geometry) {
    if (defined_default(geometry.indices)) {
      return geometry;
    }
    const numberOfVertices = Geometry_default.computeNumberOfVertices(geometry);
    if (numberOfVertices < 3) {
      throw new DeveloperError_default("The number of vertices must be at least three.");
    }
    if (numberOfVertices % 3 !== 0) {
      throw new DeveloperError_default(
        "The number of vertices must be a multiple of three."
      );
    }
    const indices = IndexDatatype_default.createTypedArray(
      numberOfVertices,
      numberOfVertices
    );
    for (let i = 0; i < numberOfVertices; ++i) {
      indices[i] = i;
    }
    geometry.indices = indices;
    return geometry;
  }
  function indexTriangleFan(geometry) {
    const numberOfVertices = Geometry_default.computeNumberOfVertices(geometry);
    if (numberOfVertices < 3) {
      throw new DeveloperError_default("The number of vertices must be at least three.");
    }
    const indices = IndexDatatype_default.createTypedArray(
      numberOfVertices,
      (numberOfVertices - 2) * 3
    );
    indices[0] = 1;
    indices[1] = 0;
    indices[2] = 2;
    let indicesIndex = 3;
    for (let i = 3; i < numberOfVertices; ++i) {
      indices[indicesIndex++] = i - 1;
      indices[indicesIndex++] = 0;
      indices[indicesIndex++] = i;
    }
    geometry.indices = indices;
    geometry.primitiveType = PrimitiveType_default.TRIANGLES;
    return geometry;
  }
  function indexTriangleStrip(geometry) {
    const numberOfVertices = Geometry_default.computeNumberOfVertices(geometry);
    if (numberOfVertices < 3) {
      throw new DeveloperError_default("The number of vertices must be at least 3.");
    }
    const indices = IndexDatatype_default.createTypedArray(
      numberOfVertices,
      (numberOfVertices - 2) * 3
    );
    indices[0] = 0;
    indices[1] = 1;
    indices[2] = 2;
    if (numberOfVertices > 3) {
      indices[3] = 0;
      indices[4] = 2;
      indices[5] = 3;
    }
    let indicesIndex = 6;
    for (let i = 3; i < numberOfVertices - 1; i += 2) {
      indices[indicesIndex++] = i;
      indices[indicesIndex++] = i - 1;
      indices[indicesIndex++] = i + 1;
      if (i + 2 < numberOfVertices) {
        indices[indicesIndex++] = i;
        indices[indicesIndex++] = i + 1;
        indices[indicesIndex++] = i + 2;
      }
    }
    geometry.indices = indices;
    geometry.primitiveType = PrimitiveType_default.TRIANGLES;
    return geometry;
  }
  function indexLines(geometry) {
    if (defined_default(geometry.indices)) {
      return geometry;
    }
    const numberOfVertices = Geometry_default.computeNumberOfVertices(geometry);
    if (numberOfVertices < 2) {
      throw new DeveloperError_default("The number of vertices must be at least two.");
    }
    if (numberOfVertices % 2 !== 0) {
      throw new DeveloperError_default("The number of vertices must be a multiple of 2.");
    }
    const indices = IndexDatatype_default.createTypedArray(
      numberOfVertices,
      numberOfVertices
    );
    for (let i = 0; i < numberOfVertices; ++i) {
      indices[i] = i;
    }
    geometry.indices = indices;
    return geometry;
  }
  function indexLineStrip(geometry) {
    const numberOfVertices = Geometry_default.computeNumberOfVertices(geometry);
    if (numberOfVertices < 2) {
      throw new DeveloperError_default("The number of vertices must be at least two.");
    }
    const indices = IndexDatatype_default.createTypedArray(
      numberOfVertices,
      (numberOfVertices - 1) * 2
    );
    indices[0] = 0;
    indices[1] = 1;
    let indicesIndex = 2;
    for (let i = 2; i < numberOfVertices; ++i) {
      indices[indicesIndex++] = i - 1;
      indices[indicesIndex++] = i;
    }
    geometry.indices = indices;
    geometry.primitiveType = PrimitiveType_default.LINES;
    return geometry;
  }
  function indexLineLoop(geometry) {
    const numberOfVertices = Geometry_default.computeNumberOfVertices(geometry);
    if (numberOfVertices < 2) {
      throw new DeveloperError_default("The number of vertices must be at least two.");
    }
    const indices = IndexDatatype_default.createTypedArray(
      numberOfVertices,
      numberOfVertices * 2
    );
    indices[0] = 0;
    indices[1] = 1;
    let indicesIndex = 2;
    for (let i = 2; i < numberOfVertices; ++i) {
      indices[indicesIndex++] = i - 1;
      indices[indicesIndex++] = i;
    }
    indices[indicesIndex++] = numberOfVertices - 1;
    indices[indicesIndex] = 0;
    geometry.indices = indices;
    geometry.primitiveType = PrimitiveType_default.LINES;
    return geometry;
  }
  function indexPrimitive(geometry) {
    switch (geometry.primitiveType) {
      case PrimitiveType_default.TRIANGLE_FAN:
        return indexTriangleFan(geometry);
      case PrimitiveType_default.TRIANGLE_STRIP:
        return indexTriangleStrip(geometry);
      case PrimitiveType_default.TRIANGLES:
        return indexTriangles(geometry);
      case PrimitiveType_default.LINE_STRIP:
        return indexLineStrip(geometry);
      case PrimitiveType_default.LINE_LOOP:
        return indexLineLoop(geometry);
      case PrimitiveType_default.LINES:
        return indexLines(geometry);
    }
    return geometry;
  }
  function offsetPointFromXZPlane(p, isBehind) {
    if (Math.abs(p.y) < Math_default.EPSILON6) {
      if (isBehind) {
        p.y = -Math_default.EPSILON6;
      } else {
        p.y = Math_default.EPSILON6;
      }
    }
  }
  function offsetTriangleFromXZPlane(p0, p1, p2) {
    if (p0.y !== 0 && p1.y !== 0 && p2.y !== 0) {
      offsetPointFromXZPlane(p0, p0.y < 0);
      offsetPointFromXZPlane(p1, p1.y < 0);
      offsetPointFromXZPlane(p2, p2.y < 0);
      return;
    }
    const p0y = Math.abs(p0.y);
    const p1y = Math.abs(p1.y);
    const p2y = Math.abs(p2.y);
    let sign2;
    if (p0y > p1y) {
      if (p0y > p2y) {
        sign2 = Math_default.sign(p0.y);
      } else {
        sign2 = Math_default.sign(p2.y);
      }
    } else if (p1y > p2y) {
      sign2 = Math_default.sign(p1.y);
    } else {
      sign2 = Math_default.sign(p2.y);
    }
    const isBehind = sign2 < 0;
    offsetPointFromXZPlane(p0, isBehind);
    offsetPointFromXZPlane(p1, isBehind);
    offsetPointFromXZPlane(p2, isBehind);
  }
  function getXZIntersectionOffsetPoints(p, p1, u12, v12) {
    Cartesian3_default.add(
      p,
      Cartesian3_default.multiplyByScalar(
        Cartesian3_default.subtract(p1, p, c3),
        p.y / (p.y - p1.y),
        c3
      ),
      u12
    );
    Cartesian3_default.clone(u12, v12);
    offsetPointFromXZPlane(u12, true);
    offsetPointFromXZPlane(v12, false);
  }
  function splitTriangle(p0, p1, p2) {
    if (p0.x >= 0 || p1.x >= 0 || p2.x >= 0) {
      return void 0;
    }
    offsetTriangleFromXZPlane(p0, p1, p2);
    const p0Behind = p0.y < 0;
    const p1Behind = p1.y < 0;
    const p2Behind = p2.y < 0;
    let numBehind = 0;
    numBehind += p0Behind ? 1 : 0;
    numBehind += p1Behind ? 1 : 0;
    numBehind += p2Behind ? 1 : 0;
    const indices = splitTriangleResult.indices;
    if (numBehind === 1) {
      indices[1] = 3;
      indices[2] = 4;
      indices[5] = 6;
      indices[7] = 6;
      indices[8] = 5;
      if (p0Behind) {
        getXZIntersectionOffsetPoints(p0, p1, u1, q1);
        getXZIntersectionOffsetPoints(p0, p2, u2, q2);
        indices[0] = 0;
        indices[3] = 1;
        indices[4] = 2;
        indices[6] = 1;
      } else if (p1Behind) {
        getXZIntersectionOffsetPoints(p1, p2, u1, q1);
        getXZIntersectionOffsetPoints(p1, p0, u2, q2);
        indices[0] = 1;
        indices[3] = 2;
        indices[4] = 0;
        indices[6] = 2;
      } else if (p2Behind) {
        getXZIntersectionOffsetPoints(p2, p0, u1, q1);
        getXZIntersectionOffsetPoints(p2, p1, u2, q2);
        indices[0] = 2;
        indices[3] = 0;
        indices[4] = 1;
        indices[6] = 0;
      }
    } else if (numBehind === 2) {
      indices[2] = 4;
      indices[4] = 4;
      indices[5] = 3;
      indices[7] = 5;
      indices[8] = 6;
      if (!p0Behind) {
        getXZIntersectionOffsetPoints(p0, p1, u1, q1);
        getXZIntersectionOffsetPoints(p0, p2, u2, q2);
        indices[0] = 1;
        indices[1] = 2;
        indices[3] = 1;
        indices[6] = 0;
      } else if (!p1Behind) {
        getXZIntersectionOffsetPoints(p1, p2, u1, q1);
        getXZIntersectionOffsetPoints(p1, p0, u2, q2);
        indices[0] = 2;
        indices[1] = 0;
        indices[3] = 2;
        indices[6] = 1;
      } else if (!p2Behind) {
        getXZIntersectionOffsetPoints(p2, p0, u1, q1);
        getXZIntersectionOffsetPoints(p2, p1, u2, q2);
        indices[0] = 0;
        indices[1] = 1;
        indices[3] = 0;
        indices[6] = 2;
      }
    }
    const positions = splitTriangleResult.positions;
    positions[0] = p0;
    positions[1] = p1;
    positions[2] = p2;
    positions.length = 3;
    if (numBehind === 1 || numBehind === 2) {
      positions[3] = u1;
      positions[4] = u2;
      positions[5] = q1;
      positions[6] = q2;
      positions.length = 7;
    }
    return splitTriangleResult;
  }
  function updateGeometryAfterSplit(geometry, computeBoundingSphere) {
    const attributes = geometry.attributes;
    if (attributes.position.values.length === 0) {
      return void 0;
    }
    for (const property in attributes) {
      if (attributes.hasOwnProperty(property) && defined_default(attributes[property]) && defined_default(attributes[property].values)) {
        const attribute = attributes[property];
        attribute.values = ComponentDatatype_default.createTypedArray(
          attribute.componentDatatype,
          attribute.values
        );
      }
    }
    const numberOfVertices = Geometry_default.computeNumberOfVertices(geometry);
    geometry.indices = IndexDatatype_default.createTypedArray(
      numberOfVertices,
      geometry.indices
    );
    if (computeBoundingSphere) {
      geometry.boundingSphere = BoundingSphere_default.fromVertices(
        attributes.position.values
      );
    }
    return geometry;
  }
  function copyGeometryForSplit(geometry) {
    const attributes = geometry.attributes;
    const copiedAttributes = {};
    for (const property in attributes) {
      if (attributes.hasOwnProperty(property) && defined_default(attributes[property]) && defined_default(attributes[property].values)) {
        const attribute = attributes[property];
        copiedAttributes[property] = new GeometryAttribute_default({
          componentDatatype: attribute.componentDatatype,
          componentsPerAttribute: attribute.componentsPerAttribute,
          normalize: attribute.normalize,
          values: []
        });
      }
    }
    return new Geometry_default({
      attributes: copiedAttributes,
      indices: [],
      primitiveType: geometry.primitiveType
    });
  }
  function updateInstanceAfterSplit(instance, westGeometry, eastGeometry) {
    const computeBoundingSphere = defined_default(instance.geometry.boundingSphere);
    westGeometry = updateGeometryAfterSplit(westGeometry, computeBoundingSphere);
    eastGeometry = updateGeometryAfterSplit(eastGeometry, computeBoundingSphere);
    if (defined_default(eastGeometry) && !defined_default(westGeometry)) {
      instance.geometry = eastGeometry;
    } else if (!defined_default(eastGeometry) && defined_default(westGeometry)) {
      instance.geometry = westGeometry;
    } else {
      instance.westHemisphereGeometry = westGeometry;
      instance.eastHemisphereGeometry = eastGeometry;
      instance.geometry = void 0;
    }
  }
  function generateBarycentricInterpolateFunction(CartesianType, numberOfComponents) {
    const v0Scratch = new CartesianType();
    const v1Scratch2 = new CartesianType();
    const v2Scratch2 = new CartesianType();
    return function(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, normalize) {
      const v02 = CartesianType.fromArray(
        sourceValues,
        i0 * numberOfComponents,
        v0Scratch
      );
      const v12 = CartesianType.fromArray(
        sourceValues,
        i1 * numberOfComponents,
        v1Scratch2
      );
      const v22 = CartesianType.fromArray(
        sourceValues,
        i2 * numberOfComponents,
        v2Scratch2
      );
      CartesianType.multiplyByScalar(v02, coords.x, v02);
      CartesianType.multiplyByScalar(v12, coords.y, v12);
      CartesianType.multiplyByScalar(v22, coords.z, v22);
      const value = CartesianType.add(v02, v12, v02);
      CartesianType.add(value, v22, value);
      if (normalize) {
        CartesianType.normalize(value, value);
      }
      CartesianType.pack(
        value,
        currentValues,
        insertedIndex * numberOfComponents
      );
    };
  }
  function computeTriangleAttributes(i0, i1, i2, point, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, allAttributes, insertedIndex) {
    if (!defined_default(normals) && !defined_default(tangents) && !defined_default(bitangents) && !defined_default(texCoords) && !defined_default(extrudeDirections) && customAttributesLength === 0) {
      return;
    }
    const p0 = Cartesian3_default.fromArray(positions, i0 * 3, p0Scratch);
    const p1 = Cartesian3_default.fromArray(positions, i1 * 3, p1Scratch);
    const p2 = Cartesian3_default.fromArray(positions, i2 * 3, p2Scratch);
    const coords = barycentricCoordinates_default(point, p0, p1, p2, barycentricScratch);
    if (!defined_default(coords)) {
      return;
    }
    if (defined_default(normals)) {
      interpolateAndPackCartesian3(
        i0,
        i1,
        i2,
        coords,
        normals,
        currentAttributes.normal.values,
        insertedIndex,
        true
      );
    }
    if (defined_default(extrudeDirections)) {
      const d0 = Cartesian3_default.fromArray(extrudeDirections, i0 * 3, p0Scratch);
      const d1 = Cartesian3_default.fromArray(extrudeDirections, i1 * 3, p1Scratch);
      const d2 = Cartesian3_default.fromArray(extrudeDirections, i2 * 3, p2Scratch);
      Cartesian3_default.multiplyByScalar(d0, coords.x, d0);
      Cartesian3_default.multiplyByScalar(d1, coords.y, d1);
      Cartesian3_default.multiplyByScalar(d2, coords.z, d2);
      let direction2;
      if (!Cartesian3_default.equals(d0, Cartesian3_default.ZERO) || !Cartesian3_default.equals(d1, Cartesian3_default.ZERO) || !Cartesian3_default.equals(d2, Cartesian3_default.ZERO)) {
        direction2 = Cartesian3_default.add(d0, d1, d0);
        Cartesian3_default.add(direction2, d2, direction2);
        Cartesian3_default.normalize(direction2, direction2);
      } else {
        direction2 = p0Scratch;
        direction2.x = 0;
        direction2.y = 0;
        direction2.z = 0;
      }
      Cartesian3_default.pack(
        direction2,
        currentAttributes.extrudeDirection.values,
        insertedIndex * 3
      );
    }
    if (defined_default(applyOffset)) {
      interpolateAndPackBoolean(
        i0,
        i1,
        i2,
        coords,
        applyOffset,
        currentAttributes.applyOffset.values,
        insertedIndex
      );
    }
    if (defined_default(tangents)) {
      interpolateAndPackCartesian3(
        i0,
        i1,
        i2,
        coords,
        tangents,
        currentAttributes.tangent.values,
        insertedIndex,
        true
      );
    }
    if (defined_default(bitangents)) {
      interpolateAndPackCartesian3(
        i0,
        i1,
        i2,
        coords,
        bitangents,
        currentAttributes.bitangent.values,
        insertedIndex,
        true
      );
    }
    if (defined_default(texCoords)) {
      interpolateAndPackCartesian2(
        i0,
        i1,
        i2,
        coords,
        texCoords,
        currentAttributes.st.values,
        insertedIndex
      );
    }
    if (customAttributesLength > 0) {
      for (let i = 0; i < customAttributesLength; i++) {
        const attributeName = customAttributeNames[i];
        genericInterpolate(
          i0,
          i1,
          i2,
          coords,
          insertedIndex,
          allAttributes[attributeName],
          currentAttributes[attributeName]
        );
      }
    }
  }
  function genericInterpolate(i0, i1, i2, coords, insertedIndex, sourceAttribute, currentAttribute) {
    const componentsPerAttribute = sourceAttribute.componentsPerAttribute;
    const sourceValues = sourceAttribute.values;
    const currentValues = currentAttribute.values;
    switch (componentsPerAttribute) {
      case 4:
        interpolateAndPackCartesian4(
          i0,
          i1,
          i2,
          coords,
          sourceValues,
          currentValues,
          insertedIndex,
          false
        );
        break;
      case 3:
        interpolateAndPackCartesian3(
          i0,
          i1,
          i2,
          coords,
          sourceValues,
          currentValues,
          insertedIndex,
          false
        );
        break;
      case 2:
        interpolateAndPackCartesian2(
          i0,
          i1,
          i2,
          coords,
          sourceValues,
          currentValues,
          insertedIndex,
          false
        );
        break;
      default:
        currentValues[insertedIndex] = sourceValues[i0] * coords.x + sourceValues[i1] * coords.y + sourceValues[i2] * coords.z;
    }
  }
  function insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, currentIndex, point) {
    const insertIndex = currentAttributes.position.values.length / 3;
    if (currentIndex !== -1) {
      const prevIndex = indices[currentIndex];
      const newIndex = currentIndexMap[prevIndex];
      if (newIndex === -1) {
        currentIndexMap[prevIndex] = insertIndex;
        currentAttributes.position.values.push(point.x, point.y, point.z);
        currentIndices.push(insertIndex);
        return insertIndex;
      }
      currentIndices.push(newIndex);
      return newIndex;
    }
    currentAttributes.position.values.push(point.x, point.y, point.z);
    currentIndices.push(insertIndex);
    return insertIndex;
  }
  function splitLongitudeTriangles(instance) {
    const geometry = instance.geometry;
    const attributes = geometry.attributes;
    const positions = attributes.position.values;
    const normals = defined_default(attributes.normal) ? attributes.normal.values : void 0;
    const bitangents = defined_default(attributes.bitangent) ? attributes.bitangent.values : void 0;
    const tangents = defined_default(attributes.tangent) ? attributes.tangent.values : void 0;
    const texCoords = defined_default(attributes.st) ? attributes.st.values : void 0;
    const extrudeDirections = defined_default(attributes.extrudeDirection) ? attributes.extrudeDirection.values : void 0;
    const applyOffset = defined_default(attributes.applyOffset) ? attributes.applyOffset.values : void 0;
    const indices = geometry.indices;
    const customAttributeNames = [];
    for (const attributeName in attributes) {
      if (attributes.hasOwnProperty(attributeName) && !NAMED_ATTRIBUTES[attributeName] && defined_default(attributes[attributeName])) {
        customAttributeNames.push(attributeName);
      }
    }
    const customAttributesLength = customAttributeNames.length;
    const eastGeometry = copyGeometryForSplit(geometry);
    const westGeometry = copyGeometryForSplit(geometry);
    let currentAttributes;
    let currentIndices;
    let currentIndexMap;
    let insertedIndex;
    let i;
    const westGeometryIndexMap = [];
    westGeometryIndexMap.length = positions.length / 3;
    const eastGeometryIndexMap = [];
    eastGeometryIndexMap.length = positions.length / 3;
    for (i = 0; i < westGeometryIndexMap.length; ++i) {
      westGeometryIndexMap[i] = -1;
      eastGeometryIndexMap[i] = -1;
    }
    const len = indices.length;
    for (i = 0; i < len; i += 3) {
      const i0 = indices[i];
      const i1 = indices[i + 1];
      const i2 = indices[i + 2];
      let p0 = Cartesian3_default.fromArray(positions, i0 * 3);
      let p1 = Cartesian3_default.fromArray(positions, i1 * 3);
      let p2 = Cartesian3_default.fromArray(positions, i2 * 3);
      const result = splitTriangle(p0, p1, p2);
      if (defined_default(result) && result.positions.length > 3) {
        const resultPositions = result.positions;
        const resultIndices = result.indices;
        const resultLength = resultIndices.length;
        for (let j = 0; j < resultLength; ++j) {
          const resultIndex = resultIndices[j];
          const point = resultPositions[resultIndex];
          if (point.y < 0) {
            currentAttributes = westGeometry.attributes;
            currentIndices = westGeometry.indices;
            currentIndexMap = westGeometryIndexMap;
          } else {
            currentAttributes = eastGeometry.attributes;
            currentIndices = eastGeometry.indices;
            currentIndexMap = eastGeometryIndexMap;
          }
          insertedIndex = insertSplitPoint(
            currentAttributes,
            currentIndices,
            currentIndexMap,
            indices,
            resultIndex < 3 ? i + resultIndex : -1,
            point
          );
          computeTriangleAttributes(
            i0,
            i1,
            i2,
            point,
            positions,
            normals,
            tangents,
            bitangents,
            texCoords,
            extrudeDirections,
            applyOffset,
            currentAttributes,
            customAttributeNames,
            customAttributesLength,
            attributes,
            insertedIndex
          );
        }
      } else {
        if (defined_default(result)) {
          p0 = result.positions[0];
          p1 = result.positions[1];
          p2 = result.positions[2];
        }
        if (p0.y < 0) {
          currentAttributes = westGeometry.attributes;
          currentIndices = westGeometry.indices;
          currentIndexMap = westGeometryIndexMap;
        } else {
          currentAttributes = eastGeometry.attributes;
          currentIndices = eastGeometry.indices;
          currentIndexMap = eastGeometryIndexMap;
        }
        insertedIndex = insertSplitPoint(
          currentAttributes,
          currentIndices,
          currentIndexMap,
          indices,
          i,
          p0
        );
        computeTriangleAttributes(
          i0,
          i1,
          i2,
          p0,
          positions,
          normals,
          tangents,
          bitangents,
          texCoords,
          extrudeDirections,
          applyOffset,
          currentAttributes,
          customAttributeNames,
          customAttributesLength,
          attributes,
          insertedIndex
        );
        insertedIndex = insertSplitPoint(
          currentAttributes,
          currentIndices,
          currentIndexMap,
          indices,
          i + 1,
          p1
        );
        computeTriangleAttributes(
          i0,
          i1,
          i2,
          p1,
          positions,
          normals,
          tangents,
          bitangents,
          texCoords,
          extrudeDirections,
          applyOffset,
          currentAttributes,
          customAttributeNames,
          customAttributesLength,
          attributes,
          insertedIndex
        );
        insertedIndex = insertSplitPoint(
          currentAttributes,
          currentIndices,
          currentIndexMap,
          indices,
          i + 2,
          p2
        );
        computeTriangleAttributes(
          i0,
          i1,
          i2,
          p2,
          positions,
          normals,
          tangents,
          bitangents,
          texCoords,
          extrudeDirections,
          applyOffset,
          currentAttributes,
          customAttributeNames,
          customAttributesLength,
          attributes,
          insertedIndex
        );
      }
    }
    updateInstanceAfterSplit(instance, westGeometry, eastGeometry);
  }
  function computeLineAttributes(i0, i1, point, positions, insertIndex, currentAttributes, applyOffset) {
    if (!defined_default(applyOffset)) {
      return;
    }
    const p0 = Cartesian3_default.fromArray(positions, i0 * 3, p0Scratch);
    if (Cartesian3_default.equalsEpsilon(p0, point, Math_default.EPSILON10)) {
      currentAttributes.applyOffset.values[insertIndex] = applyOffset[i0];
    } else {
      currentAttributes.applyOffset.values[insertIndex] = applyOffset[i1];
    }
  }
  function splitLongitudeLines(instance) {
    const geometry = instance.geometry;
    const attributes = geometry.attributes;
    const positions = attributes.position.values;
    const applyOffset = defined_default(attributes.applyOffset) ? attributes.applyOffset.values : void 0;
    const indices = geometry.indices;
    const eastGeometry = copyGeometryForSplit(geometry);
    const westGeometry = copyGeometryForSplit(geometry);
    let i;
    const length = indices.length;
    const westGeometryIndexMap = [];
    westGeometryIndexMap.length = positions.length / 3;
    const eastGeometryIndexMap = [];
    eastGeometryIndexMap.length = positions.length / 3;
    for (i = 0; i < westGeometryIndexMap.length; ++i) {
      westGeometryIndexMap[i] = -1;
      eastGeometryIndexMap[i] = -1;
    }
    for (i = 0; i < length; i += 2) {
      const i0 = indices[i];
      const i1 = indices[i + 1];
      const p0 = Cartesian3_default.fromArray(positions, i0 * 3, p0Scratch);
      const p1 = Cartesian3_default.fromArray(positions, i1 * 3, p1Scratch);
      let insertIndex;
      if (Math.abs(p0.y) < Math_default.EPSILON6) {
        if (p0.y < 0) {
          p0.y = -Math_default.EPSILON6;
        } else {
          p0.y = Math_default.EPSILON6;
        }
      }
      if (Math.abs(p1.y) < Math_default.EPSILON6) {
        if (p1.y < 0) {
          p1.y = -Math_default.EPSILON6;
        } else {
          p1.y = Math_default.EPSILON6;
        }
      }
      let p0Attributes = eastGeometry.attributes;
      let p0Indices = eastGeometry.indices;
      let p0IndexMap = eastGeometryIndexMap;
      let p1Attributes = westGeometry.attributes;
      let p1Indices = westGeometry.indices;
      let p1IndexMap = westGeometryIndexMap;
      const intersection = IntersectionTests_default.lineSegmentPlane(
        p0,
        p1,
        xzPlane,
        p2Scratch
      );
      if (defined_default(intersection)) {
        const offset = Cartesian3_default.multiplyByScalar(
          Cartesian3_default.UNIT_Y,
          5 * Math_default.EPSILON9,
          offsetScratch
        );
        if (p0.y < 0) {
          Cartesian3_default.negate(offset, offset);
          p0Attributes = westGeometry.attributes;
          p0Indices = westGeometry.indices;
          p0IndexMap = westGeometryIndexMap;
          p1Attributes = eastGeometry.attributes;
          p1Indices = eastGeometry.indices;
          p1IndexMap = eastGeometryIndexMap;
        }
        const offsetPoint = Cartesian3_default.add(
          intersection,
          offset,
          offsetPointScratch
        );
        insertIndex = insertSplitPoint(
          p0Attributes,
          p0Indices,
          p0IndexMap,
          indices,
          i,
          p0
        );
        computeLineAttributes(
          i0,
          i1,
          p0,
          positions,
          insertIndex,
          p0Attributes,
          applyOffset
        );
        insertIndex = insertSplitPoint(
          p0Attributes,
          p0Indices,
          p0IndexMap,
          indices,
          -1,
          offsetPoint
        );
        computeLineAttributes(
          i0,
          i1,
          offsetPoint,
          positions,
          insertIndex,
          p0Attributes,
          applyOffset
        );
        Cartesian3_default.negate(offset, offset);
        Cartesian3_default.add(intersection, offset, offsetPoint);
        insertIndex = insertSplitPoint(
          p1Attributes,
          p1Indices,
          p1IndexMap,
          indices,
          -1,
          offsetPoint
        );
        computeLineAttributes(
          i0,
          i1,
          offsetPoint,
          positions,
          insertIndex,
          p1Attributes,
          applyOffset
        );
        insertIndex = insertSplitPoint(
          p1Attributes,
          p1Indices,
          p1IndexMap,
          indices,
          i + 1,
          p1
        );
        computeLineAttributes(
          i0,
          i1,
          p1,
          positions,
          insertIndex,
          p1Attributes,
          applyOffset
        );
      } else {
        let currentAttributes;
        let currentIndices;
        let currentIndexMap;
        if (p0.y < 0) {
          currentAttributes = westGeometry.attributes;
          currentIndices = westGeometry.indices;
          currentIndexMap = westGeometryIndexMap;
        } else {
          currentAttributes = eastGeometry.attributes;
          currentIndices = eastGeometry.indices;
          currentIndexMap = eastGeometryIndexMap;
        }
        insertIndex = insertSplitPoint(
          currentAttributes,
          currentIndices,
          currentIndexMap,
          indices,
          i,
          p0
        );
        computeLineAttributes(
          i0,
          i1,
          p0,
          positions,
          insertIndex,
          currentAttributes,
          applyOffset
        );
        insertIndex = insertSplitPoint(
          currentAttributes,
          currentIndices,
          currentIndexMap,
          indices,
          i + 1,
          p1
        );
        computeLineAttributes(
          i0,
          i1,
          p1,
          positions,
          insertIndex,
          currentAttributes,
          applyOffset
        );
      }
    }
    updateInstanceAfterSplit(instance, westGeometry, eastGeometry);
  }
  function updateAdjacencyAfterSplit(geometry) {
    const attributes = geometry.attributes;
    const positions = attributes.position.values;
    const prevPositions = attributes.prevPosition.values;
    const nextPositions = attributes.nextPosition.values;
    const length = positions.length;
    for (let j = 0; j < length; j += 3) {
      const position = Cartesian3_default.unpack(positions, j, cartesian3Scratch0);
      if (position.x > 0) {
        continue;
      }
      const prevPosition = Cartesian3_default.unpack(
        prevPositions,
        j,
        cartesian3Scratch2
      );
      if (position.y < 0 && prevPosition.y > 0 || position.y > 0 && prevPosition.y < 0) {
        if (j - 3 > 0) {
          prevPositions[j] = positions[j - 3];
          prevPositions[j + 1] = positions[j - 2];
          prevPositions[j + 2] = positions[j - 1];
        } else {
          Cartesian3_default.pack(position, prevPositions, j);
        }
      }
      const nextPosition = Cartesian3_default.unpack(
        nextPositions,
        j,
        cartesian3Scratch3
      );
      if (position.y < 0 && nextPosition.y > 0 || position.y > 0 && nextPosition.y < 0) {
        if (j + 3 < length) {
          nextPositions[j] = positions[j + 3];
          nextPositions[j + 1] = positions[j + 4];
          nextPositions[j + 2] = positions[j + 5];
        } else {
          Cartesian3_default.pack(position, nextPositions, j);
        }
      }
    }
  }
  function splitLongitudePolyline(instance) {
    const geometry = instance.geometry;
    const attributes = geometry.attributes;
    const positions = attributes.position.values;
    const prevPositions = attributes.prevPosition.values;
    const nextPositions = attributes.nextPosition.values;
    const expandAndWidths = attributes.expandAndWidth.values;
    const texCoords = defined_default(attributes.st) ? attributes.st.values : void 0;
    const colors = defined_default(attributes.color) ? attributes.color.values : void 0;
    const eastGeometry = copyGeometryForSplit(geometry);
    const westGeometry = copyGeometryForSplit(geometry);
    let i;
    let j;
    let index;
    let intersectionFound = false;
    const length = positions.length / 3;
    for (i = 0; i < length; i += 4) {
      const i0 = i;
      const i2 = i + 2;
      const p0 = Cartesian3_default.fromArray(positions, i0 * 3, cartesian3Scratch0);
      const p2 = Cartesian3_default.fromArray(positions, i2 * 3, cartesian3Scratch2);
      if (Math.abs(p0.y) < coplanarOffset) {
        p0.y = coplanarOffset * (p2.y < 0 ? -1 : 1);
        positions[i * 3 + 1] = p0.y;
        positions[(i + 1) * 3 + 1] = p0.y;
        for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {
          prevPositions[j] = positions[i * 3];
          prevPositions[j + 1] = positions[i * 3 + 1];
          prevPositions[j + 2] = positions[i * 3 + 2];
        }
      }
      if (Math.abs(p2.y) < coplanarOffset) {
        p2.y = coplanarOffset * (p0.y < 0 ? -1 : 1);
        positions[(i + 2) * 3 + 1] = p2.y;
        positions[(i + 3) * 3 + 1] = p2.y;
        for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {
          nextPositions[j] = positions[(i + 2) * 3];
          nextPositions[j + 1] = positions[(i + 2) * 3 + 1];
          nextPositions[j + 2] = positions[(i + 2) * 3 + 2];
        }
      }
      let p0Attributes = eastGeometry.attributes;
      let p0Indices = eastGeometry.indices;
      let p2Attributes = westGeometry.attributes;
      let p2Indices = westGeometry.indices;
      const intersection = IntersectionTests_default.lineSegmentPlane(
        p0,
        p2,
        xzPlane,
        cartesian3Scratch4
      );
      if (defined_default(intersection)) {
        intersectionFound = true;
        const offset = Cartesian3_default.multiplyByScalar(
          Cartesian3_default.UNIT_Y,
          offsetScalar,
          cartesian3Scratch5
        );
        if (p0.y < 0) {
          Cartesian3_default.negate(offset, offset);
          p0Attributes = westGeometry.attributes;
          p0Indices = westGeometry.indices;
          p2Attributes = eastGeometry.attributes;
          p2Indices = eastGeometry.indices;
        }
        const offsetPoint = Cartesian3_default.add(
          intersection,
          offset,
          cartesian3Scratch6
        );
        p0Attributes.position.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);
        p0Attributes.position.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p0Attributes.position.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p0Attributes.prevPosition.values.push(
          prevPositions[i0 * 3],
          prevPositions[i0 * 3 + 1],
          prevPositions[i0 * 3 + 2]
        );
        p0Attributes.prevPosition.values.push(
          prevPositions[i0 * 3 + 3],
          prevPositions[i0 * 3 + 4],
          prevPositions[i0 * 3 + 5]
        );
        p0Attributes.prevPosition.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);
        p0Attributes.nextPosition.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p0Attributes.nextPosition.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p0Attributes.nextPosition.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p0Attributes.nextPosition.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        Cartesian3_default.negate(offset, offset);
        Cartesian3_default.add(intersection, offset, offsetPoint);
        p2Attributes.position.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p2Attributes.position.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p2Attributes.position.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);
        p2Attributes.prevPosition.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p2Attributes.prevPosition.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p2Attributes.prevPosition.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p2Attributes.prevPosition.values.push(
          offsetPoint.x,
          offsetPoint.y,
          offsetPoint.z
        );
        p2Attributes.nextPosition.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);
        p2Attributes.nextPosition.values.push(
          nextPositions[i2 * 3],
          nextPositions[i2 * 3 + 1],
          nextPositions[i2 * 3 + 2]
        );
        p2Attributes.nextPosition.values.push(
          nextPositions[i2 * 3 + 3],
          nextPositions[i2 * 3 + 4],
          nextPositions[i2 * 3 + 5]
        );
        const ew0 = Cartesian2_default.fromArray(
          expandAndWidths,
          i0 * 2,
          cartesian2Scratch0
        );
        const width = Math.abs(ew0.y);
        p0Attributes.expandAndWidth.values.push(-1, width, 1, width);
        p0Attributes.expandAndWidth.values.push(-1, -width, 1, -width);
        p2Attributes.expandAndWidth.values.push(-1, width, 1, width);
        p2Attributes.expandAndWidth.values.push(-1, -width, 1, -width);
        let t = Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(intersection, p0, cartesian3Scratch3)
        );
        t /= Cartesian3_default.magnitudeSquared(
          Cartesian3_default.subtract(p2, p0, cartesian3Scratch3)
        );
        if (defined_default(colors)) {
          const c0 = Cartesian4_default.fromArray(colors, i0 * 4, cartesian4Scratch0);
          const c2 = Cartesian4_default.fromArray(colors, i2 * 4, cartesian4Scratch0);
          const r = Math_default.lerp(c0.x, c2.x, t);
          const g = Math_default.lerp(c0.y, c2.y, t);
          const b = Math_default.lerp(c0.z, c2.z, t);
          const a3 = Math_default.lerp(c0.w, c2.w, t);
          for (j = i0 * 4; j < i0 * 4 + 2 * 4; ++j) {
            p0Attributes.color.values.push(colors[j]);
          }
          p0Attributes.color.values.push(r, g, b, a3);
          p0Attributes.color.values.push(r, g, b, a3);
          p2Attributes.color.values.push(r, g, b, a3);
          p2Attributes.color.values.push(r, g, b, a3);
          for (j = i2 * 4; j < i2 * 4 + 2 * 4; ++j) {
            p2Attributes.color.values.push(colors[j]);
          }
        }
        if (defined_default(texCoords)) {
          const s0 = Cartesian2_default.fromArray(texCoords, i0 * 2, cartesian2Scratch0);
          const s3 = Cartesian2_default.fromArray(
            texCoords,
            (i + 3) * 2,
            cartesian2Scratch1
          );
          const sx = Math_default.lerp(s0.x, s3.x, t);
          for (j = i0 * 2; j < i0 * 2 + 2 * 2; ++j) {
            p0Attributes.st.values.push(texCoords[j]);
          }
          p0Attributes.st.values.push(sx, s0.y);
          p0Attributes.st.values.push(sx, s3.y);
          p2Attributes.st.values.push(sx, s0.y);
          p2Attributes.st.values.push(sx, s3.y);
          for (j = i2 * 2; j < i2 * 2 + 2 * 2; ++j) {
            p2Attributes.st.values.push(texCoords[j]);
          }
        }
        index = p0Attributes.position.values.length / 3 - 4;
        p0Indices.push(index, index + 2, index + 1);
        p0Indices.push(index + 1, index + 2, index + 3);
        index = p2Attributes.position.values.length / 3 - 4;
        p2Indices.push(index, index + 2, index + 1);
        p2Indices.push(index + 1, index + 2, index + 3);
      } else {
        let currentAttributes;
        let currentIndices;
        if (p0.y < 0) {
          currentAttributes = westGeometry.attributes;
          currentIndices = westGeometry.indices;
        } else {
          currentAttributes = eastGeometry.attributes;
          currentIndices = eastGeometry.indices;
        }
        currentAttributes.position.values.push(p0.x, p0.y, p0.z);
        currentAttributes.position.values.push(p0.x, p0.y, p0.z);
        currentAttributes.position.values.push(p2.x, p2.y, p2.z);
        currentAttributes.position.values.push(p2.x, p2.y, p2.z);
        for (j = i * 3; j < i * 3 + 4 * 3; ++j) {
          currentAttributes.prevPosition.values.push(prevPositions[j]);
          currentAttributes.nextPosition.values.push(nextPositions[j]);
        }
        for (j = i * 2; j < i * 2 + 4 * 2; ++j) {
          currentAttributes.expandAndWidth.values.push(expandAndWidths[j]);
          if (defined_default(texCoords)) {
            currentAttributes.st.values.push(texCoords[j]);
          }
        }
        if (defined_default(colors)) {
          for (j = i * 4; j < i * 4 + 4 * 4; ++j) {
            currentAttributes.color.values.push(colors[j]);
          }
        }
        index = currentAttributes.position.values.length / 3 - 4;
        currentIndices.push(index, index + 2, index + 1);
        currentIndices.push(index + 1, index + 2, index + 3);
      }
    }
    if (intersectionFound) {
      updateAdjacencyAfterSplit(westGeometry);
      updateAdjacencyAfterSplit(eastGeometry);
    }
    updateInstanceAfterSplit(instance, westGeometry, eastGeometry);
  }
  var GeometryPipeline, scratchProjectTo2DCartesian3, scratchProjectTo2DCartographic, encodedResult, scratchCartesian33, inverseTranspose, normalMatrix, tempScratch, normal, v0, v1, v2, normalScratch2, normalScale, tScratch, scratchCartesian22, toEncode1, toEncode2, toEncode3, encodeResult2, c3, u1, u2, q1, q2, splitTriangleResult, interpolateAndPackCartesian4, interpolateAndPackCartesian3, interpolateAndPackCartesian2, interpolateAndPackBoolean, p0Scratch, p1Scratch, p2Scratch, barycentricScratch, NAMED_ATTRIBUTES, xzPlane, offsetScratch, offsetPointScratch, cartesian2Scratch0, cartesian2Scratch1, cartesian3Scratch0, cartesian3Scratch2, cartesian3Scratch3, cartesian3Scratch4, cartesian3Scratch5, cartesian3Scratch6, cartesian4Scratch0, offsetScalar, coplanarOffset, GeometryPipeline_default;
  var init_GeometryPipeline = __esm({
    "packages/engine/Source/Core/GeometryPipeline.js"() {
      init_AttributeCompression();
      init_barycentricCoordinates();
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartesian4();
      init_Cartographic();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_EncodedCartesian3();
      init_GeographicProjection();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryType();
      init_IndexDatatype();
      init_Intersect();
      init_IntersectionTests();
      init_Math();
      init_Matrix3();
      init_Matrix4();
      init_Plane();
      init_PrimitiveType();
      init_Tipsify();
      GeometryPipeline = {};
      GeometryPipeline.toWireframe = function(geometry) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        const indices = geometry.indices;
        if (defined_default(indices)) {
          switch (geometry.primitiveType) {
            case PrimitiveType_default.TRIANGLES:
              geometry.indices = trianglesToLines(indices);
              break;
            case PrimitiveType_default.TRIANGLE_STRIP:
              geometry.indices = triangleStripToLines(indices);
              break;
            case PrimitiveType_default.TRIANGLE_FAN:
              geometry.indices = triangleFanToLines(indices);
              break;
            default:
              throw new DeveloperError_default(
                "geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN."
              );
          }
          geometry.primitiveType = PrimitiveType_default.LINES;
        }
        return geometry;
      };
      GeometryPipeline.createLineSegmentsForVectors = function(geometry, attributeName, length) {
        attributeName = defaultValue_default(attributeName, "normal");
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        if (!defined_default(geometry.attributes.position)) {
          throw new DeveloperError_default("geometry.attributes.position is required.");
        }
        if (!defined_default(geometry.attributes[attributeName])) {
          throw new DeveloperError_default(
            `geometry.attributes must have an attribute with the same name as the attributeName parameter, ${attributeName}.`
          );
        }
        length = defaultValue_default(length, 1e4);
        const positions = geometry.attributes.position.values;
        const vectors = geometry.attributes[attributeName].values;
        const positionsLength = positions.length;
        const newPositions = new Float64Array(2 * positionsLength);
        let j = 0;
        for (let i = 0; i < positionsLength; i += 3) {
          newPositions[j++] = positions[i];
          newPositions[j++] = positions[i + 1];
          newPositions[j++] = positions[i + 2];
          newPositions[j++] = positions[i] + vectors[i] * length;
          newPositions[j++] = positions[i + 1] + vectors[i + 1] * length;
          newPositions[j++] = positions[i + 2] + vectors[i + 2] * length;
        }
        let newBoundingSphere;
        const bs = geometry.boundingSphere;
        if (defined_default(bs)) {
          newBoundingSphere = new BoundingSphere_default(bs.center, bs.radius + length);
        }
        return new Geometry_default({
          attributes: {
            position: new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.DOUBLE,
              componentsPerAttribute: 3,
              values: newPositions
            })
          },
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere: newBoundingSphere
        });
      };
      GeometryPipeline.createAttributeLocations = function(geometry) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        const semantics = [
          "position",
          "positionHigh",
          "positionLow",
          // From VertexFormat.position - after 2D projection and high-precision encoding
          "position3DHigh",
          "position3DLow",
          "position2DHigh",
          "position2DLow",
          // From Primitive
          "pickColor",
          // From VertexFormat
          "normal",
          "st",
          "tangent",
          "bitangent",
          // For shadow volumes
          "extrudeDirection",
          // From compressing texture coordinates and normals
          "compressedAttributes"
        ];
        const attributes = geometry.attributes;
        const indices = {};
        let j = 0;
        let i;
        const len = semantics.length;
        for (i = 0; i < len; ++i) {
          const semantic = semantics[i];
          if (defined_default(attributes[semantic])) {
            indices[semantic] = j++;
          }
        }
        for (const name in attributes) {
          if (attributes.hasOwnProperty(name) && !defined_default(indices[name])) {
            indices[name] = j++;
          }
        }
        return indices;
      };
      GeometryPipeline.reorderForPreVertexCache = function(geometry) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        const numVertices = Geometry_default.computeNumberOfVertices(geometry);
        const indices = geometry.indices;
        if (defined_default(indices)) {
          const indexCrossReferenceOldToNew = new Int32Array(numVertices);
          for (let i = 0; i < numVertices; i++) {
            indexCrossReferenceOldToNew[i] = -1;
          }
          const indicesIn = indices;
          const numIndices = indicesIn.length;
          const indicesOut = IndexDatatype_default.createTypedArray(numVertices, numIndices);
          let intoIndicesIn = 0;
          let intoIndicesOut = 0;
          let nextIndex = 0;
          let tempIndex;
          while (intoIndicesIn < numIndices) {
            tempIndex = indexCrossReferenceOldToNew[indicesIn[intoIndicesIn]];
            if (tempIndex !== -1) {
              indicesOut[intoIndicesOut] = tempIndex;
            } else {
              tempIndex = indicesIn[intoIndicesIn];
              indexCrossReferenceOldToNew[tempIndex] = nextIndex;
              indicesOut[intoIndicesOut] = nextIndex;
              ++nextIndex;
            }
            ++intoIndicesIn;
            ++intoIndicesOut;
          }
          geometry.indices = indicesOut;
          const attributes = geometry.attributes;
          for (const property in attributes) {
            if (attributes.hasOwnProperty(property) && defined_default(attributes[property]) && defined_default(attributes[property].values)) {
              const attribute = attributes[property];
              const elementsIn = attribute.values;
              let intoElementsIn = 0;
              const numComponents = attribute.componentsPerAttribute;
              const elementsOut = ComponentDatatype_default.createTypedArray(
                attribute.componentDatatype,
                nextIndex * numComponents
              );
              while (intoElementsIn < numVertices) {
                const temp = indexCrossReferenceOldToNew[intoElementsIn];
                if (temp !== -1) {
                  for (let j = 0; j < numComponents; j++) {
                    elementsOut[numComponents * temp + j] = elementsIn[numComponents * intoElementsIn + j];
                  }
                }
                ++intoElementsIn;
              }
              attribute.values = elementsOut;
            }
          }
        }
        return geometry;
      };
      GeometryPipeline.reorderForPostVertexCache = function(geometry, cacheCapacity) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        const indices = geometry.indices;
        if (geometry.primitiveType === PrimitiveType_default.TRIANGLES && defined_default(indices)) {
          const numIndices = indices.length;
          let maximumIndex = 0;
          for (let j = 0; j < numIndices; j++) {
            if (indices[j] > maximumIndex) {
              maximumIndex = indices[j];
            }
          }
          geometry.indices = Tipsify_default.tipsify({
            indices,
            maximumIndex,
            cacheSize: cacheCapacity
          });
        }
        return geometry;
      };
      GeometryPipeline.fitToUnsignedShortIndices = function(geometry) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        if (defined_default(geometry.indices) && geometry.primitiveType !== PrimitiveType_default.TRIANGLES && geometry.primitiveType !== PrimitiveType_default.LINES && geometry.primitiveType !== PrimitiveType_default.POINTS) {
          throw new DeveloperError_default(
            "geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS."
          );
        }
        const geometries = [];
        const numberOfVertices = Geometry_default.computeNumberOfVertices(geometry);
        if (defined_default(geometry.indices) && numberOfVertices >= Math_default.SIXTY_FOUR_KILOBYTES) {
          let oldToNewIndex = [];
          let newIndices = [];
          let currentIndex = 0;
          let newAttributes = copyAttributesDescriptions(geometry.attributes);
          const originalIndices = geometry.indices;
          const numberOfIndices = originalIndices.length;
          let indicesPerPrimitive;
          if (geometry.primitiveType === PrimitiveType_default.TRIANGLES) {
            indicesPerPrimitive = 3;
          } else if (geometry.primitiveType === PrimitiveType_default.LINES) {
            indicesPerPrimitive = 2;
          } else if (geometry.primitiveType === PrimitiveType_default.POINTS) {
            indicesPerPrimitive = 1;
          }
          for (let j = 0; j < numberOfIndices; j += indicesPerPrimitive) {
            for (let k = 0; k < indicesPerPrimitive; ++k) {
              const x = originalIndices[j + k];
              let i = oldToNewIndex[x];
              if (!defined_default(i)) {
                i = currentIndex++;
                oldToNewIndex[x] = i;
                copyVertex(newAttributes, geometry.attributes, x);
              }
              newIndices.push(i);
            }
            if (currentIndex + indicesPerPrimitive >= Math_default.SIXTY_FOUR_KILOBYTES) {
              geometries.push(
                new Geometry_default({
                  attributes: newAttributes,
                  indices: newIndices,
                  primitiveType: geometry.primitiveType,
                  boundingSphere: geometry.boundingSphere,
                  boundingSphereCV: geometry.boundingSphereCV
                })
              );
              oldToNewIndex = [];
              newIndices = [];
              currentIndex = 0;
              newAttributes = copyAttributesDescriptions(geometry.attributes);
            }
          }
          if (newIndices.length !== 0) {
            geometries.push(
              new Geometry_default({
                attributes: newAttributes,
                indices: newIndices,
                primitiveType: geometry.primitiveType,
                boundingSphere: geometry.boundingSphere,
                boundingSphereCV: geometry.boundingSphereCV
              })
            );
          }
        } else {
          geometries.push(geometry);
        }
        return geometries;
      };
      scratchProjectTo2DCartesian3 = new Cartesian3_default();
      scratchProjectTo2DCartographic = new Cartographic_default();
      GeometryPipeline.projectTo2D = function(geometry, attributeName, attributeName3D, attributeName2D, projection) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        if (!defined_default(attributeName)) {
          throw new DeveloperError_default("attributeName is required.");
        }
        if (!defined_default(attributeName3D)) {
          throw new DeveloperError_default("attributeName3D is required.");
        }
        if (!defined_default(attributeName2D)) {
          throw new DeveloperError_default("attributeName2D is required.");
        }
        if (!defined_default(geometry.attributes[attributeName])) {
          throw new DeveloperError_default(
            `geometry must have attribute matching the attributeName argument: ${attributeName}.`
          );
        }
        if (geometry.attributes[attributeName].componentDatatype !== ComponentDatatype_default.DOUBLE) {
          throw new DeveloperError_default(
            "The attribute componentDatatype must be ComponentDatatype.DOUBLE."
          );
        }
        const attribute = geometry.attributes[attributeName];
        projection = defined_default(projection) ? projection : new GeographicProjection_default();
        const ellipsoid = projection.ellipsoid;
        const values3D = attribute.values;
        const projectedValues = new Float64Array(values3D.length);
        let index = 0;
        for (let i = 0; i < values3D.length; i += 3) {
          const value = Cartesian3_default.fromArray(
            values3D,
            i,
            scratchProjectTo2DCartesian3
          );
          const lonLat = ellipsoid.cartesianToCartographic(
            value,
            scratchProjectTo2DCartographic
          );
          if (!defined_default(lonLat)) {
            throw new DeveloperError_default(
              `Could not project point (${value.x}, ${value.y}, ${value.z}) to 2D.`
            );
          }
          const projectedLonLat = projection.project(
            lonLat,
            scratchProjectTo2DCartesian3
          );
          projectedValues[index++] = projectedLonLat.x;
          projectedValues[index++] = projectedLonLat.y;
          projectedValues[index++] = projectedLonLat.z;
        }
        geometry.attributes[attributeName3D] = attribute;
        geometry.attributes[attributeName2D] = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.DOUBLE,
          componentsPerAttribute: 3,
          values: projectedValues
        });
        delete geometry.attributes[attributeName];
        return geometry;
      };
      encodedResult = {
        high: 0,
        low: 0
      };
      GeometryPipeline.encodeAttribute = function(geometry, attributeName, attributeHighName, attributeLowName) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        if (!defined_default(attributeName)) {
          throw new DeveloperError_default("attributeName is required.");
        }
        if (!defined_default(attributeHighName)) {
          throw new DeveloperError_default("attributeHighName is required.");
        }
        if (!defined_default(attributeLowName)) {
          throw new DeveloperError_default("attributeLowName is required.");
        }
        if (!defined_default(geometry.attributes[attributeName])) {
          throw new DeveloperError_default(
            `geometry must have attribute matching the attributeName argument: ${attributeName}.`
          );
        }
        if (geometry.attributes[attributeName].componentDatatype !== ComponentDatatype_default.DOUBLE) {
          throw new DeveloperError_default(
            "The attribute componentDatatype must be ComponentDatatype.DOUBLE."
          );
        }
        const attribute = geometry.attributes[attributeName];
        const values = attribute.values;
        const length = values.length;
        const highValues = new Float32Array(length);
        const lowValues = new Float32Array(length);
        for (let i = 0; i < length; ++i) {
          EncodedCartesian3_default.encode(values[i], encodedResult);
          highValues[i] = encodedResult.high;
          lowValues[i] = encodedResult.low;
        }
        const componentsPerAttribute = attribute.componentsPerAttribute;
        geometry.attributes[attributeHighName] = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute,
          values: highValues
        });
        geometry.attributes[attributeLowName] = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute,
          values: lowValues
        });
        delete geometry.attributes[attributeName];
        return geometry;
      };
      scratchCartesian33 = new Cartesian3_default();
      inverseTranspose = new Matrix4_default();
      normalMatrix = new Matrix3_default();
      GeometryPipeline.transformToWorldCoordinates = function(instance) {
        if (!defined_default(instance)) {
          throw new DeveloperError_default("instance is required.");
        }
        const modelMatrix = instance.modelMatrix;
        if (Matrix4_default.equals(modelMatrix, Matrix4_default.IDENTITY)) {
          return instance;
        }
        const attributes = instance.geometry.attributes;
        transformPoint(modelMatrix, attributes.position);
        transformPoint(modelMatrix, attributes.prevPosition);
        transformPoint(modelMatrix, attributes.nextPosition);
        if (defined_default(attributes.normal) || defined_default(attributes.tangent) || defined_default(attributes.bitangent)) {
          Matrix4_default.inverse(modelMatrix, inverseTranspose);
          Matrix4_default.transpose(inverseTranspose, inverseTranspose);
          Matrix4_default.getMatrix3(inverseTranspose, normalMatrix);
          transformVector(normalMatrix, attributes.normal);
          transformVector(normalMatrix, attributes.tangent);
          transformVector(normalMatrix, attributes.bitangent);
        }
        const boundingSphere = instance.geometry.boundingSphere;
        if (defined_default(boundingSphere)) {
          instance.geometry.boundingSphere = BoundingSphere_default.transform(
            boundingSphere,
            modelMatrix,
            boundingSphere
          );
        }
        instance.modelMatrix = Matrix4_default.clone(Matrix4_default.IDENTITY);
        return instance;
      };
      tempScratch = new Cartesian3_default();
      GeometryPipeline.combineInstances = function(instances) {
        if (!defined_default(instances) || instances.length < 1) {
          throw new DeveloperError_default(
            "instances is required and must have length greater than zero."
          );
        }
        const instanceGeometry = [];
        const instanceSplitGeometry = [];
        const length = instances.length;
        for (let i = 0; i < length; ++i) {
          const instance = instances[i];
          if (defined_default(instance.geometry)) {
            instanceGeometry.push(instance);
          } else if (defined_default(instance.westHemisphereGeometry) && defined_default(instance.eastHemisphereGeometry)) {
            instanceSplitGeometry.push(instance);
          }
        }
        const geometries = [];
        if (instanceGeometry.length > 0) {
          geometries.push(combineGeometries(instanceGeometry, "geometry"));
        }
        if (instanceSplitGeometry.length > 0) {
          geometries.push(
            combineGeometries(instanceSplitGeometry, "westHemisphereGeometry")
          );
          geometries.push(
            combineGeometries(instanceSplitGeometry, "eastHemisphereGeometry")
          );
        }
        return geometries;
      };
      normal = new Cartesian3_default();
      v0 = new Cartesian3_default();
      v1 = new Cartesian3_default();
      v2 = new Cartesian3_default();
      GeometryPipeline.computeNormal = function(geometry) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        if (!defined_default(geometry.attributes.position) || !defined_default(geometry.attributes.position.values)) {
          throw new DeveloperError_default(
            "geometry.attributes.position.values is required."
          );
        }
        if (!defined_default(geometry.indices)) {
          throw new DeveloperError_default("geometry.indices is required.");
        }
        if (geometry.indices.length < 2 || geometry.indices.length % 3 !== 0) {
          throw new DeveloperError_default(
            "geometry.indices length must be greater than 0 and be a multiple of 3."
          );
        }
        if (geometry.primitiveType !== PrimitiveType_default.TRIANGLES) {
          throw new DeveloperError_default(
            "geometry.primitiveType must be PrimitiveType.TRIANGLES."
          );
        }
        const indices = geometry.indices;
        const attributes = geometry.attributes;
        const vertices = attributes.position.values;
        const numVertices = attributes.position.values.length / 3;
        const numIndices = indices.length;
        const normalsPerVertex = new Array(numVertices);
        const normalsPerTriangle = new Array(numIndices / 3);
        const normalIndices = new Array(numIndices);
        let i;
        for (i = 0; i < numVertices; i++) {
          normalsPerVertex[i] = {
            indexOffset: 0,
            count: 0,
            currentCount: 0
          };
        }
        let j = 0;
        for (i = 0; i < numIndices; i += 3) {
          const i0 = indices[i];
          const i1 = indices[i + 1];
          const i2 = indices[i + 2];
          const i03 = i0 * 3;
          const i13 = i1 * 3;
          const i23 = i2 * 3;
          v0.x = vertices[i03];
          v0.y = vertices[i03 + 1];
          v0.z = vertices[i03 + 2];
          v1.x = vertices[i13];
          v1.y = vertices[i13 + 1];
          v1.z = vertices[i13 + 2];
          v2.x = vertices[i23];
          v2.y = vertices[i23 + 1];
          v2.z = vertices[i23 + 2];
          normalsPerVertex[i0].count++;
          normalsPerVertex[i1].count++;
          normalsPerVertex[i2].count++;
          Cartesian3_default.subtract(v1, v0, v1);
          Cartesian3_default.subtract(v2, v0, v2);
          normalsPerTriangle[j] = Cartesian3_default.cross(v1, v2, new Cartesian3_default());
          j++;
        }
        let indexOffset = 0;
        for (i = 0; i < numVertices; i++) {
          normalsPerVertex[i].indexOffset += indexOffset;
          indexOffset += normalsPerVertex[i].count;
        }
        j = 0;
        let vertexNormalData;
        for (i = 0; i < numIndices; i += 3) {
          vertexNormalData = normalsPerVertex[indices[i]];
          let index = vertexNormalData.indexOffset + vertexNormalData.currentCount;
          normalIndices[index] = j;
          vertexNormalData.currentCount++;
          vertexNormalData = normalsPerVertex[indices[i + 1]];
          index = vertexNormalData.indexOffset + vertexNormalData.currentCount;
          normalIndices[index] = j;
          vertexNormalData.currentCount++;
          vertexNormalData = normalsPerVertex[indices[i + 2]];
          index = vertexNormalData.indexOffset + vertexNormalData.currentCount;
          normalIndices[index] = j;
          vertexNormalData.currentCount++;
          j++;
        }
        const normalValues = new Float32Array(numVertices * 3);
        for (i = 0; i < numVertices; i++) {
          const i3 = i * 3;
          vertexNormalData = normalsPerVertex[i];
          Cartesian3_default.clone(Cartesian3_default.ZERO, normal);
          if (vertexNormalData.count > 0) {
            for (j = 0; j < vertexNormalData.count; j++) {
              Cartesian3_default.add(
                normal,
                normalsPerTriangle[normalIndices[vertexNormalData.indexOffset + j]],
                normal
              );
            }
            if (Cartesian3_default.equalsEpsilon(Cartesian3_default.ZERO, normal, Math_default.EPSILON10)) {
              Cartesian3_default.clone(
                normalsPerTriangle[normalIndices[vertexNormalData.indexOffset]],
                normal
              );
            }
          }
          if (Cartesian3_default.equalsEpsilon(Cartesian3_default.ZERO, normal, Math_default.EPSILON10)) {
            normal.z = 1;
          }
          Cartesian3_default.normalize(normal, normal);
          normalValues[i3] = normal.x;
          normalValues[i3 + 1] = normal.y;
          normalValues[i3 + 2] = normal.z;
        }
        geometry.attributes.normal = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 3,
          values: normalValues
        });
        return geometry;
      };
      normalScratch2 = new Cartesian3_default();
      normalScale = new Cartesian3_default();
      tScratch = new Cartesian3_default();
      GeometryPipeline.computeTangentAndBitangent = function(geometry) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        const attributes = geometry.attributes;
        const indices = geometry.indices;
        if (!defined_default(attributes.position) || !defined_default(attributes.position.values)) {
          throw new DeveloperError_default(
            "geometry.attributes.position.values is required."
          );
        }
        if (!defined_default(attributes.normal) || !defined_default(attributes.normal.values)) {
          throw new DeveloperError_default("geometry.attributes.normal.values is required.");
        }
        if (!defined_default(attributes.st) || !defined_default(attributes.st.values)) {
          throw new DeveloperError_default("geometry.attributes.st.values is required.");
        }
        if (!defined_default(indices)) {
          throw new DeveloperError_default("geometry.indices is required.");
        }
        if (indices.length < 2 || indices.length % 3 !== 0) {
          throw new DeveloperError_default(
            "geometry.indices length must be greater than 0 and be a multiple of 3."
          );
        }
        if (geometry.primitiveType !== PrimitiveType_default.TRIANGLES) {
          throw new DeveloperError_default(
            "geometry.primitiveType must be PrimitiveType.TRIANGLES."
          );
        }
        const vertices = geometry.attributes.position.values;
        const normals = geometry.attributes.normal.values;
        const st = geometry.attributes.st.values;
        const numVertices = geometry.attributes.position.values.length / 3;
        const numIndices = indices.length;
        const tan1 = new Array(numVertices * 3);
        let i;
        for (i = 0; i < tan1.length; i++) {
          tan1[i] = 0;
        }
        let i03;
        let i13;
        let i23;
        for (i = 0; i < numIndices; i += 3) {
          const i0 = indices[i];
          const i1 = indices[i + 1];
          const i2 = indices[i + 2];
          i03 = i0 * 3;
          i13 = i1 * 3;
          i23 = i2 * 3;
          const i02 = i0 * 2;
          const i12 = i1 * 2;
          const i22 = i2 * 2;
          const ux = vertices[i03];
          const uy = vertices[i03 + 1];
          const uz = vertices[i03 + 2];
          const wx = st[i02];
          const wy = st[i02 + 1];
          const t1 = st[i12 + 1] - wy;
          const t2 = st[i22 + 1] - wy;
          const r = 1 / ((st[i12] - wx) * t2 - (st[i22] - wx) * t1);
          const sdirx = (t2 * (vertices[i13] - ux) - t1 * (vertices[i23] - ux)) * r;
          const sdiry = (t2 * (vertices[i13 + 1] - uy) - t1 * (vertices[i23 + 1] - uy)) * r;
          const sdirz = (t2 * (vertices[i13 + 2] - uz) - t1 * (vertices[i23 + 2] - uz)) * r;
          tan1[i03] += sdirx;
          tan1[i03 + 1] += sdiry;
          tan1[i03 + 2] += sdirz;
          tan1[i13] += sdirx;
          tan1[i13 + 1] += sdiry;
          tan1[i13 + 2] += sdirz;
          tan1[i23] += sdirx;
          tan1[i23 + 1] += sdiry;
          tan1[i23 + 2] += sdirz;
        }
        const tangentValues = new Float32Array(numVertices * 3);
        const bitangentValues = new Float32Array(numVertices * 3);
        for (i = 0; i < numVertices; i++) {
          i03 = i * 3;
          i13 = i03 + 1;
          i23 = i03 + 2;
          const n = Cartesian3_default.fromArray(normals, i03, normalScratch2);
          const t = Cartesian3_default.fromArray(tan1, i03, tScratch);
          const scalar = Cartesian3_default.dot(n, t);
          Cartesian3_default.multiplyByScalar(n, scalar, normalScale);
          Cartesian3_default.normalize(Cartesian3_default.subtract(t, normalScale, t), t);
          tangentValues[i03] = t.x;
          tangentValues[i13] = t.y;
          tangentValues[i23] = t.z;
          Cartesian3_default.normalize(Cartesian3_default.cross(n, t, t), t);
          bitangentValues[i03] = t.x;
          bitangentValues[i13] = t.y;
          bitangentValues[i23] = t.z;
        }
        geometry.attributes.tangent = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 3,
          values: tangentValues
        });
        geometry.attributes.bitangent = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 3,
          values: bitangentValues
        });
        return geometry;
      };
      scratchCartesian22 = new Cartesian2_default();
      toEncode1 = new Cartesian3_default();
      toEncode2 = new Cartesian3_default();
      toEncode3 = new Cartesian3_default();
      encodeResult2 = new Cartesian2_default();
      GeometryPipeline.compressVertices = function(geometry) {
        if (!defined_default(geometry)) {
          throw new DeveloperError_default("geometry is required.");
        }
        const extrudeAttribute = geometry.attributes.extrudeDirection;
        let i;
        let numVertices;
        if (defined_default(extrudeAttribute)) {
          const extrudeDirections = extrudeAttribute.values;
          numVertices = extrudeDirections.length / 3;
          const compressedDirections = new Float32Array(numVertices * 2);
          let i2 = 0;
          for (i = 0; i < numVertices; ++i) {
            Cartesian3_default.fromArray(extrudeDirections, i * 3, toEncode1);
            if (Cartesian3_default.equals(toEncode1, Cartesian3_default.ZERO)) {
              i2 += 2;
              continue;
            }
            encodeResult2 = AttributeCompression_default.octEncodeInRange(
              toEncode1,
              65535,
              encodeResult2
            );
            compressedDirections[i2++] = encodeResult2.x;
            compressedDirections[i2++] = encodeResult2.y;
          }
          geometry.attributes.compressedAttributes = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 2,
            values: compressedDirections
          });
          delete geometry.attributes.extrudeDirection;
          return geometry;
        }
        const normalAttribute = geometry.attributes.normal;
        const stAttribute = geometry.attributes.st;
        const hasNormal = defined_default(normalAttribute);
        const hasSt = defined_default(stAttribute);
        if (!hasNormal && !hasSt) {
          return geometry;
        }
        const tangentAttribute = geometry.attributes.tangent;
        const bitangentAttribute = geometry.attributes.bitangent;
        const hasTangent = defined_default(tangentAttribute);
        const hasBitangent = defined_default(bitangentAttribute);
        let normals;
        let st;
        let tangents;
        let bitangents;
        if (hasNormal) {
          normals = normalAttribute.values;
        }
        if (hasSt) {
          st = stAttribute.values;
        }
        if (hasTangent) {
          tangents = tangentAttribute.values;
        }
        if (hasBitangent) {
          bitangents = bitangentAttribute.values;
        }
        const length = hasNormal ? normals.length : st.length;
        const numComponents = hasNormal ? 3 : 2;
        numVertices = length / numComponents;
        let compressedLength = numVertices;
        let numCompressedComponents = hasSt && hasNormal ? 2 : 1;
        numCompressedComponents += hasTangent || hasBitangent ? 1 : 0;
        compressedLength *= numCompressedComponents;
        const compressedAttributes = new Float32Array(compressedLength);
        let normalIndex = 0;
        for (i = 0; i < numVertices; ++i) {
          if (hasSt) {
            Cartesian2_default.fromArray(st, i * 2, scratchCartesian22);
            compressedAttributes[normalIndex++] = AttributeCompression_default.compressTextureCoordinates(scratchCartesian22);
          }
          const index = i * 3;
          if (hasNormal && defined_default(tangents) && defined_default(bitangents)) {
            Cartesian3_default.fromArray(normals, index, toEncode1);
            Cartesian3_default.fromArray(tangents, index, toEncode2);
            Cartesian3_default.fromArray(bitangents, index, toEncode3);
            AttributeCompression_default.octPack(
              toEncode1,
              toEncode2,
              toEncode3,
              scratchCartesian22
            );
            compressedAttributes[normalIndex++] = scratchCartesian22.x;
            compressedAttributes[normalIndex++] = scratchCartesian22.y;
          } else {
            if (hasNormal) {
              Cartesian3_default.fromArray(normals, index, toEncode1);
              compressedAttributes[normalIndex++] = AttributeCompression_default.octEncodeFloat(toEncode1);
            }
            if (hasTangent) {
              Cartesian3_default.fromArray(tangents, index, toEncode1);
              compressedAttributes[normalIndex++] = AttributeCompression_default.octEncodeFloat(toEncode1);
            }
            if (hasBitangent) {
              Cartesian3_default.fromArray(bitangents, index, toEncode1);
              compressedAttributes[normalIndex++] = AttributeCompression_default.octEncodeFloat(toEncode1);
            }
          }
        }
        geometry.attributes.compressedAttributes = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: numCompressedComponents,
          values: compressedAttributes
        });
        if (hasNormal) {
          delete geometry.attributes.normal;
        }
        if (hasSt) {
          delete geometry.attributes.st;
        }
        if (hasBitangent) {
          delete geometry.attributes.bitangent;
        }
        if (hasTangent) {
          delete geometry.attributes.tangent;
        }
        return geometry;
      };
      c3 = new Cartesian3_default();
      u1 = new Cartesian3_default();
      u2 = new Cartesian3_default();
      q1 = new Cartesian3_default();
      q2 = new Cartesian3_default();
      splitTriangleResult = {
        positions: new Array(7),
        indices: new Array(3 * 3)
      };
      interpolateAndPackCartesian4 = generateBarycentricInterpolateFunction(
        Cartesian4_default,
        4
      );
      interpolateAndPackCartesian3 = generateBarycentricInterpolateFunction(
        Cartesian3_default,
        3
      );
      interpolateAndPackCartesian2 = generateBarycentricInterpolateFunction(
        Cartesian2_default,
        2
      );
      interpolateAndPackBoolean = function(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex) {
        const v12 = sourceValues[i0] * coords.x;
        const v22 = sourceValues[i1] * coords.y;
        const v3 = sourceValues[i2] * coords.z;
        currentValues[insertedIndex] = v12 + v22 + v3 > Math_default.EPSILON6 ? 1 : 0;
      };
      p0Scratch = new Cartesian3_default();
      p1Scratch = new Cartesian3_default();
      p2Scratch = new Cartesian3_default();
      barycentricScratch = new Cartesian3_default();
      NAMED_ATTRIBUTES = {
        position: true,
        normal: true,
        bitangent: true,
        tangent: true,
        st: true,
        extrudeDirection: true,
        applyOffset: true
      };
      xzPlane = Plane_default.fromPointNormal(Cartesian3_default.ZERO, Cartesian3_default.UNIT_Y);
      offsetScratch = new Cartesian3_default();
      offsetPointScratch = new Cartesian3_default();
      cartesian2Scratch0 = new Cartesian2_default();
      cartesian2Scratch1 = new Cartesian2_default();
      cartesian3Scratch0 = new Cartesian3_default();
      cartesian3Scratch2 = new Cartesian3_default();
      cartesian3Scratch3 = new Cartesian3_default();
      cartesian3Scratch4 = new Cartesian3_default();
      cartesian3Scratch5 = new Cartesian3_default();
      cartesian3Scratch6 = new Cartesian3_default();
      cartesian4Scratch0 = new Cartesian4_default();
      offsetScalar = 5 * Math_default.EPSILON9;
      coplanarOffset = Math_default.EPSILON6;
      GeometryPipeline.splitLongitude = function(instance) {
        if (!defined_default(instance)) {
          throw new DeveloperError_default("instance is required.");
        }
        const geometry = instance.geometry;
        const boundingSphere = geometry.boundingSphere;
        if (defined_default(boundingSphere)) {
          const minX = boundingSphere.center.x - boundingSphere.radius;
          if (minX > 0 || BoundingSphere_default.intersectPlane(boundingSphere, Plane_default.ORIGIN_ZX_PLANE) !== Intersect_default.INTERSECTING) {
            return instance;
          }
        }
        if (geometry.geometryType !== GeometryType_default.NONE) {
          switch (geometry.geometryType) {
            case GeometryType_default.POLYLINES:
              splitLongitudePolyline(instance);
              break;
            case GeometryType_default.TRIANGLES:
              splitLongitudeTriangles(instance);
              break;
            case GeometryType_default.LINES:
              splitLongitudeLines(instance);
              break;
          }
        } else {
          indexPrimitive(geometry);
          if (geometry.primitiveType === PrimitiveType_default.TRIANGLES) {
            splitLongitudeTriangles(instance);
          } else if (geometry.primitiveType === PrimitiveType_default.LINES) {
            splitLongitudeLines(instance);
          }
        }
        return instance;
      };
      GeometryPipeline_default = GeometryPipeline;
    }
  });

  // packages/engine/Source/Core/OffsetGeometryInstanceAttribute.js
  function OffsetGeometryInstanceAttribute(x, y, z) {
    x = defaultValue_default(x, 0);
    y = defaultValue_default(y, 0);
    z = defaultValue_default(z, 0);
    this.value = new Float32Array([x, y, z]);
  }
  var OffsetGeometryInstanceAttribute_default;
  var init_OffsetGeometryInstanceAttribute = __esm({
    "packages/engine/Source/Core/OffsetGeometryInstanceAttribute.js"() {
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      Object.defineProperties(OffsetGeometryInstanceAttribute.prototype, {
        /**
         * The datatype of each component in the attribute, e.g., individual elements in
         * {@link OffsetGeometryInstanceAttribute#value}.
         *
         * @memberof OffsetGeometryInstanceAttribute.prototype
         *
         * @type {ComponentDatatype}
         * @readonly
         *
         * @default {@link ComponentDatatype.FLOAT}
         */
        componentDatatype: {
          get: function() {
            return ComponentDatatype_default.FLOAT;
          }
        },
        /**
         * The number of components in the attributes, i.e., {@link OffsetGeometryInstanceAttribute#value}.
         *
         * @memberof OffsetGeometryInstanceAttribute.prototype
         *
         * @type {number}
         * @readonly
         *
         * @default 3
         */
        componentsPerAttribute: {
          get: function() {
            return 3;
          }
        },
        /**
         * When <code>true</code> and <code>componentDatatype</code> is an integer format,
         * indicate that the components should be mapped to the range [0, 1] (unsigned)
         * or [-1, 1] (signed) when they are accessed as floating-point for rendering.
         *
         * @memberof OffsetGeometryInstanceAttribute.prototype
         *
         * @type {boolean}
         * @readonly
         *
         * @default false
         */
        normalize: {
          get: function() {
            return false;
          }
        }
      });
      OffsetGeometryInstanceAttribute.fromCartesian3 = function(offset) {
        Check_default.defined("offset", offset);
        return new OffsetGeometryInstanceAttribute(offset.x, offset.y, offset.z);
      };
      OffsetGeometryInstanceAttribute.toValue = function(offset, result) {
        Check_default.defined("offset", offset);
        if (!defined_default(result)) {
          result = new Float32Array([offset.x, offset.y, offset.z]);
        }
        result[0] = offset.x;
        result[1] = offset.y;
        result[2] = offset.z;
        return result;
      };
      OffsetGeometryInstanceAttribute_default = OffsetGeometryInstanceAttribute;
    }
  });

  // packages/engine/Source/Core/WebMercatorProjection.js
  function WebMercatorProjection(ellipsoid) {
    this._ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
    this._semimajorAxis = this._ellipsoid.maximumRadius;
    this._oneOverSemimajorAxis = 1 / this._semimajorAxis;
  }
  var WebMercatorProjection_default;
  var init_WebMercatorProjection = __esm({
    "packages/engine/Source/Core/WebMercatorProjection.js"() {
      init_Cartesian3();
      init_Cartographic();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Math();
      Object.defineProperties(WebMercatorProjection.prototype, {
        /**
         * Gets the {@link Ellipsoid}.
         *
         * @memberof WebMercatorProjection.prototype
         *
         * @type {Ellipsoid}
         * @readonly
         */
        ellipsoid: {
          get: function() {
            return this._ellipsoid;
          }
        }
      });
      WebMercatorProjection.mercatorAngleToGeodeticLatitude = function(mercatorAngle) {
        return Math_default.PI_OVER_TWO - 2 * Math.atan(Math.exp(-mercatorAngle));
      };
      WebMercatorProjection.geodeticLatitudeToMercatorAngle = function(latitude) {
        if (latitude > WebMercatorProjection.MaximumLatitude) {
          latitude = WebMercatorProjection.MaximumLatitude;
        } else if (latitude < -WebMercatorProjection.MaximumLatitude) {
          latitude = -WebMercatorProjection.MaximumLatitude;
        }
        const sinLatitude = Math.sin(latitude);
        return 0.5 * Math.log((1 + sinLatitude) / (1 - sinLatitude));
      };
      WebMercatorProjection.MaximumLatitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(
        Math.PI
      );
      WebMercatorProjection.prototype.project = function(cartographic2, result) {
        const semimajorAxis = this._semimajorAxis;
        const x = cartographic2.longitude * semimajorAxis;
        const y = WebMercatorProjection.geodeticLatitudeToMercatorAngle(
          cartographic2.latitude
        ) * semimajorAxis;
        const z = cartographic2.height;
        if (!defined_default(result)) {
          return new Cartesian3_default(x, y, z);
        }
        result.x = x;
        result.y = y;
        result.z = z;
        return result;
      };
      WebMercatorProjection.prototype.unproject = function(cartesian11, result) {
        if (!defined_default(cartesian11)) {
          throw new DeveloperError_default("cartesian is required");
        }
        const oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;
        const longitude = cartesian11.x * oneOverEarthSemimajorAxis;
        const latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(
          cartesian11.y * oneOverEarthSemimajorAxis
        );
        const height = cartesian11.z;
        if (!defined_default(result)) {
          return new Cartographic_default(longitude, latitude, height);
        }
        result.longitude = longitude;
        result.latitude = latitude;
        result.height = height;
        return result;
      };
      WebMercatorProjection_default = WebMercatorProjection;
    }
  });

  // packages/engine/Source/Scene/PrimitivePipeline.js
  function transformToWorldCoordinates(instances, primitiveModelMatrix, scene3DOnly) {
    let toWorld = !scene3DOnly;
    const length = instances.length;
    let i;
    if (!toWorld && length > 1) {
      const modelMatrix = instances[0].modelMatrix;
      for (i = 1; i < length; ++i) {
        if (!Matrix4_default.equals(modelMatrix, instances[i].modelMatrix)) {
          toWorld = true;
          break;
        }
      }
    }
    if (toWorld) {
      for (i = 0; i < length; ++i) {
        if (defined_default(instances[i].geometry)) {
          GeometryPipeline_default.transformToWorldCoordinates(instances[i]);
        }
      }
    } else {
      Matrix4_default.multiplyTransformation(
        primitiveModelMatrix,
        instances[0].modelMatrix,
        primitiveModelMatrix
      );
    }
  }
  function addGeometryBatchId(geometry, batchId) {
    const attributes = geometry.attributes;
    const positionAttr = attributes.position;
    const numberOfComponents = positionAttr.values.length / positionAttr.componentsPerAttribute;
    attributes.batchId = new GeometryAttribute_default({
      componentDatatype: ComponentDatatype_default.FLOAT,
      componentsPerAttribute: 1,
      values: new Float32Array(numberOfComponents)
    });
    const values = attributes.batchId.values;
    for (let j = 0; j < numberOfComponents; ++j) {
      values[j] = batchId;
    }
  }
  function addBatchIds(instances) {
    const length = instances.length;
    for (let i = 0; i < length; ++i) {
      const instance = instances[i];
      if (defined_default(instance.geometry)) {
        addGeometryBatchId(instance.geometry, i);
      } else if (defined_default(instance.westHemisphereGeometry) && defined_default(instance.eastHemisphereGeometry)) {
        addGeometryBatchId(instance.westHemisphereGeometry, i);
        addGeometryBatchId(instance.eastHemisphereGeometry, i);
      }
    }
  }
  function geometryPipeline(parameters) {
    const instances = parameters.instances;
    const projection = parameters.projection;
    const uintIndexSupport = parameters.elementIndexUintSupported;
    const scene3DOnly = parameters.scene3DOnly;
    const vertexCacheOptimize = parameters.vertexCacheOptimize;
    const compressVertices = parameters.compressVertices;
    const modelMatrix = parameters.modelMatrix;
    let i;
    let geometry;
    let primitiveType;
    let length = instances.length;
    for (i = 0; i < length; ++i) {
      if (defined_default(instances[i].geometry)) {
        primitiveType = instances[i].geometry.primitiveType;
        break;
      }
    }
    for (i = 1; i < length; ++i) {
      if (defined_default(instances[i].geometry) && instances[i].geometry.primitiveType !== primitiveType) {
        throw new DeveloperError_default(
          "All instance geometries must have the same primitiveType."
        );
      }
    }
    transformToWorldCoordinates(instances, modelMatrix, scene3DOnly);
    if (!scene3DOnly) {
      for (i = 0; i < length; ++i) {
        if (defined_default(instances[i].geometry)) {
          GeometryPipeline_default.splitLongitude(instances[i]);
        }
      }
    }
    addBatchIds(instances);
    if (vertexCacheOptimize) {
      for (i = 0; i < length; ++i) {
        const instance = instances[i];
        if (defined_default(instance.geometry)) {
          GeometryPipeline_default.reorderForPostVertexCache(instance.geometry);
          GeometryPipeline_default.reorderForPreVertexCache(instance.geometry);
        } else if (defined_default(instance.westHemisphereGeometry) && defined_default(instance.eastHemisphereGeometry)) {
          GeometryPipeline_default.reorderForPostVertexCache(
            instance.westHemisphereGeometry
          );
          GeometryPipeline_default.reorderForPreVertexCache(
            instance.westHemisphereGeometry
          );
          GeometryPipeline_default.reorderForPostVertexCache(
            instance.eastHemisphereGeometry
          );
          GeometryPipeline_default.reorderForPreVertexCache(
            instance.eastHemisphereGeometry
          );
        }
      }
    }
    let geometries = GeometryPipeline_default.combineInstances(instances);
    length = geometries.length;
    for (i = 0; i < length; ++i) {
      geometry = geometries[i];
      const attributes = geometry.attributes;
      if (!scene3DOnly) {
        for (const name in attributes) {
          if (attributes.hasOwnProperty(name) && attributes[name].componentDatatype === ComponentDatatype_default.DOUBLE) {
            const name3D = `${name}3D`;
            const name2D = `${name}2D`;
            GeometryPipeline_default.projectTo2D(
              geometry,
              name,
              name3D,
              name2D,
              projection
            );
            if (defined_default(geometry.boundingSphere) && name === "position") {
              geometry.boundingSphereCV = BoundingSphere_default.fromVertices(
                geometry.attributes.position2D.values
              );
            }
            GeometryPipeline_default.encodeAttribute(
              geometry,
              name3D,
              `${name3D}High`,
              `${name3D}Low`
            );
            GeometryPipeline_default.encodeAttribute(
              geometry,
              name2D,
              `${name2D}High`,
              `${name2D}Low`
            );
          }
        }
      } else {
        for (const name in attributes) {
          if (attributes.hasOwnProperty(name) && attributes[name].componentDatatype === ComponentDatatype_default.DOUBLE) {
            GeometryPipeline_default.encodeAttribute(
              geometry,
              name,
              `${name}3DHigh`,
              `${name}3DLow`
            );
          }
        }
      }
      if (compressVertices) {
        GeometryPipeline_default.compressVertices(geometry);
      }
    }
    if (!uintIndexSupport) {
      let splitGeometries = [];
      length = geometries.length;
      for (i = 0; i < length; ++i) {
        geometry = geometries[i];
        splitGeometries = splitGeometries.concat(
          GeometryPipeline_default.fitToUnsignedShortIndices(geometry)
        );
      }
      geometries = splitGeometries;
    }
    return geometries;
  }
  function createPickOffsets(instances, geometryName, geometries, pickOffsets) {
    let offset;
    let indexCount;
    let geometryIndex;
    const offsetIndex = pickOffsets.length - 1;
    if (offsetIndex >= 0) {
      const pickOffset = pickOffsets[offsetIndex];
      offset = pickOffset.offset + pickOffset.count;
      geometryIndex = pickOffset.index;
      indexCount = geometries[geometryIndex].indices.length;
    } else {
      offset = 0;
      geometryIndex = 0;
      indexCount = geometries[geometryIndex].indices.length;
    }
    const length = instances.length;
    for (let i = 0; i < length; ++i) {
      const instance = instances[i];
      const geometry = instance[geometryName];
      if (!defined_default(geometry)) {
        continue;
      }
      const count = geometry.indices.length;
      if (offset + count > indexCount) {
        offset = 0;
        indexCount = geometries[++geometryIndex].indices.length;
      }
      pickOffsets.push({
        index: geometryIndex,
        offset,
        count
      });
      offset += count;
    }
  }
  function createInstancePickOffsets(instances, geometries) {
    const pickOffsets = [];
    createPickOffsets(instances, "geometry", geometries, pickOffsets);
    createPickOffsets(
      instances,
      "westHemisphereGeometry",
      geometries,
      pickOffsets
    );
    createPickOffsets(
      instances,
      "eastHemisphereGeometry",
      geometries,
      pickOffsets
    );
    return pickOffsets;
  }
  function transferGeometry(geometry, transferableObjects) {
    const attributes = geometry.attributes;
    for (const name in attributes) {
      if (attributes.hasOwnProperty(name)) {
        const attribute = attributes[name];
        if (defined_default(attribute) && defined_default(attribute.values)) {
          transferableObjects.push(attribute.values.buffer);
        }
      }
    }
    if (defined_default(geometry.indices)) {
      transferableObjects.push(geometry.indices.buffer);
    }
  }
  function transferGeometries(geometries, transferableObjects) {
    const length = geometries.length;
    for (let i = 0; i < length; ++i) {
      transferGeometry(geometries[i], transferableObjects);
    }
  }
  function countCreateGeometryResults(items) {
    let count = 1;
    const length = items.length;
    for (let i = 0; i < length; i++) {
      const geometry = items[i];
      ++count;
      if (!defined_default(geometry)) {
        continue;
      }
      const attributes = geometry.attributes;
      count += 7 + 2 * BoundingSphere_default.packedLength + (defined_default(geometry.indices) ? geometry.indices.length : 0);
      for (const property in attributes) {
        if (attributes.hasOwnProperty(property) && defined_default(attributes[property])) {
          const attribute = attributes[property];
          count += 5 + attribute.values.length;
        }
      }
    }
    return count;
  }
  function packInstancesForCombine(instances, transferableObjects) {
    const length = instances.length;
    const packedData = new Float64Array(1 + length * 19);
    let count = 0;
    packedData[count++] = length;
    for (let i = 0; i < length; i++) {
      const instance = instances[i];
      Matrix4_default.pack(instance.modelMatrix, packedData, count);
      count += Matrix4_default.packedLength;
      if (defined_default(instance.attributes) && defined_default(instance.attributes.offset)) {
        const values = instance.attributes.offset.value;
        packedData[count] = values[0];
        packedData[count + 1] = values[1];
        packedData[count + 2] = values[2];
      }
      count += 3;
    }
    transferableObjects.push(packedData.buffer);
    return packedData;
  }
  function unpackInstancesForCombine(data) {
    const packedInstances = data;
    const result = new Array(packedInstances[0]);
    let count = 0;
    let i = 1;
    while (i < packedInstances.length) {
      const modelMatrix = Matrix4_default.unpack(packedInstances, i);
      let attributes;
      i += Matrix4_default.packedLength;
      if (defined_default(packedInstances[i])) {
        attributes = {
          offset: new OffsetGeometryInstanceAttribute_default(
            packedInstances[i],
            packedInstances[i + 1],
            packedInstances[i + 2]
          )
        };
      }
      i += 3;
      result[count++] = {
        modelMatrix,
        attributes
      };
    }
    return result;
  }
  function packBoundingSpheres(boundingSpheres) {
    const length = boundingSpheres.length;
    const bufferLength = 1 + (BoundingSphere_default.packedLength + 1) * length;
    const buffer = new Float32Array(bufferLength);
    let bufferIndex = 0;
    buffer[bufferIndex++] = length;
    for (let i = 0; i < length; ++i) {
      const bs = boundingSpheres[i];
      if (!defined_default(bs)) {
        buffer[bufferIndex++] = 0;
      } else {
        buffer[bufferIndex++] = 1;
        BoundingSphere_default.pack(boundingSpheres[i], buffer, bufferIndex);
      }
      bufferIndex += BoundingSphere_default.packedLength;
    }
    return buffer;
  }
  function unpackBoundingSpheres(buffer) {
    const result = new Array(buffer[0]);
    let count = 0;
    let i = 1;
    while (i < buffer.length) {
      if (buffer[i++] === 1) {
        result[count] = BoundingSphere_default.unpack(buffer, i);
      }
      ++count;
      i += BoundingSphere_default.packedLength;
    }
    return result;
  }
  var PrimitivePipeline, PrimitivePipeline_default;
  var init_PrimitivePipeline = __esm({
    "packages/engine/Source/Scene/PrimitivePipeline.js"() {
      init_BoundingSphere();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_GeographicProjection();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_Matrix4();
      init_OffsetGeometryInstanceAttribute();
      init_WebMercatorProjection();
      PrimitivePipeline = {};
      PrimitivePipeline.combineGeometry = function(parameters) {
        let geometries;
        let attributeLocations;
        const instances = parameters.instances;
        const length = instances.length;
        let pickOffsets;
        let offsetInstanceExtend;
        let hasOffset = false;
        if (length > 0) {
          geometries = geometryPipeline(parameters);
          if (geometries.length > 0) {
            attributeLocations = GeometryPipeline_default.createAttributeLocations(
              geometries[0]
            );
            if (parameters.createPickOffsets) {
              pickOffsets = createInstancePickOffsets(instances, geometries);
            }
          }
          if (defined_default(instances[0].attributes) && defined_default(instances[0].attributes.offset)) {
            offsetInstanceExtend = new Array(length);
            hasOffset = true;
          }
        }
        const boundingSpheres = new Array(length);
        const boundingSpheresCV = new Array(length);
        for (let i = 0; i < length; ++i) {
          const instance = instances[i];
          const geometry = instance.geometry;
          if (defined_default(geometry)) {
            boundingSpheres[i] = geometry.boundingSphere;
            boundingSpheresCV[i] = geometry.boundingSphereCV;
            if (hasOffset) {
              offsetInstanceExtend[i] = instance.geometry.offsetAttribute;
            }
          }
          const eastHemisphereGeometry = instance.eastHemisphereGeometry;
          const westHemisphereGeometry = instance.westHemisphereGeometry;
          if (defined_default(eastHemisphereGeometry) && defined_default(westHemisphereGeometry)) {
            if (defined_default(eastHemisphereGeometry.boundingSphere) && defined_default(westHemisphereGeometry.boundingSphere)) {
              boundingSpheres[i] = BoundingSphere_default.union(
                eastHemisphereGeometry.boundingSphere,
                westHemisphereGeometry.boundingSphere
              );
            }
            if (defined_default(eastHemisphereGeometry.boundingSphereCV) && defined_default(westHemisphereGeometry.boundingSphereCV)) {
              boundingSpheresCV[i] = BoundingSphere_default.union(
                eastHemisphereGeometry.boundingSphereCV,
                westHemisphereGeometry.boundingSphereCV
              );
            }
          }
        }
        return {
          geometries,
          modelMatrix: parameters.modelMatrix,
          attributeLocations,
          pickOffsets,
          offsetInstanceExtend,
          boundingSpheres,
          boundingSpheresCV
        };
      };
      PrimitivePipeline.packCreateGeometryResults = function(items, transferableObjects) {
        const packedData = new Float64Array(countCreateGeometryResults(items));
        const stringTable = [];
        const stringHash = {};
        const length = items.length;
        let count = 0;
        packedData[count++] = length;
        for (let i = 0; i < length; i++) {
          const geometry = items[i];
          const validGeometry = defined_default(geometry);
          packedData[count++] = validGeometry ? 1 : 0;
          if (!validGeometry) {
            continue;
          }
          packedData[count++] = geometry.primitiveType;
          packedData[count++] = geometry.geometryType;
          packedData[count++] = defaultValue_default(geometry.offsetAttribute, -1);
          const validBoundingSphere = defined_default(geometry.boundingSphere) ? 1 : 0;
          packedData[count++] = validBoundingSphere;
          if (validBoundingSphere) {
            BoundingSphere_default.pack(geometry.boundingSphere, packedData, count);
          }
          count += BoundingSphere_default.packedLength;
          const validBoundingSphereCV = defined_default(geometry.boundingSphereCV) ? 1 : 0;
          packedData[count++] = validBoundingSphereCV;
          if (validBoundingSphereCV) {
            BoundingSphere_default.pack(geometry.boundingSphereCV, packedData, count);
          }
          count += BoundingSphere_default.packedLength;
          const attributes = geometry.attributes;
          const attributesToWrite = [];
          for (const property in attributes) {
            if (attributes.hasOwnProperty(property) && defined_default(attributes[property])) {
              attributesToWrite.push(property);
              if (!defined_default(stringHash[property])) {
                stringHash[property] = stringTable.length;
                stringTable.push(property);
              }
            }
          }
          packedData[count++] = attributesToWrite.length;
          for (let q = 0; q < attributesToWrite.length; q++) {
            const name = attributesToWrite[q];
            const attribute = attributes[name];
            packedData[count++] = stringHash[name];
            packedData[count++] = attribute.componentDatatype;
            packedData[count++] = attribute.componentsPerAttribute;
            packedData[count++] = attribute.normalize ? 1 : 0;
            packedData[count++] = attribute.values.length;
            packedData.set(attribute.values, count);
            count += attribute.values.length;
          }
          const indicesLength = defined_default(geometry.indices) ? geometry.indices.length : 0;
          packedData[count++] = indicesLength;
          if (indicesLength > 0) {
            packedData.set(geometry.indices, count);
            count += indicesLength;
          }
        }
        transferableObjects.push(packedData.buffer);
        return {
          stringTable,
          packedData
        };
      };
      PrimitivePipeline.unpackCreateGeometryResults = function(createGeometryResult) {
        const stringTable = createGeometryResult.stringTable;
        const packedGeometry = createGeometryResult.packedData;
        let i;
        const result = new Array(packedGeometry[0]);
        let resultIndex = 0;
        let packedGeometryIndex = 1;
        while (packedGeometryIndex < packedGeometry.length) {
          const valid = packedGeometry[packedGeometryIndex++] === 1;
          if (!valid) {
            result[resultIndex++] = void 0;
            continue;
          }
          const primitiveType = packedGeometry[packedGeometryIndex++];
          const geometryType = packedGeometry[packedGeometryIndex++];
          let offsetAttribute = packedGeometry[packedGeometryIndex++];
          if (offsetAttribute === -1) {
            offsetAttribute = void 0;
          }
          let boundingSphere;
          let boundingSphereCV;
          const validBoundingSphere = packedGeometry[packedGeometryIndex++] === 1;
          if (validBoundingSphere) {
            boundingSphere = BoundingSphere_default.unpack(
              packedGeometry,
              packedGeometryIndex
            );
          }
          packedGeometryIndex += BoundingSphere_default.packedLength;
          const validBoundingSphereCV = packedGeometry[packedGeometryIndex++] === 1;
          if (validBoundingSphereCV) {
            boundingSphereCV = BoundingSphere_default.unpack(
              packedGeometry,
              packedGeometryIndex
            );
          }
          packedGeometryIndex += BoundingSphere_default.packedLength;
          let length;
          let values;
          let componentsPerAttribute;
          const attributes = new GeometryAttributes_default();
          const numAttributes = packedGeometry[packedGeometryIndex++];
          for (i = 0; i < numAttributes; i++) {
            const name = stringTable[packedGeometry[packedGeometryIndex++]];
            const componentDatatype = packedGeometry[packedGeometryIndex++];
            componentsPerAttribute = packedGeometry[packedGeometryIndex++];
            const normalize = packedGeometry[packedGeometryIndex++] !== 0;
            length = packedGeometry[packedGeometryIndex++];
            values = ComponentDatatype_default.createTypedArray(componentDatatype, length);
            for (let valuesIndex = 0; valuesIndex < length; valuesIndex++) {
              values[valuesIndex] = packedGeometry[packedGeometryIndex++];
            }
            attributes[name] = new GeometryAttribute_default({
              componentDatatype,
              componentsPerAttribute,
              normalize,
              values
            });
          }
          let indices;
          length = packedGeometry[packedGeometryIndex++];
          if (length > 0) {
            const numberOfVertices = values.length / componentsPerAttribute;
            indices = IndexDatatype_default.createTypedArray(numberOfVertices, length);
            for (i = 0; i < length; i++) {
              indices[i] = packedGeometry[packedGeometryIndex++];
            }
          }
          result[resultIndex++] = new Geometry_default({
            primitiveType,
            geometryType,
            boundingSphere,
            boundingSphereCV,
            indices,
            attributes,
            offsetAttribute
          });
        }
        return result;
      };
      PrimitivePipeline.packCombineGeometryParameters = function(parameters, transferableObjects) {
        const createGeometryResults = parameters.createGeometryResults;
        const length = createGeometryResults.length;
        for (let i = 0; i < length; i++) {
          transferableObjects.push(createGeometryResults[i].packedData.buffer);
        }
        return {
          createGeometryResults: parameters.createGeometryResults,
          packedInstances: packInstancesForCombine(
            parameters.instances,
            transferableObjects
          ),
          ellipsoid: parameters.ellipsoid,
          isGeographic: parameters.projection instanceof GeographicProjection_default,
          elementIndexUintSupported: parameters.elementIndexUintSupported,
          scene3DOnly: parameters.scene3DOnly,
          vertexCacheOptimize: parameters.vertexCacheOptimize,
          compressVertices: parameters.compressVertices,
          modelMatrix: parameters.modelMatrix,
          createPickOffsets: parameters.createPickOffsets
        };
      };
      PrimitivePipeline.unpackCombineGeometryParameters = function(packedParameters) {
        const instances = unpackInstancesForCombine(packedParameters.packedInstances);
        const createGeometryResults = packedParameters.createGeometryResults;
        const length = createGeometryResults.length;
        let instanceIndex = 0;
        for (let resultIndex = 0; resultIndex < length; resultIndex++) {
          const geometries = PrimitivePipeline.unpackCreateGeometryResults(
            createGeometryResults[resultIndex]
          );
          const geometriesLength = geometries.length;
          for (let geometryIndex = 0; geometryIndex < geometriesLength; geometryIndex++) {
            const geometry = geometries[geometryIndex];
            const instance = instances[instanceIndex];
            instance.geometry = geometry;
            ++instanceIndex;
          }
        }
        const ellipsoid = Ellipsoid_default.clone(packedParameters.ellipsoid);
        const projection = packedParameters.isGeographic ? new GeographicProjection_default(ellipsoid) : new WebMercatorProjection_default(ellipsoid);
        return {
          instances,
          ellipsoid,
          projection,
          elementIndexUintSupported: packedParameters.elementIndexUintSupported,
          scene3DOnly: packedParameters.scene3DOnly,
          vertexCacheOptimize: packedParameters.vertexCacheOptimize,
          compressVertices: packedParameters.compressVertices,
          modelMatrix: Matrix4_default.clone(packedParameters.modelMatrix),
          createPickOffsets: packedParameters.createPickOffsets
        };
      };
      PrimitivePipeline.packCombineGeometryResults = function(results, transferableObjects) {
        if (defined_default(results.geometries)) {
          transferGeometries(results.geometries, transferableObjects);
        }
        const packedBoundingSpheres = packBoundingSpheres(results.boundingSpheres);
        const packedBoundingSpheresCV = packBoundingSpheres(
          results.boundingSpheresCV
        );
        transferableObjects.push(
          packedBoundingSpheres.buffer,
          packedBoundingSpheresCV.buffer
        );
        return {
          geometries: results.geometries,
          attributeLocations: results.attributeLocations,
          modelMatrix: results.modelMatrix,
          pickOffsets: results.pickOffsets,
          offsetInstanceExtend: results.offsetInstanceExtend,
          boundingSpheres: packedBoundingSpheres,
          boundingSpheresCV: packedBoundingSpheresCV
        };
      };
      PrimitivePipeline.unpackCombineGeometryResults = function(packedResult) {
        return {
          geometries: packedResult.geometries,
          attributeLocations: packedResult.attributeLocations,
          modelMatrix: packedResult.modelMatrix,
          pickOffsets: packedResult.pickOffsets,
          offsetInstanceExtend: packedResult.offsetInstanceExtend,
          boundingSpheres: unpackBoundingSpheres(packedResult.boundingSpheres),
          boundingSpheresCV: unpackBoundingSpheres(packedResult.boundingSpheresCV)
        };
      };
      PrimitivePipeline_default = PrimitivePipeline;
    }
  });

  // packages/engine/Source/Core/formatError.js
  function formatError(object) {
    let result;
    const name = object.name;
    const message = object.message;
    if (defined_default(name) && defined_default(message)) {
      result = `${name}: ${message}`;
    } else {
      result = object.toString();
    }
    const stack = object.stack;
    if (defined_default(stack)) {
      result += `
${stack}`;
    }
    return result;
  }
  var formatError_default;
  var init_formatError = __esm({
    "packages/engine/Source/Core/formatError.js"() {
      init_defined();
      formatError_default = formatError;
    }
  });

  // packages/engine/Source/Workers/createTaskProcessorWorker.js
  var createTaskProcessorWorker_exports = {};
  __export(createTaskProcessorWorker_exports, {
    default: () => createTaskProcessorWorker_default
  });
  function createTaskProcessorWorker(workerFunction) {
    async function onMessageHandler({ data }) {
      const transferableObjects = [];
      const responseMessage = {
        id: data.id,
        result: void 0,
        error: void 0
      };
      self.CESIUM_BASE_URL = data.baseUrl;
      try {
        const result = await workerFunction(data.parameters, transferableObjects);
        responseMessage.result = result;
      } catch (error) {
        if (error instanceof Error) {
          responseMessage.error = {
            name: error.name,
            message: error.message,
            stack: error.stack
          };
        } else {
          responseMessage.error = error;
        }
      }
      if (!data.canTransferArrayBuffer) {
        transferableObjects.length = 0;
      }
      try {
        postMessage(responseMessage, transferableObjects);
      } catch (error) {
        responseMessage.result = void 0;
        responseMessage.error = `postMessage failed with error: ${formatError_default(
          error
        )}
  with responseMessage: ${JSON.stringify(responseMessage)}`;
        postMessage(responseMessage);
      }
    }
    function onMessageErrorHandler(event) {
      postMessage({
        id: event.data?.id,
        error: `postMessage failed with error: ${JSON.stringify(event)}`
      });
    }
    self.onmessage = onMessageHandler;
    self.onmessageerror = onMessageErrorHandler;
    return self;
  }
  var createTaskProcessorWorker_default;
  var init_createTaskProcessorWorker = __esm({
    "packages/engine/Source/Workers/createTaskProcessorWorker.js"() {
      init_formatError();
      createTaskProcessorWorker_default = createTaskProcessorWorker;
    }
  });

  // packages/engine/Source/Workers/combineGeometry.js
  var combineGeometry_exports = {};
  __export(combineGeometry_exports, {
    default: () => combineGeometry_default
  });
  function combineGeometry(packedParameters, transferableObjects) {
    const parameters = PrimitivePipeline_default.unpackCombineGeometryParameters(
      packedParameters
    );
    const results = PrimitivePipeline_default.combineGeometry(parameters);
    return PrimitivePipeline_default.packCombineGeometryResults(
      results,
      transferableObjects
    );
  }
  var combineGeometry_default;
  var init_combineGeometry = __esm({
    "packages/engine/Source/Workers/combineGeometry.js"() {
      init_PrimitivePipeline();
      init_createTaskProcessorWorker();
      combineGeometry_default = createTaskProcessorWorker_default(combineGeometry);
    }
  });

  // packages/engine/Source/Core/GeometryOffsetAttribute.js
  var GeometryOffsetAttribute, GeometryOffsetAttribute_default;
  var init_GeometryOffsetAttribute = __esm({
    "packages/engine/Source/Core/GeometryOffsetAttribute.js"() {
      GeometryOffsetAttribute = {
        NONE: 0,
        TOP: 1,
        ALL: 2
      };
      GeometryOffsetAttribute_default = Object.freeze(GeometryOffsetAttribute);
    }
  });

  // packages/engine/Source/Core/VertexFormat.js
  function VertexFormat(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this.position = defaultValue_default(options.position, false);
    this.normal = defaultValue_default(options.normal, false);
    this.st = defaultValue_default(options.st, false);
    this.bitangent = defaultValue_default(options.bitangent, false);
    this.tangent = defaultValue_default(options.tangent, false);
    this.color = defaultValue_default(options.color, false);
  }
  var VertexFormat_default;
  var init_VertexFormat = __esm({
    "packages/engine/Source/Core/VertexFormat.js"() {
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      VertexFormat.POSITION_ONLY = Object.freeze(
        new VertexFormat({
          position: true
        })
      );
      VertexFormat.POSITION_AND_NORMAL = Object.freeze(
        new VertexFormat({
          position: true,
          normal: true
        })
      );
      VertexFormat.POSITION_NORMAL_AND_ST = Object.freeze(
        new VertexFormat({
          position: true,
          normal: true,
          st: true
        })
      );
      VertexFormat.POSITION_AND_ST = Object.freeze(
        new VertexFormat({
          position: true,
          st: true
        })
      );
      VertexFormat.POSITION_AND_COLOR = Object.freeze(
        new VertexFormat({
          position: true,
          color: true
        })
      );
      VertexFormat.ALL = Object.freeze(
        new VertexFormat({
          position: true,
          normal: true,
          st: true,
          tangent: true,
          bitangent: true
        })
      );
      VertexFormat.DEFAULT = VertexFormat.POSITION_NORMAL_AND_ST;
      VertexFormat.packedLength = 6;
      VertexFormat.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.position ? 1 : 0;
        array[startingIndex++] = value.normal ? 1 : 0;
        array[startingIndex++] = value.st ? 1 : 0;
        array[startingIndex++] = value.tangent ? 1 : 0;
        array[startingIndex++] = value.bitangent ? 1 : 0;
        array[startingIndex] = value.color ? 1 : 0;
        return array;
      };
      VertexFormat.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new VertexFormat();
        }
        result.position = array[startingIndex++] === 1;
        result.normal = array[startingIndex++] === 1;
        result.st = array[startingIndex++] === 1;
        result.tangent = array[startingIndex++] === 1;
        result.bitangent = array[startingIndex++] === 1;
        result.color = array[startingIndex] === 1;
        return result;
      };
      VertexFormat.clone = function(vertexFormat, result) {
        if (!defined_default(vertexFormat)) {
          return void 0;
        }
        if (!defined_default(result)) {
          result = new VertexFormat();
        }
        result.position = vertexFormat.position;
        result.normal = vertexFormat.normal;
        result.st = vertexFormat.st;
        result.tangent = vertexFormat.tangent;
        result.bitangent = vertexFormat.bitangent;
        result.color = vertexFormat.color;
        return result;
      };
      VertexFormat_default = VertexFormat;
    }
  });

  // packages/engine/Source/Core/BoxGeometry.js
  function BoxGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const min3 = options.minimum;
    const max3 = options.maximum;
    Check_default.typeOf.object("min", min3);
    Check_default.typeOf.object("max", max3);
    if (defined_default(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
      throw new DeveloperError_default(
        "GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry."
      );
    }
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    this._minimum = Cartesian3_default.clone(min3);
    this._maximum = Cartesian3_default.clone(max3);
    this._vertexFormat = vertexFormat;
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createBoxGeometry";
  }
  var diffScratch, scratchMin, scratchMax, scratchVertexFormat, scratchOptions, unitBoxGeometry, BoxGeometry_default;
  var init_BoxGeometry = __esm({
    "packages/engine/Source/Core/BoxGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_PrimitiveType();
      init_VertexFormat();
      diffScratch = new Cartesian3_default();
      BoxGeometry.fromDimensions = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const dimensions = options.dimensions;
        Check_default.typeOf.object("dimensions", dimensions);
        Check_default.typeOf.number.greaterThanOrEquals("dimensions.x", dimensions.x, 0);
        Check_default.typeOf.number.greaterThanOrEquals("dimensions.y", dimensions.y, 0);
        Check_default.typeOf.number.greaterThanOrEquals("dimensions.z", dimensions.z, 0);
        const corner = Cartesian3_default.multiplyByScalar(dimensions, 0.5, new Cartesian3_default());
        return new BoxGeometry({
          minimum: Cartesian3_default.negate(corner, new Cartesian3_default()),
          maximum: corner,
          vertexFormat: options.vertexFormat,
          offsetAttribute: options.offsetAttribute
        });
      };
      BoxGeometry.fromAxisAlignedBoundingBox = function(boundingBox) {
        Check_default.typeOf.object("boundingBox", boundingBox);
        return new BoxGeometry({
          minimum: boundingBox.minimum,
          maximum: boundingBox.maximum
        });
      };
      BoxGeometry.packedLength = 2 * Cartesian3_default.packedLength + VertexFormat_default.packedLength + 1;
      BoxGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        Cartesian3_default.pack(value._minimum, array, startingIndex);
        Cartesian3_default.pack(
          value._maximum,
          array,
          startingIndex + Cartesian3_default.packedLength
        );
        VertexFormat_default.pack(
          value._vertexFormat,
          array,
          startingIndex + 2 * Cartesian3_default.packedLength
        );
        array[startingIndex + 2 * Cartesian3_default.packedLength + VertexFormat_default.packedLength] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchMin = new Cartesian3_default();
      scratchMax = new Cartesian3_default();
      scratchVertexFormat = new VertexFormat_default();
      scratchOptions = {
        minimum: scratchMin,
        maximum: scratchMax,
        vertexFormat: scratchVertexFormat,
        offsetAttribute: void 0
      };
      BoxGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const min3 = Cartesian3_default.unpack(array, startingIndex, scratchMin);
        const max3 = Cartesian3_default.unpack(
          array,
          startingIndex + Cartesian3_default.packedLength,
          scratchMax
        );
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex + 2 * Cartesian3_default.packedLength,
          scratchVertexFormat
        );
        const offsetAttribute = array[startingIndex + 2 * Cartesian3_default.packedLength + VertexFormat_default.packedLength];
        if (!defined_default(result)) {
          scratchOptions.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new BoxGeometry(scratchOptions);
        }
        result._minimum = Cartesian3_default.clone(min3, result._minimum);
        result._maximum = Cartesian3_default.clone(max3, result._maximum);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      BoxGeometry.createGeometry = function(boxGeometry) {
        const min3 = boxGeometry._minimum;
        const max3 = boxGeometry._maximum;
        const vertexFormat = boxGeometry._vertexFormat;
        if (Cartesian3_default.equals(min3, max3)) {
          return;
        }
        const attributes = new GeometryAttributes_default();
        let indices;
        let positions;
        if (vertexFormat.position && (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent)) {
          if (vertexFormat.position) {
            positions = new Float64Array(6 * 4 * 3);
            positions[0] = min3.x;
            positions[1] = min3.y;
            positions[2] = max3.z;
            positions[3] = max3.x;
            positions[4] = min3.y;
            positions[5] = max3.z;
            positions[6] = max3.x;
            positions[7] = max3.y;
            positions[8] = max3.z;
            positions[9] = min3.x;
            positions[10] = max3.y;
            positions[11] = max3.z;
            positions[12] = min3.x;
            positions[13] = min3.y;
            positions[14] = min3.z;
            positions[15] = max3.x;
            positions[16] = min3.y;
            positions[17] = min3.z;
            positions[18] = max3.x;
            positions[19] = max3.y;
            positions[20] = min3.z;
            positions[21] = min3.x;
            positions[22] = max3.y;
            positions[23] = min3.z;
            positions[24] = max3.x;
            positions[25] = min3.y;
            positions[26] = min3.z;
            positions[27] = max3.x;
            positions[28] = max3.y;
            positions[29] = min3.z;
            positions[30] = max3.x;
            positions[31] = max3.y;
            positions[32] = max3.z;
            positions[33] = max3.x;
            positions[34] = min3.y;
            positions[35] = max3.z;
            positions[36] = min3.x;
            positions[37] = min3.y;
            positions[38] = min3.z;
            positions[39] = min3.x;
            positions[40] = max3.y;
            positions[41] = min3.z;
            positions[42] = min3.x;
            positions[43] = max3.y;
            positions[44] = max3.z;
            positions[45] = min3.x;
            positions[46] = min3.y;
            positions[47] = max3.z;
            positions[48] = min3.x;
            positions[49] = max3.y;
            positions[50] = min3.z;
            positions[51] = max3.x;
            positions[52] = max3.y;
            positions[53] = min3.z;
            positions[54] = max3.x;
            positions[55] = max3.y;
            positions[56] = max3.z;
            positions[57] = min3.x;
            positions[58] = max3.y;
            positions[59] = max3.z;
            positions[60] = min3.x;
            positions[61] = min3.y;
            positions[62] = min3.z;
            positions[63] = max3.x;
            positions[64] = min3.y;
            positions[65] = min3.z;
            positions[66] = max3.x;
            positions[67] = min3.y;
            positions[68] = max3.z;
            positions[69] = min3.x;
            positions[70] = min3.y;
            positions[71] = max3.z;
            attributes.position = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.DOUBLE,
              componentsPerAttribute: 3,
              values: positions
            });
          }
          if (vertexFormat.normal) {
            const normals = new Float32Array(6 * 4 * 3);
            normals[0] = 0;
            normals[1] = 0;
            normals[2] = 1;
            normals[3] = 0;
            normals[4] = 0;
            normals[5] = 1;
            normals[6] = 0;
            normals[7] = 0;
            normals[8] = 1;
            normals[9] = 0;
            normals[10] = 0;
            normals[11] = 1;
            normals[12] = 0;
            normals[13] = 0;
            normals[14] = -1;
            normals[15] = 0;
            normals[16] = 0;
            normals[17] = -1;
            normals[18] = 0;
            normals[19] = 0;
            normals[20] = -1;
            normals[21] = 0;
            normals[22] = 0;
            normals[23] = -1;
            normals[24] = 1;
            normals[25] = 0;
            normals[26] = 0;
            normals[27] = 1;
            normals[28] = 0;
            normals[29] = 0;
            normals[30] = 1;
            normals[31] = 0;
            normals[32] = 0;
            normals[33] = 1;
            normals[34] = 0;
            normals[35] = 0;
            normals[36] = -1;
            normals[37] = 0;
            normals[38] = 0;
            normals[39] = -1;
            normals[40] = 0;
            normals[41] = 0;
            normals[42] = -1;
            normals[43] = 0;
            normals[44] = 0;
            normals[45] = -1;
            normals[46] = 0;
            normals[47] = 0;
            normals[48] = 0;
            normals[49] = 1;
            normals[50] = 0;
            normals[51] = 0;
            normals[52] = 1;
            normals[53] = 0;
            normals[54] = 0;
            normals[55] = 1;
            normals[56] = 0;
            normals[57] = 0;
            normals[58] = 1;
            normals[59] = 0;
            normals[60] = 0;
            normals[61] = -1;
            normals[62] = 0;
            normals[63] = 0;
            normals[64] = -1;
            normals[65] = 0;
            normals[66] = 0;
            normals[67] = -1;
            normals[68] = 0;
            normals[69] = 0;
            normals[70] = -1;
            normals[71] = 0;
            attributes.normal = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: normals
            });
          }
          if (vertexFormat.st) {
            const texCoords = new Float32Array(6 * 4 * 2);
            texCoords[0] = 0;
            texCoords[1] = 0;
            texCoords[2] = 1;
            texCoords[3] = 0;
            texCoords[4] = 1;
            texCoords[5] = 1;
            texCoords[6] = 0;
            texCoords[7] = 1;
            texCoords[8] = 1;
            texCoords[9] = 0;
            texCoords[10] = 0;
            texCoords[11] = 0;
            texCoords[12] = 0;
            texCoords[13] = 1;
            texCoords[14] = 1;
            texCoords[15] = 1;
            texCoords[16] = 0;
            texCoords[17] = 0;
            texCoords[18] = 1;
            texCoords[19] = 0;
            texCoords[20] = 1;
            texCoords[21] = 1;
            texCoords[22] = 0;
            texCoords[23] = 1;
            texCoords[24] = 1;
            texCoords[25] = 0;
            texCoords[26] = 0;
            texCoords[27] = 0;
            texCoords[28] = 0;
            texCoords[29] = 1;
            texCoords[30] = 1;
            texCoords[31] = 1;
            texCoords[32] = 1;
            texCoords[33] = 0;
            texCoords[34] = 0;
            texCoords[35] = 0;
            texCoords[36] = 0;
            texCoords[37] = 1;
            texCoords[38] = 1;
            texCoords[39] = 1;
            texCoords[40] = 0;
            texCoords[41] = 0;
            texCoords[42] = 1;
            texCoords[43] = 0;
            texCoords[44] = 1;
            texCoords[45] = 1;
            texCoords[46] = 0;
            texCoords[47] = 1;
            attributes.st = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 2,
              values: texCoords
            });
          }
          if (vertexFormat.tangent) {
            const tangents = new Float32Array(6 * 4 * 3);
            tangents[0] = 1;
            tangents[1] = 0;
            tangents[2] = 0;
            tangents[3] = 1;
            tangents[4] = 0;
            tangents[5] = 0;
            tangents[6] = 1;
            tangents[7] = 0;
            tangents[8] = 0;
            tangents[9] = 1;
            tangents[10] = 0;
            tangents[11] = 0;
            tangents[12] = -1;
            tangents[13] = 0;
            tangents[14] = 0;
            tangents[15] = -1;
            tangents[16] = 0;
            tangents[17] = 0;
            tangents[18] = -1;
            tangents[19] = 0;
            tangents[20] = 0;
            tangents[21] = -1;
            tangents[22] = 0;
            tangents[23] = 0;
            tangents[24] = 0;
            tangents[25] = 1;
            tangents[26] = 0;
            tangents[27] = 0;
            tangents[28] = 1;
            tangents[29] = 0;
            tangents[30] = 0;
            tangents[31] = 1;
            tangents[32] = 0;
            tangents[33] = 0;
            tangents[34] = 1;
            tangents[35] = 0;
            tangents[36] = 0;
            tangents[37] = -1;
            tangents[38] = 0;
            tangents[39] = 0;
            tangents[40] = -1;
            tangents[41] = 0;
            tangents[42] = 0;
            tangents[43] = -1;
            tangents[44] = 0;
            tangents[45] = 0;
            tangents[46] = -1;
            tangents[47] = 0;
            tangents[48] = -1;
            tangents[49] = 0;
            tangents[50] = 0;
            tangents[51] = -1;
            tangents[52] = 0;
            tangents[53] = 0;
            tangents[54] = -1;
            tangents[55] = 0;
            tangents[56] = 0;
            tangents[57] = -1;
            tangents[58] = 0;
            tangents[59] = 0;
            tangents[60] = 1;
            tangents[61] = 0;
            tangents[62] = 0;
            tangents[63] = 1;
            tangents[64] = 0;
            tangents[65] = 0;
            tangents[66] = 1;
            tangents[67] = 0;
            tangents[68] = 0;
            tangents[69] = 1;
            tangents[70] = 0;
            tangents[71] = 0;
            attributes.tangent = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: tangents
            });
          }
          if (vertexFormat.bitangent) {
            const bitangents = new Float32Array(6 * 4 * 3);
            bitangents[0] = 0;
            bitangents[1] = 1;
            bitangents[2] = 0;
            bitangents[3] = 0;
            bitangents[4] = 1;
            bitangents[5] = 0;
            bitangents[6] = 0;
            bitangents[7] = 1;
            bitangents[8] = 0;
            bitangents[9] = 0;
            bitangents[10] = 1;
            bitangents[11] = 0;
            bitangents[12] = 0;
            bitangents[13] = 1;
            bitangents[14] = 0;
            bitangents[15] = 0;
            bitangents[16] = 1;
            bitangents[17] = 0;
            bitangents[18] = 0;
            bitangents[19] = 1;
            bitangents[20] = 0;
            bitangents[21] = 0;
            bitangents[22] = 1;
            bitangents[23] = 0;
            bitangents[24] = 0;
            bitangents[25] = 0;
            bitangents[26] = 1;
            bitangents[27] = 0;
            bitangents[28] = 0;
            bitangents[29] = 1;
            bitangents[30] = 0;
            bitangents[31] = 0;
            bitangents[32] = 1;
            bitangents[33] = 0;
            bitangents[34] = 0;
            bitangents[35] = 1;
            bitangents[36] = 0;
            bitangents[37] = 0;
            bitangents[38] = 1;
            bitangents[39] = 0;
            bitangents[40] = 0;
            bitangents[41] = 1;
            bitangents[42] = 0;
            bitangents[43] = 0;
            bitangents[44] = 1;
            bitangents[45] = 0;
            bitangents[46] = 0;
            bitangents[47] = 1;
            bitangents[48] = 0;
            bitangents[49] = 0;
            bitangents[50] = 1;
            bitangents[51] = 0;
            bitangents[52] = 0;
            bitangents[53] = 1;
            bitangents[54] = 0;
            bitangents[55] = 0;
            bitangents[56] = 1;
            bitangents[57] = 0;
            bitangents[58] = 0;
            bitangents[59] = 1;
            bitangents[60] = 0;
            bitangents[61] = 0;
            bitangents[62] = 1;
            bitangents[63] = 0;
            bitangents[64] = 0;
            bitangents[65] = 1;
            bitangents[66] = 0;
            bitangents[67] = 0;
            bitangents[68] = 1;
            bitangents[69] = 0;
            bitangents[70] = 0;
            bitangents[71] = 1;
            attributes.bitangent = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: bitangents
            });
          }
          indices = new Uint16Array(6 * 2 * 3);
          indices[0] = 0;
          indices[1] = 1;
          indices[2] = 2;
          indices[3] = 0;
          indices[4] = 2;
          indices[5] = 3;
          indices[6] = 4 + 2;
          indices[7] = 4 + 1;
          indices[8] = 4 + 0;
          indices[9] = 4 + 3;
          indices[10] = 4 + 2;
          indices[11] = 4 + 0;
          indices[12] = 8 + 0;
          indices[13] = 8 + 1;
          indices[14] = 8 + 2;
          indices[15] = 8 + 0;
          indices[16] = 8 + 2;
          indices[17] = 8 + 3;
          indices[18] = 12 + 2;
          indices[19] = 12 + 1;
          indices[20] = 12 + 0;
          indices[21] = 12 + 3;
          indices[22] = 12 + 2;
          indices[23] = 12 + 0;
          indices[24] = 16 + 2;
          indices[25] = 16 + 1;
          indices[26] = 16 + 0;
          indices[27] = 16 + 3;
          indices[28] = 16 + 2;
          indices[29] = 16 + 0;
          indices[30] = 20 + 0;
          indices[31] = 20 + 1;
          indices[32] = 20 + 2;
          indices[33] = 20 + 0;
          indices[34] = 20 + 2;
          indices[35] = 20 + 3;
        } else {
          positions = new Float64Array(8 * 3);
          positions[0] = min3.x;
          positions[1] = min3.y;
          positions[2] = min3.z;
          positions[3] = max3.x;
          positions[4] = min3.y;
          positions[5] = min3.z;
          positions[6] = max3.x;
          positions[7] = max3.y;
          positions[8] = min3.z;
          positions[9] = min3.x;
          positions[10] = max3.y;
          positions[11] = min3.z;
          positions[12] = min3.x;
          positions[13] = min3.y;
          positions[14] = max3.z;
          positions[15] = max3.x;
          positions[16] = min3.y;
          positions[17] = max3.z;
          positions[18] = max3.x;
          positions[19] = max3.y;
          positions[20] = max3.z;
          positions[21] = min3.x;
          positions[22] = max3.y;
          positions[23] = max3.z;
          attributes.position = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          });
          indices = new Uint16Array(6 * 2 * 3);
          indices[0] = 4;
          indices[1] = 5;
          indices[2] = 6;
          indices[3] = 4;
          indices[4] = 6;
          indices[5] = 7;
          indices[6] = 1;
          indices[7] = 0;
          indices[8] = 3;
          indices[9] = 1;
          indices[10] = 3;
          indices[11] = 2;
          indices[12] = 1;
          indices[13] = 6;
          indices[14] = 5;
          indices[15] = 1;
          indices[16] = 2;
          indices[17] = 6;
          indices[18] = 2;
          indices[19] = 3;
          indices[20] = 7;
          indices[21] = 2;
          indices[22] = 7;
          indices[23] = 6;
          indices[24] = 3;
          indices[25] = 0;
          indices[26] = 4;
          indices[27] = 3;
          indices[28] = 4;
          indices[29] = 7;
          indices[30] = 0;
          indices[31] = 1;
          indices[32] = 5;
          indices[33] = 0;
          indices[34] = 5;
          indices[35] = 4;
        }
        const diff = Cartesian3_default.subtract(max3, min3, diffScratch);
        const radius = Cartesian3_default.magnitude(diff) * 0.5;
        if (defined_default(boxGeometry._offsetAttribute)) {
          const length = positions.length;
          const offsetValue = boxGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
          const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
          attributes.applyOffset = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
            componentsPerAttribute: 1,
            values: applyOffset
          });
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere: new BoundingSphere_default(Cartesian3_default.ZERO, radius),
          offsetAttribute: boxGeometry._offsetAttribute
        });
      };
      BoxGeometry.getUnitBox = function() {
        if (!defined_default(unitBoxGeometry)) {
          unitBoxGeometry = BoxGeometry.createGeometry(
            BoxGeometry.fromDimensions({
              dimensions: new Cartesian3_default(1, 1, 1),
              vertexFormat: VertexFormat_default.POSITION_ONLY
            })
          );
        }
        return unitBoxGeometry;
      };
      BoxGeometry_default = BoxGeometry;
    }
  });

  // packages/engine/Source/Workers/createBoxGeometry.js
  var createBoxGeometry_exports = {};
  __export(createBoxGeometry_exports, {
    default: () => createBoxGeometry_default
  });
  function createBoxGeometry(boxGeometry, offset) {
    if (defined_default(offset)) {
      boxGeometry = BoxGeometry_default.unpack(boxGeometry, offset);
    }
    return BoxGeometry_default.createGeometry(boxGeometry);
  }
  var createBoxGeometry_default;
  var init_createBoxGeometry = __esm({
    "packages/engine/Source/Workers/createBoxGeometry.js"() {
      init_BoxGeometry();
      init_defined();
      createBoxGeometry_default = createBoxGeometry;
    }
  });

  // packages/engine/Source/Core/BoxOutlineGeometry.js
  function BoxOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const min3 = options.minimum;
    const max3 = options.maximum;
    Check_default.typeOf.object("min", min3);
    Check_default.typeOf.object("max", max3);
    if (defined_default(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
      throw new DeveloperError_default(
        "GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry."
      );
    }
    this._min = Cartesian3_default.clone(min3);
    this._max = Cartesian3_default.clone(max3);
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createBoxOutlineGeometry";
  }
  var diffScratch2, scratchMin2, scratchMax2, scratchOptions2, BoxOutlineGeometry_default;
  var init_BoxOutlineGeometry = __esm({
    "packages/engine/Source/Core/BoxOutlineGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_PrimitiveType();
      diffScratch2 = new Cartesian3_default();
      BoxOutlineGeometry.fromDimensions = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const dimensions = options.dimensions;
        Check_default.typeOf.object("dimensions", dimensions);
        Check_default.typeOf.number.greaterThanOrEquals("dimensions.x", dimensions.x, 0);
        Check_default.typeOf.number.greaterThanOrEquals("dimensions.y", dimensions.y, 0);
        Check_default.typeOf.number.greaterThanOrEquals("dimensions.z", dimensions.z, 0);
        const corner = Cartesian3_default.multiplyByScalar(dimensions, 0.5, new Cartesian3_default());
        return new BoxOutlineGeometry({
          minimum: Cartesian3_default.negate(corner, new Cartesian3_default()),
          maximum: corner,
          offsetAttribute: options.offsetAttribute
        });
      };
      BoxOutlineGeometry.fromAxisAlignedBoundingBox = function(boundingBox) {
        Check_default.typeOf.object("boundindBox", boundingBox);
        return new BoxOutlineGeometry({
          minimum: boundingBox.minimum,
          maximum: boundingBox.maximum
        });
      };
      BoxOutlineGeometry.packedLength = 2 * Cartesian3_default.packedLength + 1;
      BoxOutlineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        Cartesian3_default.pack(value._min, array, startingIndex);
        Cartesian3_default.pack(value._max, array, startingIndex + Cartesian3_default.packedLength);
        array[startingIndex + Cartesian3_default.packedLength * 2] = defaultValue_default(
          value._offsetAttribute,
          -1
        );
        return array;
      };
      scratchMin2 = new Cartesian3_default();
      scratchMax2 = new Cartesian3_default();
      scratchOptions2 = {
        minimum: scratchMin2,
        maximum: scratchMax2,
        offsetAttribute: void 0
      };
      BoxOutlineGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const min3 = Cartesian3_default.unpack(array, startingIndex, scratchMin2);
        const max3 = Cartesian3_default.unpack(
          array,
          startingIndex + Cartesian3_default.packedLength,
          scratchMax2
        );
        const offsetAttribute = array[startingIndex + Cartesian3_default.packedLength * 2];
        if (!defined_default(result)) {
          scratchOptions2.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new BoxOutlineGeometry(scratchOptions2);
        }
        result._min = Cartesian3_default.clone(min3, result._min);
        result._max = Cartesian3_default.clone(max3, result._max);
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      BoxOutlineGeometry.createGeometry = function(boxGeometry) {
        const min3 = boxGeometry._min;
        const max3 = boxGeometry._max;
        if (Cartesian3_default.equals(min3, max3)) {
          return;
        }
        const attributes = new GeometryAttributes_default();
        const indices = new Uint16Array(12 * 2);
        const positions = new Float64Array(8 * 3);
        positions[0] = min3.x;
        positions[1] = min3.y;
        positions[2] = min3.z;
        positions[3] = max3.x;
        positions[4] = min3.y;
        positions[5] = min3.z;
        positions[6] = max3.x;
        positions[7] = max3.y;
        positions[8] = min3.z;
        positions[9] = min3.x;
        positions[10] = max3.y;
        positions[11] = min3.z;
        positions[12] = min3.x;
        positions[13] = min3.y;
        positions[14] = max3.z;
        positions[15] = max3.x;
        positions[16] = min3.y;
        positions[17] = max3.z;
        positions[18] = max3.x;
        positions[19] = max3.y;
        positions[20] = max3.z;
        positions[21] = min3.x;
        positions[22] = max3.y;
        positions[23] = max3.z;
        attributes.position = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.DOUBLE,
          componentsPerAttribute: 3,
          values: positions
        });
        indices[0] = 4;
        indices[1] = 5;
        indices[2] = 5;
        indices[3] = 6;
        indices[4] = 6;
        indices[5] = 7;
        indices[6] = 7;
        indices[7] = 4;
        indices[8] = 0;
        indices[9] = 1;
        indices[10] = 1;
        indices[11] = 2;
        indices[12] = 2;
        indices[13] = 3;
        indices[14] = 3;
        indices[15] = 0;
        indices[16] = 0;
        indices[17] = 4;
        indices[18] = 1;
        indices[19] = 5;
        indices[20] = 2;
        indices[21] = 6;
        indices[22] = 3;
        indices[23] = 7;
        const diff = Cartesian3_default.subtract(max3, min3, diffScratch2);
        const radius = Cartesian3_default.magnitude(diff) * 0.5;
        if (defined_default(boxGeometry._offsetAttribute)) {
          const length = positions.length;
          const offsetValue = boxGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
          const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
          attributes.applyOffset = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
            componentsPerAttribute: 1,
            values: applyOffset
          });
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere: new BoundingSphere_default(Cartesian3_default.ZERO, radius),
          offsetAttribute: boxGeometry._offsetAttribute
        });
      };
      BoxOutlineGeometry_default = BoxOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createBoxOutlineGeometry.js
  var createBoxOutlineGeometry_exports = {};
  __export(createBoxOutlineGeometry_exports, {
    default: () => createBoxOutlineGeometry_default
  });
  function createBoxOutlineGeometry(boxGeometry, offset) {
    if (defined_default(offset)) {
      boxGeometry = BoxOutlineGeometry_default.unpack(boxGeometry, offset);
    }
    return BoxOutlineGeometry_default.createGeometry(boxGeometry);
  }
  var createBoxOutlineGeometry_default;
  var init_createBoxOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createBoxOutlineGeometry.js"() {
      init_BoxOutlineGeometry();
      init_defined();
      createBoxOutlineGeometry_default = createBoxOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/EllipseGeometryLibrary.js
  function pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, result) {
    const azimuth = theta + rotation;
    Cartesian3_default.multiplyByScalar(eastVec, Math.cos(azimuth), rotAxis);
    Cartesian3_default.multiplyByScalar(northVec, Math.sin(azimuth), tempVec);
    Cartesian3_default.add(rotAxis, tempVec, rotAxis);
    let cosThetaSquared = Math.cos(theta);
    cosThetaSquared = cosThetaSquared * cosThetaSquared;
    let sinThetaSquared = Math.sin(theta);
    sinThetaSquared = sinThetaSquared * sinThetaSquared;
    const radius = ab / Math.sqrt(bSqr * cosThetaSquared + aSqr * sinThetaSquared);
    const angle = radius / mag;
    Quaternion_default.fromAxisAngle(rotAxis, angle, unitQuat);
    Matrix3_default.fromQuaternion(unitQuat, rotMtx);
    Matrix3_default.multiplyByVector(rotMtx, unitPos, result);
    Cartesian3_default.normalize(result, result);
    Cartesian3_default.multiplyByScalar(result, mag, result);
    return result;
  }
  var EllipseGeometryLibrary, rotAxis, tempVec, unitQuat, rotMtx, scratchCartesian12, scratchCartesian23, scratchCartesian34, scratchNormal2, unitPosScratch, eastVecScratch, northVecScratch, EllipseGeometryLibrary_default;
  var init_EllipseGeometryLibrary = __esm({
    "packages/engine/Source/Core/EllipseGeometryLibrary.js"() {
      init_Cartesian3();
      init_Math();
      init_Matrix3();
      init_Quaternion();
      EllipseGeometryLibrary = {};
      rotAxis = new Cartesian3_default();
      tempVec = new Cartesian3_default();
      unitQuat = new Quaternion_default();
      rotMtx = new Matrix3_default();
      scratchCartesian12 = new Cartesian3_default();
      scratchCartesian23 = new Cartesian3_default();
      scratchCartesian34 = new Cartesian3_default();
      scratchNormal2 = new Cartesian3_default();
      EllipseGeometryLibrary.raisePositionsToHeight = function(positions, options, extrude) {
        const ellipsoid = options.ellipsoid;
        const height = options.height;
        const extrudedHeight = options.extrudedHeight;
        const size = extrude ? positions.length / 3 * 2 : positions.length / 3;
        const finalPositions = new Float64Array(size * 3);
        const length = positions.length;
        const bottomOffset = extrude ? length : 0;
        for (let i = 0; i < length; i += 3) {
          const i1 = i + 1;
          const i2 = i + 2;
          const position = Cartesian3_default.fromArray(positions, i, scratchCartesian12);
          ellipsoid.scaleToGeodeticSurface(position, position);
          const extrudedPosition = Cartesian3_default.clone(position, scratchCartesian23);
          const normal2 = ellipsoid.geodeticSurfaceNormal(position, scratchNormal2);
          const scaledNormal = Cartesian3_default.multiplyByScalar(
            normal2,
            height,
            scratchCartesian34
          );
          Cartesian3_default.add(position, scaledNormal, position);
          if (extrude) {
            Cartesian3_default.multiplyByScalar(normal2, extrudedHeight, scaledNormal);
            Cartesian3_default.add(extrudedPosition, scaledNormal, extrudedPosition);
            finalPositions[i + bottomOffset] = extrudedPosition.x;
            finalPositions[i1 + bottomOffset] = extrudedPosition.y;
            finalPositions[i2 + bottomOffset] = extrudedPosition.z;
          }
          finalPositions[i] = position.x;
          finalPositions[i1] = position.y;
          finalPositions[i2] = position.z;
        }
        return finalPositions;
      };
      unitPosScratch = new Cartesian3_default();
      eastVecScratch = new Cartesian3_default();
      northVecScratch = new Cartesian3_default();
      EllipseGeometryLibrary.computeEllipsePositions = function(options, addFillPositions, addEdgePositions) {
        const semiMinorAxis = options.semiMinorAxis;
        const semiMajorAxis = options.semiMajorAxis;
        const rotation = options.rotation;
        const center = options.center;
        const granularity = options.granularity * 8;
        const aSqr = semiMinorAxis * semiMinorAxis;
        const bSqr = semiMajorAxis * semiMajorAxis;
        const ab = semiMajorAxis * semiMinorAxis;
        const mag = Cartesian3_default.magnitude(center);
        const unitPos = Cartesian3_default.normalize(center, unitPosScratch);
        let eastVec = Cartesian3_default.cross(Cartesian3_default.UNIT_Z, center, eastVecScratch);
        eastVec = Cartesian3_default.normalize(eastVec, eastVec);
        const northVec = Cartesian3_default.cross(unitPos, eastVec, northVecScratch);
        let numPts = 1 + Math.ceil(Math_default.PI_OVER_TWO / granularity);
        const deltaTheta = Math_default.PI_OVER_TWO / (numPts - 1);
        let theta = Math_default.PI_OVER_TWO - numPts * deltaTheta;
        if (theta < 0) {
          numPts -= Math.ceil(Math.abs(theta) / deltaTheta);
        }
        const size = 2 * (numPts * (numPts + 2));
        const positions = addFillPositions ? new Array(size * 3) : void 0;
        let positionIndex = 0;
        let position = scratchCartesian12;
        let reflectedPosition = scratchCartesian23;
        const outerPositionsLength = numPts * 4 * 3;
        let outerRightIndex = outerPositionsLength - 1;
        let outerLeftIndex = 0;
        const outerPositions = addEdgePositions ? new Array(outerPositionsLength) : void 0;
        let i;
        let j;
        let numInterior;
        let t;
        let interiorPosition;
        theta = Math_default.PI_OVER_TWO;
        position = pointOnEllipsoid(
          theta,
          rotation,
          northVec,
          eastVec,
          aSqr,
          ab,
          bSqr,
          mag,
          unitPos,
          position
        );
        if (addFillPositions) {
          positions[positionIndex++] = position.x;
          positions[positionIndex++] = position.y;
          positions[positionIndex++] = position.z;
        }
        if (addEdgePositions) {
          outerPositions[outerRightIndex--] = position.z;
          outerPositions[outerRightIndex--] = position.y;
          outerPositions[outerRightIndex--] = position.x;
        }
        theta = Math_default.PI_OVER_TWO - deltaTheta;
        for (i = 1; i < numPts + 1; ++i) {
          position = pointOnEllipsoid(
            theta,
            rotation,
            northVec,
            eastVec,
            aSqr,
            ab,
            bSqr,
            mag,
            unitPos,
            position
          );
          reflectedPosition = pointOnEllipsoid(
            Math.PI - theta,
            rotation,
            northVec,
            eastVec,
            aSqr,
            ab,
            bSqr,
            mag,
            unitPos,
            reflectedPosition
          );
          if (addFillPositions) {
            positions[positionIndex++] = position.x;
            positions[positionIndex++] = position.y;
            positions[positionIndex++] = position.z;
            numInterior = 2 * i + 2;
            for (j = 1; j < numInterior - 1; ++j) {
              t = j / (numInterior - 1);
              interiorPosition = Cartesian3_default.lerp(
                position,
                reflectedPosition,
                t,
                scratchCartesian34
              );
              positions[positionIndex++] = interiorPosition.x;
              positions[positionIndex++] = interiorPosition.y;
              positions[positionIndex++] = interiorPosition.z;
            }
            positions[positionIndex++] = reflectedPosition.x;
            positions[positionIndex++] = reflectedPosition.y;
            positions[positionIndex++] = reflectedPosition.z;
          }
          if (addEdgePositions) {
            outerPositions[outerRightIndex--] = position.z;
            outerPositions[outerRightIndex--] = position.y;
            outerPositions[outerRightIndex--] = position.x;
            outerPositions[outerLeftIndex++] = reflectedPosition.x;
            outerPositions[outerLeftIndex++] = reflectedPosition.y;
            outerPositions[outerLeftIndex++] = reflectedPosition.z;
          }
          theta = Math_default.PI_OVER_TWO - (i + 1) * deltaTheta;
        }
        for (i = numPts; i > 1; --i) {
          theta = Math_default.PI_OVER_TWO - (i - 1) * deltaTheta;
          position = pointOnEllipsoid(
            -theta,
            rotation,
            northVec,
            eastVec,
            aSqr,
            ab,
            bSqr,
            mag,
            unitPos,
            position
          );
          reflectedPosition = pointOnEllipsoid(
            theta + Math.PI,
            rotation,
            northVec,
            eastVec,
            aSqr,
            ab,
            bSqr,
            mag,
            unitPos,
            reflectedPosition
          );
          if (addFillPositions) {
            positions[positionIndex++] = position.x;
            positions[positionIndex++] = position.y;
            positions[positionIndex++] = position.z;
            numInterior = 2 * (i - 1) + 2;
            for (j = 1; j < numInterior - 1; ++j) {
              t = j / (numInterior - 1);
              interiorPosition = Cartesian3_default.lerp(
                position,
                reflectedPosition,
                t,
                scratchCartesian34
              );
              positions[positionIndex++] = interiorPosition.x;
              positions[positionIndex++] = interiorPosition.y;
              positions[positionIndex++] = interiorPosition.z;
            }
            positions[positionIndex++] = reflectedPosition.x;
            positions[positionIndex++] = reflectedPosition.y;
            positions[positionIndex++] = reflectedPosition.z;
          }
          if (addEdgePositions) {
            outerPositions[outerRightIndex--] = position.z;
            outerPositions[outerRightIndex--] = position.y;
            outerPositions[outerRightIndex--] = position.x;
            outerPositions[outerLeftIndex++] = reflectedPosition.x;
            outerPositions[outerLeftIndex++] = reflectedPosition.y;
            outerPositions[outerLeftIndex++] = reflectedPosition.z;
          }
        }
        theta = Math_default.PI_OVER_TWO;
        position = pointOnEllipsoid(
          -theta,
          rotation,
          northVec,
          eastVec,
          aSqr,
          ab,
          bSqr,
          mag,
          unitPos,
          position
        );
        const r = {};
        if (addFillPositions) {
          positions[positionIndex++] = position.x;
          positions[positionIndex++] = position.y;
          positions[positionIndex++] = position.z;
          r.positions = positions;
          r.numPts = numPts;
        }
        if (addEdgePositions) {
          outerPositions[outerRightIndex--] = position.z;
          outerPositions[outerRightIndex--] = position.y;
          outerPositions[outerRightIndex--] = position.x;
          r.outerPositions = outerPositions;
        }
        return r;
      };
      EllipseGeometryLibrary_default = EllipseGeometryLibrary;
    }
  });

  // packages/engine/Source/Core/GeometryInstance.js
  function GeometryInstance(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    if (!defined_default(options.geometry)) {
      throw new DeveloperError_default("options.geometry is required.");
    }
    this.geometry = options.geometry;
    this.modelMatrix = Matrix4_default.clone(
      defaultValue_default(options.modelMatrix, Matrix4_default.IDENTITY)
    );
    this.id = options.id;
    this.pickPrimitive = options.pickPrimitive;
    this.attributes = defaultValue_default(options.attributes, {});
    this.westHemisphereGeometry = void 0;
    this.eastHemisphereGeometry = void 0;
  }
  var GeometryInstance_default;
  var init_GeometryInstance = __esm({
    "packages/engine/Source/Core/GeometryInstance.js"() {
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Matrix4();
      GeometryInstance_default = GeometryInstance;
    }
  });

  // packages/engine/Source/Core/EllipseGeometry.js
  function computeTopBottomAttributes(positions, options, extrude) {
    const vertexFormat = options.vertexFormat;
    const center = options.center;
    const semiMajorAxis = options.semiMajorAxis;
    const semiMinorAxis = options.semiMinorAxis;
    const ellipsoid = options.ellipsoid;
    const stRotation = options.stRotation;
    const size = extrude ? positions.length / 3 * 2 : positions.length / 3;
    const shadowVolume = options.shadowVolume;
    const textureCoordinates = vertexFormat.st ? new Float32Array(size * 2) : void 0;
    const normals = vertexFormat.normal ? new Float32Array(size * 3) : void 0;
    const tangents = vertexFormat.tangent ? new Float32Array(size * 3) : void 0;
    const bitangents = vertexFormat.bitangent ? new Float32Array(size * 3) : void 0;
    const extrudeNormals = shadowVolume ? new Float32Array(size * 3) : void 0;
    let textureCoordIndex = 0;
    let normal2 = scratchNormal3;
    let tangent = scratchTangent;
    let bitangent = scratchBitangent;
    const projection = new GeographicProjection_default(ellipsoid);
    const projectedCenter = projection.project(
      ellipsoid.cartesianToCartographic(center, scratchCartographic2),
      projectedCenterScratch
    );
    const geodeticNormal = ellipsoid.scaleToGeodeticSurface(
      center,
      scratchCartesian13
    );
    ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);
    let textureMatrix = textureMatrixScratch;
    let tangentMatrix = tangentMatrixScratch;
    if (stRotation !== 0) {
      let rotation = Quaternion_default.fromAxisAngle(
        geodeticNormal,
        stRotation,
        quaternionScratch
      );
      textureMatrix = Matrix3_default.fromQuaternion(rotation, textureMatrix);
      rotation = Quaternion_default.fromAxisAngle(
        geodeticNormal,
        -stRotation,
        quaternionScratch
      );
      tangentMatrix = Matrix3_default.fromQuaternion(rotation, tangentMatrix);
    } else {
      textureMatrix = Matrix3_default.clone(Matrix3_default.IDENTITY, textureMatrix);
      tangentMatrix = Matrix3_default.clone(Matrix3_default.IDENTITY, tangentMatrix);
    }
    const minTexCoord = Cartesian2_default.fromElements(
      Number.POSITIVE_INFINITY,
      Number.POSITIVE_INFINITY,
      scratchMinTexCoord
    );
    const maxTexCoord = Cartesian2_default.fromElements(
      Number.NEGATIVE_INFINITY,
      Number.NEGATIVE_INFINITY,
      scratchMaxTexCoord
    );
    let length = positions.length;
    const bottomOffset = extrude ? length : 0;
    const stOffset = bottomOffset / 3 * 2;
    for (let i = 0; i < length; i += 3) {
      const i1 = i + 1;
      const i2 = i + 2;
      const position = Cartesian3_default.fromArray(positions, i, scratchCartesian13);
      if (vertexFormat.st) {
        const rotatedPoint = Matrix3_default.multiplyByVector(
          textureMatrix,
          position,
          scratchCartesian24
        );
        const projectedPoint = projection.project(
          ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic2),
          scratchCartesian35
        );
        Cartesian3_default.subtract(projectedPoint, projectedCenter, projectedPoint);
        texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2 * semiMajorAxis);
        texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2 * semiMinorAxis);
        minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);
        minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);
        maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);
        maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);
        if (extrude) {
          textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;
          textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;
        }
        textureCoordinates[textureCoordIndex++] = texCoordScratch.x;
        textureCoordinates[textureCoordIndex++] = texCoordScratch.y;
      }
      if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {
        normal2 = ellipsoid.geodeticSurfaceNormal(position, normal2);
        if (shadowVolume) {
          extrudeNormals[i + bottomOffset] = -normal2.x;
          extrudeNormals[i1 + bottomOffset] = -normal2.y;
          extrudeNormals[i2 + bottomOffset] = -normal2.z;
        }
        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {
          if (vertexFormat.tangent || vertexFormat.bitangent) {
            tangent = Cartesian3_default.normalize(
              Cartesian3_default.cross(Cartesian3_default.UNIT_Z, normal2, tangent),
              tangent
            );
            Matrix3_default.multiplyByVector(tangentMatrix, tangent, tangent);
          }
          if (vertexFormat.normal) {
            normals[i] = normal2.x;
            normals[i1] = normal2.y;
            normals[i2] = normal2.z;
            if (extrude) {
              normals[i + bottomOffset] = -normal2.x;
              normals[i1 + bottomOffset] = -normal2.y;
              normals[i2 + bottomOffset] = -normal2.z;
            }
          }
          if (vertexFormat.tangent) {
            tangents[i] = tangent.x;
            tangents[i1] = tangent.y;
            tangents[i2] = tangent.z;
            if (extrude) {
              tangents[i + bottomOffset] = -tangent.x;
              tangents[i1 + bottomOffset] = -tangent.y;
              tangents[i2 + bottomOffset] = -tangent.z;
            }
          }
          if (vertexFormat.bitangent) {
            bitangent = Cartesian3_default.normalize(
              Cartesian3_default.cross(normal2, tangent, bitangent),
              bitangent
            );
            bitangents[i] = bitangent.x;
            bitangents[i1] = bitangent.y;
            bitangents[i2] = bitangent.z;
            if (extrude) {
              bitangents[i + bottomOffset] = bitangent.x;
              bitangents[i1 + bottomOffset] = bitangent.y;
              bitangents[i2 + bottomOffset] = bitangent.z;
            }
          }
        }
      }
    }
    if (vertexFormat.st) {
      length = textureCoordinates.length;
      for (let k = 0; k < length; k += 2) {
        textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);
        textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);
      }
    }
    const attributes = new GeometryAttributes_default();
    if (vertexFormat.position) {
      const finalPositions = EllipseGeometryLibrary_default.raisePositionsToHeight(
        positions,
        options,
        extrude
      );
      attributes.position = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.DOUBLE,
        componentsPerAttribute: 3,
        values: finalPositions
      });
    }
    if (vertexFormat.st) {
      attributes.st = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 2,
        values: textureCoordinates
      });
    }
    if (vertexFormat.normal) {
      attributes.normal = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: normals
      });
    }
    if (vertexFormat.tangent) {
      attributes.tangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: tangents
      });
    }
    if (vertexFormat.bitangent) {
      attributes.bitangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: bitangents
      });
    }
    if (shadowVolume) {
      attributes.extrudeDirection = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: extrudeNormals
      });
    }
    if (extrude && defined_default(options.offsetAttribute)) {
      let offsetAttribute = new Uint8Array(size);
      if (options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
        offsetAttribute = offsetAttribute.fill(1, 0, size / 2);
      } else {
        const offsetValue = options.offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
        offsetAttribute = offsetAttribute.fill(offsetValue);
      }
      attributes.applyOffset = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
        componentsPerAttribute: 1,
        values: offsetAttribute
      });
    }
    return attributes;
  }
  function topIndices(numPts) {
    const indices = new Array(12 * (numPts * (numPts + 1)) - 6);
    let indicesIndex = 0;
    let prevIndex;
    let numInterior;
    let positionIndex;
    let i;
    let j;
    prevIndex = 0;
    positionIndex = 1;
    for (i = 0; i < 3; i++) {
      indices[indicesIndex++] = positionIndex++;
      indices[indicesIndex++] = prevIndex;
      indices[indicesIndex++] = positionIndex;
    }
    for (i = 2; i < numPts + 1; ++i) {
      positionIndex = i * (i + 1) - 1;
      prevIndex = (i - 1) * i - 1;
      indices[indicesIndex++] = positionIndex++;
      indices[indicesIndex++] = prevIndex;
      indices[indicesIndex++] = positionIndex;
      numInterior = 2 * i;
      for (j = 0; j < numInterior - 1; ++j) {
        indices[indicesIndex++] = positionIndex;
        indices[indicesIndex++] = prevIndex++;
        indices[indicesIndex++] = prevIndex;
        indices[indicesIndex++] = positionIndex++;
        indices[indicesIndex++] = prevIndex;
        indices[indicesIndex++] = positionIndex;
      }
      indices[indicesIndex++] = positionIndex++;
      indices[indicesIndex++] = prevIndex;
      indices[indicesIndex++] = positionIndex;
    }
    numInterior = numPts * 2;
    ++positionIndex;
    ++prevIndex;
    for (i = 0; i < numInterior - 1; ++i) {
      indices[indicesIndex++] = positionIndex;
      indices[indicesIndex++] = prevIndex++;
      indices[indicesIndex++] = prevIndex;
      indices[indicesIndex++] = positionIndex++;
      indices[indicesIndex++] = prevIndex;
      indices[indicesIndex++] = positionIndex;
    }
    indices[indicesIndex++] = positionIndex;
    indices[indicesIndex++] = prevIndex++;
    indices[indicesIndex++] = prevIndex;
    indices[indicesIndex++] = positionIndex++;
    indices[indicesIndex++] = prevIndex++;
    indices[indicesIndex++] = prevIndex;
    ++prevIndex;
    for (i = numPts - 1; i > 1; --i) {
      indices[indicesIndex++] = prevIndex++;
      indices[indicesIndex++] = prevIndex;
      indices[indicesIndex++] = positionIndex;
      numInterior = 2 * i;
      for (j = 0; j < numInterior - 1; ++j) {
        indices[indicesIndex++] = positionIndex;
        indices[indicesIndex++] = prevIndex++;
        indices[indicesIndex++] = prevIndex;
        indices[indicesIndex++] = positionIndex++;
        indices[indicesIndex++] = prevIndex;
        indices[indicesIndex++] = positionIndex;
      }
      indices[indicesIndex++] = prevIndex++;
      indices[indicesIndex++] = prevIndex++;
      indices[indicesIndex++] = positionIndex++;
    }
    for (i = 0; i < 3; i++) {
      indices[indicesIndex++] = prevIndex++;
      indices[indicesIndex++] = prevIndex;
      indices[indicesIndex++] = positionIndex;
    }
    return indices;
  }
  function computeEllipse(options) {
    const center = options.center;
    boundingSphereCenter = Cartesian3_default.multiplyByScalar(
      options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter),
      options.height,
      boundingSphereCenter
    );
    boundingSphereCenter = Cartesian3_default.add(
      center,
      boundingSphereCenter,
      boundingSphereCenter
    );
    const boundingSphere = new BoundingSphere_default(
      boundingSphereCenter,
      options.semiMajorAxis
    );
    const cep = EllipseGeometryLibrary_default.computeEllipsePositions(
      options,
      true,
      false
    );
    const positions = cep.positions;
    const numPts = cep.numPts;
    const attributes = computeTopBottomAttributes(positions, options, false);
    let indices = topIndices(numPts);
    indices = IndexDatatype_default.createTypedArray(positions.length / 3, indices);
    return {
      boundingSphere,
      attributes,
      indices
    };
  }
  function computeWallAttributes(positions, options) {
    const vertexFormat = options.vertexFormat;
    const center = options.center;
    const semiMajorAxis = options.semiMajorAxis;
    const semiMinorAxis = options.semiMinorAxis;
    const ellipsoid = options.ellipsoid;
    const height = options.height;
    const extrudedHeight = options.extrudedHeight;
    const stRotation = options.stRotation;
    const size = positions.length / 3 * 2;
    const finalPositions = new Float64Array(size * 3);
    const textureCoordinates = vertexFormat.st ? new Float32Array(size * 2) : void 0;
    const normals = vertexFormat.normal ? new Float32Array(size * 3) : void 0;
    const tangents = vertexFormat.tangent ? new Float32Array(size * 3) : void 0;
    const bitangents = vertexFormat.bitangent ? new Float32Array(size * 3) : void 0;
    const shadowVolume = options.shadowVolume;
    const extrudeNormals = shadowVolume ? new Float32Array(size * 3) : void 0;
    let textureCoordIndex = 0;
    let normal2 = scratchNormal3;
    let tangent = scratchTangent;
    let bitangent = scratchBitangent;
    const projection = new GeographicProjection_default(ellipsoid);
    const projectedCenter = projection.project(
      ellipsoid.cartesianToCartographic(center, scratchCartographic2),
      projectedCenterScratch
    );
    const geodeticNormal = ellipsoid.scaleToGeodeticSurface(
      center,
      scratchCartesian13
    );
    ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);
    const rotation = Quaternion_default.fromAxisAngle(
      geodeticNormal,
      stRotation,
      quaternionScratch
    );
    const textureMatrix = Matrix3_default.fromQuaternion(rotation, textureMatrixScratch);
    const minTexCoord = Cartesian2_default.fromElements(
      Number.POSITIVE_INFINITY,
      Number.POSITIVE_INFINITY,
      scratchMinTexCoord
    );
    const maxTexCoord = Cartesian2_default.fromElements(
      Number.NEGATIVE_INFINITY,
      Number.NEGATIVE_INFINITY,
      scratchMaxTexCoord
    );
    let length = positions.length;
    const stOffset = length / 3 * 2;
    for (let i = 0; i < length; i += 3) {
      const i1 = i + 1;
      const i2 = i + 2;
      let position = Cartesian3_default.fromArray(positions, i, scratchCartesian13);
      let extrudedPosition;
      if (vertexFormat.st) {
        const rotatedPoint = Matrix3_default.multiplyByVector(
          textureMatrix,
          position,
          scratchCartesian24
        );
        const projectedPoint = projection.project(
          ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic2),
          scratchCartesian35
        );
        Cartesian3_default.subtract(projectedPoint, projectedCenter, projectedPoint);
        texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2 * semiMajorAxis);
        texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2 * semiMinorAxis);
        minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);
        minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);
        maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);
        maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);
        textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;
        textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;
        textureCoordinates[textureCoordIndex++] = texCoordScratch.x;
        textureCoordinates[textureCoordIndex++] = texCoordScratch.y;
      }
      position = ellipsoid.scaleToGeodeticSurface(position, position);
      extrudedPosition = Cartesian3_default.clone(position, scratchCartesian24);
      normal2 = ellipsoid.geodeticSurfaceNormal(position, normal2);
      if (shadowVolume) {
        extrudeNormals[i + length] = -normal2.x;
        extrudeNormals[i1 + length] = -normal2.y;
        extrudeNormals[i2 + length] = -normal2.z;
      }
      let scaledNormal = Cartesian3_default.multiplyByScalar(
        normal2,
        height,
        scratchCartesian4
      );
      position = Cartesian3_default.add(position, scaledNormal, position);
      scaledNormal = Cartesian3_default.multiplyByScalar(
        normal2,
        extrudedHeight,
        scaledNormal
      );
      extrudedPosition = Cartesian3_default.add(
        extrudedPosition,
        scaledNormal,
        extrudedPosition
      );
      if (vertexFormat.position) {
        finalPositions[i + length] = extrudedPosition.x;
        finalPositions[i1 + length] = extrudedPosition.y;
        finalPositions[i2 + length] = extrudedPosition.z;
        finalPositions[i] = position.x;
        finalPositions[i1] = position.y;
        finalPositions[i2] = position.z;
      }
      if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {
        bitangent = Cartesian3_default.clone(normal2, bitangent);
        const next = Cartesian3_default.fromArray(
          positions,
          (i + 3) % length,
          scratchCartesian4
        );
        Cartesian3_default.subtract(next, position, next);
        const bottom = Cartesian3_default.subtract(
          extrudedPosition,
          position,
          scratchCartesian35
        );
        normal2 = Cartesian3_default.normalize(
          Cartesian3_default.cross(bottom, next, normal2),
          normal2
        );
        if (vertexFormat.normal) {
          normals[i] = normal2.x;
          normals[i1] = normal2.y;
          normals[i2] = normal2.z;
          normals[i + length] = normal2.x;
          normals[i1 + length] = normal2.y;
          normals[i2 + length] = normal2.z;
        }
        if (vertexFormat.tangent) {
          tangent = Cartesian3_default.normalize(
            Cartesian3_default.cross(bitangent, normal2, tangent),
            tangent
          );
          tangents[i] = tangent.x;
          tangents[i1] = tangent.y;
          tangents[i2] = tangent.z;
          tangents[i + length] = tangent.x;
          tangents[i + 1 + length] = tangent.y;
          tangents[i + 2 + length] = tangent.z;
        }
        if (vertexFormat.bitangent) {
          bitangents[i] = bitangent.x;
          bitangents[i1] = bitangent.y;
          bitangents[i2] = bitangent.z;
          bitangents[i + length] = bitangent.x;
          bitangents[i1 + length] = bitangent.y;
          bitangents[i2 + length] = bitangent.z;
        }
      }
    }
    if (vertexFormat.st) {
      length = textureCoordinates.length;
      for (let k = 0; k < length; k += 2) {
        textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);
        textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);
      }
    }
    const attributes = new GeometryAttributes_default();
    if (vertexFormat.position) {
      attributes.position = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.DOUBLE,
        componentsPerAttribute: 3,
        values: finalPositions
      });
    }
    if (vertexFormat.st) {
      attributes.st = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 2,
        values: textureCoordinates
      });
    }
    if (vertexFormat.normal) {
      attributes.normal = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: normals
      });
    }
    if (vertexFormat.tangent) {
      attributes.tangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: tangents
      });
    }
    if (vertexFormat.bitangent) {
      attributes.bitangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: bitangents
      });
    }
    if (shadowVolume) {
      attributes.extrudeDirection = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: extrudeNormals
      });
    }
    if (defined_default(options.offsetAttribute)) {
      let offsetAttribute = new Uint8Array(size);
      if (options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
        offsetAttribute = offsetAttribute.fill(1, 0, size / 2);
      } else {
        const offsetValue = options.offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
        offsetAttribute = offsetAttribute.fill(offsetValue);
      }
      attributes.applyOffset = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
        componentsPerAttribute: 1,
        values: offsetAttribute
      });
    }
    return attributes;
  }
  function computeWallIndices(positions) {
    const length = positions.length / 3;
    const indices = IndexDatatype_default.createTypedArray(length, length * 6);
    let index = 0;
    for (let i = 0; i < length; i++) {
      const UL = i;
      const LL = i + length;
      const UR = (UL + 1) % length;
      const LR = UR + length;
      indices[index++] = UL;
      indices[index++] = LL;
      indices[index++] = UR;
      indices[index++] = UR;
      indices[index++] = LL;
      indices[index++] = LR;
    }
    return indices;
  }
  function computeExtrudedEllipse(options) {
    const center = options.center;
    const ellipsoid = options.ellipsoid;
    const semiMajorAxis = options.semiMajorAxis;
    let scaledNormal = Cartesian3_default.multiplyByScalar(
      ellipsoid.geodeticSurfaceNormal(center, scratchCartesian13),
      options.height,
      scratchCartesian13
    );
    topBoundingSphere.center = Cartesian3_default.add(
      center,
      scaledNormal,
      topBoundingSphere.center
    );
    topBoundingSphere.radius = semiMajorAxis;
    scaledNormal = Cartesian3_default.multiplyByScalar(
      ellipsoid.geodeticSurfaceNormal(center, scaledNormal),
      options.extrudedHeight,
      scaledNormal
    );
    bottomBoundingSphere.center = Cartesian3_default.add(
      center,
      scaledNormal,
      bottomBoundingSphere.center
    );
    bottomBoundingSphere.radius = semiMajorAxis;
    const cep = EllipseGeometryLibrary_default.computeEllipsePositions(
      options,
      true,
      true
    );
    const positions = cep.positions;
    const numPts = cep.numPts;
    const outerPositions = cep.outerPositions;
    const boundingSphere = BoundingSphere_default.union(
      topBoundingSphere,
      bottomBoundingSphere
    );
    const topBottomAttributes = computeTopBottomAttributes(
      positions,
      options,
      true
    );
    let indices = topIndices(numPts);
    const length = indices.length;
    indices.length = length * 2;
    const posLength = positions.length / 3;
    for (let i = 0; i < length; i += 3) {
      indices[i + length] = indices[i + 2] + posLength;
      indices[i + 1 + length] = indices[i + 1] + posLength;
      indices[i + 2 + length] = indices[i] + posLength;
    }
    const topBottomIndices = IndexDatatype_default.createTypedArray(
      posLength * 2 / 3,
      indices
    );
    const topBottomGeo = new Geometry_default({
      attributes: topBottomAttributes,
      indices: topBottomIndices,
      primitiveType: PrimitiveType_default.TRIANGLES
    });
    const wallAttributes = computeWallAttributes(outerPositions, options);
    indices = computeWallIndices(outerPositions);
    const wallIndices = IndexDatatype_default.createTypedArray(
      outerPositions.length * 2 / 3,
      indices
    );
    const wallGeo = new Geometry_default({
      attributes: wallAttributes,
      indices: wallIndices,
      primitiveType: PrimitiveType_default.TRIANGLES
    });
    const geo = GeometryPipeline_default.combineInstances([
      new GeometryInstance_default({
        geometry: topBottomGeo
      }),
      new GeometryInstance_default({
        geometry: wallGeo
      })
    ]);
    return {
      boundingSphere,
      attributes: geo[0].attributes,
      indices: geo[0].indices
    };
  }
  function computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result) {
    const cep = EllipseGeometryLibrary_default.computeEllipsePositions(
      {
        center,
        semiMajorAxis,
        semiMinorAxis,
        rotation,
        granularity
      },
      false,
      true
    );
    const positionsFlat = cep.outerPositions;
    const positionsCount = positionsFlat.length / 3;
    const positions = new Array(positionsCount);
    for (let i = 0; i < positionsCount; ++i) {
      positions[i] = Cartesian3_default.fromArray(positionsFlat, i * 3);
    }
    const rectangle = Rectangle_default.fromCartesianArray(positions, ellipsoid, result);
    if (rectangle.width > Math_default.PI) {
      rectangle.north = rectangle.north > 0 ? Math_default.PI_OVER_TWO - Math_default.EPSILON7 : rectangle.north;
      rectangle.south = rectangle.south < 0 ? Math_default.EPSILON7 - Math_default.PI_OVER_TWO : rectangle.south;
      rectangle.east = Math_default.PI;
      rectangle.west = -Math_default.PI;
    }
    return rectangle;
  }
  function EllipseGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const center = options.center;
    const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    const semiMajorAxis = options.semiMajorAxis;
    const semiMinorAxis = options.semiMinorAxis;
    const granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    Check_default.defined("options.center", center);
    Check_default.typeOf.number("options.semiMajorAxis", semiMajorAxis);
    Check_default.typeOf.number("options.semiMinorAxis", semiMinorAxis);
    if (semiMajorAxis < semiMinorAxis) {
      throw new DeveloperError_default(
        "semiMajorAxis must be greater than or equal to the semiMinorAxis."
      );
    }
    if (granularity <= 0) {
      throw new DeveloperError_default("granularity must be greater than zero.");
    }
    const height = defaultValue_default(options.height, 0);
    const extrudedHeight = defaultValue_default(options.extrudedHeight, height);
    this._center = Cartesian3_default.clone(center);
    this._semiMajorAxis = semiMajorAxis;
    this._semiMinorAxis = semiMinorAxis;
    this._ellipsoid = Ellipsoid_default.clone(ellipsoid);
    this._rotation = defaultValue_default(options.rotation, 0);
    this._stRotation = defaultValue_default(options.stRotation, 0);
    this._height = Math.max(extrudedHeight, height);
    this._granularity = granularity;
    this._vertexFormat = VertexFormat_default.clone(vertexFormat);
    this._extrudedHeight = Math.min(extrudedHeight, height);
    this._shadowVolume = defaultValue_default(options.shadowVolume, false);
    this._workerName = "createEllipseGeometry";
    this._offsetAttribute = options.offsetAttribute;
    this._rectangle = void 0;
    this._textureCoordinateRotationPoints = void 0;
  }
  function textureCoordinateRotationPoints(ellipseGeometry) {
    const stRotation = -ellipseGeometry._stRotation;
    if (stRotation === 0) {
      return [0, 0, 0, 1, 1, 0];
    }
    const cep = EllipseGeometryLibrary_default.computeEllipsePositions(
      {
        center: ellipseGeometry._center,
        semiMajorAxis: ellipseGeometry._semiMajorAxis,
        semiMinorAxis: ellipseGeometry._semiMinorAxis,
        rotation: ellipseGeometry._rotation,
        granularity: ellipseGeometry._granularity
      },
      false,
      true
    );
    const positionsFlat = cep.outerPositions;
    const positionsCount = positionsFlat.length / 3;
    const positions = new Array(positionsCount);
    for (let i = 0; i < positionsCount; ++i) {
      positions[i] = Cartesian3_default.fromArray(positionsFlat, i * 3);
    }
    const ellipsoid = ellipseGeometry._ellipsoid;
    const boundingRectangle = ellipseGeometry.rectangle;
    return Geometry_default._textureCoordinateRotationPoints(
      positions,
      stRotation,
      ellipsoid,
      boundingRectangle
    );
  }
  var scratchCartesian13, scratchCartesian24, scratchCartesian35, scratchCartesian4, texCoordScratch, textureMatrixScratch, tangentMatrixScratch, quaternionScratch, scratchNormal3, scratchTangent, scratchBitangent, scratchCartographic2, projectedCenterScratch, scratchMinTexCoord, scratchMaxTexCoord, boundingSphereCenter, topBoundingSphere, bottomBoundingSphere, scratchCenter2, scratchEllipsoid, scratchVertexFormat2, scratchOptions3, EllipseGeometry_default;
  var init_EllipseGeometry = __esm({
    "packages/engine/Source/Core/EllipseGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_EllipseGeometryLibrary();
      init_Ellipsoid();
      init_GeographicProjection();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryInstance();
      init_GeometryOffsetAttribute();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_Math();
      init_Matrix3();
      init_PrimitiveType();
      init_Quaternion();
      init_Rectangle();
      init_VertexFormat();
      scratchCartesian13 = new Cartesian3_default();
      scratchCartesian24 = new Cartesian3_default();
      scratchCartesian35 = new Cartesian3_default();
      scratchCartesian4 = new Cartesian3_default();
      texCoordScratch = new Cartesian2_default();
      textureMatrixScratch = new Matrix3_default();
      tangentMatrixScratch = new Matrix3_default();
      quaternionScratch = new Quaternion_default();
      scratchNormal3 = new Cartesian3_default();
      scratchTangent = new Cartesian3_default();
      scratchBitangent = new Cartesian3_default();
      scratchCartographic2 = new Cartographic_default();
      projectedCenterScratch = new Cartesian3_default();
      scratchMinTexCoord = new Cartesian2_default();
      scratchMaxTexCoord = new Cartesian2_default();
      boundingSphereCenter = new Cartesian3_default();
      topBoundingSphere = new BoundingSphere_default();
      bottomBoundingSphere = new BoundingSphere_default();
      EllipseGeometry.packedLength = Cartesian3_default.packedLength + Ellipsoid_default.packedLength + VertexFormat_default.packedLength + 9;
      EllipseGeometry.pack = function(value, array, startingIndex) {
        Check_default.defined("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        Cartesian3_default.pack(value._center, array, startingIndex);
        startingIndex += Cartesian3_default.packedLength;
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._semiMajorAxis;
        array[startingIndex++] = value._semiMinorAxis;
        array[startingIndex++] = value._rotation;
        array[startingIndex++] = value._stRotation;
        array[startingIndex++] = value._height;
        array[startingIndex++] = value._granularity;
        array[startingIndex++] = value._extrudedHeight;
        array[startingIndex++] = value._shadowVolume ? 1 : 0;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchCenter2 = new Cartesian3_default();
      scratchEllipsoid = new Ellipsoid_default();
      scratchVertexFormat2 = new VertexFormat_default();
      scratchOptions3 = {
        center: scratchCenter2,
        ellipsoid: scratchEllipsoid,
        vertexFormat: scratchVertexFormat2,
        semiMajorAxis: void 0,
        semiMinorAxis: void 0,
        rotation: void 0,
        stRotation: void 0,
        height: void 0,
        granularity: void 0,
        extrudedHeight: void 0,
        shadowVolume: void 0,
        offsetAttribute: void 0
      };
      EllipseGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const center = Cartesian3_default.unpack(array, startingIndex, scratchCenter2);
        startingIndex += Cartesian3_default.packedLength;
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid);
        startingIndex += Ellipsoid_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat2
        );
        startingIndex += VertexFormat_default.packedLength;
        const semiMajorAxis = array[startingIndex++];
        const semiMinorAxis = array[startingIndex++];
        const rotation = array[startingIndex++];
        const stRotation = array[startingIndex++];
        const height = array[startingIndex++];
        const granularity = array[startingIndex++];
        const extrudedHeight = array[startingIndex++];
        const shadowVolume = array[startingIndex++] === 1;
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions3.height = height;
          scratchOptions3.extrudedHeight = extrudedHeight;
          scratchOptions3.granularity = granularity;
          scratchOptions3.stRotation = stRotation;
          scratchOptions3.rotation = rotation;
          scratchOptions3.semiMajorAxis = semiMajorAxis;
          scratchOptions3.semiMinorAxis = semiMinorAxis;
          scratchOptions3.shadowVolume = shadowVolume;
          scratchOptions3.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new EllipseGeometry(scratchOptions3);
        }
        result._center = Cartesian3_default.clone(center, result._center);
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._semiMajorAxis = semiMajorAxis;
        result._semiMinorAxis = semiMinorAxis;
        result._rotation = rotation;
        result._stRotation = stRotation;
        result._height = height;
        result._granularity = granularity;
        result._extrudedHeight = extrudedHeight;
        result._shadowVolume = shadowVolume;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      EllipseGeometry.computeRectangle = function(options, result) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const center = options.center;
        const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
        const semiMajorAxis = options.semiMajorAxis;
        const semiMinorAxis = options.semiMinorAxis;
        const granularity = defaultValue_default(
          options.granularity,
          Math_default.RADIANS_PER_DEGREE
        );
        const rotation = defaultValue_default(options.rotation, 0);
        Check_default.defined("options.center", center);
        Check_default.typeOf.number("options.semiMajorAxis", semiMajorAxis);
        Check_default.typeOf.number("options.semiMinorAxis", semiMinorAxis);
        if (semiMajorAxis < semiMinorAxis) {
          throw new DeveloperError_default(
            "semiMajorAxis must be greater than or equal to the semiMinorAxis."
          );
        }
        if (granularity <= 0) {
          throw new DeveloperError_default("granularity must be greater than zero.");
        }
        return computeRectangle(
          center,
          semiMajorAxis,
          semiMinorAxis,
          rotation,
          granularity,
          ellipsoid,
          result
        );
      };
      EllipseGeometry.createGeometry = function(ellipseGeometry) {
        if (ellipseGeometry._semiMajorAxis <= 0 || ellipseGeometry._semiMinorAxis <= 0) {
          return;
        }
        const height = ellipseGeometry._height;
        const extrudedHeight = ellipseGeometry._extrudedHeight;
        const extrude = !Math_default.equalsEpsilon(
          height,
          extrudedHeight,
          0,
          Math_default.EPSILON2
        );
        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(
          ellipseGeometry._center,
          ellipseGeometry._center
        );
        const options = {
          center: ellipseGeometry._center,
          semiMajorAxis: ellipseGeometry._semiMajorAxis,
          semiMinorAxis: ellipseGeometry._semiMinorAxis,
          ellipsoid: ellipseGeometry._ellipsoid,
          rotation: ellipseGeometry._rotation,
          height,
          granularity: ellipseGeometry._granularity,
          vertexFormat: ellipseGeometry._vertexFormat,
          stRotation: ellipseGeometry._stRotation
        };
        let geometry;
        if (extrude) {
          options.extrudedHeight = extrudedHeight;
          options.shadowVolume = ellipseGeometry._shadowVolume;
          options.offsetAttribute = ellipseGeometry._offsetAttribute;
          geometry = computeExtrudedEllipse(options);
        } else {
          geometry = computeEllipse(options);
          if (defined_default(ellipseGeometry._offsetAttribute)) {
            const length = geometry.attributes.position.values.length;
            const offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
            const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
            geometry.attributes.applyOffset = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
              componentsPerAttribute: 1,
              values: applyOffset
            });
          }
        }
        return new Geometry_default({
          attributes: geometry.attributes,
          indices: geometry.indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere: geometry.boundingSphere,
          offsetAttribute: ellipseGeometry._offsetAttribute
        });
      };
      EllipseGeometry.createShadowVolume = function(ellipseGeometry, minHeightFunc, maxHeightFunc) {
        const granularity = ellipseGeometry._granularity;
        const ellipsoid = ellipseGeometry._ellipsoid;
        const minHeight = minHeightFunc(granularity, ellipsoid);
        const maxHeight = maxHeightFunc(granularity, ellipsoid);
        return new EllipseGeometry({
          center: ellipseGeometry._center,
          semiMajorAxis: ellipseGeometry._semiMajorAxis,
          semiMinorAxis: ellipseGeometry._semiMinorAxis,
          ellipsoid,
          rotation: ellipseGeometry._rotation,
          stRotation: ellipseGeometry._stRotation,
          granularity,
          extrudedHeight: minHeight,
          height: maxHeight,
          vertexFormat: VertexFormat_default.POSITION_ONLY,
          shadowVolume: true
        });
      };
      Object.defineProperties(EllipseGeometry.prototype, {
        /**
         * @private
         */
        rectangle: {
          get: function() {
            if (!defined_default(this._rectangle)) {
              this._rectangle = computeRectangle(
                this._center,
                this._semiMajorAxis,
                this._semiMinorAxis,
                this._rotation,
                this._granularity,
                this._ellipsoid
              );
            }
            return this._rectangle;
          }
        },
        /**
         * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.
         * @private
         */
        textureCoordinateRotationPoints: {
          get: function() {
            if (!defined_default(this._textureCoordinateRotationPoints)) {
              this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(
                this
              );
            }
            return this._textureCoordinateRotationPoints;
          }
        }
      });
      EllipseGeometry_default = EllipseGeometry;
    }
  });

  // packages/engine/Source/Core/CircleGeometry.js
  function CircleGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const radius = options.radius;
    Check_default.typeOf.number("radius", radius);
    const ellipseGeometryOptions = {
      center: options.center,
      semiMajorAxis: radius,
      semiMinorAxis: radius,
      ellipsoid: options.ellipsoid,
      height: options.height,
      extrudedHeight: options.extrudedHeight,
      granularity: options.granularity,
      vertexFormat: options.vertexFormat,
      stRotation: options.stRotation,
      shadowVolume: options.shadowVolume
    };
    this._ellipseGeometry = new EllipseGeometry_default(ellipseGeometryOptions);
    this._workerName = "createCircleGeometry";
  }
  var scratchEllipseGeometry, scratchOptions4, CircleGeometry_default;
  var init_CircleGeometry = __esm({
    "packages/engine/Source/Core/CircleGeometry.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_EllipseGeometry();
      init_Ellipsoid();
      init_VertexFormat();
      CircleGeometry.packedLength = EllipseGeometry_default.packedLength;
      CircleGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        return EllipseGeometry_default.pack(value._ellipseGeometry, array, startingIndex);
      };
      scratchEllipseGeometry = new EllipseGeometry_default({
        center: new Cartesian3_default(),
        semiMajorAxis: 1,
        semiMinorAxis: 1
      });
      scratchOptions4 = {
        center: new Cartesian3_default(),
        radius: void 0,
        ellipsoid: Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE),
        height: void 0,
        extrudedHeight: void 0,
        granularity: void 0,
        vertexFormat: new VertexFormat_default(),
        stRotation: void 0,
        semiMajorAxis: void 0,
        semiMinorAxis: void 0,
        shadowVolume: void 0
      };
      CircleGeometry.unpack = function(array, startingIndex, result) {
        const ellipseGeometry = EllipseGeometry_default.unpack(
          array,
          startingIndex,
          scratchEllipseGeometry
        );
        scratchOptions4.center = Cartesian3_default.clone(
          ellipseGeometry._center,
          scratchOptions4.center
        );
        scratchOptions4.ellipsoid = Ellipsoid_default.clone(
          ellipseGeometry._ellipsoid,
          scratchOptions4.ellipsoid
        );
        scratchOptions4.height = ellipseGeometry._height;
        scratchOptions4.extrudedHeight = ellipseGeometry._extrudedHeight;
        scratchOptions4.granularity = ellipseGeometry._granularity;
        scratchOptions4.vertexFormat = VertexFormat_default.clone(
          ellipseGeometry._vertexFormat,
          scratchOptions4.vertexFormat
        );
        scratchOptions4.stRotation = ellipseGeometry._stRotation;
        scratchOptions4.shadowVolume = ellipseGeometry._shadowVolume;
        if (!defined_default(result)) {
          scratchOptions4.radius = ellipseGeometry._semiMajorAxis;
          return new CircleGeometry(scratchOptions4);
        }
        scratchOptions4.semiMajorAxis = ellipseGeometry._semiMajorAxis;
        scratchOptions4.semiMinorAxis = ellipseGeometry._semiMinorAxis;
        result._ellipseGeometry = new EllipseGeometry_default(scratchOptions4);
        return result;
      };
      CircleGeometry.createGeometry = function(circleGeometry) {
        return EllipseGeometry_default.createGeometry(circleGeometry._ellipseGeometry);
      };
      CircleGeometry.createShadowVolume = function(circleGeometry, minHeightFunc, maxHeightFunc) {
        const granularity = circleGeometry._ellipseGeometry._granularity;
        const ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;
        const minHeight = minHeightFunc(granularity, ellipsoid);
        const maxHeight = maxHeightFunc(granularity, ellipsoid);
        return new CircleGeometry({
          center: circleGeometry._ellipseGeometry._center,
          radius: circleGeometry._ellipseGeometry._semiMajorAxis,
          ellipsoid,
          stRotation: circleGeometry._ellipseGeometry._stRotation,
          granularity,
          extrudedHeight: minHeight,
          height: maxHeight,
          vertexFormat: VertexFormat_default.POSITION_ONLY,
          shadowVolume: true
        });
      };
      Object.defineProperties(CircleGeometry.prototype, {
        /**
         * @private
         */
        rectangle: {
          get: function() {
            return this._ellipseGeometry.rectangle;
          }
        },
        /**
         * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.
         * @private
         */
        textureCoordinateRotationPoints: {
          get: function() {
            return this._ellipseGeometry.textureCoordinateRotationPoints;
          }
        }
      });
      CircleGeometry_default = CircleGeometry;
    }
  });

  // packages/engine/Source/Workers/createCircleGeometry.js
  var createCircleGeometry_exports = {};
  __export(createCircleGeometry_exports, {
    default: () => createCircleGeometry_default
  });
  function createCircleGeometry(circleGeometry, offset) {
    if (defined_default(offset)) {
      circleGeometry = CircleGeometry_default.unpack(circleGeometry, offset);
    }
    circleGeometry._ellipseGeometry._center = Cartesian3_default.clone(
      circleGeometry._ellipseGeometry._center
    );
    circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid_default.clone(
      circleGeometry._ellipseGeometry._ellipsoid
    );
    return CircleGeometry_default.createGeometry(circleGeometry);
  }
  var createCircleGeometry_default;
  var init_createCircleGeometry = __esm({
    "packages/engine/Source/Workers/createCircleGeometry.js"() {
      init_Cartesian3();
      init_CircleGeometry();
      init_defined();
      init_Ellipsoid();
      createCircleGeometry_default = createCircleGeometry;
    }
  });

  // packages/engine/Source/Core/EllipseOutlineGeometry.js
  function computeEllipse2(options) {
    const center = options.center;
    boundingSphereCenter2 = Cartesian3_default.multiplyByScalar(
      options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter2),
      options.height,
      boundingSphereCenter2
    );
    boundingSphereCenter2 = Cartesian3_default.add(
      center,
      boundingSphereCenter2,
      boundingSphereCenter2
    );
    const boundingSphere = new BoundingSphere_default(
      boundingSphereCenter2,
      options.semiMajorAxis
    );
    const positions = EllipseGeometryLibrary_default.computeEllipsePositions(
      options,
      false,
      true
    ).outerPositions;
    const attributes = new GeometryAttributes_default({
      position: new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.DOUBLE,
        componentsPerAttribute: 3,
        values: EllipseGeometryLibrary_default.raisePositionsToHeight(
          positions,
          options,
          false
        )
      })
    });
    const length = positions.length / 3;
    const indices = IndexDatatype_default.createTypedArray(length, length * 2);
    let index = 0;
    for (let i = 0; i < length; ++i) {
      indices[index++] = i;
      indices[index++] = (i + 1) % length;
    }
    return {
      boundingSphere,
      attributes,
      indices
    };
  }
  function computeExtrudedEllipse2(options) {
    const center = options.center;
    const ellipsoid = options.ellipsoid;
    const semiMajorAxis = options.semiMajorAxis;
    let scaledNormal = Cartesian3_default.multiplyByScalar(
      ellipsoid.geodeticSurfaceNormal(center, scratchCartesian14),
      options.height,
      scratchCartesian14
    );
    topBoundingSphere2.center = Cartesian3_default.add(
      center,
      scaledNormal,
      topBoundingSphere2.center
    );
    topBoundingSphere2.radius = semiMajorAxis;
    scaledNormal = Cartesian3_default.multiplyByScalar(
      ellipsoid.geodeticSurfaceNormal(center, scaledNormal),
      options.extrudedHeight,
      scaledNormal
    );
    bottomBoundingSphere2.center = Cartesian3_default.add(
      center,
      scaledNormal,
      bottomBoundingSphere2.center
    );
    bottomBoundingSphere2.radius = semiMajorAxis;
    let positions = EllipseGeometryLibrary_default.computeEllipsePositions(
      options,
      false,
      true
    ).outerPositions;
    const attributes = new GeometryAttributes_default({
      position: new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.DOUBLE,
        componentsPerAttribute: 3,
        values: EllipseGeometryLibrary_default.raisePositionsToHeight(
          positions,
          options,
          true
        )
      })
    });
    positions = attributes.position.values;
    const boundingSphere = BoundingSphere_default.union(
      topBoundingSphere2,
      bottomBoundingSphere2
    );
    let length = positions.length / 3;
    if (defined_default(options.offsetAttribute)) {
      let applyOffset = new Uint8Array(length);
      if (options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
        applyOffset = applyOffset.fill(1, 0, length / 2);
      } else {
        const offsetValue = options.offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
        applyOffset = applyOffset.fill(offsetValue);
      }
      attributes.applyOffset = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
        componentsPerAttribute: 1,
        values: applyOffset
      });
    }
    let numberOfVerticalLines = defaultValue_default(options.numberOfVerticalLines, 16);
    numberOfVerticalLines = Math_default.clamp(
      numberOfVerticalLines,
      0,
      length / 2
    );
    const indices = IndexDatatype_default.createTypedArray(
      length,
      length * 2 + numberOfVerticalLines * 2
    );
    length /= 2;
    let index = 0;
    let i;
    for (i = 0; i < length; ++i) {
      indices[index++] = i;
      indices[index++] = (i + 1) % length;
      indices[index++] = i + length;
      indices[index++] = (i + 1) % length + length;
    }
    let numSide;
    if (numberOfVerticalLines > 0) {
      const numSideLines = Math.min(numberOfVerticalLines, length);
      numSide = Math.round(length / numSideLines);
      const maxI = Math.min(numSide * numberOfVerticalLines, length);
      for (i = 0; i < maxI; i += numSide) {
        indices[index++] = i;
        indices[index++] = i + length;
      }
    }
    return {
      boundingSphere,
      attributes,
      indices
    };
  }
  function EllipseOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const center = options.center;
    const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    const semiMajorAxis = options.semiMajorAxis;
    const semiMinorAxis = options.semiMinorAxis;
    const granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    if (!defined_default(center)) {
      throw new DeveloperError_default("center is required.");
    }
    if (!defined_default(semiMajorAxis)) {
      throw new DeveloperError_default("semiMajorAxis is required.");
    }
    if (!defined_default(semiMinorAxis)) {
      throw new DeveloperError_default("semiMinorAxis is required.");
    }
    if (semiMajorAxis < semiMinorAxis) {
      throw new DeveloperError_default(
        "semiMajorAxis must be greater than or equal to the semiMinorAxis."
      );
    }
    if (granularity <= 0) {
      throw new DeveloperError_default("granularity must be greater than zero.");
    }
    const height = defaultValue_default(options.height, 0);
    const extrudedHeight = defaultValue_default(options.extrudedHeight, height);
    this._center = Cartesian3_default.clone(center);
    this._semiMajorAxis = semiMajorAxis;
    this._semiMinorAxis = semiMinorAxis;
    this._ellipsoid = Ellipsoid_default.clone(ellipsoid);
    this._rotation = defaultValue_default(options.rotation, 0);
    this._height = Math.max(extrudedHeight, height);
    this._granularity = granularity;
    this._extrudedHeight = Math.min(extrudedHeight, height);
    this._numberOfVerticalLines = Math.max(
      defaultValue_default(options.numberOfVerticalLines, 16),
      0
    );
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createEllipseOutlineGeometry";
  }
  var scratchCartesian14, boundingSphereCenter2, topBoundingSphere2, bottomBoundingSphere2, scratchCenter3, scratchEllipsoid2, scratchOptions5, EllipseOutlineGeometry_default;
  var init_EllipseOutlineGeometry = __esm({
    "packages/engine/Source/Core/EllipseOutlineGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_EllipseGeometryLibrary();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_IndexDatatype();
      init_Math();
      init_PrimitiveType();
      scratchCartesian14 = new Cartesian3_default();
      boundingSphereCenter2 = new Cartesian3_default();
      topBoundingSphere2 = new BoundingSphere_default();
      bottomBoundingSphere2 = new BoundingSphere_default();
      EllipseOutlineGeometry.packedLength = Cartesian3_default.packedLength + Ellipsoid_default.packedLength + 8;
      EllipseOutlineGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        Cartesian3_default.pack(value._center, array, startingIndex);
        startingIndex += Cartesian3_default.packedLength;
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        array[startingIndex++] = value._semiMajorAxis;
        array[startingIndex++] = value._semiMinorAxis;
        array[startingIndex++] = value._rotation;
        array[startingIndex++] = value._height;
        array[startingIndex++] = value._granularity;
        array[startingIndex++] = value._extrudedHeight;
        array[startingIndex++] = value._numberOfVerticalLines;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchCenter3 = new Cartesian3_default();
      scratchEllipsoid2 = new Ellipsoid_default();
      scratchOptions5 = {
        center: scratchCenter3,
        ellipsoid: scratchEllipsoid2,
        semiMajorAxis: void 0,
        semiMinorAxis: void 0,
        rotation: void 0,
        height: void 0,
        granularity: void 0,
        extrudedHeight: void 0,
        numberOfVerticalLines: void 0,
        offsetAttribute: void 0
      };
      EllipseOutlineGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        const center = Cartesian3_default.unpack(array, startingIndex, scratchCenter3);
        startingIndex += Cartesian3_default.packedLength;
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid2);
        startingIndex += Ellipsoid_default.packedLength;
        const semiMajorAxis = array[startingIndex++];
        const semiMinorAxis = array[startingIndex++];
        const rotation = array[startingIndex++];
        const height = array[startingIndex++];
        const granularity = array[startingIndex++];
        const extrudedHeight = array[startingIndex++];
        const numberOfVerticalLines = array[startingIndex++];
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions5.height = height;
          scratchOptions5.extrudedHeight = extrudedHeight;
          scratchOptions5.granularity = granularity;
          scratchOptions5.rotation = rotation;
          scratchOptions5.semiMajorAxis = semiMajorAxis;
          scratchOptions5.semiMinorAxis = semiMinorAxis;
          scratchOptions5.numberOfVerticalLines = numberOfVerticalLines;
          scratchOptions5.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new EllipseOutlineGeometry(scratchOptions5);
        }
        result._center = Cartesian3_default.clone(center, result._center);
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._semiMajorAxis = semiMajorAxis;
        result._semiMinorAxis = semiMinorAxis;
        result._rotation = rotation;
        result._height = height;
        result._granularity = granularity;
        result._extrudedHeight = extrudedHeight;
        result._numberOfVerticalLines = numberOfVerticalLines;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      EllipseOutlineGeometry.createGeometry = function(ellipseGeometry) {
        if (ellipseGeometry._semiMajorAxis <= 0 || ellipseGeometry._semiMinorAxis <= 0) {
          return;
        }
        const height = ellipseGeometry._height;
        const extrudedHeight = ellipseGeometry._extrudedHeight;
        const extrude = !Math_default.equalsEpsilon(
          height,
          extrudedHeight,
          0,
          Math_default.EPSILON2
        );
        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(
          ellipseGeometry._center,
          ellipseGeometry._center
        );
        const options = {
          center: ellipseGeometry._center,
          semiMajorAxis: ellipseGeometry._semiMajorAxis,
          semiMinorAxis: ellipseGeometry._semiMinorAxis,
          ellipsoid: ellipseGeometry._ellipsoid,
          rotation: ellipseGeometry._rotation,
          height,
          granularity: ellipseGeometry._granularity,
          numberOfVerticalLines: ellipseGeometry._numberOfVerticalLines
        };
        let geometry;
        if (extrude) {
          options.extrudedHeight = extrudedHeight;
          options.offsetAttribute = ellipseGeometry._offsetAttribute;
          geometry = computeExtrudedEllipse2(options);
        } else {
          geometry = computeEllipse2(options);
          if (defined_default(ellipseGeometry._offsetAttribute)) {
            const length = geometry.attributes.position.values.length;
            const offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
            const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
            geometry.attributes.applyOffset = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
              componentsPerAttribute: 1,
              values: applyOffset
            });
          }
        }
        return new Geometry_default({
          attributes: geometry.attributes,
          indices: geometry.indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere: geometry.boundingSphere,
          offsetAttribute: ellipseGeometry._offsetAttribute
        });
      };
      EllipseOutlineGeometry_default = EllipseOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/CircleOutlineGeometry.js
  function CircleOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const radius = options.radius;
    Check_default.typeOf.number("radius", radius);
    const ellipseGeometryOptions = {
      center: options.center,
      semiMajorAxis: radius,
      semiMinorAxis: radius,
      ellipsoid: options.ellipsoid,
      height: options.height,
      extrudedHeight: options.extrudedHeight,
      granularity: options.granularity,
      numberOfVerticalLines: options.numberOfVerticalLines
    };
    this._ellipseGeometry = new EllipseOutlineGeometry_default(ellipseGeometryOptions);
    this._workerName = "createCircleOutlineGeometry";
  }
  var scratchEllipseGeometry2, scratchOptions6, CircleOutlineGeometry_default;
  var init_CircleOutlineGeometry = __esm({
    "packages/engine/Source/Core/CircleOutlineGeometry.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_EllipseOutlineGeometry();
      init_Ellipsoid();
      CircleOutlineGeometry.packedLength = EllipseOutlineGeometry_default.packedLength;
      CircleOutlineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        return EllipseOutlineGeometry_default.pack(
          value._ellipseGeometry,
          array,
          startingIndex
        );
      };
      scratchEllipseGeometry2 = new EllipseOutlineGeometry_default({
        center: new Cartesian3_default(),
        semiMajorAxis: 1,
        semiMinorAxis: 1
      });
      scratchOptions6 = {
        center: new Cartesian3_default(),
        radius: void 0,
        ellipsoid: Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE),
        height: void 0,
        extrudedHeight: void 0,
        granularity: void 0,
        numberOfVerticalLines: void 0,
        semiMajorAxis: void 0,
        semiMinorAxis: void 0
      };
      CircleOutlineGeometry.unpack = function(array, startingIndex, result) {
        const ellipseGeometry = EllipseOutlineGeometry_default.unpack(
          array,
          startingIndex,
          scratchEllipseGeometry2
        );
        scratchOptions6.center = Cartesian3_default.clone(
          ellipseGeometry._center,
          scratchOptions6.center
        );
        scratchOptions6.ellipsoid = Ellipsoid_default.clone(
          ellipseGeometry._ellipsoid,
          scratchOptions6.ellipsoid
        );
        scratchOptions6.height = ellipseGeometry._height;
        scratchOptions6.extrudedHeight = ellipseGeometry._extrudedHeight;
        scratchOptions6.granularity = ellipseGeometry._granularity;
        scratchOptions6.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;
        if (!defined_default(result)) {
          scratchOptions6.radius = ellipseGeometry._semiMajorAxis;
          return new CircleOutlineGeometry(scratchOptions6);
        }
        scratchOptions6.semiMajorAxis = ellipseGeometry._semiMajorAxis;
        scratchOptions6.semiMinorAxis = ellipseGeometry._semiMinorAxis;
        result._ellipseGeometry = new EllipseOutlineGeometry_default(scratchOptions6);
        return result;
      };
      CircleOutlineGeometry.createGeometry = function(circleGeometry) {
        return EllipseOutlineGeometry_default.createGeometry(circleGeometry._ellipseGeometry);
      };
      CircleOutlineGeometry_default = CircleOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createCircleOutlineGeometry.js
  var createCircleOutlineGeometry_exports = {};
  __export(createCircleOutlineGeometry_exports, {
    default: () => createCircleOutlineGeometry_default
  });
  function createCircleOutlineGeometry(circleGeometry, offset) {
    if (defined_default(offset)) {
      circleGeometry = CircleOutlineGeometry_default.unpack(circleGeometry, offset);
    }
    circleGeometry._ellipseGeometry._center = Cartesian3_default.clone(
      circleGeometry._ellipseGeometry._center
    );
    circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid_default.clone(
      circleGeometry._ellipseGeometry._ellipsoid
    );
    return CircleOutlineGeometry_default.createGeometry(circleGeometry);
  }
  var createCircleOutlineGeometry_default;
  var init_createCircleOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createCircleOutlineGeometry.js"() {
      init_Cartesian3();
      init_CircleOutlineGeometry();
      init_defined();
      init_Ellipsoid();
      createCircleOutlineGeometry_default = createCircleOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/arrayRemoveDuplicates.js
  function arrayRemoveDuplicates(values, equalsEpsilon, wrapAround, removedIndices) {
    Check_default.defined("equalsEpsilon", equalsEpsilon);
    if (!defined_default(values)) {
      return void 0;
    }
    wrapAround = defaultValue_default(wrapAround, false);
    const storeRemovedIndices = defined_default(removedIndices);
    const length = values.length;
    if (length < 2) {
      return values;
    }
    let i;
    let v02 = values[0];
    let v12;
    let cleanedValues;
    let lastCleanIndex = 0;
    let removedIndexLCI = -1;
    for (i = 1; i < length; ++i) {
      v12 = values[i];
      if (equalsEpsilon(v02, v12, removeDuplicatesEpsilon)) {
        if (!defined_default(cleanedValues)) {
          cleanedValues = values.slice(0, i);
          lastCleanIndex = i - 1;
          removedIndexLCI = 0;
        }
        if (storeRemovedIndices) {
          removedIndices.push(i);
        }
      } else {
        if (defined_default(cleanedValues)) {
          cleanedValues.push(v12);
          lastCleanIndex = i;
          if (storeRemovedIndices) {
            removedIndexLCI = removedIndices.length;
          }
        }
        v02 = v12;
      }
    }
    if (wrapAround && equalsEpsilon(values[0], values[length - 1], removeDuplicatesEpsilon)) {
      if (storeRemovedIndices) {
        if (defined_default(cleanedValues)) {
          removedIndices.splice(removedIndexLCI, 0, lastCleanIndex);
        } else {
          removedIndices.push(length - 1);
        }
      }
      if (defined_default(cleanedValues)) {
        cleanedValues.length -= 1;
      } else {
        cleanedValues = values.slice(0, -1);
      }
    }
    return defined_default(cleanedValues) ? cleanedValues : values;
  }
  var removeDuplicatesEpsilon, arrayRemoveDuplicates_default;
  var init_arrayRemoveDuplicates = __esm({
    "packages/engine/Source/Core/arrayRemoveDuplicates.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      init_Math();
      removeDuplicatesEpsilon = Math_default.EPSILON10;
      arrayRemoveDuplicates_default = arrayRemoveDuplicates;
    }
  });

  // packages/engine/Source/Core/BoundingRectangle.js
  function BoundingRectangle(x, y, width, height) {
    this.x = defaultValue_default(x, 0);
    this.y = defaultValue_default(y, 0);
    this.width = defaultValue_default(width, 0);
    this.height = defaultValue_default(height, 0);
  }
  var defaultProjection2, fromRectangleLowerLeft, fromRectangleUpperRight, BoundingRectangle_default;
  var init_BoundingRectangle = __esm({
    "packages/engine/Source/Core/BoundingRectangle.js"() {
      init_Cartesian2();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_GeographicProjection();
      init_Intersect();
      init_Rectangle();
      BoundingRectangle.packedLength = 4;
      BoundingRectangle.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.x;
        array[startingIndex++] = value.y;
        array[startingIndex++] = value.width;
        array[startingIndex] = value.height;
        return array;
      };
      BoundingRectangle.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new BoundingRectangle();
        }
        result.x = array[startingIndex++];
        result.y = array[startingIndex++];
        result.width = array[startingIndex++];
        result.height = array[startingIndex];
        return result;
      };
      BoundingRectangle.fromPoints = function(positions, result) {
        if (!defined_default(result)) {
          result = new BoundingRectangle();
        }
        if (!defined_default(positions) || positions.length === 0) {
          result.x = 0;
          result.y = 0;
          result.width = 0;
          result.height = 0;
          return result;
        }
        const length = positions.length;
        let minimumX = positions[0].x;
        let minimumY = positions[0].y;
        let maximumX = positions[0].x;
        let maximumY = positions[0].y;
        for (let i = 1; i < length; i++) {
          const p = positions[i];
          const x = p.x;
          const y = p.y;
          minimumX = Math.min(x, minimumX);
          maximumX = Math.max(x, maximumX);
          minimumY = Math.min(y, minimumY);
          maximumY = Math.max(y, maximumY);
        }
        result.x = minimumX;
        result.y = minimumY;
        result.width = maximumX - minimumX;
        result.height = maximumY - minimumY;
        return result;
      };
      defaultProjection2 = new GeographicProjection_default();
      fromRectangleLowerLeft = new Cartographic_default();
      fromRectangleUpperRight = new Cartographic_default();
      BoundingRectangle.fromRectangle = function(rectangle, projection, result) {
        if (!defined_default(result)) {
          result = new BoundingRectangle();
        }
        if (!defined_default(rectangle)) {
          result.x = 0;
          result.y = 0;
          result.width = 0;
          result.height = 0;
          return result;
        }
        projection = defaultValue_default(projection, defaultProjection2);
        const lowerLeft = projection.project(
          Rectangle_default.southwest(rectangle, fromRectangleLowerLeft)
        );
        const upperRight = projection.project(
          Rectangle_default.northeast(rectangle, fromRectangleUpperRight)
        );
        Cartesian2_default.subtract(upperRight, lowerLeft, upperRight);
        result.x = lowerLeft.x;
        result.y = lowerLeft.y;
        result.width = upperRight.x;
        result.height = upperRight.y;
        return result;
      };
      BoundingRectangle.clone = function(rectangle, result) {
        if (!defined_default(rectangle)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new BoundingRectangle(
            rectangle.x,
            rectangle.y,
            rectangle.width,
            rectangle.height
          );
        }
        result.x = rectangle.x;
        result.y = rectangle.y;
        result.width = rectangle.width;
        result.height = rectangle.height;
        return result;
      };
      BoundingRectangle.union = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        if (!defined_default(result)) {
          result = new BoundingRectangle();
        }
        const lowerLeftX = Math.min(left.x, right.x);
        const lowerLeftY = Math.min(left.y, right.y);
        const upperRightX = Math.max(left.x + left.width, right.x + right.width);
        const upperRightY = Math.max(left.y + left.height, right.y + right.height);
        result.x = lowerLeftX;
        result.y = lowerLeftY;
        result.width = upperRightX - lowerLeftX;
        result.height = upperRightY - lowerLeftY;
        return result;
      };
      BoundingRectangle.expand = function(rectangle, point, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        Check_default.typeOf.object("point", point);
        result = BoundingRectangle.clone(rectangle, result);
        const width = point.x - result.x;
        const height = point.y - result.y;
        if (width > result.width) {
          result.width = width;
        } else if (width < 0) {
          result.width -= width;
          result.x = point.x;
        }
        if (height > result.height) {
          result.height = height;
        } else if (height < 0) {
          result.height -= height;
          result.y = point.y;
        }
        return result;
      };
      BoundingRectangle.intersect = function(left, right) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        const leftX = left.x;
        const leftY = left.y;
        const rightX = right.x;
        const rightY = right.y;
        if (!(leftX > rightX + right.width || leftX + left.width < rightX || leftY + left.height < rightY || leftY > rightY + right.height)) {
          return Intersect_default.INTERSECTING;
        }
        return Intersect_default.OUTSIDE;
      };
      BoundingRectangle.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && left.x === right.x && left.y === right.y && left.width === right.width && left.height === right.height;
      };
      BoundingRectangle.prototype.clone = function(result) {
        return BoundingRectangle.clone(this, result);
      };
      BoundingRectangle.prototype.intersect = function(right) {
        return BoundingRectangle.intersect(this, right);
      };
      BoundingRectangle.prototype.equals = function(right) {
        return BoundingRectangle.equals(this, right);
      };
      BoundingRectangle_default = BoundingRectangle;
    }
  });

  // packages/engine/Source/Core/AxisAlignedBoundingBox.js
  function AxisAlignedBoundingBox(minimum, maximum, center) {
    this.minimum = Cartesian3_default.clone(defaultValue_default(minimum, Cartesian3_default.ZERO));
    this.maximum = Cartesian3_default.clone(defaultValue_default(maximum, Cartesian3_default.ZERO));
    if (!defined_default(center)) {
      center = Cartesian3_default.midpoint(this.minimum, this.maximum, new Cartesian3_default());
    } else {
      center = Cartesian3_default.clone(center);
    }
    this.center = center;
  }
  var intersectScratch, AxisAlignedBoundingBox_default;
  var init_AxisAlignedBoundingBox = __esm({
    "packages/engine/Source/Core/AxisAlignedBoundingBox.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_Intersect();
      AxisAlignedBoundingBox.fromCorners = function(minimum, maximum, result) {
        Check_default.defined("minimum", minimum);
        Check_default.defined("maximum", maximum);
        if (!defined_default(result)) {
          result = new AxisAlignedBoundingBox();
        }
        result.minimum = Cartesian3_default.clone(minimum, result.minimum);
        result.maximum = Cartesian3_default.clone(maximum, result.maximum);
        result.center = Cartesian3_default.midpoint(minimum, maximum, result.center);
        return result;
      };
      AxisAlignedBoundingBox.fromPoints = function(positions, result) {
        if (!defined_default(result)) {
          result = new AxisAlignedBoundingBox();
        }
        if (!defined_default(positions) || positions.length === 0) {
          result.minimum = Cartesian3_default.clone(Cartesian3_default.ZERO, result.minimum);
          result.maximum = Cartesian3_default.clone(Cartesian3_default.ZERO, result.maximum);
          result.center = Cartesian3_default.clone(Cartesian3_default.ZERO, result.center);
          return result;
        }
        let minimumX = positions[0].x;
        let minimumY = positions[0].y;
        let minimumZ = positions[0].z;
        let maximumX = positions[0].x;
        let maximumY = positions[0].y;
        let maximumZ = positions[0].z;
        const length = positions.length;
        for (let i = 1; i < length; i++) {
          const p = positions[i];
          const x = p.x;
          const y = p.y;
          const z = p.z;
          minimumX = Math.min(x, minimumX);
          maximumX = Math.max(x, maximumX);
          minimumY = Math.min(y, minimumY);
          maximumY = Math.max(y, maximumY);
          minimumZ = Math.min(z, minimumZ);
          maximumZ = Math.max(z, maximumZ);
        }
        const minimum = result.minimum;
        minimum.x = minimumX;
        minimum.y = minimumY;
        minimum.z = minimumZ;
        const maximum = result.maximum;
        maximum.x = maximumX;
        maximum.y = maximumY;
        maximum.z = maximumZ;
        result.center = Cartesian3_default.midpoint(minimum, maximum, result.center);
        return result;
      };
      AxisAlignedBoundingBox.clone = function(box, result) {
        if (!defined_default(box)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new AxisAlignedBoundingBox(box.minimum, box.maximum, box.center);
        }
        result.minimum = Cartesian3_default.clone(box.minimum, result.minimum);
        result.maximum = Cartesian3_default.clone(box.maximum, result.maximum);
        result.center = Cartesian3_default.clone(box.center, result.center);
        return result;
      };
      AxisAlignedBoundingBox.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && Cartesian3_default.equals(left.center, right.center) && Cartesian3_default.equals(left.minimum, right.minimum) && Cartesian3_default.equals(left.maximum, right.maximum);
      };
      intersectScratch = new Cartesian3_default();
      AxisAlignedBoundingBox.intersectPlane = function(box, plane) {
        Check_default.defined("box", box);
        Check_default.defined("plane", plane);
        intersectScratch = Cartesian3_default.subtract(
          box.maximum,
          box.minimum,
          intersectScratch
        );
        const h = Cartesian3_default.multiplyByScalar(
          intersectScratch,
          0.5,
          intersectScratch
        );
        const normal2 = plane.normal;
        const e = h.x * Math.abs(normal2.x) + h.y * Math.abs(normal2.y) + h.z * Math.abs(normal2.z);
        const s = Cartesian3_default.dot(box.center, normal2) + plane.distance;
        if (s - e > 0) {
          return Intersect_default.INSIDE;
        }
        if (s + e < 0) {
          return Intersect_default.OUTSIDE;
        }
        return Intersect_default.INTERSECTING;
      };
      AxisAlignedBoundingBox.prototype.clone = function(result) {
        return AxisAlignedBoundingBox.clone(this, result);
      };
      AxisAlignedBoundingBox.prototype.intersectPlane = function(plane) {
        return AxisAlignedBoundingBox.intersectPlane(this, plane);
      };
      AxisAlignedBoundingBox.prototype.equals = function(right) {
        return AxisAlignedBoundingBox.equals(this, right);
      };
      AxisAlignedBoundingBox_default = AxisAlignedBoundingBox;
    }
  });

  // packages/engine/Source/Core/EllipsoidTangentPlane.js
  function EllipsoidTangentPlane(origin, ellipsoid) {
    Check_default.defined("origin", origin);
    ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
    origin = ellipsoid.scaleToGeodeticSurface(origin);
    if (!defined_default(origin)) {
      throw new DeveloperError_default(
        "origin must not be at the center of the ellipsoid."
      );
    }
    const eastNorthUp = Transforms_default.eastNorthUpToFixedFrame(origin, ellipsoid);
    this._ellipsoid = ellipsoid;
    this._origin = origin;
    this._xAxis = Cartesian3_default.fromCartesian4(
      Matrix4_default.getColumn(eastNorthUp, 0, scratchCart4)
    );
    this._yAxis = Cartesian3_default.fromCartesian4(
      Matrix4_default.getColumn(eastNorthUp, 1, scratchCart4)
    );
    const normal2 = Cartesian3_default.fromCartesian4(
      Matrix4_default.getColumn(eastNorthUp, 2, scratchCart4)
    );
    this._plane = Plane_default.fromPointNormal(origin, normal2);
  }
  var scratchCart4, tmp, scratchProjectPointOntoPlaneRay, scratchProjectPointOntoPlaneCartesian3, projectPointsOntoEllipsoidScratch, EllipsoidTangentPlane_default;
  var init_EllipsoidTangentPlane = __esm({
    "packages/engine/Source/Core/EllipsoidTangentPlane.js"() {
      init_AxisAlignedBoundingBox();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartesian4();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_IntersectionTests();
      init_Matrix4();
      init_Plane();
      init_Ray();
      init_Transforms();
      scratchCart4 = new Cartesian4_default();
      Object.defineProperties(EllipsoidTangentPlane.prototype, {
        /**
         * Gets the ellipsoid.
         * @memberof EllipsoidTangentPlane.prototype
         * @type {Ellipsoid}
         */
        ellipsoid: {
          get: function() {
            return this._ellipsoid;
          }
        },
        /**
         * Gets the origin.
         * @memberof EllipsoidTangentPlane.prototype
         * @type {Cartesian3}
         */
        origin: {
          get: function() {
            return this._origin;
          }
        },
        /**
         * Gets the plane which is tangent to the ellipsoid.
         * @memberof EllipsoidTangentPlane.prototype
         * @readonly
         * @type {Plane}
         */
        plane: {
          get: function() {
            return this._plane;
          }
        },
        /**
         * Gets the local X-axis (east) of the tangent plane.
         * @memberof EllipsoidTangentPlane.prototype
         * @readonly
         * @type {Cartesian3}
         */
        xAxis: {
          get: function() {
            return this._xAxis;
          }
        },
        /**
         * Gets the local Y-axis (north) of the tangent plane.
         * @memberof EllipsoidTangentPlane.prototype
         * @readonly
         * @type {Cartesian3}
         */
        yAxis: {
          get: function() {
            return this._yAxis;
          }
        },
        /**
         * Gets the local Z-axis (up) of the tangent plane.
         * @memberof EllipsoidTangentPlane.prototype
         * @readonly
         * @type {Cartesian3}
         */
        zAxis: {
          get: function() {
            return this._plane.normal;
          }
        }
      });
      tmp = new AxisAlignedBoundingBox_default();
      EllipsoidTangentPlane.fromPoints = function(cartesians, ellipsoid) {
        Check_default.defined("cartesians", cartesians);
        const box = AxisAlignedBoundingBox_default.fromPoints(cartesians, tmp);
        return new EllipsoidTangentPlane(box.center, ellipsoid);
      };
      scratchProjectPointOntoPlaneRay = new Ray_default();
      scratchProjectPointOntoPlaneCartesian3 = new Cartesian3_default();
      EllipsoidTangentPlane.prototype.projectPointOntoPlane = function(cartesian11, result) {
        Check_default.defined("cartesian", cartesian11);
        const ray = scratchProjectPointOntoPlaneRay;
        ray.origin = cartesian11;
        Cartesian3_default.normalize(cartesian11, ray.direction);
        let intersectionPoint = IntersectionTests_default.rayPlane(
          ray,
          this._plane,
          scratchProjectPointOntoPlaneCartesian3
        );
        if (!defined_default(intersectionPoint)) {
          Cartesian3_default.negate(ray.direction, ray.direction);
          intersectionPoint = IntersectionTests_default.rayPlane(
            ray,
            this._plane,
            scratchProjectPointOntoPlaneCartesian3
          );
        }
        if (defined_default(intersectionPoint)) {
          const v3 = Cartesian3_default.subtract(
            intersectionPoint,
            this._origin,
            intersectionPoint
          );
          const x = Cartesian3_default.dot(this._xAxis, v3);
          const y = Cartesian3_default.dot(this._yAxis, v3);
          if (!defined_default(result)) {
            return new Cartesian2_default(x, y);
          }
          result.x = x;
          result.y = y;
          return result;
        }
        return void 0;
      };
      EllipsoidTangentPlane.prototype.projectPointsOntoPlane = function(cartesians, result) {
        Check_default.defined("cartesians", cartesians);
        if (!defined_default(result)) {
          result = [];
        }
        let count = 0;
        const length = cartesians.length;
        for (let i = 0; i < length; i++) {
          const p = this.projectPointOntoPlane(cartesians[i], result[count]);
          if (defined_default(p)) {
            result[count] = p;
            count++;
          }
        }
        result.length = count;
        return result;
      };
      EllipsoidTangentPlane.prototype.projectPointToNearestOnPlane = function(cartesian11, result) {
        Check_default.defined("cartesian", cartesian11);
        if (!defined_default(result)) {
          result = new Cartesian2_default();
        }
        const ray = scratchProjectPointOntoPlaneRay;
        ray.origin = cartesian11;
        Cartesian3_default.clone(this._plane.normal, ray.direction);
        let intersectionPoint = IntersectionTests_default.rayPlane(
          ray,
          this._plane,
          scratchProjectPointOntoPlaneCartesian3
        );
        if (!defined_default(intersectionPoint)) {
          Cartesian3_default.negate(ray.direction, ray.direction);
          intersectionPoint = IntersectionTests_default.rayPlane(
            ray,
            this._plane,
            scratchProjectPointOntoPlaneCartesian3
          );
        }
        const v3 = Cartesian3_default.subtract(
          intersectionPoint,
          this._origin,
          intersectionPoint
        );
        const x = Cartesian3_default.dot(this._xAxis, v3);
        const y = Cartesian3_default.dot(this._yAxis, v3);
        result.x = x;
        result.y = y;
        return result;
      };
      EllipsoidTangentPlane.prototype.projectPointsToNearestOnPlane = function(cartesians, result) {
        Check_default.defined("cartesians", cartesians);
        if (!defined_default(result)) {
          result = [];
        }
        const length = cartesians.length;
        result.length = length;
        for (let i = 0; i < length; i++) {
          result[i] = this.projectPointToNearestOnPlane(cartesians[i], result[i]);
        }
        return result;
      };
      projectPointsOntoEllipsoidScratch = new Cartesian3_default();
      EllipsoidTangentPlane.prototype.projectPointOntoEllipsoid = function(cartesian11, result) {
        Check_default.defined("cartesian", cartesian11);
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        const ellipsoid = this._ellipsoid;
        const origin = this._origin;
        const xAxis = this._xAxis;
        const yAxis = this._yAxis;
        const tmp2 = projectPointsOntoEllipsoidScratch;
        Cartesian3_default.multiplyByScalar(xAxis, cartesian11.x, tmp2);
        result = Cartesian3_default.add(origin, tmp2, result);
        Cartesian3_default.multiplyByScalar(yAxis, cartesian11.y, tmp2);
        Cartesian3_default.add(result, tmp2, result);
        ellipsoid.scaleToGeocentricSurface(result, result);
        return result;
      };
      EllipsoidTangentPlane.prototype.projectPointsOntoEllipsoid = function(cartesians, result) {
        Check_default.defined("cartesians", cartesians);
        const length = cartesians.length;
        if (!defined_default(result)) {
          result = new Array(length);
        } else {
          result.length = length;
        }
        for (let i = 0; i < length; ++i) {
          result[i] = this.projectPointOntoEllipsoid(cartesians[i], result[i]);
        }
        return result;
      };
      EllipsoidTangentPlane_default = EllipsoidTangentPlane;
    }
  });

  // packages/engine/Source/Core/OrientedBoundingBox.js
  function OrientedBoundingBox(center, halfAxes) {
    this.center = Cartesian3_default.clone(defaultValue_default(center, Cartesian3_default.ZERO));
    this.halfAxes = Matrix3_default.clone(defaultValue_default(halfAxes, Matrix3_default.ZERO));
  }
  function fromPlaneExtents(planeOrigin, planeXAxis, planeYAxis, planeZAxis, minimumX, maximumX, minimumY, maximumY, minimumZ, maximumZ, result) {
    if (!defined_default(minimumX) || !defined_default(maximumX) || !defined_default(minimumY) || !defined_default(maximumY) || !defined_default(minimumZ) || !defined_default(maximumZ)) {
      throw new DeveloperError_default(
        "all extents (minimum/maximum X/Y/Z) are required."
      );
    }
    if (!defined_default(result)) {
      result = new OrientedBoundingBox();
    }
    const halfAxes = result.halfAxes;
    Matrix3_default.setColumn(halfAxes, 0, planeXAxis, halfAxes);
    Matrix3_default.setColumn(halfAxes, 1, planeYAxis, halfAxes);
    Matrix3_default.setColumn(halfAxes, 2, planeZAxis, halfAxes);
    let centerOffset = scratchOffset;
    centerOffset.x = (minimumX + maximumX) / 2;
    centerOffset.y = (minimumY + maximumY) / 2;
    centerOffset.z = (minimumZ + maximumZ) / 2;
    const scale = scratchScale2;
    scale.x = (maximumX - minimumX) / 2;
    scale.y = (maximumY - minimumY) / 2;
    scale.z = (maximumZ - minimumZ) / 2;
    const center = result.center;
    centerOffset = Matrix3_default.multiplyByVector(halfAxes, centerOffset, centerOffset);
    Cartesian3_default.add(planeOrigin, centerOffset, center);
    Matrix3_default.multiplyByScale(halfAxes, scale, halfAxes);
    return result;
  }
  var scratchCartesian15, scratchCartesian25, scratchCartesian36, scratchCartesian42, scratchCartesian5, scratchCartesian6, scratchCovarianceResult, scratchEigenResult, scratchOffset, scratchScale2, scratchRectangleCenterCartographic, scratchRectangleCenter, scratchPerimeterCartographicNC, scratchPerimeterCartographicNW, scratchPerimeterCartographicCW, scratchPerimeterCartographicSW, scratchPerimeterCartographicSC, scratchPerimeterCartesianNC, scratchPerimeterCartesianNW, scratchPerimeterCartesianCW, scratchPerimeterCartesianSW, scratchPerimeterCartesianSC, scratchPerimeterProjectedNC, scratchPerimeterProjectedNW, scratchPerimeterProjectedCW, scratchPerimeterProjectedSW, scratchPerimeterProjectedSC, scratchPlaneOrigin, scratchPlaneNormal, scratchPlaneXAxis, scratchHorizonCartesian, scratchHorizonProjected, scratchMaxY, scratchMinY, scratchZ, scratchPlane, scratchCartesianU, scratchCartesianV, scratchCartesianW, scratchValidAxis2, scratchValidAxis3, scratchPPrime, scratchCorner, scratchToCenter, scratchXAxis, scratchYAxis, scratchZAxis, scratchRotationScale, scratchBoundingSphere, OrientedBoundingBox_default;
  var init_OrientedBoundingBox = __esm({
    "packages/engine/Source/Core/OrientedBoundingBox.js"() {
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_EllipsoidTangentPlane();
      init_Intersect();
      init_Interval();
      init_Math();
      init_Matrix3();
      init_Matrix4();
      init_Plane();
      init_Rectangle();
      OrientedBoundingBox.packedLength = Cartesian3_default.packedLength + Matrix3_default.packedLength;
      OrientedBoundingBox.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        Cartesian3_default.pack(value.center, array, startingIndex);
        Matrix3_default.pack(value.halfAxes, array, startingIndex + Cartesian3_default.packedLength);
        return array;
      };
      OrientedBoundingBox.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new OrientedBoundingBox();
        }
        Cartesian3_default.unpack(array, startingIndex, result.center);
        Matrix3_default.unpack(
          array,
          startingIndex + Cartesian3_default.packedLength,
          result.halfAxes
        );
        return result;
      };
      scratchCartesian15 = new Cartesian3_default();
      scratchCartesian25 = new Cartesian3_default();
      scratchCartesian36 = new Cartesian3_default();
      scratchCartesian42 = new Cartesian3_default();
      scratchCartesian5 = new Cartesian3_default();
      scratchCartesian6 = new Cartesian3_default();
      scratchCovarianceResult = new Matrix3_default();
      scratchEigenResult = {
        unitary: new Matrix3_default(),
        diagonal: new Matrix3_default()
      };
      OrientedBoundingBox.fromPoints = function(positions, result) {
        if (!defined_default(result)) {
          result = new OrientedBoundingBox();
        }
        if (!defined_default(positions) || positions.length === 0) {
          result.halfAxes = Matrix3_default.ZERO;
          result.center = Cartesian3_default.ZERO;
          return result;
        }
        let i;
        const length = positions.length;
        const meanPoint = Cartesian3_default.clone(positions[0], scratchCartesian15);
        for (i = 1; i < length; i++) {
          Cartesian3_default.add(meanPoint, positions[i], meanPoint);
        }
        const invLength = 1 / length;
        Cartesian3_default.multiplyByScalar(meanPoint, invLength, meanPoint);
        let exx = 0;
        let exy = 0;
        let exz = 0;
        let eyy = 0;
        let eyz = 0;
        let ezz = 0;
        let p;
        for (i = 0; i < length; i++) {
          p = Cartesian3_default.subtract(positions[i], meanPoint, scratchCartesian25);
          exx += p.x * p.x;
          exy += p.x * p.y;
          exz += p.x * p.z;
          eyy += p.y * p.y;
          eyz += p.y * p.z;
          ezz += p.z * p.z;
        }
        exx *= invLength;
        exy *= invLength;
        exz *= invLength;
        eyy *= invLength;
        eyz *= invLength;
        ezz *= invLength;
        const covarianceMatrix = scratchCovarianceResult;
        covarianceMatrix[0] = exx;
        covarianceMatrix[1] = exy;
        covarianceMatrix[2] = exz;
        covarianceMatrix[3] = exy;
        covarianceMatrix[4] = eyy;
        covarianceMatrix[5] = eyz;
        covarianceMatrix[6] = exz;
        covarianceMatrix[7] = eyz;
        covarianceMatrix[8] = ezz;
        const eigenDecomposition = Matrix3_default.computeEigenDecomposition(
          covarianceMatrix,
          scratchEigenResult
        );
        const rotation = Matrix3_default.clone(eigenDecomposition.unitary, result.halfAxes);
        let v12 = Matrix3_default.getColumn(rotation, 0, scratchCartesian42);
        let v22 = Matrix3_default.getColumn(rotation, 1, scratchCartesian5);
        let v3 = Matrix3_default.getColumn(rotation, 2, scratchCartesian6);
        let u12 = -Number.MAX_VALUE;
        let u22 = -Number.MAX_VALUE;
        let u3 = -Number.MAX_VALUE;
        let l1 = Number.MAX_VALUE;
        let l2 = Number.MAX_VALUE;
        let l3 = Number.MAX_VALUE;
        for (i = 0; i < length; i++) {
          p = positions[i];
          u12 = Math.max(Cartesian3_default.dot(v12, p), u12);
          u22 = Math.max(Cartesian3_default.dot(v22, p), u22);
          u3 = Math.max(Cartesian3_default.dot(v3, p), u3);
          l1 = Math.min(Cartesian3_default.dot(v12, p), l1);
          l2 = Math.min(Cartesian3_default.dot(v22, p), l2);
          l3 = Math.min(Cartesian3_default.dot(v3, p), l3);
        }
        v12 = Cartesian3_default.multiplyByScalar(v12, 0.5 * (l1 + u12), v12);
        v22 = Cartesian3_default.multiplyByScalar(v22, 0.5 * (l2 + u22), v22);
        v3 = Cartesian3_default.multiplyByScalar(v3, 0.5 * (l3 + u3), v3);
        const center = Cartesian3_default.add(v12, v22, result.center);
        Cartesian3_default.add(center, v3, center);
        const scale = scratchCartesian36;
        scale.x = u12 - l1;
        scale.y = u22 - l2;
        scale.z = u3 - l3;
        Cartesian3_default.multiplyByScalar(scale, 0.5, scale);
        Matrix3_default.multiplyByScale(result.halfAxes, scale, result.halfAxes);
        return result;
      };
      scratchOffset = new Cartesian3_default();
      scratchScale2 = new Cartesian3_default();
      scratchRectangleCenterCartographic = new Cartographic_default();
      scratchRectangleCenter = new Cartesian3_default();
      scratchPerimeterCartographicNC = new Cartographic_default();
      scratchPerimeterCartographicNW = new Cartographic_default();
      scratchPerimeterCartographicCW = new Cartographic_default();
      scratchPerimeterCartographicSW = new Cartographic_default();
      scratchPerimeterCartographicSC = new Cartographic_default();
      scratchPerimeterCartesianNC = new Cartesian3_default();
      scratchPerimeterCartesianNW = new Cartesian3_default();
      scratchPerimeterCartesianCW = new Cartesian3_default();
      scratchPerimeterCartesianSW = new Cartesian3_default();
      scratchPerimeterCartesianSC = new Cartesian3_default();
      scratchPerimeterProjectedNC = new Cartesian2_default();
      scratchPerimeterProjectedNW = new Cartesian2_default();
      scratchPerimeterProjectedCW = new Cartesian2_default();
      scratchPerimeterProjectedSW = new Cartesian2_default();
      scratchPerimeterProjectedSC = new Cartesian2_default();
      scratchPlaneOrigin = new Cartesian3_default();
      scratchPlaneNormal = new Cartesian3_default();
      scratchPlaneXAxis = new Cartesian3_default();
      scratchHorizonCartesian = new Cartesian3_default();
      scratchHorizonProjected = new Cartesian2_default();
      scratchMaxY = new Cartesian3_default();
      scratchMinY = new Cartesian3_default();
      scratchZ = new Cartesian3_default();
      scratchPlane = new Plane_default(Cartesian3_default.UNIT_X, 0);
      OrientedBoundingBox.fromRectangle = function(rectangle, minimumHeight, maximumHeight, ellipsoid, result) {
        if (!defined_default(rectangle)) {
          throw new DeveloperError_default("rectangle is required");
        }
        if (rectangle.width < 0 || rectangle.width > Math_default.TWO_PI) {
          throw new DeveloperError_default("Rectangle width must be between 0 and 2 * pi");
        }
        if (rectangle.height < 0 || rectangle.height > Math_default.PI) {
          throw new DeveloperError_default("Rectangle height must be between 0 and pi");
        }
        if (defined_default(ellipsoid) && !Math_default.equalsEpsilon(
          ellipsoid.radii.x,
          ellipsoid.radii.y,
          Math_default.EPSILON15
        )) {
          throw new DeveloperError_default(
            "Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)"
          );
        }
        minimumHeight = defaultValue_default(minimumHeight, 0);
        maximumHeight = defaultValue_default(maximumHeight, 0);
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        let minX, maxX, minY, maxY, minZ, maxZ, plane;
        if (rectangle.width <= Math_default.PI) {
          const tangentPointCartographic = Rectangle_default.center(
            rectangle,
            scratchRectangleCenterCartographic
          );
          const tangentPoint = ellipsoid.cartographicToCartesian(
            tangentPointCartographic,
            scratchRectangleCenter
          );
          const tangentPlane = new EllipsoidTangentPlane_default(tangentPoint, ellipsoid);
          plane = tangentPlane.plane;
          const lonCenter = tangentPointCartographic.longitude;
          const latCenter = rectangle.south < 0 && rectangle.north > 0 ? 0 : tangentPointCartographic.latitude;
          const perimeterCartographicNC = Cartographic_default.fromRadians(
            lonCenter,
            rectangle.north,
            maximumHeight,
            scratchPerimeterCartographicNC
          );
          const perimeterCartographicNW = Cartographic_default.fromRadians(
            rectangle.west,
            rectangle.north,
            maximumHeight,
            scratchPerimeterCartographicNW
          );
          const perimeterCartographicCW = Cartographic_default.fromRadians(
            rectangle.west,
            latCenter,
            maximumHeight,
            scratchPerimeterCartographicCW
          );
          const perimeterCartographicSW = Cartographic_default.fromRadians(
            rectangle.west,
            rectangle.south,
            maximumHeight,
            scratchPerimeterCartographicSW
          );
          const perimeterCartographicSC = Cartographic_default.fromRadians(
            lonCenter,
            rectangle.south,
            maximumHeight,
            scratchPerimeterCartographicSC
          );
          const perimeterCartesianNC = ellipsoid.cartographicToCartesian(
            perimeterCartographicNC,
            scratchPerimeterCartesianNC
          );
          let perimeterCartesianNW = ellipsoid.cartographicToCartesian(
            perimeterCartographicNW,
            scratchPerimeterCartesianNW
          );
          const perimeterCartesianCW = ellipsoid.cartographicToCartesian(
            perimeterCartographicCW,
            scratchPerimeterCartesianCW
          );
          let perimeterCartesianSW = ellipsoid.cartographicToCartesian(
            perimeterCartographicSW,
            scratchPerimeterCartesianSW
          );
          const perimeterCartesianSC = ellipsoid.cartographicToCartesian(
            perimeterCartographicSC,
            scratchPerimeterCartesianSC
          );
          const perimeterProjectedNC = tangentPlane.projectPointToNearestOnPlane(
            perimeterCartesianNC,
            scratchPerimeterProjectedNC
          );
          const perimeterProjectedNW = tangentPlane.projectPointToNearestOnPlane(
            perimeterCartesianNW,
            scratchPerimeterProjectedNW
          );
          const perimeterProjectedCW = tangentPlane.projectPointToNearestOnPlane(
            perimeterCartesianCW,
            scratchPerimeterProjectedCW
          );
          const perimeterProjectedSW = tangentPlane.projectPointToNearestOnPlane(
            perimeterCartesianSW,
            scratchPerimeterProjectedSW
          );
          const perimeterProjectedSC = tangentPlane.projectPointToNearestOnPlane(
            perimeterCartesianSC,
            scratchPerimeterProjectedSC
          );
          minX = Math.min(
            perimeterProjectedNW.x,
            perimeterProjectedCW.x,
            perimeterProjectedSW.x
          );
          maxX = -minX;
          maxY = Math.max(perimeterProjectedNW.y, perimeterProjectedNC.y);
          minY = Math.min(perimeterProjectedSW.y, perimeterProjectedSC.y);
          perimeterCartographicNW.height = perimeterCartographicSW.height = minimumHeight;
          perimeterCartesianNW = ellipsoid.cartographicToCartesian(
            perimeterCartographicNW,
            scratchPerimeterCartesianNW
          );
          perimeterCartesianSW = ellipsoid.cartographicToCartesian(
            perimeterCartographicSW,
            scratchPerimeterCartesianSW
          );
          minZ = Math.min(
            Plane_default.getPointDistance(plane, perimeterCartesianNW),
            Plane_default.getPointDistance(plane, perimeterCartesianSW)
          );
          maxZ = maximumHeight;
          return fromPlaneExtents(
            tangentPlane.origin,
            tangentPlane.xAxis,
            tangentPlane.yAxis,
            tangentPlane.zAxis,
            minX,
            maxX,
            minY,
            maxY,
            minZ,
            maxZ,
            result
          );
        }
        const fullyAboveEquator = rectangle.south > 0;
        const fullyBelowEquator = rectangle.north < 0;
        const latitudeNearestToEquator = fullyAboveEquator ? rectangle.south : fullyBelowEquator ? rectangle.north : 0;
        const centerLongitude = Rectangle_default.center(
          rectangle,
          scratchRectangleCenterCartographic
        ).longitude;
        const planeOrigin = Cartesian3_default.fromRadians(
          centerLongitude,
          latitudeNearestToEquator,
          maximumHeight,
          ellipsoid,
          scratchPlaneOrigin
        );
        planeOrigin.z = 0;
        const isPole = Math.abs(planeOrigin.x) < Math_default.EPSILON10 && Math.abs(planeOrigin.y) < Math_default.EPSILON10;
        const planeNormal = !isPole ? Cartesian3_default.normalize(planeOrigin, scratchPlaneNormal) : Cartesian3_default.UNIT_X;
        const planeYAxis = Cartesian3_default.UNIT_Z;
        const planeXAxis = Cartesian3_default.cross(
          planeNormal,
          planeYAxis,
          scratchPlaneXAxis
        );
        plane = Plane_default.fromPointNormal(planeOrigin, planeNormal, scratchPlane);
        const horizonCartesian = Cartesian3_default.fromRadians(
          centerLongitude + Math_default.PI_OVER_TWO,
          latitudeNearestToEquator,
          maximumHeight,
          ellipsoid,
          scratchHorizonCartesian
        );
        maxX = Cartesian3_default.dot(
          Plane_default.projectPointOntoPlane(
            plane,
            horizonCartesian,
            scratchHorizonProjected
          ),
          planeXAxis
        );
        minX = -maxX;
        maxY = Cartesian3_default.fromRadians(
          0,
          rectangle.north,
          fullyBelowEquator ? minimumHeight : maximumHeight,
          ellipsoid,
          scratchMaxY
        ).z;
        minY = Cartesian3_default.fromRadians(
          0,
          rectangle.south,
          fullyAboveEquator ? minimumHeight : maximumHeight,
          ellipsoid,
          scratchMinY
        ).z;
        const farZ = Cartesian3_default.fromRadians(
          rectangle.east,
          latitudeNearestToEquator,
          maximumHeight,
          ellipsoid,
          scratchZ
        );
        minZ = Plane_default.getPointDistance(plane, farZ);
        maxZ = 0;
        return fromPlaneExtents(
          planeOrigin,
          planeXAxis,
          planeYAxis,
          planeNormal,
          minX,
          maxX,
          minY,
          maxY,
          minZ,
          maxZ,
          result
        );
      };
      OrientedBoundingBox.fromTransformation = function(transformation, result) {
        Check_default.typeOf.object("transformation", transformation);
        if (!defined_default(result)) {
          result = new OrientedBoundingBox();
        }
        result.center = Matrix4_default.getTranslation(transformation, result.center);
        result.halfAxes = Matrix4_default.getMatrix3(transformation, result.halfAxes);
        result.halfAxes = Matrix3_default.multiplyByScalar(
          result.halfAxes,
          0.5,
          result.halfAxes
        );
        return result;
      };
      OrientedBoundingBox.clone = function(box, result) {
        if (!defined_default(box)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new OrientedBoundingBox(box.center, box.halfAxes);
        }
        Cartesian3_default.clone(box.center, result.center);
        Matrix3_default.clone(box.halfAxes, result.halfAxes);
        return result;
      };
      OrientedBoundingBox.intersectPlane = function(box, plane) {
        if (!defined_default(box)) {
          throw new DeveloperError_default("box is required.");
        }
        if (!defined_default(plane)) {
          throw new DeveloperError_default("plane is required.");
        }
        const center = box.center;
        const normal2 = plane.normal;
        const halfAxes = box.halfAxes;
        const normalX = normal2.x, normalY = normal2.y, normalZ = normal2.z;
        const radEffective = Math.abs(
          normalX * halfAxes[Matrix3_default.COLUMN0ROW0] + normalY * halfAxes[Matrix3_default.COLUMN0ROW1] + normalZ * halfAxes[Matrix3_default.COLUMN0ROW2]
        ) + Math.abs(
          normalX * halfAxes[Matrix3_default.COLUMN1ROW0] + normalY * halfAxes[Matrix3_default.COLUMN1ROW1] + normalZ * halfAxes[Matrix3_default.COLUMN1ROW2]
        ) + Math.abs(
          normalX * halfAxes[Matrix3_default.COLUMN2ROW0] + normalY * halfAxes[Matrix3_default.COLUMN2ROW1] + normalZ * halfAxes[Matrix3_default.COLUMN2ROW2]
        );
        const distanceToPlane = Cartesian3_default.dot(normal2, center) + plane.distance;
        if (distanceToPlane <= -radEffective) {
          return Intersect_default.OUTSIDE;
        } else if (distanceToPlane >= radEffective) {
          return Intersect_default.INSIDE;
        }
        return Intersect_default.INTERSECTING;
      };
      scratchCartesianU = new Cartesian3_default();
      scratchCartesianV = new Cartesian3_default();
      scratchCartesianW = new Cartesian3_default();
      scratchValidAxis2 = new Cartesian3_default();
      scratchValidAxis3 = new Cartesian3_default();
      scratchPPrime = new Cartesian3_default();
      OrientedBoundingBox.distanceSquaredTo = function(box, cartesian11) {
        if (!defined_default(box)) {
          throw new DeveloperError_default("box is required.");
        }
        if (!defined_default(cartesian11)) {
          throw new DeveloperError_default("cartesian is required.");
        }
        const offset = Cartesian3_default.subtract(cartesian11, box.center, scratchOffset);
        const halfAxes = box.halfAxes;
        let u3 = Matrix3_default.getColumn(halfAxes, 0, scratchCartesianU);
        let v3 = Matrix3_default.getColumn(halfAxes, 1, scratchCartesianV);
        let w = Matrix3_default.getColumn(halfAxes, 2, scratchCartesianW);
        const uHalf = Cartesian3_default.magnitude(u3);
        const vHalf = Cartesian3_default.magnitude(v3);
        const wHalf = Cartesian3_default.magnitude(w);
        let uValid = true;
        let vValid = true;
        let wValid = true;
        if (uHalf > 0) {
          Cartesian3_default.divideByScalar(u3, uHalf, u3);
        } else {
          uValid = false;
        }
        if (vHalf > 0) {
          Cartesian3_default.divideByScalar(v3, vHalf, v3);
        } else {
          vValid = false;
        }
        if (wHalf > 0) {
          Cartesian3_default.divideByScalar(w, wHalf, w);
        } else {
          wValid = false;
        }
        const numberOfDegenerateAxes = !uValid + !vValid + !wValid;
        let validAxis1;
        let validAxis2;
        let validAxis3;
        if (numberOfDegenerateAxes === 1) {
          let degenerateAxis = u3;
          validAxis1 = v3;
          validAxis2 = w;
          if (!vValid) {
            degenerateAxis = v3;
            validAxis1 = u3;
          } else if (!wValid) {
            degenerateAxis = w;
            validAxis2 = u3;
          }
          validAxis3 = Cartesian3_default.cross(validAxis1, validAxis2, scratchValidAxis3);
          if (degenerateAxis === u3) {
            u3 = validAxis3;
          } else if (degenerateAxis === v3) {
            v3 = validAxis3;
          } else if (degenerateAxis === w) {
            w = validAxis3;
          }
        } else if (numberOfDegenerateAxes === 2) {
          validAxis1 = u3;
          if (vValid) {
            validAxis1 = v3;
          } else if (wValid) {
            validAxis1 = w;
          }
          let crossVector = Cartesian3_default.UNIT_Y;
          if (crossVector.equalsEpsilon(validAxis1, Math_default.EPSILON3)) {
            crossVector = Cartesian3_default.UNIT_X;
          }
          validAxis2 = Cartesian3_default.cross(validAxis1, crossVector, scratchValidAxis2);
          Cartesian3_default.normalize(validAxis2, validAxis2);
          validAxis3 = Cartesian3_default.cross(validAxis1, validAxis2, scratchValidAxis3);
          Cartesian3_default.normalize(validAxis3, validAxis3);
          if (validAxis1 === u3) {
            v3 = validAxis2;
            w = validAxis3;
          } else if (validAxis1 === v3) {
            w = validAxis2;
            u3 = validAxis3;
          } else if (validAxis1 === w) {
            u3 = validAxis2;
            v3 = validAxis3;
          }
        } else if (numberOfDegenerateAxes === 3) {
          u3 = Cartesian3_default.UNIT_X;
          v3 = Cartesian3_default.UNIT_Y;
          w = Cartesian3_default.UNIT_Z;
        }
        const pPrime = scratchPPrime;
        pPrime.x = Cartesian3_default.dot(offset, u3);
        pPrime.y = Cartesian3_default.dot(offset, v3);
        pPrime.z = Cartesian3_default.dot(offset, w);
        let distanceSquared = 0;
        let d;
        if (pPrime.x < -uHalf) {
          d = pPrime.x + uHalf;
          distanceSquared += d * d;
        } else if (pPrime.x > uHalf) {
          d = pPrime.x - uHalf;
          distanceSquared += d * d;
        }
        if (pPrime.y < -vHalf) {
          d = pPrime.y + vHalf;
          distanceSquared += d * d;
        } else if (pPrime.y > vHalf) {
          d = pPrime.y - vHalf;
          distanceSquared += d * d;
        }
        if (pPrime.z < -wHalf) {
          d = pPrime.z + wHalf;
          distanceSquared += d * d;
        } else if (pPrime.z > wHalf) {
          d = pPrime.z - wHalf;
          distanceSquared += d * d;
        }
        return distanceSquared;
      };
      scratchCorner = new Cartesian3_default();
      scratchToCenter = new Cartesian3_default();
      OrientedBoundingBox.computePlaneDistances = function(box, position, direction2, result) {
        if (!defined_default(box)) {
          throw new DeveloperError_default("box is required.");
        }
        if (!defined_default(position)) {
          throw new DeveloperError_default("position is required.");
        }
        if (!defined_default(direction2)) {
          throw new DeveloperError_default("direction is required.");
        }
        if (!defined_default(result)) {
          result = new Interval_default();
        }
        let minDist = Number.POSITIVE_INFINITY;
        let maxDist = Number.NEGATIVE_INFINITY;
        const center = box.center;
        const halfAxes = box.halfAxes;
        const u3 = Matrix3_default.getColumn(halfAxes, 0, scratchCartesianU);
        const v3 = Matrix3_default.getColumn(halfAxes, 1, scratchCartesianV);
        const w = Matrix3_default.getColumn(halfAxes, 2, scratchCartesianW);
        const corner = Cartesian3_default.add(u3, v3, scratchCorner);
        Cartesian3_default.add(corner, w, corner);
        Cartesian3_default.add(corner, center, corner);
        const toCenter = Cartesian3_default.subtract(corner, position, scratchToCenter);
        let mag = Cartesian3_default.dot(direction2, toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        Cartesian3_default.add(center, u3, corner);
        Cartesian3_default.add(corner, v3, corner);
        Cartesian3_default.subtract(corner, w, corner);
        Cartesian3_default.subtract(corner, position, toCenter);
        mag = Cartesian3_default.dot(direction2, toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        Cartesian3_default.add(center, u3, corner);
        Cartesian3_default.subtract(corner, v3, corner);
        Cartesian3_default.add(corner, w, corner);
        Cartesian3_default.subtract(corner, position, toCenter);
        mag = Cartesian3_default.dot(direction2, toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        Cartesian3_default.add(center, u3, corner);
        Cartesian3_default.subtract(corner, v3, corner);
        Cartesian3_default.subtract(corner, w, corner);
        Cartesian3_default.subtract(corner, position, toCenter);
        mag = Cartesian3_default.dot(direction2, toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        Cartesian3_default.subtract(center, u3, corner);
        Cartesian3_default.add(corner, v3, corner);
        Cartesian3_default.add(corner, w, corner);
        Cartesian3_default.subtract(corner, position, toCenter);
        mag = Cartesian3_default.dot(direction2, toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        Cartesian3_default.subtract(center, u3, corner);
        Cartesian3_default.add(corner, v3, corner);
        Cartesian3_default.subtract(corner, w, corner);
        Cartesian3_default.subtract(corner, position, toCenter);
        mag = Cartesian3_default.dot(direction2, toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        Cartesian3_default.subtract(center, u3, corner);
        Cartesian3_default.subtract(corner, v3, corner);
        Cartesian3_default.add(corner, w, corner);
        Cartesian3_default.subtract(corner, position, toCenter);
        mag = Cartesian3_default.dot(direction2, toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        Cartesian3_default.subtract(center, u3, corner);
        Cartesian3_default.subtract(corner, v3, corner);
        Cartesian3_default.subtract(corner, w, corner);
        Cartesian3_default.subtract(corner, position, toCenter);
        mag = Cartesian3_default.dot(direction2, toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        result.start = minDist;
        result.stop = maxDist;
        return result;
      };
      scratchXAxis = new Cartesian3_default();
      scratchYAxis = new Cartesian3_default();
      scratchZAxis = new Cartesian3_default();
      OrientedBoundingBox.computeCorners = function(box, result) {
        Check_default.typeOf.object("box", box);
        if (!defined_default(result)) {
          result = [
            new Cartesian3_default(),
            new Cartesian3_default(),
            new Cartesian3_default(),
            new Cartesian3_default(),
            new Cartesian3_default(),
            new Cartesian3_default(),
            new Cartesian3_default(),
            new Cartesian3_default()
          ];
        }
        const center = box.center;
        const halfAxes = box.halfAxes;
        const xAxis = Matrix3_default.getColumn(halfAxes, 0, scratchXAxis);
        const yAxis = Matrix3_default.getColumn(halfAxes, 1, scratchYAxis);
        const zAxis = Matrix3_default.getColumn(halfAxes, 2, scratchZAxis);
        Cartesian3_default.clone(center, result[0]);
        Cartesian3_default.subtract(result[0], xAxis, result[0]);
        Cartesian3_default.subtract(result[0], yAxis, result[0]);
        Cartesian3_default.subtract(result[0], zAxis, result[0]);
        Cartesian3_default.clone(center, result[1]);
        Cartesian3_default.subtract(result[1], xAxis, result[1]);
        Cartesian3_default.subtract(result[1], yAxis, result[1]);
        Cartesian3_default.add(result[1], zAxis, result[1]);
        Cartesian3_default.clone(center, result[2]);
        Cartesian3_default.subtract(result[2], xAxis, result[2]);
        Cartesian3_default.add(result[2], yAxis, result[2]);
        Cartesian3_default.subtract(result[2], zAxis, result[2]);
        Cartesian3_default.clone(center, result[3]);
        Cartesian3_default.subtract(result[3], xAxis, result[3]);
        Cartesian3_default.add(result[3], yAxis, result[3]);
        Cartesian3_default.add(result[3], zAxis, result[3]);
        Cartesian3_default.clone(center, result[4]);
        Cartesian3_default.add(result[4], xAxis, result[4]);
        Cartesian3_default.subtract(result[4], yAxis, result[4]);
        Cartesian3_default.subtract(result[4], zAxis, result[4]);
        Cartesian3_default.clone(center, result[5]);
        Cartesian3_default.add(result[5], xAxis, result[5]);
        Cartesian3_default.subtract(result[5], yAxis, result[5]);
        Cartesian3_default.add(result[5], zAxis, result[5]);
        Cartesian3_default.clone(center, result[6]);
        Cartesian3_default.add(result[6], xAxis, result[6]);
        Cartesian3_default.add(result[6], yAxis, result[6]);
        Cartesian3_default.subtract(result[6], zAxis, result[6]);
        Cartesian3_default.clone(center, result[7]);
        Cartesian3_default.add(result[7], xAxis, result[7]);
        Cartesian3_default.add(result[7], yAxis, result[7]);
        Cartesian3_default.add(result[7], zAxis, result[7]);
        return result;
      };
      scratchRotationScale = new Matrix3_default();
      OrientedBoundingBox.computeTransformation = function(box, result) {
        Check_default.typeOf.object("box", box);
        if (!defined_default(result)) {
          result = new Matrix4_default();
        }
        const translation2 = box.center;
        const rotationScale = Matrix3_default.multiplyByUniformScale(
          box.halfAxes,
          2,
          scratchRotationScale
        );
        return Matrix4_default.fromRotationTranslation(rotationScale, translation2, result);
      };
      scratchBoundingSphere = new BoundingSphere_default();
      OrientedBoundingBox.isOccluded = function(box, occluder) {
        if (!defined_default(box)) {
          throw new DeveloperError_default("box is required.");
        }
        if (!defined_default(occluder)) {
          throw new DeveloperError_default("occluder is required.");
        }
        const sphere = BoundingSphere_default.fromOrientedBoundingBox(
          box,
          scratchBoundingSphere
        );
        return !occluder.isBoundingSphereVisible(sphere);
      };
      OrientedBoundingBox.prototype.intersectPlane = function(plane) {
        return OrientedBoundingBox.intersectPlane(this, plane);
      };
      OrientedBoundingBox.prototype.distanceSquaredTo = function(cartesian11) {
        return OrientedBoundingBox.distanceSquaredTo(this, cartesian11);
      };
      OrientedBoundingBox.prototype.computePlaneDistances = function(position, direction2, result) {
        return OrientedBoundingBox.computePlaneDistances(
          this,
          position,
          direction2,
          result
        );
      };
      OrientedBoundingBox.prototype.computeCorners = function(result) {
        return OrientedBoundingBox.computeCorners(this, result);
      };
      OrientedBoundingBox.prototype.computeTransformation = function(result) {
        return OrientedBoundingBox.computeTransformation(this, result);
      };
      OrientedBoundingBox.prototype.isOccluded = function(occluder) {
        return OrientedBoundingBox.isOccluded(this, occluder);
      };
      OrientedBoundingBox.equals = function(left, right) {
        return left === right || defined_default(left) && defined_default(right) && Cartesian3_default.equals(left.center, right.center) && Matrix3_default.equals(left.halfAxes, right.halfAxes);
      };
      OrientedBoundingBox.prototype.clone = function(result) {
        return OrientedBoundingBox.clone(this, result);
      };
      OrientedBoundingBox.prototype.equals = function(right) {
        return OrientedBoundingBox.equals(this, right);
      };
      OrientedBoundingBox_default = OrientedBoundingBox;
    }
  });

  // packages/engine/Source/Core/CoplanarPolygonGeometryLibrary.js
  function projectTo2D(position, center, axis1, axis2, result) {
    const v3 = Cartesian3_default.subtract(position, center, scratchIntersectionPoint);
    const x = Cartesian3_default.dot(axis1, v3);
    const y = Cartesian3_default.dot(axis2, v3);
    return Cartesian2_default.fromElements(x, y, result);
  }
  var CoplanarPolygonGeometryLibrary, scratchIntersectionPoint, scratchXAxis2, scratchYAxis2, scratchZAxis2, obbScratch, CoplanarPolygonGeometryLibrary_default;
  var init_CoplanarPolygonGeometryLibrary = __esm({
    "packages/engine/Source/Core/CoplanarPolygonGeometryLibrary.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Check();
      init_Matrix3();
      init_OrientedBoundingBox();
      CoplanarPolygonGeometryLibrary = {};
      scratchIntersectionPoint = new Cartesian3_default();
      scratchXAxis2 = new Cartesian3_default();
      scratchYAxis2 = new Cartesian3_default();
      scratchZAxis2 = new Cartesian3_default();
      obbScratch = new OrientedBoundingBox_default();
      CoplanarPolygonGeometryLibrary.validOutline = function(positions) {
        Check_default.defined("positions", positions);
        const orientedBoundingBox = OrientedBoundingBox_default.fromPoints(
          positions,
          obbScratch
        );
        const halfAxes = orientedBoundingBox.halfAxes;
        const xAxis = Matrix3_default.getColumn(halfAxes, 0, scratchXAxis2);
        const yAxis = Matrix3_default.getColumn(halfAxes, 1, scratchYAxis2);
        const zAxis = Matrix3_default.getColumn(halfAxes, 2, scratchZAxis2);
        const xMag = Cartesian3_default.magnitude(xAxis);
        const yMag = Cartesian3_default.magnitude(yAxis);
        const zMag = Cartesian3_default.magnitude(zAxis);
        return !(xMag === 0 && (yMag === 0 || zMag === 0) || yMag === 0 && zMag === 0);
      };
      CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments = function(positions, centerResult, planeAxis1Result, planeAxis2Result) {
        Check_default.defined("positions", positions);
        Check_default.defined("centerResult", centerResult);
        Check_default.defined("planeAxis1Result", planeAxis1Result);
        Check_default.defined("planeAxis2Result", planeAxis2Result);
        const orientedBoundingBox = OrientedBoundingBox_default.fromPoints(
          positions,
          obbScratch
        );
        const halfAxes = orientedBoundingBox.halfAxes;
        const xAxis = Matrix3_default.getColumn(halfAxes, 0, scratchXAxis2);
        const yAxis = Matrix3_default.getColumn(halfAxes, 1, scratchYAxis2);
        const zAxis = Matrix3_default.getColumn(halfAxes, 2, scratchZAxis2);
        const xMag = Cartesian3_default.magnitude(xAxis);
        const yMag = Cartesian3_default.magnitude(yAxis);
        const zMag = Cartesian3_default.magnitude(zAxis);
        const min3 = Math.min(xMag, yMag, zMag);
        if (xMag === 0 && (yMag === 0 || zMag === 0) || yMag === 0 && zMag === 0) {
          return false;
        }
        let planeAxis1;
        let planeAxis2;
        if (min3 === yMag || min3 === zMag) {
          planeAxis1 = xAxis;
        }
        if (min3 === xMag) {
          planeAxis1 = yAxis;
        } else if (min3 === zMag) {
          planeAxis2 = yAxis;
        }
        if (min3 === xMag || min3 === yMag) {
          planeAxis2 = zAxis;
        }
        Cartesian3_default.normalize(planeAxis1, planeAxis1Result);
        Cartesian3_default.normalize(planeAxis2, planeAxis2Result);
        Cartesian3_default.clone(orientedBoundingBox.center, centerResult);
        return true;
      };
      CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction = function(center, axis1, axis2) {
        return function(positions) {
          const positionResults = new Array(positions.length);
          for (let i = 0; i < positions.length; i++) {
            positionResults[i] = projectTo2D(positions[i], center, axis1, axis2);
          }
          return positionResults;
        };
      };
      CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction = function(center, axis1, axis2) {
        return function(position, result) {
          return projectTo2D(position, center, axis1, axis2, result);
        };
      };
      CoplanarPolygonGeometryLibrary_default = CoplanarPolygonGeometryLibrary;
    }
  });

  // packages/engine/Source/Core/ArcType.js
  var ArcType, ArcType_default;
  var init_ArcType = __esm({
    "packages/engine/Source/Core/ArcType.js"() {
      ArcType = {
        /**
         * Straight line that does not conform to the surface of the ellipsoid.
         *
         * @type {number}
         * @constant
         */
        NONE: 0,
        /**
         * Follow geodesic path.
         *
         * @type {number}
         * @constant
         */
        GEODESIC: 1,
        /**
         * Follow rhumb or loxodrome path.
         *
         * @type {number}
         * @constant
         */
        RHUMB: 2
      };
      ArcType_default = Object.freeze(ArcType);
    }
  });

  // packages/engine/Source/Core/EllipsoidRhumbLine.js
  function calculateM(ellipticity, major, latitude) {
    if (ellipticity === 0) {
      return major * latitude;
    }
    const e2 = ellipticity * ellipticity;
    const e4 = e2 * e2;
    const e6 = e4 * e2;
    const e8 = e6 * e2;
    const e10 = e8 * e2;
    const e12 = e10 * e2;
    const phi = latitude;
    const sin2Phi = Math.sin(2 * phi);
    const sin4Phi = Math.sin(4 * phi);
    const sin6Phi = Math.sin(6 * phi);
    const sin8Phi = Math.sin(8 * phi);
    const sin10Phi = Math.sin(10 * phi);
    const sin12Phi = Math.sin(12 * phi);
    return major * ((1 - e2 / 4 - 3 * e4 / 64 - 5 * e6 / 256 - 175 * e8 / 16384 - 441 * e10 / 65536 - 4851 * e12 / 1048576) * phi - (3 * e2 / 8 + 3 * e4 / 32 + 45 * e6 / 1024 + 105 * e8 / 4096 + 2205 * e10 / 131072 + 6237 * e12 / 524288) * sin2Phi + (15 * e4 / 256 + 45 * e6 / 1024 + 525 * e8 / 16384 + 1575 * e10 / 65536 + 155925 * e12 / 8388608) * sin4Phi - (35 * e6 / 3072 + 175 * e8 / 12288 + 3675 * e10 / 262144 + 13475 * e12 / 1048576) * sin6Phi + (315 * e8 / 131072 + 2205 * e10 / 524288 + 43659 * e12 / 8388608) * sin8Phi - (693 * e10 / 1310720 + 6237 * e12 / 5242880) * sin10Phi + 1001 * e12 / 8388608 * sin12Phi);
  }
  function calculateInverseM(M, ellipticity, major) {
    const d = M / major;
    if (ellipticity === 0) {
      return d;
    }
    const d2 = d * d;
    const d3 = d2 * d;
    const d4 = d3 * d;
    const e = ellipticity;
    const e2 = e * e;
    const e4 = e2 * e2;
    const e6 = e4 * e2;
    const e8 = e6 * e2;
    const e10 = e8 * e2;
    const e12 = e10 * e2;
    const sin2D = Math.sin(2 * d);
    const cos2D = Math.cos(2 * d);
    const sin4D = Math.sin(4 * d);
    const cos4D = Math.cos(4 * d);
    const sin6D = Math.sin(6 * d);
    const cos6D = Math.cos(6 * d);
    const sin8D = Math.sin(8 * d);
    const cos8D = Math.cos(8 * d);
    const sin10D = Math.sin(10 * d);
    const cos10D = Math.cos(10 * d);
    const sin12D = Math.sin(12 * d);
    return d + d * e2 / 4 + 7 * d * e4 / 64 + 15 * d * e6 / 256 + 579 * d * e8 / 16384 + 1515 * d * e10 / 65536 + 16837 * d * e12 / 1048576 + (3 * d * e4 / 16 + 45 * d * e6 / 256 - d * (32 * d2 - 561) * e8 / 4096 - d * (232 * d2 - 1677) * e10 / 16384 + d * (399985 - 90560 * d2 + 512 * d4) * e12 / 5242880) * cos2D + (21 * d * e6 / 256 + 483 * d * e8 / 4096 - d * (224 * d2 - 1969) * e10 / 16384 - d * (33152 * d2 - 112599) * e12 / 1048576) * cos4D + (151 * d * e8 / 4096 + 4681 * d * e10 / 65536 + 1479 * d * e12 / 16384 - 453 * d3 * e12 / 32768) * cos6D + (1097 * d * e10 / 65536 + 42783 * d * e12 / 1048576) * cos8D + 8011 * d * e12 / 1048576 * cos10D + (3 * e2 / 8 + 3 * e4 / 16 + 213 * e6 / 2048 - 3 * d2 * e6 / 64 + 255 * e8 / 4096 - 33 * d2 * e8 / 512 + 20861 * e10 / 524288 - 33 * d2 * e10 / 512 + d4 * e10 / 1024 + 28273 * e12 / 1048576 - 471 * d2 * e12 / 8192 + 9 * d4 * e12 / 4096) * sin2D + (21 * e4 / 256 + 21 * e6 / 256 + 533 * e8 / 8192 - 21 * d2 * e8 / 512 + 197 * e10 / 4096 - 315 * d2 * e10 / 4096 + 584039 * e12 / 16777216 - 12517 * d2 * e12 / 131072 + 7 * d4 * e12 / 2048) * sin4D + (151 * e6 / 6144 + 151 * e8 / 4096 + 5019 * e10 / 131072 - 453 * d2 * e10 / 16384 + 26965 * e12 / 786432 - 8607 * d2 * e12 / 131072) * sin6D + (1097 * e8 / 131072 + 1097 * e10 / 65536 + 225797 * e12 / 10485760 - 1097 * d2 * e12 / 65536) * sin8D + (8011 * e10 / 2621440 + 8011 * e12 / 1048576) * sin10D + 293393 * e12 / 251658240 * sin12D;
  }
  function calculateSigma(ellipticity, latitude) {
    if (ellipticity === 0) {
      return Math.log(Math.tan(0.5 * (Math_default.PI_OVER_TWO + latitude)));
    }
    const eSinL = ellipticity * Math.sin(latitude);
    return Math.log(Math.tan(0.5 * (Math_default.PI_OVER_TWO + latitude))) - ellipticity / 2 * Math.log((1 + eSinL) / (1 - eSinL));
  }
  function calculateHeading(ellipsoidRhumbLine, firstLongitude, firstLatitude, secondLongitude, secondLatitude) {
    const sigma1 = calculateSigma(ellipsoidRhumbLine._ellipticity, firstLatitude);
    const sigma2 = calculateSigma(
      ellipsoidRhumbLine._ellipticity,
      secondLatitude
    );
    return Math.atan2(
      Math_default.negativePiToPi(secondLongitude - firstLongitude),
      sigma2 - sigma1
    );
  }
  function calculateArcLength(ellipsoidRhumbLine, major, minor, firstLongitude, firstLatitude, secondLongitude, secondLatitude) {
    const heading = ellipsoidRhumbLine._heading;
    const deltaLongitude = secondLongitude - firstLongitude;
    let distance = 0;
    if (Math_default.equalsEpsilon(
      Math.abs(heading),
      Math_default.PI_OVER_TWO,
      Math_default.EPSILON8
    )) {
      if (major === minor) {
        distance = major * Math.cos(firstLatitude) * Math_default.negativePiToPi(deltaLongitude);
      } else {
        const sinPhi = Math.sin(firstLatitude);
        distance = major * Math.cos(firstLatitude) * Math_default.negativePiToPi(deltaLongitude) / Math.sqrt(1 - ellipsoidRhumbLine._ellipticitySquared * sinPhi * sinPhi);
      }
    } else {
      const M1 = calculateM(
        ellipsoidRhumbLine._ellipticity,
        major,
        firstLatitude
      );
      const M2 = calculateM(
        ellipsoidRhumbLine._ellipticity,
        major,
        secondLatitude
      );
      distance = (M2 - M1) / Math.cos(heading);
    }
    return Math.abs(distance);
  }
  function computeProperties(ellipsoidRhumbLine, start, end, ellipsoid) {
    const firstCartesian = Cartesian3_default.normalize(
      ellipsoid.cartographicToCartesian(start, scratchCart2),
      scratchCart1
    );
    const lastCartesian = Cartesian3_default.normalize(
      ellipsoid.cartographicToCartesian(end, scratchCart2),
      scratchCart2
    );
    Check_default.typeOf.number.greaterThanOrEquals(
      "value",
      Math.abs(
        Math.abs(Cartesian3_default.angleBetween(firstCartesian, lastCartesian)) - Math.PI
      ),
      0.0125
    );
    const major = ellipsoid.maximumRadius;
    const minor = ellipsoid.minimumRadius;
    const majorSquared = major * major;
    const minorSquared = minor * minor;
    ellipsoidRhumbLine._ellipticitySquared = (majorSquared - minorSquared) / majorSquared;
    ellipsoidRhumbLine._ellipticity = Math.sqrt(
      ellipsoidRhumbLine._ellipticitySquared
    );
    ellipsoidRhumbLine._start = Cartographic_default.clone(
      start,
      ellipsoidRhumbLine._start
    );
    ellipsoidRhumbLine._start.height = 0;
    ellipsoidRhumbLine._end = Cartographic_default.clone(end, ellipsoidRhumbLine._end);
    ellipsoidRhumbLine._end.height = 0;
    ellipsoidRhumbLine._heading = calculateHeading(
      ellipsoidRhumbLine,
      start.longitude,
      start.latitude,
      end.longitude,
      end.latitude
    );
    ellipsoidRhumbLine._distance = calculateArcLength(
      ellipsoidRhumbLine,
      ellipsoid.maximumRadius,
      ellipsoid.minimumRadius,
      start.longitude,
      start.latitude,
      end.longitude,
      end.latitude
    );
  }
  function interpolateUsingSurfaceDistance(start, heading, distance, major, ellipticity, result) {
    if (distance === 0) {
      return Cartographic_default.clone(start, result);
    }
    const ellipticitySquared = ellipticity * ellipticity;
    let longitude;
    let latitude;
    let deltaLongitude;
    if (Math.abs(Math_default.PI_OVER_TWO - Math.abs(heading)) > Math_default.EPSILON8) {
      const M1 = calculateM(ellipticity, major, start.latitude);
      const deltaM = distance * Math.cos(heading);
      const M2 = M1 + deltaM;
      latitude = calculateInverseM(M2, ellipticity, major);
      if (Math.abs(heading) < Math_default.EPSILON10) {
        longitude = Math_default.negativePiToPi(start.longitude);
      } else {
        const sigma1 = calculateSigma(ellipticity, start.latitude);
        const sigma2 = calculateSigma(ellipticity, latitude);
        deltaLongitude = Math.tan(heading) * (sigma2 - sigma1);
        longitude = Math_default.negativePiToPi(start.longitude + deltaLongitude);
      }
    } else {
      latitude = start.latitude;
      let localRad;
      if (ellipticity === 0) {
        localRad = major * Math.cos(start.latitude);
      } else {
        const sinPhi = Math.sin(start.latitude);
        localRad = major * Math.cos(start.latitude) / Math.sqrt(1 - ellipticitySquared * sinPhi * sinPhi);
      }
      deltaLongitude = distance / localRad;
      if (heading > 0) {
        longitude = Math_default.negativePiToPi(start.longitude + deltaLongitude);
      } else {
        longitude = Math_default.negativePiToPi(start.longitude - deltaLongitude);
      }
    }
    if (defined_default(result)) {
      result.longitude = longitude;
      result.latitude = latitude;
      result.height = 0;
      return result;
    }
    return new Cartographic_default(longitude, latitude, 0);
  }
  function EllipsoidRhumbLine(start, end, ellipsoid) {
    const e = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
    this._ellipsoid = e;
    this._start = new Cartographic_default();
    this._end = new Cartographic_default();
    this._heading = void 0;
    this._distance = void 0;
    this._ellipticity = void 0;
    this._ellipticitySquared = void 0;
    if (defined_default(start) && defined_default(end)) {
      computeProperties(this, start, end, e);
    }
  }
  var scratchCart1, scratchCart2, EllipsoidRhumbLine_default;
  var init_EllipsoidRhumbLine = __esm({
    "packages/engine/Source/Core/EllipsoidRhumbLine.js"() {
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Math();
      scratchCart1 = new Cartesian3_default();
      scratchCart2 = new Cartesian3_default();
      Object.defineProperties(EllipsoidRhumbLine.prototype, {
        /**
         * Gets the ellipsoid.
         * @memberof EllipsoidRhumbLine.prototype
         * @type {Ellipsoid}
         * @readonly
         */
        ellipsoid: {
          get: function() {
            return this._ellipsoid;
          }
        },
        /**
         * Gets the surface distance between the start and end point
         * @memberof EllipsoidRhumbLine.prototype
         * @type {number}
         * @readonly
         */
        surfaceDistance: {
          get: function() {
            Check_default.defined("distance", this._distance);
            return this._distance;
          }
        },
        /**
         * Gets the initial planetodetic point on the path.
         * @memberof EllipsoidRhumbLine.prototype
         * @type {Cartographic}
         * @readonly
         */
        start: {
          get: function() {
            return this._start;
          }
        },
        /**
         * Gets the final planetodetic point on the path.
         * @memberof EllipsoidRhumbLine.prototype
         * @type {Cartographic}
         * @readonly
         */
        end: {
          get: function() {
            return this._end;
          }
        },
        /**
         * Gets the heading from the start point to the end point.
         * @memberof EllipsoidRhumbLine.prototype
         * @type {number}
         * @readonly
         */
        heading: {
          get: function() {
            Check_default.defined("distance", this._distance);
            return this._heading;
          }
        }
      });
      EllipsoidRhumbLine.fromStartHeadingDistance = function(start, heading, distance, ellipsoid, result) {
        Check_default.defined("start", start);
        Check_default.defined("heading", heading);
        Check_default.defined("distance", distance);
        Check_default.typeOf.number.greaterThan("distance", distance, 0);
        const e = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        const major = e.maximumRadius;
        const minor = e.minimumRadius;
        const majorSquared = major * major;
        const minorSquared = minor * minor;
        const ellipticity = Math.sqrt((majorSquared - minorSquared) / majorSquared);
        heading = Math_default.negativePiToPi(heading);
        const end = interpolateUsingSurfaceDistance(
          start,
          heading,
          distance,
          e.maximumRadius,
          ellipticity
        );
        if (!defined_default(result) || defined_default(ellipsoid) && !ellipsoid.equals(result.ellipsoid)) {
          return new EllipsoidRhumbLine(start, end, e);
        }
        result.setEndPoints(start, end);
        return result;
      };
      EllipsoidRhumbLine.prototype.setEndPoints = function(start, end) {
        Check_default.defined("start", start);
        Check_default.defined("end", end);
        computeProperties(this, start, end, this._ellipsoid);
      };
      EllipsoidRhumbLine.prototype.interpolateUsingFraction = function(fraction, result) {
        return this.interpolateUsingSurfaceDistance(
          fraction * this._distance,
          result
        );
      };
      EllipsoidRhumbLine.prototype.interpolateUsingSurfaceDistance = function(distance, result) {
        Check_default.typeOf.number("distance", distance);
        if (!defined_default(this._distance) || this._distance === 0) {
          throw new DeveloperError_default(
            "EllipsoidRhumbLine must have distinct start and end set."
          );
        }
        return interpolateUsingSurfaceDistance(
          this._start,
          this._heading,
          distance,
          this._ellipsoid.maximumRadius,
          this._ellipticity,
          result
        );
      };
      EllipsoidRhumbLine.prototype.findIntersectionWithLongitude = function(intersectionLongitude, result) {
        Check_default.typeOf.number("intersectionLongitude", intersectionLongitude);
        if (!defined_default(this._distance) || this._distance === 0) {
          throw new DeveloperError_default(
            "EllipsoidRhumbLine must have distinct start and end set."
          );
        }
        const ellipticity = this._ellipticity;
        const heading = this._heading;
        const absHeading = Math.abs(heading);
        const start = this._start;
        intersectionLongitude = Math_default.negativePiToPi(intersectionLongitude);
        if (Math_default.equalsEpsilon(
          Math.abs(intersectionLongitude),
          Math.PI,
          Math_default.EPSILON14
        )) {
          intersectionLongitude = Math_default.sign(start.longitude) * Math.PI;
        }
        if (!defined_default(result)) {
          result = new Cartographic_default();
        }
        if (Math.abs(Math_default.PI_OVER_TWO - absHeading) <= Math_default.EPSILON8) {
          result.longitude = intersectionLongitude;
          result.latitude = start.latitude;
          result.height = 0;
          return result;
        } else if (Math_default.equalsEpsilon(
          Math.abs(Math_default.PI_OVER_TWO - absHeading),
          Math_default.PI_OVER_TWO,
          Math_default.EPSILON8
        )) {
          if (Math_default.equalsEpsilon(
            intersectionLongitude,
            start.longitude,
            Math_default.EPSILON12
          )) {
            return void 0;
          }
          result.longitude = intersectionLongitude;
          result.latitude = Math_default.PI_OVER_TWO * Math_default.sign(Math_default.PI_OVER_TWO - heading);
          result.height = 0;
          return result;
        }
        const phi1 = start.latitude;
        const eSinPhi1 = ellipticity * Math.sin(phi1);
        const leftComponent = Math.tan(0.5 * (Math_default.PI_OVER_TWO + phi1)) * Math.exp((intersectionLongitude - start.longitude) / Math.tan(heading));
        const denominator = (1 + eSinPhi1) / (1 - eSinPhi1);
        let newPhi = start.latitude;
        let phi;
        do {
          phi = newPhi;
          const eSinPhi = ellipticity * Math.sin(phi);
          const numerator = (1 + eSinPhi) / (1 - eSinPhi);
          newPhi = 2 * Math.atan(
            leftComponent * Math.pow(numerator / denominator, ellipticity / 2)
          ) - Math_default.PI_OVER_TWO;
        } while (!Math_default.equalsEpsilon(newPhi, phi, Math_default.EPSILON12));
        result.longitude = intersectionLongitude;
        result.latitude = newPhi;
        result.height = 0;
        return result;
      };
      EllipsoidRhumbLine.prototype.findIntersectionWithLatitude = function(intersectionLatitude, result) {
        Check_default.typeOf.number("intersectionLatitude", intersectionLatitude);
        if (!defined_default(this._distance) || this._distance === 0) {
          throw new DeveloperError_default(
            "EllipsoidRhumbLine must have distinct start and end set."
          );
        }
        const ellipticity = this._ellipticity;
        const heading = this._heading;
        const start = this._start;
        if (Math_default.equalsEpsilon(
          Math.abs(heading),
          Math_default.PI_OVER_TWO,
          Math_default.EPSILON8
        )) {
          return;
        }
        const sigma1 = calculateSigma(ellipticity, start.latitude);
        const sigma2 = calculateSigma(ellipticity, intersectionLatitude);
        const deltaLongitude = Math.tan(heading) * (sigma2 - sigma1);
        const longitude = Math_default.negativePiToPi(start.longitude + deltaLongitude);
        if (defined_default(result)) {
          result.longitude = longitude;
          result.latitude = intersectionLatitude;
          result.height = 0;
          return result;
        }
        return new Cartographic_default(longitude, intersectionLatitude, 0);
      };
      EllipsoidRhumbLine_default = EllipsoidRhumbLine;
    }
  });

  // packages/engine/Source/Core/PolygonHierarchy.js
  function PolygonHierarchy(positions, holes) {
    this.positions = defined_default(positions) ? positions : [];
    this.holes = defined_default(holes) ? holes : [];
  }
  var PolygonHierarchy_default;
  var init_PolygonHierarchy = __esm({
    "packages/engine/Source/Core/PolygonHierarchy.js"() {
      init_defined();
      PolygonHierarchy_default = PolygonHierarchy;
    }
  });

  // node_modules/earcut/src/earcut.js
  var require_earcut = __commonJS({
    "node_modules/earcut/src/earcut.js"(exports2, module) {
      "use strict";
      module.exports = earcut2;
      module.exports.default = earcut2;
      function earcut2(data, holeIndices, dim) {
        dim = dim || 2;
        var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, true), triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev)
          return triangles;
        var minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles)
          outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
        if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];
          for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX)
              minX = x;
            if (y < minY)
              minY = y;
            if (x > maxX)
              maxX = x;
            if (y > maxY)
              maxY = y;
          }
          invSize = Math.max(maxX - minX, maxY - minY);
          invSize = invSize !== 0 ? 32767 / invSize : 0;
        }
        earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
        return triangles;
      }
      function linkedList(data, start, end, dim, clockwise) {
        var i, last;
        if (clockwise === signedArea(data, start, end, dim) > 0) {
          for (i = start; i < end; i += dim)
            last = insertNode(i, data[i], data[i + 1], last);
        } else {
          for (i = end - dim; i >= start; i -= dim)
            last = insertNode(i, data[i], data[i + 1], last);
        }
        if (last && equals(last, last.next)) {
          removeNode(last);
          last = last.next;
        }
        return last;
      }
      function filterPoints(start, end) {
        if (!start)
          return start;
        if (!end)
          end = start;
        var p = start, again;
        do {
          again = false;
          if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next)
              break;
            again = true;
          } else {
            p = p.next;
          }
        } while (again || p !== end);
        return end;
      }
      function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear)
          return;
        if (!pass && invSize)
          indexCurve(ear, minX, minY, invSize);
        var stop = ear, prev, next;
        while (ear.prev !== ear.next) {
          prev = ear.prev;
          next = ear.next;
          if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);
            removeNode(ear);
            ear = next.next;
            stop = next.next;
            continue;
          }
          ear = next;
          if (ear === stop) {
            if (!pass) {
              earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            } else if (pass === 1) {
              ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
              earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            } else if (pass === 2) {
              splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }
            break;
          }
        }
      }
      function isEar(ear) {
        var a3 = ear.prev, b = ear, c = ear.next;
        if (area(a3, b, c) >= 0)
          return false;
        var ax = a3.x, bx = b.x, cx = c.x, ay = a3.y, by = b.y, cy = c.y;
        var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
        var p = c.next;
        while (p !== a3) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.next;
        }
        return true;
      }
      function isEarHashed(ear, minX, minY, invSize) {
        var a3 = ear.prev, b = ear, c = ear.next;
        if (area(a3, b, c) >= 0)
          return false;
        var ax = a3.x, bx = b.x, cx = c.x, ay = a3.y, by = b.y, cy = c.y;
        var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
        var minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
        var p = ear.prevZ, n = ear.nextZ;
        while (p && p.z >= minZ && n && n.z <= maxZ) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a3 && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.prevZ;
          if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a3 && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
            return false;
          n = n.nextZ;
        }
        while (p && p.z >= minZ) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a3 && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.prevZ;
        }
        while (n && n.z <= maxZ) {
          if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a3 && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
            return false;
          n = n.nextZ;
        }
        return true;
      }
      function cureLocalIntersections(start, triangles, dim) {
        var p = start;
        do {
          var a3 = p.prev, b = p.next.next;
          if (!equals(a3, b) && intersects(a3, p, p.next, b) && locallyInside(a3, b) && locallyInside(b, a3)) {
            triangles.push(a3.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);
            removeNode(p);
            removeNode(p.next);
            p = start = b;
          }
          p = p.next;
        } while (p !== start);
        return filterPoints(p);
      }
      function splitEarcut(start, triangles, dim, minX, minY, invSize) {
        var a3 = start;
        do {
          var b = a3.next.next;
          while (b !== a3.prev) {
            if (a3.i !== b.i && isValidDiagonal(a3, b)) {
              var c = splitPolygon(a3, b);
              a3 = filterPoints(a3, a3.next);
              c = filterPoints(c, c.next);
              earcutLinked(a3, triangles, dim, minX, minY, invSize, 0);
              earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
              return;
            }
            b = b.next;
          }
          a3 = a3.next;
        } while (a3 !== start);
      }
      function eliminateHoles(data, holeIndices, outerNode, dim) {
        var queue = [], i, len, start, end, list;
        for (i = 0, len = holeIndices.length; i < len; i++) {
          start = holeIndices[i] * dim;
          end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
          list = linkedList(data, start, end, dim, false);
          if (list === list.next)
            list.steiner = true;
          queue.push(getLeftmost(list));
        }
        queue.sort(compareX);
        for (i = 0; i < queue.length; i++) {
          outerNode = eliminateHole(queue[i], outerNode);
        }
        return outerNode;
      }
      function compareX(a3, b) {
        return a3.x - b.x;
      }
      function eliminateHole(hole, outerNode) {
        var bridge = findHoleBridge(hole, outerNode);
        if (!bridge) {
          return outerNode;
        }
        var bridgeReverse = splitPolygon(bridge, hole);
        filterPoints(bridgeReverse, bridgeReverse.next);
        return filterPoints(bridge, bridge.next);
      }
      function findHoleBridge(hole, outerNode) {
        var p = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m;
        do {
          if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
              qx = x;
              m = p.x < p.next.x ? p : p.next;
              if (x === hx)
                return m;
            }
          }
          p = p.next;
        } while (p !== outerNode);
        if (!m)
          return null;
        var stop = m, mx = m.x, my = m.y, tanMin = Infinity, tan;
        p = m;
        do {
          if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x);
            if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
              m = p;
              tanMin = tan;
            }
          }
          p = p.next;
        } while (p !== stop);
        return m;
      }
      function sectorContainsSector(m, p) {
        return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
      }
      function indexCurve(start, minX, minY, invSize) {
        var p = start;
        do {
          if (p.z === 0)
            p.z = zOrder(p.x, p.y, minX, minY, invSize);
          p.prevZ = p.prev;
          p.nextZ = p.next;
          p = p.next;
        } while (p !== start);
        p.prevZ.nextZ = null;
        p.prevZ = null;
        sortLinked(p);
      }
      function sortLinked(list) {
        var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
        do {
          p = list;
          list = null;
          tail = null;
          numMerges = 0;
          while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
              pSize++;
              q = q.nextZ;
              if (!q)
                break;
            }
            qSize = inSize;
            while (pSize > 0 || qSize > 0 && q) {
              if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                e = p;
                p = p.nextZ;
                pSize--;
              } else {
                e = q;
                q = q.nextZ;
                qSize--;
              }
              if (tail)
                tail.nextZ = e;
              else
                list = e;
              e.prevZ = tail;
              tail = e;
            }
            p = q;
          }
          tail.nextZ = null;
          inSize *= 2;
        } while (numMerges > 1);
        return list;
      }
      function zOrder(x, y, minX, minY, invSize) {
        x = (x - minX) * invSize | 0;
        y = (y - minY) * invSize | 0;
        x = (x | x << 8) & 16711935;
        x = (x | x << 4) & 252645135;
        x = (x | x << 2) & 858993459;
        x = (x | x << 1) & 1431655765;
        y = (y | y << 8) & 16711935;
        y = (y | y << 4) & 252645135;
        y = (y | y << 2) & 858993459;
        y = (y | y << 1) & 1431655765;
        return x | y << 1;
      }
      function getLeftmost(start) {
        var p = start, leftmost = start;
        do {
          if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
            leftmost = p;
          p = p.next;
        } while (p !== start);
        return leftmost;
      }
      function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
      }
      function isValidDiagonal(a3, b) {
        return a3.next.i !== b.i && a3.prev.i !== b.i && !intersectsPolygon(a3, b) && // dones't intersect other edges
        (locallyInside(a3, b) && locallyInside(b, a3) && middleInside(a3, b) && // locally visible
        (area(a3.prev, a3, b.prev) || area(a3, b.prev, b)) || // does not create opposite-facing sectors
        equals(a3, b) && area(a3.prev, a3, a3.next) > 0 && area(b.prev, b, b.next) > 0);
      }
      function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
      }
      function equals(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
      }
      function intersects(p1, q12, p2, q22) {
        var o1 = sign2(area(p1, q12, p2));
        var o2 = sign2(area(p1, q12, q22));
        var o3 = sign2(area(p2, q22, p1));
        var o4 = sign2(area(p2, q22, q12));
        if (o1 !== o2 && o3 !== o4)
          return true;
        if (o1 === 0 && onSegment(p1, p2, q12))
          return true;
        if (o2 === 0 && onSegment(p1, q22, q12))
          return true;
        if (o3 === 0 && onSegment(p2, p1, q22))
          return true;
        if (o4 === 0 && onSegment(p2, q12, q22))
          return true;
        return false;
      }
      function onSegment(p, q, r) {
        return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
      }
      function sign2(num) {
        return num > 0 ? 1 : num < 0 ? -1 : 0;
      }
      function intersectsPolygon(a3, b) {
        var p = a3;
        do {
          if (p.i !== a3.i && p.next.i !== a3.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a3, b))
            return true;
          p = p.next;
        } while (p !== a3);
        return false;
      }
      function locallyInside(a3, b) {
        return area(a3.prev, a3, a3.next) < 0 ? area(a3, b, a3.next) >= 0 && area(a3, a3.prev, b) >= 0 : area(a3, b, a3.prev) < 0 || area(a3, a3.next, b) < 0;
      }
      function middleInside(a3, b) {
        var p = a3, inside = false, px = (a3.x + b.x) / 2, py = (a3.y + b.y) / 2;
        do {
          if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)
            inside = !inside;
          p = p.next;
        } while (p !== a3);
        return inside;
      }
      function splitPolygon(a3, b) {
        var a22 = new Node(a3.i, a3.x, a3.y), b2 = new Node(b.i, b.x, b.y), an = a3.next, bp = b.prev;
        a3.next = b;
        b.prev = a3;
        a22.next = an;
        an.prev = a22;
        b2.next = a22;
        a22.prev = b2;
        bp.next = b2;
        b2.prev = bp;
        return b2;
      }
      function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);
        if (!last) {
          p.prev = p;
          p.next = p;
        } else {
          p.next = last.next;
          p.prev = last;
          last.next.prev = p;
          last.next = p;
        }
        return p;
      }
      function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;
        if (p.prevZ)
          p.prevZ.nextZ = p.nextZ;
        if (p.nextZ)
          p.nextZ.prevZ = p.prevZ;
      }
      function Node(i, x, y) {
        this.i = i;
        this.x = x;
        this.y = y;
        this.prev = null;
        this.next = null;
        this.z = 0;
        this.prevZ = null;
        this.nextZ = null;
        this.steiner = false;
      }
      earcut2.deviation = function(data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
        if (hasHoles) {
          for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
          }
        }
        var trianglesArea = 0;
        for (i = 0; i < triangles.length; i += 3) {
          var a3 = triangles[i] * dim;
          var b = triangles[i + 1] * dim;
          var c = triangles[i + 2] * dim;
          trianglesArea += Math.abs(
            (data[a3] - data[c]) * (data[b + 1] - data[a3 + 1]) - (data[a3] - data[b]) * (data[c + 1] - data[a3 + 1])
          );
        }
        return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
      };
      function signedArea(data, start, end, dim) {
        var sum = 0;
        for (var i = start, j = end - dim; i < end; i += dim) {
          sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
          j = i;
        }
        return sum;
      }
      earcut2.flatten = function(data) {
        var dim = data[0][0].length, result = { vertices: [], holes: [], dimensions: dim }, holeIndex = 0;
        for (var i = 0; i < data.length; i++) {
          for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++)
              result.vertices.push(data[i][j][d]);
          }
          if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
          }
        }
        return result;
      };
    }
  });

  // packages/engine/Source/Core/WindingOrder.js
  var WindingOrder, WindingOrder_default;
  var init_WindingOrder = __esm({
    "packages/engine/Source/Core/WindingOrder.js"() {
      init_WebGLConstants();
      WindingOrder = {
        /**
         * Vertices are in clockwise order.
         *
         * @type {number}
         * @constant
         */
        CLOCKWISE: WebGLConstants_default.CW,
        /**
         * Vertices are in counter-clockwise order.
         *
         * @type {number}
         * @constant
         */
        COUNTER_CLOCKWISE: WebGLConstants_default.CCW
      };
      WindingOrder.validate = function(windingOrder) {
        return windingOrder === WindingOrder.CLOCKWISE || windingOrder === WindingOrder.COUNTER_CLOCKWISE;
      };
      WindingOrder_default = Object.freeze(WindingOrder);
    }
  });

  // packages/engine/Source/Core/PolygonPipeline.js
  var import_earcut, scaleToGeodeticHeightN, scaleToGeodeticHeightP, PolygonPipeline, subdivisionV0Scratch, subdivisionV1Scratch, subdivisionV2Scratch, subdivisionS0Scratch, subdivisionS1Scratch, subdivisionS2Scratch, subdivisionMidScratch, subdivisionT0Scratch, subdivisionT1Scratch, subdivisionT2Scratch, subdivisionTexcoordMidScratch, subdivisionC0Scratch, subdivisionC1Scratch, subdivisionC2Scratch, subdivisionCartographicScratch, PolygonPipeline_default;
  var init_PolygonPipeline = __esm({
    "packages/engine/Source/Core/PolygonPipeline.js"() {
      import_earcut = __toESM(require_earcut(), 1);
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_EllipsoidRhumbLine();
      init_Geometry();
      init_GeometryAttribute();
      init_Math();
      init_PrimitiveType();
      init_WindingOrder();
      scaleToGeodeticHeightN = new Cartesian3_default();
      scaleToGeodeticHeightP = new Cartesian3_default();
      PolygonPipeline = {};
      PolygonPipeline.computeArea2D = function(positions) {
        Check_default.defined("positions", positions);
        Check_default.typeOf.number.greaterThanOrEquals(
          "positions.length",
          positions.length,
          3
        );
        const length = positions.length;
        let area = 0;
        for (let i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {
          const v02 = positions[i0];
          const v12 = positions[i1];
          area += v02.x * v12.y - v12.x * v02.y;
        }
        return area * 0.5;
      };
      PolygonPipeline.computeWindingOrder2D = function(positions) {
        const area = PolygonPipeline.computeArea2D(positions);
        return area > 0 ? WindingOrder_default.COUNTER_CLOCKWISE : WindingOrder_default.CLOCKWISE;
      };
      PolygonPipeline.triangulate = function(positions, holes) {
        Check_default.defined("positions", positions);
        const flattenedPositions = Cartesian2_default.packArray(positions);
        return (0, import_earcut.default)(flattenedPositions, holes, 2);
      };
      subdivisionV0Scratch = new Cartesian3_default();
      subdivisionV1Scratch = new Cartesian3_default();
      subdivisionV2Scratch = new Cartesian3_default();
      subdivisionS0Scratch = new Cartesian3_default();
      subdivisionS1Scratch = new Cartesian3_default();
      subdivisionS2Scratch = new Cartesian3_default();
      subdivisionMidScratch = new Cartesian3_default();
      subdivisionT0Scratch = new Cartesian2_default();
      subdivisionT1Scratch = new Cartesian2_default();
      subdivisionT2Scratch = new Cartesian2_default();
      subdivisionTexcoordMidScratch = new Cartesian2_default();
      PolygonPipeline.computeSubdivision = function(ellipsoid, positions, indices, texcoords, granularity) {
        granularity = defaultValue_default(granularity, Math_default.RADIANS_PER_DEGREE);
        const hasTexcoords = defined_default(texcoords);
        Check_default.typeOf.object("ellipsoid", ellipsoid);
        Check_default.defined("positions", positions);
        Check_default.defined("indices", indices);
        Check_default.typeOf.number.greaterThanOrEquals("indices.length", indices.length, 3);
        Check_default.typeOf.number.equals("indices.length % 3", "0", indices.length % 3, 0);
        Check_default.typeOf.number.greaterThan("granularity", granularity, 0);
        const triangles = indices.slice(0);
        let i;
        const length = positions.length;
        const subdividedPositions = new Array(length * 3);
        const subdividedTexcoords = new Array(length * 2);
        let q = 0;
        let p = 0;
        for (i = 0; i < length; i++) {
          const item = positions[i];
          subdividedPositions[q++] = item.x;
          subdividedPositions[q++] = item.y;
          subdividedPositions[q++] = item.z;
          if (hasTexcoords) {
            const texcoordItem = texcoords[i];
            subdividedTexcoords[p++] = texcoordItem.x;
            subdividedTexcoords[p++] = texcoordItem.y;
          }
        }
        const subdividedIndices = [];
        const edges = {};
        const radius = ellipsoid.maximumRadius;
        const minDistance = Math_default.chordLength(granularity, radius);
        const minDistanceSqrd = minDistance * minDistance;
        while (triangles.length > 0) {
          const i2 = triangles.pop();
          const i1 = triangles.pop();
          const i0 = triangles.pop();
          const v02 = Cartesian3_default.fromArray(
            subdividedPositions,
            i0 * 3,
            subdivisionV0Scratch
          );
          const v12 = Cartesian3_default.fromArray(
            subdividedPositions,
            i1 * 3,
            subdivisionV1Scratch
          );
          const v22 = Cartesian3_default.fromArray(
            subdividedPositions,
            i2 * 3,
            subdivisionV2Scratch
          );
          let t0, t1, t2;
          if (hasTexcoords) {
            t0 = Cartesian2_default.fromArray(
              subdividedTexcoords,
              i0 * 2,
              subdivisionT0Scratch
            );
            t1 = Cartesian2_default.fromArray(
              subdividedTexcoords,
              i1 * 2,
              subdivisionT1Scratch
            );
            t2 = Cartesian2_default.fromArray(
              subdividedTexcoords,
              i2 * 2,
              subdivisionT2Scratch
            );
          }
          const s0 = Cartesian3_default.multiplyByScalar(
            Cartesian3_default.normalize(v02, subdivisionS0Scratch),
            radius,
            subdivisionS0Scratch
          );
          const s1 = Cartesian3_default.multiplyByScalar(
            Cartesian3_default.normalize(v12, subdivisionS1Scratch),
            radius,
            subdivisionS1Scratch
          );
          const s2 = Cartesian3_default.multiplyByScalar(
            Cartesian3_default.normalize(v22, subdivisionS2Scratch),
            radius,
            subdivisionS2Scratch
          );
          const g0 = Cartesian3_default.magnitudeSquared(
            Cartesian3_default.subtract(s0, s1, subdivisionMidScratch)
          );
          const g1 = Cartesian3_default.magnitudeSquared(
            Cartesian3_default.subtract(s1, s2, subdivisionMidScratch)
          );
          const g2 = Cartesian3_default.magnitudeSquared(
            Cartesian3_default.subtract(s2, s0, subdivisionMidScratch)
          );
          const max3 = Math.max(g0, g1, g2);
          let edge;
          let mid;
          let midTexcoord;
          if (max3 > minDistanceSqrd) {
            if (g0 === max3) {
              edge = `${Math.min(i0, i1)} ${Math.max(i0, i1)}`;
              i = edges[edge];
              if (!defined_default(i)) {
                mid = Cartesian3_default.add(v02, v12, subdivisionMidScratch);
                Cartesian3_default.multiplyByScalar(mid, 0.5, mid);
                subdividedPositions.push(mid.x, mid.y, mid.z);
                i = subdividedPositions.length / 3 - 1;
                edges[edge] = i;
                if (hasTexcoords) {
                  midTexcoord = Cartesian2_default.add(t0, t1, subdivisionTexcoordMidScratch);
                  Cartesian2_default.multiplyByScalar(midTexcoord, 0.5, midTexcoord);
                  subdividedTexcoords.push(midTexcoord.x, midTexcoord.y);
                }
              }
              triangles.push(i0, i, i2);
              triangles.push(i, i1, i2);
            } else if (g1 === max3) {
              edge = `${Math.min(i1, i2)} ${Math.max(i1, i2)}`;
              i = edges[edge];
              if (!defined_default(i)) {
                mid = Cartesian3_default.add(v12, v22, subdivisionMidScratch);
                Cartesian3_default.multiplyByScalar(mid, 0.5, mid);
                subdividedPositions.push(mid.x, mid.y, mid.z);
                i = subdividedPositions.length / 3 - 1;
                edges[edge] = i;
                if (hasTexcoords) {
                  midTexcoord = Cartesian2_default.add(t1, t2, subdivisionTexcoordMidScratch);
                  Cartesian2_default.multiplyByScalar(midTexcoord, 0.5, midTexcoord);
                  subdividedTexcoords.push(midTexcoord.x, midTexcoord.y);
                }
              }
              triangles.push(i1, i, i0);
              triangles.push(i, i2, i0);
            } else if (g2 === max3) {
              edge = `${Math.min(i2, i0)} ${Math.max(i2, i0)}`;
              i = edges[edge];
              if (!defined_default(i)) {
                mid = Cartesian3_default.add(v22, v02, subdivisionMidScratch);
                Cartesian3_default.multiplyByScalar(mid, 0.5, mid);
                subdividedPositions.push(mid.x, mid.y, mid.z);
                i = subdividedPositions.length / 3 - 1;
                edges[edge] = i;
                if (hasTexcoords) {
                  midTexcoord = Cartesian2_default.add(t2, t0, subdivisionTexcoordMidScratch);
                  Cartesian2_default.multiplyByScalar(midTexcoord, 0.5, midTexcoord);
                  subdividedTexcoords.push(midTexcoord.x, midTexcoord.y);
                }
              }
              triangles.push(i2, i, i1);
              triangles.push(i, i0, i1);
            }
          } else {
            subdividedIndices.push(i0);
            subdividedIndices.push(i1);
            subdividedIndices.push(i2);
          }
        }
        const geometryOptions = {
          attributes: {
            position: new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.DOUBLE,
              componentsPerAttribute: 3,
              values: subdividedPositions
            })
          },
          indices: subdividedIndices,
          primitiveType: PrimitiveType_default.TRIANGLES
        };
        if (hasTexcoords) {
          geometryOptions.attributes.st = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 2,
            values: subdividedTexcoords
          });
        }
        return new Geometry_default(geometryOptions);
      };
      subdivisionC0Scratch = new Cartographic_default();
      subdivisionC1Scratch = new Cartographic_default();
      subdivisionC2Scratch = new Cartographic_default();
      subdivisionCartographicScratch = new Cartographic_default();
      PolygonPipeline.computeRhumbLineSubdivision = function(ellipsoid, positions, indices, texcoords, granularity) {
        granularity = defaultValue_default(granularity, Math_default.RADIANS_PER_DEGREE);
        const hasTexcoords = defined_default(texcoords);
        Check_default.typeOf.object("ellipsoid", ellipsoid);
        Check_default.defined("positions", positions);
        Check_default.defined("indices", indices);
        Check_default.typeOf.number.greaterThanOrEquals("indices.length", indices.length, 3);
        Check_default.typeOf.number.equals("indices.length % 3", "0", indices.length % 3, 0);
        Check_default.typeOf.number.greaterThan("granularity", granularity, 0);
        const triangles = indices.slice(0);
        let i;
        const length = positions.length;
        const subdividedPositions = new Array(length * 3);
        const subdividedTexcoords = new Array(length * 2);
        let q = 0;
        let p = 0;
        for (i = 0; i < length; i++) {
          const item = positions[i];
          subdividedPositions[q++] = item.x;
          subdividedPositions[q++] = item.y;
          subdividedPositions[q++] = item.z;
          if (hasTexcoords) {
            const texcoordItem = texcoords[i];
            subdividedTexcoords[p++] = texcoordItem.x;
            subdividedTexcoords[p++] = texcoordItem.y;
          }
        }
        const subdividedIndices = [];
        const edges = {};
        const radius = ellipsoid.maximumRadius;
        const minDistance = Math_default.chordLength(granularity, radius);
        const rhumb0 = new EllipsoidRhumbLine_default(void 0, void 0, ellipsoid);
        const rhumb1 = new EllipsoidRhumbLine_default(void 0, void 0, ellipsoid);
        const rhumb2 = new EllipsoidRhumbLine_default(void 0, void 0, ellipsoid);
        while (triangles.length > 0) {
          const i2 = triangles.pop();
          const i1 = triangles.pop();
          const i0 = triangles.pop();
          const v02 = Cartesian3_default.fromArray(
            subdividedPositions,
            i0 * 3,
            subdivisionV0Scratch
          );
          const v12 = Cartesian3_default.fromArray(
            subdividedPositions,
            i1 * 3,
            subdivisionV1Scratch
          );
          const v22 = Cartesian3_default.fromArray(
            subdividedPositions,
            i2 * 3,
            subdivisionV2Scratch
          );
          let t0, t1, t2;
          if (hasTexcoords) {
            t0 = Cartesian2_default.fromArray(
              subdividedTexcoords,
              i0 * 2,
              subdivisionT0Scratch
            );
            t1 = Cartesian2_default.fromArray(
              subdividedTexcoords,
              i1 * 2,
              subdivisionT1Scratch
            );
            t2 = Cartesian2_default.fromArray(
              subdividedTexcoords,
              i2 * 2,
              subdivisionT2Scratch
            );
          }
          const c0 = ellipsoid.cartesianToCartographic(v02, subdivisionC0Scratch);
          const c1 = ellipsoid.cartesianToCartographic(v12, subdivisionC1Scratch);
          const c2 = ellipsoid.cartesianToCartographic(v22, subdivisionC2Scratch);
          rhumb0.setEndPoints(c0, c1);
          const g0 = rhumb0.surfaceDistance;
          rhumb1.setEndPoints(c1, c2);
          const g1 = rhumb1.surfaceDistance;
          rhumb2.setEndPoints(c2, c0);
          const g2 = rhumb2.surfaceDistance;
          const max3 = Math.max(g0, g1, g2);
          let edge;
          let mid;
          let midHeight;
          let midCartesian3;
          let midTexcoord;
          if (max3 > minDistance) {
            if (g0 === max3) {
              edge = `${Math.min(i0, i1)} ${Math.max(i0, i1)}`;
              i = edges[edge];
              if (!defined_default(i)) {
                mid = rhumb0.interpolateUsingFraction(
                  0.5,
                  subdivisionCartographicScratch
                );
                midHeight = (c0.height + c1.height) * 0.5;
                midCartesian3 = Cartesian3_default.fromRadians(
                  mid.longitude,
                  mid.latitude,
                  midHeight,
                  ellipsoid,
                  subdivisionMidScratch
                );
                subdividedPositions.push(
                  midCartesian3.x,
                  midCartesian3.y,
                  midCartesian3.z
                );
                i = subdividedPositions.length / 3 - 1;
                edges[edge] = i;
                if (hasTexcoords) {
                  midTexcoord = Cartesian2_default.add(t0, t1, subdivisionTexcoordMidScratch);
                  Cartesian2_default.multiplyByScalar(midTexcoord, 0.5, midTexcoord);
                  subdividedTexcoords.push(midTexcoord.x, midTexcoord.y);
                }
              }
              triangles.push(i0, i, i2);
              triangles.push(i, i1, i2);
            } else if (g1 === max3) {
              edge = `${Math.min(i1, i2)} ${Math.max(i1, i2)}`;
              i = edges[edge];
              if (!defined_default(i)) {
                mid = rhumb1.interpolateUsingFraction(
                  0.5,
                  subdivisionCartographicScratch
                );
                midHeight = (c1.height + c2.height) * 0.5;
                midCartesian3 = Cartesian3_default.fromRadians(
                  mid.longitude,
                  mid.latitude,
                  midHeight,
                  ellipsoid,
                  subdivisionMidScratch
                );
                subdividedPositions.push(
                  midCartesian3.x,
                  midCartesian3.y,
                  midCartesian3.z
                );
                i = subdividedPositions.length / 3 - 1;
                edges[edge] = i;
                if (hasTexcoords) {
                  midTexcoord = Cartesian2_default.add(t1, t2, subdivisionTexcoordMidScratch);
                  Cartesian2_default.multiplyByScalar(midTexcoord, 0.5, midTexcoord);
                  subdividedTexcoords.push(midTexcoord.x, midTexcoord.y);
                }
              }
              triangles.push(i1, i, i0);
              triangles.push(i, i2, i0);
            } else if (g2 === max3) {
              edge = `${Math.min(i2, i0)} ${Math.max(i2, i0)}`;
              i = edges[edge];
              if (!defined_default(i)) {
                mid = rhumb2.interpolateUsingFraction(
                  0.5,
                  subdivisionCartographicScratch
                );
                midHeight = (c2.height + c0.height) * 0.5;
                midCartesian3 = Cartesian3_default.fromRadians(
                  mid.longitude,
                  mid.latitude,
                  midHeight,
                  ellipsoid,
                  subdivisionMidScratch
                );
                subdividedPositions.push(
                  midCartesian3.x,
                  midCartesian3.y,
                  midCartesian3.z
                );
                i = subdividedPositions.length / 3 - 1;
                edges[edge] = i;
                if (hasTexcoords) {
                  midTexcoord = Cartesian2_default.add(t2, t0, subdivisionTexcoordMidScratch);
                  Cartesian2_default.multiplyByScalar(midTexcoord, 0.5, midTexcoord);
                  subdividedTexcoords.push(midTexcoord.x, midTexcoord.y);
                }
              }
              triangles.push(i2, i, i1);
              triangles.push(i, i0, i1);
            }
          } else {
            subdividedIndices.push(i0);
            subdividedIndices.push(i1);
            subdividedIndices.push(i2);
          }
        }
        const geometryOptions = {
          attributes: {
            position: new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.DOUBLE,
              componentsPerAttribute: 3,
              values: subdividedPositions
            })
          },
          indices: subdividedIndices,
          primitiveType: PrimitiveType_default.TRIANGLES
        };
        if (hasTexcoords) {
          geometryOptions.attributes.st = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 2,
            values: subdividedTexcoords
          });
        }
        return new Geometry_default(geometryOptions);
      };
      PolygonPipeline.scaleToGeodeticHeight = function(positions, height, ellipsoid, scaleToSurface4) {
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        let n = scaleToGeodeticHeightN;
        let p = scaleToGeodeticHeightP;
        height = defaultValue_default(height, 0);
        scaleToSurface4 = defaultValue_default(scaleToSurface4, true);
        if (defined_default(positions)) {
          const length = positions.length;
          for (let i = 0; i < length; i += 3) {
            Cartesian3_default.fromArray(positions, i, p);
            if (scaleToSurface4) {
              p = ellipsoid.scaleToGeodeticSurface(p, p);
            }
            if (height !== 0) {
              n = ellipsoid.geodeticSurfaceNormal(p, n);
              Cartesian3_default.multiplyByScalar(n, height, n);
              Cartesian3_default.add(p, n, p);
            }
            positions[i] = p.x;
            positions[i + 1] = p.y;
            positions[i + 2] = p.z;
          }
        }
        return positions;
      };
      PolygonPipeline_default = PolygonPipeline;
    }
  });

  // packages/engine/Source/Core/Queue.js
  function Queue() {
    this._array = [];
    this._offset = 0;
    this._length = 0;
  }
  var Queue_default;
  var init_Queue = __esm({
    "packages/engine/Source/Core/Queue.js"() {
      Object.defineProperties(Queue.prototype, {
        /**
         * The length of the queue.
         *
         * @memberof Queue.prototype
         *
         * @type {number}
         * @readonly
         */
        length: {
          get: function() {
            return this._length;
          }
        }
      });
      Queue.prototype.enqueue = function(item) {
        this._array.push(item);
        this._length++;
      };
      Queue.prototype.dequeue = function() {
        if (this._length === 0) {
          return void 0;
        }
        const array = this._array;
        let offset = this._offset;
        const item = array[offset];
        array[offset] = void 0;
        offset++;
        if (offset > 10 && offset * 2 > array.length) {
          this._array = array.slice(offset);
          offset = 0;
        }
        this._offset = offset;
        this._length--;
        return item;
      };
      Queue.prototype.peek = function() {
        if (this._length === 0) {
          return void 0;
        }
        return this._array[this._offset];
      };
      Queue.prototype.contains = function(item) {
        return this._array.indexOf(item) !== -1;
      };
      Queue.prototype.clear = function() {
        this._array.length = this._offset = this._length = 0;
      };
      Queue.prototype.sort = function(compareFunction) {
        if (this._offset > 0) {
          this._array = this._array.slice(this._offset);
          this._offset = 0;
        }
        this._array.sort(compareFunction);
      };
      Queue_default = Queue;
    }
  });

  // packages/engine/Source/Core/PolygonGeometryLibrary.js
  function getPointAtDistance2D(p0, p1, distance, length) {
    Cartesian2_default.subtract(p1, p0, distance2DScratch);
    Cartesian2_default.multiplyByScalar(
      distance2DScratch,
      distance / length,
      distance2DScratch
    );
    Cartesian2_default.add(p0, distance2DScratch, distance2DScratch);
    return [distance2DScratch.x, distance2DScratch.y];
  }
  function getPointAtDistance(p0, p1, distance, length) {
    Cartesian3_default.subtract(p1, p0, distanceScratch4);
    Cartesian3_default.multiplyByScalar(
      distanceScratch4,
      distance / length,
      distanceScratch4
    );
    Cartesian3_default.add(p0, distanceScratch4, distanceScratch4);
    return [distanceScratch4.x, distanceScratch4.y, distanceScratch4.z];
  }
  function computeEquatorIntersectionRhumb(start, end, ellipsoid) {
    const c0 = ellipsoid.cartesianToCartographic(start, scratchCartographic0);
    const c1 = ellipsoid.cartesianToCartographic(end, scratchCartographic1);
    if (Math.sign(c0.latitude) === Math.sign(c1.latitude)) {
      return;
    }
    scratchRhumbLine.setEndPoints(c0, c1);
    const intersection = scratchRhumbLine.findIntersectionWithLatitude(
      0,
      scratchRhumbIntersection
    );
    if (!defined_default(intersection)) {
      return;
    }
    let minLongitude = Math.min(c0.longitude, c1.longitude);
    let maxLongitude = Math.max(c0.longitude, c1.longitude);
    if (Math.abs(maxLongitude - minLongitude) > Math_default.PI) {
      const swap2 = minLongitude;
      minLongitude = maxLongitude;
      maxLongitude = swap2;
    }
    if (intersection.longitude < minLongitude || intersection.longitude > maxLongitude) {
      return;
    }
    return ellipsoid.cartographicToCartesian(intersection);
  }
  function computeEquatorIntersection(start, end, ellipsoid, arcType) {
    if (arcType === ArcType_default.RHUMB) {
      return computeEquatorIntersectionRhumb(start, end, ellipsoid);
    }
    const intersection = IntersectionTests_default.lineSegmentPlane(
      start,
      end,
      Plane_default.ORIGIN_XY_PLANE
    );
    if (!defined_default(intersection)) {
      return;
    }
    return ellipsoid.scaleToGeodeticSurface(intersection, intersection);
  }
  function computeEdgesOnPlane(positions, ellipsoid, arcType) {
    const edgesOnPlane = [];
    let startPoint, endPoint, type, next, intersection, i = 0;
    while (i < positions.length) {
      startPoint = positions[i];
      endPoint = positions[(i + 1) % positions.length];
      type = Math_default.sign(startPoint.z);
      next = Math_default.sign(endPoint.z);
      const getLongitude = (position) => {
        const cartographic2 = ellipsoid.cartesianToCartographic(
          position,
          scratchCartographic3
        );
        return cartographic2.longitude;
      };
      if (type === 0) {
        edgesOnPlane.push({
          position: i,
          type,
          visited: false,
          next,
          theta: getLongitude(startPoint)
        });
      } else if (next !== 0) {
        intersection = computeEquatorIntersection(
          startPoint,
          endPoint,
          ellipsoid,
          arcType
        );
        ++i;
        if (!defined_default(intersection)) {
          continue;
        }
        positions.splice(i, 0, intersection);
        edgesOnPlane.push({
          position: i,
          type,
          visited: false,
          next,
          theta: getLongitude(intersection)
        });
      }
      ++i;
    }
    return edgesOnPlane;
  }
  function wirePolygon(polygons, polygonIndex, positions, edgesOnPlane, toDelete, startIndex, abovePlane) {
    const polygon2 = [];
    let i = startIndex;
    const getMatchingEdge = (i2) => (edge) => edge.position === i2;
    const polygonsToWire = [];
    do {
      const position = positions[i];
      polygon2.push(position);
      const edgeIndex = edgesOnPlane.findIndex(getMatchingEdge(i));
      const edge = edgesOnPlane[edgeIndex];
      if (!defined_default(edge)) {
        ++i;
        continue;
      }
      const { visited: hasBeenVisited, type, next } = edge;
      edge.visited = true;
      if (type === 0) {
        if (next === 0) {
          const previousEdge = edgesOnPlane[edgeIndex - (abovePlane ? 1 : -1)];
          if (previousEdge?.position === i + 1) {
            previousEdge.visited = true;
          } else {
            ++i;
            continue;
          }
        }
        if (!hasBeenVisited && abovePlane && next > 0 || startIndex === i && !abovePlane && next < 0) {
          ++i;
          continue;
        }
      }
      const followEdge = abovePlane ? type >= 0 : type <= 0;
      if (!followEdge) {
        ++i;
        continue;
      }
      if (!hasBeenVisited) {
        polygonsToWire.push(i);
      }
      const nextEdgeIndex = edgeIndex + (abovePlane ? 1 : -1);
      const nextEdge = edgesOnPlane[nextEdgeIndex];
      if (!defined_default(nextEdge)) {
        ++i;
        continue;
      }
      i = nextEdge.position;
    } while (i < positions.length && i >= 0 && i !== startIndex && polygon2.length < positions.length);
    polygons.splice(polygonIndex, toDelete, polygon2);
    for (const index of polygonsToWire) {
      polygonIndex = wirePolygon(
        polygons,
        ++polygonIndex,
        positions,
        edgesOnPlane,
        0,
        index,
        !abovePlane
      );
    }
    return polygonIndex;
  }
  var PolygonGeometryLibrary, distance2DScratch, distanceScratch4, scratchCartographic0, scratchCartographic1, scratchCartographic22, scratchCartesian0, scratchRhumbLine, scaleToGeodeticHeightN1, scaleToGeodeticHeightN2, scaleToGeodeticHeightP1, scaleToGeodeticHeightP2, scratchRhumbIntersection, scratchCartographic3, computeBoundingRectangleCartesian2, computeBoundingRectangleCartesian3, computeBoundingRectangleQuaternion, computeBoundingRectangleMatrix3, computeWallTexcoordsSubdivided, computeWallIndicesSubdivided, p1Scratch2, p2Scratch2, PolygonGeometryLibrary_default;
  var init_PolygonGeometryLibrary = __esm({
    "packages/engine/Source/Core/PolygonGeometryLibrary.js"() {
      init_ArcType();
      init_arrayRemoveDuplicates();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_EllipsoidRhumbLine();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_IntersectionTests();
      init_Math();
      init_Matrix3();
      init_Plane();
      init_PolygonHierarchy();
      init_PolygonPipeline();
      init_PrimitiveType();
      init_Quaternion();
      init_Queue();
      init_WindingOrder();
      PolygonGeometryLibrary = {};
      PolygonGeometryLibrary.computeHierarchyPackedLength = function(polygonHierarchy, CartesianX) {
        let numComponents = 0;
        const stack = [polygonHierarchy];
        while (stack.length > 0) {
          const hierarchy = stack.pop();
          if (!defined_default(hierarchy)) {
            continue;
          }
          numComponents += 2;
          const positions = hierarchy.positions;
          const holes = hierarchy.holes;
          if (defined_default(positions) && positions.length > 0) {
            numComponents += positions.length * CartesianX.packedLength;
          }
          if (defined_default(holes)) {
            const length = holes.length;
            for (let i = 0; i < length; ++i) {
              stack.push(holes[i]);
            }
          }
        }
        return numComponents;
      };
      PolygonGeometryLibrary.packPolygonHierarchy = function(polygonHierarchy, array, startingIndex, CartesianX) {
        const stack = [polygonHierarchy];
        while (stack.length > 0) {
          const hierarchy = stack.pop();
          if (!defined_default(hierarchy)) {
            continue;
          }
          const positions = hierarchy.positions;
          const holes = hierarchy.holes;
          array[startingIndex++] = defined_default(positions) ? positions.length : 0;
          array[startingIndex++] = defined_default(holes) ? holes.length : 0;
          if (defined_default(positions)) {
            const positionsLength = positions.length;
            for (let i = 0; i < positionsLength; ++i, startingIndex += CartesianX.packedLength) {
              CartesianX.pack(positions[i], array, startingIndex);
            }
          }
          if (defined_default(holes)) {
            const holesLength = holes.length;
            for (let j = 0; j < holesLength; ++j) {
              stack.push(holes[j]);
            }
          }
        }
        return startingIndex;
      };
      PolygonGeometryLibrary.unpackPolygonHierarchy = function(array, startingIndex, CartesianX) {
        const positionsLength = array[startingIndex++];
        const holesLength = array[startingIndex++];
        const positions = new Array(positionsLength);
        const holes = holesLength > 0 ? new Array(holesLength) : void 0;
        for (let i = 0; i < positionsLength; ++i, startingIndex += CartesianX.packedLength) {
          positions[i] = CartesianX.unpack(array, startingIndex);
        }
        for (let j = 0; j < holesLength; ++j) {
          holes[j] = PolygonGeometryLibrary.unpackPolygonHierarchy(
            array,
            startingIndex,
            CartesianX
          );
          startingIndex = holes[j].startingIndex;
          delete holes[j].startingIndex;
        }
        return {
          positions,
          holes,
          startingIndex
        };
      };
      distance2DScratch = new Cartesian2_default();
      distanceScratch4 = new Cartesian3_default();
      PolygonGeometryLibrary.subdivideLineCount = function(p0, p1, minDistance) {
        const distance = Cartesian3_default.distance(p0, p1);
        const n = distance / minDistance;
        const countDivide = Math.max(0, Math.ceil(Math_default.log2(n)));
        return Math.pow(2, countDivide);
      };
      scratchCartographic0 = new Cartographic_default();
      scratchCartographic1 = new Cartographic_default();
      scratchCartographic22 = new Cartographic_default();
      scratchCartesian0 = new Cartesian3_default();
      scratchRhumbLine = new EllipsoidRhumbLine_default();
      PolygonGeometryLibrary.subdivideRhumbLineCount = function(ellipsoid, p0, p1, minDistance) {
        const c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);
        const c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);
        const rhumb = new EllipsoidRhumbLine_default(c0, c1, ellipsoid);
        const n = rhumb.surfaceDistance / minDistance;
        const countDivide = Math.max(0, Math.ceil(Math_default.log2(n)));
        return Math.pow(2, countDivide);
      };
      PolygonGeometryLibrary.subdivideTexcoordLine = function(t0, t1, p0, p1, minDistance, result) {
        const subdivisions = PolygonGeometryLibrary.subdivideLineCount(
          p0,
          p1,
          minDistance
        );
        const length2D = Cartesian2_default.distance(t0, t1);
        const distanceBetweenCoords = length2D / subdivisions;
        const texcoords = result;
        texcoords.length = subdivisions * 2;
        let index = 0;
        for (let i = 0; i < subdivisions; i++) {
          const t = getPointAtDistance2D(t0, t1, i * distanceBetweenCoords, length2D);
          texcoords[index++] = t[0];
          texcoords[index++] = t[1];
        }
        return texcoords;
      };
      PolygonGeometryLibrary.subdivideLine = function(p0, p1, minDistance, result) {
        const numVertices = PolygonGeometryLibrary.subdivideLineCount(
          p0,
          p1,
          minDistance
        );
        const length = Cartesian3_default.distance(p0, p1);
        const distanceBetweenVertices = length / numVertices;
        if (!defined_default(result)) {
          result = [];
        }
        const positions = result;
        positions.length = numVertices * 3;
        let index = 0;
        for (let i = 0; i < numVertices; i++) {
          const p = getPointAtDistance(p0, p1, i * distanceBetweenVertices, length);
          positions[index++] = p[0];
          positions[index++] = p[1];
          positions[index++] = p[2];
        }
        return positions;
      };
      PolygonGeometryLibrary.subdivideTexcoordRhumbLine = function(t0, t1, ellipsoid, p0, p1, minDistance, result) {
        const c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);
        const c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);
        scratchRhumbLine.setEndPoints(c0, c1);
        const n = scratchRhumbLine.surfaceDistance / minDistance;
        const countDivide = Math.max(0, Math.ceil(Math_default.log2(n)));
        const subdivisions = Math.pow(2, countDivide);
        const length2D = Cartesian2_default.distance(t0, t1);
        const distanceBetweenCoords = length2D / subdivisions;
        const texcoords = result;
        texcoords.length = subdivisions * 2;
        let index = 0;
        for (let i = 0; i < subdivisions; i++) {
          const t = getPointAtDistance2D(t0, t1, i * distanceBetweenCoords, length2D);
          texcoords[index++] = t[0];
          texcoords[index++] = t[1];
        }
        return texcoords;
      };
      PolygonGeometryLibrary.subdivideRhumbLine = function(ellipsoid, p0, p1, minDistance, result) {
        const c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);
        const c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);
        const rhumb = new EllipsoidRhumbLine_default(c0, c1, ellipsoid);
        const n = rhumb.surfaceDistance / minDistance;
        const countDivide = Math.max(0, Math.ceil(Math_default.log2(n)));
        const numVertices = Math.pow(2, countDivide);
        const distanceBetweenVertices = rhumb.surfaceDistance / numVertices;
        if (!defined_default(result)) {
          result = [];
        }
        const positions = result;
        positions.length = numVertices * 3;
        let index = 0;
        for (let i = 0; i < numVertices; i++) {
          const c = rhumb.interpolateUsingSurfaceDistance(
            i * distanceBetweenVertices,
            scratchCartographic22
          );
          const p = ellipsoid.cartographicToCartesian(c, scratchCartesian0);
          positions[index++] = p.x;
          positions[index++] = p.y;
          positions[index++] = p.z;
        }
        return positions;
      };
      scaleToGeodeticHeightN1 = new Cartesian3_default();
      scaleToGeodeticHeightN2 = new Cartesian3_default();
      scaleToGeodeticHeightP1 = new Cartesian3_default();
      scaleToGeodeticHeightP2 = new Cartesian3_default();
      PolygonGeometryLibrary.scaleToGeodeticHeightExtruded = function(geometry, maxHeight, minHeight, ellipsoid, perPositionHeight) {
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        const n1 = scaleToGeodeticHeightN1;
        let n2 = scaleToGeodeticHeightN2;
        const p = scaleToGeodeticHeightP1;
        let p2 = scaleToGeodeticHeightP2;
        if (defined_default(geometry) && defined_default(geometry.attributes) && defined_default(geometry.attributes.position)) {
          const positions = geometry.attributes.position.values;
          const length = positions.length / 2;
          for (let i = 0; i < length; i += 3) {
            Cartesian3_default.fromArray(positions, i, p);
            ellipsoid.geodeticSurfaceNormal(p, n1);
            p2 = ellipsoid.scaleToGeodeticSurface(p, p2);
            n2 = Cartesian3_default.multiplyByScalar(n1, minHeight, n2);
            n2 = Cartesian3_default.add(p2, n2, n2);
            positions[i + length] = n2.x;
            positions[i + 1 + length] = n2.y;
            positions[i + 2 + length] = n2.z;
            if (perPositionHeight) {
              p2 = Cartesian3_default.clone(p, p2);
            }
            n2 = Cartesian3_default.multiplyByScalar(n1, maxHeight, n2);
            n2 = Cartesian3_default.add(p2, n2, n2);
            positions[i] = n2.x;
            positions[i + 1] = n2.y;
            positions[i + 2] = n2.z;
          }
        }
        return geometry;
      };
      PolygonGeometryLibrary.polygonOutlinesFromHierarchy = function(polygonHierarchy, scaleToEllipsoidSurface, ellipsoid) {
        const polygons = [];
        const queue = new Queue_default();
        queue.enqueue(polygonHierarchy);
        let i;
        let j;
        let length;
        while (queue.length !== 0) {
          const outerNode = queue.dequeue();
          let outerRing = outerNode.positions;
          if (scaleToEllipsoidSurface) {
            length = outerRing.length;
            for (i = 0; i < length; i++) {
              ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);
            }
          }
          outerRing = arrayRemoveDuplicates_default(
            outerRing,
            Cartesian3_default.equalsEpsilon,
            true
          );
          if (outerRing.length < 3) {
            continue;
          }
          const numChildren = outerNode.holes ? outerNode.holes.length : 0;
          for (i = 0; i < numChildren; i++) {
            const hole = outerNode.holes[i];
            let holePositions = hole.positions;
            if (scaleToEllipsoidSurface) {
              length = holePositions.length;
              for (j = 0; j < length; ++j) {
                ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);
              }
            }
            holePositions = arrayRemoveDuplicates_default(
              holePositions,
              Cartesian3_default.equalsEpsilon,
              true
            );
            if (holePositions.length < 3) {
              continue;
            }
            polygons.push(holePositions);
            let numGrandchildren = 0;
            if (defined_default(hole.holes)) {
              numGrandchildren = hole.holes.length;
            }
            for (j = 0; j < numGrandchildren; j++) {
              queue.enqueue(hole.holes[j]);
            }
          }
          polygons.push(outerRing);
        }
        return polygons;
      };
      scratchRhumbIntersection = new Cartographic_default();
      scratchCartographic3 = new Cartographic_default();
      PolygonGeometryLibrary.splitPolygonsOnEquator = function(outerRings, ellipsoid, arcType, result) {
        if (!defined_default(result)) {
          result = [];
        }
        result.splice(0, 0, ...outerRings);
        result.length = outerRings.length;
        let currentPolygon = 0;
        while (currentPolygon < result.length) {
          const outerRing = result[currentPolygon];
          const positions = outerRing.slice();
          if (outerRing.length < 3) {
            result[currentPolygon] = positions;
            ++currentPolygon;
            continue;
          }
          const edgesOnPlane = computeEdgesOnPlane(positions, ellipsoid, arcType);
          if (positions.length === outerRing.length || edgesOnPlane.length <= 1) {
            result[currentPolygon] = positions;
            ++currentPolygon;
            continue;
          }
          edgesOnPlane.sort((a3, b) => {
            return a3.theta - b.theta;
          });
          const north = positions[0].z >= 0;
          currentPolygon = wirePolygon(
            result,
            currentPolygon,
            positions,
            edgesOnPlane,
            1,
            0,
            north
          );
        }
        return result;
      };
      PolygonGeometryLibrary.polygonsFromHierarchy = function(polygonHierarchy, keepDuplicates, projectPointsTo2D, scaleToEllipsoidSurface, ellipsoid, splitPolygons) {
        const hierarchy = [];
        const polygons = [];
        const queue = new Queue_default();
        queue.enqueue(polygonHierarchy);
        let split = defined_default(splitPolygons);
        while (queue.length !== 0) {
          const outerNode = queue.dequeue();
          let outerRing = outerNode.positions;
          const holes = outerNode.holes;
          let i;
          let length;
          if (scaleToEllipsoidSurface) {
            length = outerRing.length;
            for (i = 0; i < length; i++) {
              ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);
            }
          }
          if (!keepDuplicates) {
            outerRing = arrayRemoveDuplicates_default(
              outerRing,
              Cartesian3_default.equalsEpsilon,
              true
            );
          }
          if (outerRing.length < 3) {
            continue;
          }
          let positions2D = projectPointsTo2D(outerRing);
          if (!defined_default(positions2D)) {
            continue;
          }
          const holeIndices = [];
          let originalWindingOrder = PolygonPipeline_default.computeWindingOrder2D(
            positions2D
          );
          if (originalWindingOrder === WindingOrder_default.CLOCKWISE) {
            positions2D.reverse();
            outerRing = outerRing.slice().reverse();
          }
          if (split) {
            split = false;
            let polygons2 = [outerRing];
            polygons2 = splitPolygons(polygons2, polygons2);
            if (polygons2.length > 1) {
              for (const positions2 of polygons2) {
                queue.enqueue(new PolygonHierarchy_default(positions2, holes));
              }
              continue;
            }
          }
          let positions = outerRing.slice();
          const numChildren = defined_default(holes) ? holes.length : 0;
          const polygonHoles = [];
          let j;
          for (i = 0; i < numChildren; i++) {
            const hole = holes[i];
            let holePositions = hole.positions;
            if (scaleToEllipsoidSurface) {
              length = holePositions.length;
              for (j = 0; j < length; ++j) {
                ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);
              }
            }
            if (!keepDuplicates) {
              holePositions = arrayRemoveDuplicates_default(
                holePositions,
                Cartesian3_default.equalsEpsilon,
                true
              );
            }
            if (holePositions.length < 3) {
              continue;
            }
            const holePositions2D = projectPointsTo2D(holePositions);
            if (!defined_default(holePositions2D)) {
              continue;
            }
            originalWindingOrder = PolygonPipeline_default.computeWindingOrder2D(
              holePositions2D
            );
            if (originalWindingOrder === WindingOrder_default.CLOCKWISE) {
              holePositions2D.reverse();
              holePositions = holePositions.slice().reverse();
            }
            polygonHoles.push(holePositions);
            holeIndices.push(positions.length);
            positions = positions.concat(holePositions);
            positions2D = positions2D.concat(holePositions2D);
            let numGrandchildren = 0;
            if (defined_default(hole.holes)) {
              numGrandchildren = hole.holes.length;
            }
            for (j = 0; j < numGrandchildren; j++) {
              queue.enqueue(hole.holes[j]);
            }
          }
          hierarchy.push({
            outerRing,
            holes: polygonHoles
          });
          polygons.push({
            positions,
            positions2D,
            holes: holeIndices
          });
        }
        return {
          hierarchy,
          polygons
        };
      };
      computeBoundingRectangleCartesian2 = new Cartesian2_default();
      computeBoundingRectangleCartesian3 = new Cartesian3_default();
      computeBoundingRectangleQuaternion = new Quaternion_default();
      computeBoundingRectangleMatrix3 = new Matrix3_default();
      PolygonGeometryLibrary.computeBoundingRectangle = function(planeNormal, projectPointTo2D, positions, angle, result) {
        const rotation = Quaternion_default.fromAxisAngle(
          planeNormal,
          angle,
          computeBoundingRectangleQuaternion
        );
        const textureMatrix = Matrix3_default.fromQuaternion(
          rotation,
          computeBoundingRectangleMatrix3
        );
        let minX = Number.POSITIVE_INFINITY;
        let maxX = Number.NEGATIVE_INFINITY;
        let minY = Number.POSITIVE_INFINITY;
        let maxY = Number.NEGATIVE_INFINITY;
        const length = positions.length;
        for (let i = 0; i < length; ++i) {
          const p = Cartesian3_default.clone(
            positions[i],
            computeBoundingRectangleCartesian3
          );
          Matrix3_default.multiplyByVector(textureMatrix, p, p);
          const st = projectPointTo2D(p, computeBoundingRectangleCartesian2);
          if (defined_default(st)) {
            minX = Math.min(minX, st.x);
            maxX = Math.max(maxX, st.x);
            minY = Math.min(minY, st.y);
            maxY = Math.max(maxY, st.y);
          }
        }
        result.x = minX;
        result.y = minY;
        result.width = maxX - minX;
        result.height = maxY - minY;
        return result;
      };
      PolygonGeometryLibrary.createGeometryFromPositions = function(ellipsoid, polygon2, textureCoordinates, granularity, perPositionHeight, vertexFormat, arcType) {
        let indices = PolygonPipeline_default.triangulate(polygon2.positions2D, polygon2.holes);
        if (indices.length < 3) {
          indices = [0, 1, 2];
        }
        const positions = polygon2.positions;
        const hasTexcoords = defined_default(textureCoordinates);
        const texcoords = hasTexcoords ? textureCoordinates.positions : void 0;
        if (perPositionHeight) {
          const length = positions.length;
          const flattenedPositions = new Array(length * 3);
          let index = 0;
          for (let i = 0; i < length; i++) {
            const p = positions[i];
            flattenedPositions[index++] = p.x;
            flattenedPositions[index++] = p.y;
            flattenedPositions[index++] = p.z;
          }
          const geometryOptions = {
            attributes: {
              position: new GeometryAttribute_default({
                componentDatatype: ComponentDatatype_default.DOUBLE,
                componentsPerAttribute: 3,
                values: flattenedPositions
              })
            },
            indices,
            primitiveType: PrimitiveType_default.TRIANGLES
          };
          if (hasTexcoords) {
            geometryOptions.attributes.st = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 2,
              values: Cartesian2_default.packArray(texcoords)
            });
          }
          const geometry = new Geometry_default(geometryOptions);
          if (vertexFormat.normal) {
            return GeometryPipeline_default.computeNormal(geometry);
          }
          return geometry;
        }
        if (arcType === ArcType_default.GEODESIC) {
          return PolygonPipeline_default.computeSubdivision(
            ellipsoid,
            positions,
            indices,
            texcoords,
            granularity
          );
        } else if (arcType === ArcType_default.RHUMB) {
          return PolygonPipeline_default.computeRhumbLineSubdivision(
            ellipsoid,
            positions,
            indices,
            texcoords,
            granularity
          );
        }
      };
      computeWallTexcoordsSubdivided = [];
      computeWallIndicesSubdivided = [];
      p1Scratch2 = new Cartesian3_default();
      p2Scratch2 = new Cartesian3_default();
      PolygonGeometryLibrary.computeWallGeometry = function(positions, textureCoordinates, ellipsoid, granularity, perPositionHeight, arcType) {
        let edgePositions;
        let topEdgeLength;
        let i;
        let p1;
        let p2;
        let t1;
        let t2;
        let edgeTexcoords;
        let topEdgeTexcoordLength;
        let length = positions.length;
        let index = 0;
        let textureIndex = 0;
        const hasTexcoords = defined_default(textureCoordinates);
        const texcoords = hasTexcoords ? textureCoordinates.positions : void 0;
        if (!perPositionHeight) {
          const minDistance = Math_default.chordLength(
            granularity,
            ellipsoid.maximumRadius
          );
          let numVertices = 0;
          if (arcType === ArcType_default.GEODESIC) {
            for (i = 0; i < length; i++) {
              numVertices += PolygonGeometryLibrary.subdivideLineCount(
                positions[i],
                positions[(i + 1) % length],
                minDistance
              );
            }
          } else if (arcType === ArcType_default.RHUMB) {
            for (i = 0; i < length; i++) {
              numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(
                ellipsoid,
                positions[i],
                positions[(i + 1) % length],
                minDistance
              );
            }
          }
          topEdgeLength = (numVertices + length) * 3;
          edgePositions = new Array(topEdgeLength * 2);
          if (hasTexcoords) {
            topEdgeTexcoordLength = (numVertices + length) * 2;
            edgeTexcoords = new Array(topEdgeTexcoordLength * 2);
          }
          for (i = 0; i < length; i++) {
            p1 = positions[i];
            p2 = positions[(i + 1) % length];
            let tempPositions;
            let tempTexcoords;
            if (hasTexcoords) {
              t1 = texcoords[i];
              t2 = texcoords[(i + 1) % length];
            }
            if (arcType === ArcType_default.GEODESIC) {
              tempPositions = PolygonGeometryLibrary.subdivideLine(
                p1,
                p2,
                minDistance,
                computeWallIndicesSubdivided
              );
              if (hasTexcoords) {
                tempTexcoords = PolygonGeometryLibrary.subdivideTexcoordLine(
                  t1,
                  t2,
                  p1,
                  p2,
                  minDistance,
                  computeWallTexcoordsSubdivided
                );
              }
            } else if (arcType === ArcType_default.RHUMB) {
              tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(
                ellipsoid,
                p1,
                p2,
                minDistance,
                computeWallIndicesSubdivided
              );
              if (hasTexcoords) {
                tempTexcoords = PolygonGeometryLibrary.subdivideTexcoordRhumbLine(
                  t1,
                  t2,
                  ellipsoid,
                  p1,
                  p2,
                  minDistance,
                  computeWallTexcoordsSubdivided
                );
              }
            }
            const tempPositionsLength = tempPositions.length;
            for (let j = 0; j < tempPositionsLength; ++j, ++index) {
              edgePositions[index] = tempPositions[j];
              edgePositions[index + topEdgeLength] = tempPositions[j];
            }
            edgePositions[index] = p2.x;
            edgePositions[index + topEdgeLength] = p2.x;
            ++index;
            edgePositions[index] = p2.y;
            edgePositions[index + topEdgeLength] = p2.y;
            ++index;
            edgePositions[index] = p2.z;
            edgePositions[index + topEdgeLength] = p2.z;
            ++index;
            if (hasTexcoords) {
              const tempTexcoordsLength = tempTexcoords.length;
              for (let k = 0; k < tempTexcoordsLength; ++k, ++textureIndex) {
                edgeTexcoords[textureIndex] = tempTexcoords[k];
                edgeTexcoords[textureIndex + topEdgeTexcoordLength] = tempTexcoords[k];
              }
              edgeTexcoords[textureIndex] = t2.x;
              edgeTexcoords[textureIndex + topEdgeTexcoordLength] = t2.x;
              ++textureIndex;
              edgeTexcoords[textureIndex] = t2.y;
              edgeTexcoords[textureIndex + topEdgeTexcoordLength] = t2.y;
              ++textureIndex;
            }
          }
        } else {
          topEdgeLength = length * 3 * 2;
          edgePositions = new Array(topEdgeLength * 2);
          if (hasTexcoords) {
            topEdgeTexcoordLength = length * 2 * 2;
            edgeTexcoords = new Array(topEdgeTexcoordLength * 2);
          }
          for (i = 0; i < length; i++) {
            p1 = positions[i];
            p2 = positions[(i + 1) % length];
            edgePositions[index] = edgePositions[index + topEdgeLength] = p1.x;
            ++index;
            edgePositions[index] = edgePositions[index + topEdgeLength] = p1.y;
            ++index;
            edgePositions[index] = edgePositions[index + topEdgeLength] = p1.z;
            ++index;
            edgePositions[index] = edgePositions[index + topEdgeLength] = p2.x;
            ++index;
            edgePositions[index] = edgePositions[index + topEdgeLength] = p2.y;
            ++index;
            edgePositions[index] = edgePositions[index + topEdgeLength] = p2.z;
            ++index;
            if (hasTexcoords) {
              t1 = texcoords[i];
              t2 = texcoords[(i + 1) % length];
              edgeTexcoords[textureIndex] = edgeTexcoords[textureIndex + topEdgeTexcoordLength] = t1.x;
              ++textureIndex;
              edgeTexcoords[textureIndex] = edgeTexcoords[textureIndex + topEdgeTexcoordLength] = t1.y;
              ++textureIndex;
              edgeTexcoords[textureIndex] = edgeTexcoords[textureIndex + topEdgeTexcoordLength] = t2.x;
              ++textureIndex;
              edgeTexcoords[textureIndex] = edgeTexcoords[textureIndex + topEdgeTexcoordLength] = t2.y;
              ++textureIndex;
            }
          }
        }
        length = edgePositions.length;
        const indices = IndexDatatype_default.createTypedArray(
          length / 3,
          length - positions.length * 6
        );
        let edgeIndex = 0;
        length /= 6;
        for (i = 0; i < length; i++) {
          const UL = i;
          const UR = UL + 1;
          const LL = UL + length;
          const LR = LL + 1;
          p1 = Cartesian3_default.fromArray(edgePositions, UL * 3, p1Scratch2);
          p2 = Cartesian3_default.fromArray(edgePositions, UR * 3, p2Scratch2);
          if (Cartesian3_default.equalsEpsilon(
            p1,
            p2,
            Math_default.EPSILON10,
            Math_default.EPSILON10
          )) {
            continue;
          }
          indices[edgeIndex++] = UL;
          indices[edgeIndex++] = LL;
          indices[edgeIndex++] = UR;
          indices[edgeIndex++] = UR;
          indices[edgeIndex++] = LL;
          indices[edgeIndex++] = LR;
        }
        const geometryOptions = {
          attributes: new GeometryAttributes_default({
            position: new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.DOUBLE,
              componentsPerAttribute: 3,
              values: edgePositions
            })
          }),
          indices,
          primitiveType: PrimitiveType_default.TRIANGLES
        };
        if (hasTexcoords) {
          geometryOptions.attributes.st = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 2,
            values: edgeTexcoords
          });
        }
        const geometry = new Geometry_default(geometryOptions);
        return geometry;
      };
      PolygonGeometryLibrary_default = PolygonGeometryLibrary;
    }
  });

  // packages/engine/Source/Core/CoplanarPolygonGeometry.js
  function createGeometryFromPolygon(polygon2, vertexFormat, boundingRectangle, stRotation, hardcodedTextureCoordinates, projectPointTo2D, normal2, tangent, bitangent) {
    const positions = polygon2.positions;
    let indices = PolygonPipeline_default.triangulate(polygon2.positions2D, polygon2.holes);
    if (indices.length < 3) {
      indices = [0, 1, 2];
    }
    const newIndices = IndexDatatype_default.createTypedArray(
      positions.length,
      indices.length
    );
    newIndices.set(indices);
    let textureMatrix = textureMatrixScratch2;
    if (stRotation !== 0) {
      let rotation = Quaternion_default.fromAxisAngle(
        normal2,
        stRotation,
        quaternionScratch2
      );
      textureMatrix = Matrix3_default.fromQuaternion(rotation, textureMatrix);
      if (vertexFormat.tangent || vertexFormat.bitangent) {
        rotation = Quaternion_default.fromAxisAngle(
          normal2,
          -stRotation,
          quaternionScratch2
        );
        const tangentRotation = Matrix3_default.fromQuaternion(
          rotation,
          tangentRotationScratch
        );
        tangent = Cartesian3_default.normalize(
          Matrix3_default.multiplyByVector(tangentRotation, tangent, tangent),
          tangent
        );
        if (vertexFormat.bitangent) {
          bitangent = Cartesian3_default.normalize(
            Cartesian3_default.cross(normal2, tangent, bitangent),
            bitangent
          );
        }
      }
    } else {
      textureMatrix = Matrix3_default.clone(Matrix3_default.IDENTITY, textureMatrix);
    }
    const stOrigin = textureCoordinatesOrigin;
    if (vertexFormat.st) {
      stOrigin.x = boundingRectangle.x;
      stOrigin.y = boundingRectangle.y;
    }
    const length = positions.length;
    const size = length * 3;
    const flatPositions = new Float64Array(size);
    const normals = vertexFormat.normal ? new Float32Array(size) : void 0;
    const tangents = vertexFormat.tangent ? new Float32Array(size) : void 0;
    const bitangents = vertexFormat.bitangent ? new Float32Array(size) : void 0;
    const textureCoordinates = vertexFormat.st ? new Float32Array(length * 2) : void 0;
    let positionIndex = 0;
    let normalIndex = 0;
    let bitangentIndex = 0;
    let tangentIndex = 0;
    let stIndex = 0;
    for (let i = 0; i < length; i++) {
      const position = positions[i];
      flatPositions[positionIndex++] = position.x;
      flatPositions[positionIndex++] = position.y;
      flatPositions[positionIndex++] = position.z;
      if (vertexFormat.st) {
        if (defined_default(hardcodedTextureCoordinates) && hardcodedTextureCoordinates.positions.length === length) {
          textureCoordinates[stIndex++] = hardcodedTextureCoordinates.positions[i].x;
          textureCoordinates[stIndex++] = hardcodedTextureCoordinates.positions[i].y;
        } else {
          const p = Matrix3_default.multiplyByVector(
            textureMatrix,
            position,
            scratchPosition
          );
          const st = projectPointTo2D(p, stScratch);
          Cartesian2_default.subtract(st, stOrigin, st);
          const stx = Math_default.clamp(st.x / boundingRectangle.width, 0, 1);
          const sty = Math_default.clamp(st.y / boundingRectangle.height, 0, 1);
          textureCoordinates[stIndex++] = stx;
          textureCoordinates[stIndex++] = sty;
        }
      }
      if (vertexFormat.normal) {
        normals[normalIndex++] = normal2.x;
        normals[normalIndex++] = normal2.y;
        normals[normalIndex++] = normal2.z;
      }
      if (vertexFormat.tangent) {
        tangents[tangentIndex++] = tangent.x;
        tangents[tangentIndex++] = tangent.y;
        tangents[tangentIndex++] = tangent.z;
      }
      if (vertexFormat.bitangent) {
        bitangents[bitangentIndex++] = bitangent.x;
        bitangents[bitangentIndex++] = bitangent.y;
        bitangents[bitangentIndex++] = bitangent.z;
      }
    }
    const attributes = new GeometryAttributes_default();
    if (vertexFormat.position) {
      attributes.position = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.DOUBLE,
        componentsPerAttribute: 3,
        values: flatPositions
      });
    }
    if (vertexFormat.normal) {
      attributes.normal = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: normals
      });
    }
    if (vertexFormat.tangent) {
      attributes.tangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: tangents
      });
    }
    if (vertexFormat.bitangent) {
      attributes.bitangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: bitangents
      });
    }
    if (vertexFormat.st) {
      attributes.st = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 2,
        values: textureCoordinates
      });
    }
    return new Geometry_default({
      attributes,
      indices: newIndices,
      primitiveType: PrimitiveType_default.TRIANGLES
    });
  }
  function CoplanarPolygonGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const polygonHierarchy = options.polygonHierarchy;
    const textureCoordinates = options.textureCoordinates;
    Check_default.defined("options.polygonHierarchy", polygonHierarchy);
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    this._vertexFormat = VertexFormat_default.clone(vertexFormat);
    this._polygonHierarchy = polygonHierarchy;
    this._stRotation = defaultValue_default(options.stRotation, 0);
    this._ellipsoid = Ellipsoid_default.clone(
      defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84)
    );
    this._workerName = "createCoplanarPolygonGeometry";
    this._textureCoordinates = textureCoordinates;
    this.packedLength = PolygonGeometryLibrary_default.computeHierarchyPackedLength(
      polygonHierarchy,
      Cartesian3_default
    ) + VertexFormat_default.packedLength + Ellipsoid_default.packedLength + (defined_default(textureCoordinates) ? PolygonGeometryLibrary_default.computeHierarchyPackedLength(
      textureCoordinates,
      Cartesian2_default
    ) : 1) + 2;
  }
  var scratchPosition, scratchBR, stScratch, textureCoordinatesOrigin, scratchNormal4, scratchTangent2, scratchBitangent2, centerScratch, axis1Scratch, axis2Scratch, quaternionScratch2, textureMatrixScratch2, tangentRotationScratch, surfaceNormalScratch, scratchEllipsoid3, scratchVertexFormat3, scratchOptions7, CoplanarPolygonGeometry_default;
  var init_CoplanarPolygonGeometry = __esm({
    "packages/engine/Source/Core/CoplanarPolygonGeometry.js"() {
      init_arrayRemoveDuplicates();
      init_BoundingRectangle();
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_CoplanarPolygonGeometryLibrary();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryInstance();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_Math();
      init_Matrix3();
      init_PolygonGeometryLibrary();
      init_PolygonPipeline();
      init_PrimitiveType();
      init_Quaternion();
      init_VertexFormat();
      scratchPosition = new Cartesian3_default();
      scratchBR = new BoundingRectangle_default();
      stScratch = new Cartesian2_default();
      textureCoordinatesOrigin = new Cartesian2_default();
      scratchNormal4 = new Cartesian3_default();
      scratchTangent2 = new Cartesian3_default();
      scratchBitangent2 = new Cartesian3_default();
      centerScratch = new Cartesian3_default();
      axis1Scratch = new Cartesian3_default();
      axis2Scratch = new Cartesian3_default();
      quaternionScratch2 = new Quaternion_default();
      textureMatrixScratch2 = new Matrix3_default();
      tangentRotationScratch = new Matrix3_default();
      surfaceNormalScratch = new Cartesian3_default();
      CoplanarPolygonGeometry.fromPositions = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        Check_default.defined("options.positions", options.positions);
        const newOptions = {
          polygonHierarchy: {
            positions: options.positions
          },
          vertexFormat: options.vertexFormat,
          stRotation: options.stRotation,
          ellipsoid: options.ellipsoid,
          textureCoordinates: options.textureCoordinates
        };
        return new CoplanarPolygonGeometry(newOptions);
      };
      CoplanarPolygonGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        startingIndex = PolygonGeometryLibrary_default.packPolygonHierarchy(
          value._polygonHierarchy,
          array,
          startingIndex,
          Cartesian3_default
        );
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._stRotation;
        if (defined_default(value._textureCoordinates)) {
          startingIndex = PolygonGeometryLibrary_default.packPolygonHierarchy(
            value._textureCoordinates,
            array,
            startingIndex,
            Cartesian2_default
          );
        } else {
          array[startingIndex++] = -1;
        }
        array[startingIndex++] = value.packedLength;
        return array;
      };
      scratchEllipsoid3 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchVertexFormat3 = new VertexFormat_default();
      scratchOptions7 = {
        polygonHierarchy: {}
      };
      CoplanarPolygonGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const polygonHierarchy = PolygonGeometryLibrary_default.unpackPolygonHierarchy(
          array,
          startingIndex,
          Cartesian3_default
        );
        startingIndex = polygonHierarchy.startingIndex;
        delete polygonHierarchy.startingIndex;
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid3);
        startingIndex += Ellipsoid_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat3
        );
        startingIndex += VertexFormat_default.packedLength;
        const stRotation = array[startingIndex++];
        const textureCoordinates = array[startingIndex] === -1 ? void 0 : PolygonGeometryLibrary_default.unpackPolygonHierarchy(
          array,
          startingIndex,
          Cartesian2_default
        );
        if (defined_default(textureCoordinates)) {
          startingIndex = textureCoordinates.startingIndex;
          delete textureCoordinates.startingIndex;
        } else {
          startingIndex++;
        }
        const packedLength = array[startingIndex++];
        if (!defined_default(result)) {
          result = new CoplanarPolygonGeometry(scratchOptions7);
        }
        result._polygonHierarchy = polygonHierarchy;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._stRotation = stRotation;
        result._textureCoordinates = textureCoordinates;
        result.packedLength = packedLength;
        return result;
      };
      CoplanarPolygonGeometry.createGeometry = function(polygonGeometry) {
        const vertexFormat = polygonGeometry._vertexFormat;
        const polygonHierarchy = polygonGeometry._polygonHierarchy;
        const stRotation = polygonGeometry._stRotation;
        const textureCoordinates = polygonGeometry._textureCoordinates;
        const hasTextureCoordinates = defined_default(textureCoordinates);
        let outerPositions = polygonHierarchy.positions;
        outerPositions = arrayRemoveDuplicates_default(
          outerPositions,
          Cartesian3_default.equalsEpsilon,
          true
        );
        if (outerPositions.length < 3) {
          return;
        }
        let normal2 = scratchNormal4;
        let tangent = scratchTangent2;
        let bitangent = scratchBitangent2;
        let axis1 = axis1Scratch;
        const axis2 = axis2Scratch;
        const validGeometry = CoplanarPolygonGeometryLibrary_default.computeProjectTo2DArguments(
          outerPositions,
          centerScratch,
          axis1,
          axis2
        );
        if (!validGeometry) {
          return void 0;
        }
        normal2 = Cartesian3_default.cross(axis1, axis2, normal2);
        normal2 = Cartesian3_default.normalize(normal2, normal2);
        if (!Cartesian3_default.equalsEpsilon(
          centerScratch,
          Cartesian3_default.ZERO,
          Math_default.EPSILON6
        )) {
          const surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(
            centerScratch,
            surfaceNormalScratch
          );
          if (Cartesian3_default.dot(normal2, surfaceNormal) < 0) {
            normal2 = Cartesian3_default.negate(normal2, normal2);
            axis1 = Cartesian3_default.negate(axis1, axis1);
          }
        }
        const projectPoints = CoplanarPolygonGeometryLibrary_default.createProjectPointsTo2DFunction(
          centerScratch,
          axis1,
          axis2
        );
        const projectPoint = CoplanarPolygonGeometryLibrary_default.createProjectPointTo2DFunction(
          centerScratch,
          axis1,
          axis2
        );
        if (vertexFormat.tangent) {
          tangent = Cartesian3_default.clone(axis1, tangent);
        }
        if (vertexFormat.bitangent) {
          bitangent = Cartesian3_default.clone(axis2, bitangent);
        }
        const results = PolygonGeometryLibrary_default.polygonsFromHierarchy(
          polygonHierarchy,
          hasTextureCoordinates,
          projectPoints,
          false
        );
        const hierarchy = results.hierarchy;
        const polygons = results.polygons;
        const dummyFunction = function(identity) {
          return identity;
        };
        const textureCoordinatePolygons = hasTextureCoordinates ? PolygonGeometryLibrary_default.polygonsFromHierarchy(
          textureCoordinates,
          true,
          dummyFunction,
          false
        ).polygons : void 0;
        if (hierarchy.length === 0) {
          return;
        }
        outerPositions = hierarchy[0].outerRing;
        const boundingSphere = BoundingSphere_default.fromPoints(outerPositions);
        const boundingRectangle = PolygonGeometryLibrary_default.computeBoundingRectangle(
          normal2,
          projectPoint,
          outerPositions,
          stRotation,
          scratchBR
        );
        const geometries = [];
        for (let i = 0; i < polygons.length; i++) {
          const geometryInstance = new GeometryInstance_default({
            geometry: createGeometryFromPolygon(
              polygons[i],
              vertexFormat,
              boundingRectangle,
              stRotation,
              hasTextureCoordinates ? textureCoordinatePolygons[i] : void 0,
              projectPoint,
              normal2,
              tangent,
              bitangent
            )
          });
          geometries.push(geometryInstance);
        }
        const geometry = GeometryPipeline_default.combineInstances(geometries)[0];
        geometry.attributes.position.values = new Float64Array(
          geometry.attributes.position.values
        );
        geometry.indices = IndexDatatype_default.createTypedArray(
          geometry.attributes.position.values.length / 3,
          geometry.indices
        );
        const attributes = geometry.attributes;
        if (!vertexFormat.position) {
          delete attributes.position;
        }
        return new Geometry_default({
          attributes,
          indices: geometry.indices,
          primitiveType: geometry.primitiveType,
          boundingSphere
        });
      };
      CoplanarPolygonGeometry_default = CoplanarPolygonGeometry;
    }
  });

  // packages/engine/Source/Workers/createCoplanarPolygonGeometry.js
  var createCoplanarPolygonGeometry_exports = {};
  __export(createCoplanarPolygonGeometry_exports, {
    default: () => createCoplanarPolygonGeometry_default
  });
  function createCoplanarPolygonGeometry(polygonGeometry, offset) {
    if (defined_default(offset)) {
      polygonGeometry = CoplanarPolygonGeometry_default.unpack(polygonGeometry, offset);
    }
    return CoplanarPolygonGeometry_default.createGeometry(polygonGeometry);
  }
  var createCoplanarPolygonGeometry_default;
  var init_createCoplanarPolygonGeometry = __esm({
    "packages/engine/Source/Workers/createCoplanarPolygonGeometry.js"() {
      init_CoplanarPolygonGeometry();
      init_defined();
      createCoplanarPolygonGeometry_default = createCoplanarPolygonGeometry;
    }
  });

  // packages/engine/Source/Core/CoplanarPolygonOutlineGeometry.js
  function createGeometryFromPositions(positions) {
    const length = positions.length;
    const flatPositions = new Float64Array(length * 3);
    const indices = IndexDatatype_default.createTypedArray(length, length * 2);
    let positionIndex = 0;
    let index = 0;
    for (let i = 0; i < length; i++) {
      const position = positions[i];
      flatPositions[positionIndex++] = position.x;
      flatPositions[positionIndex++] = position.y;
      flatPositions[positionIndex++] = position.z;
      indices[index++] = i;
      indices[index++] = (i + 1) % length;
    }
    const attributes = new GeometryAttributes_default({
      position: new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.DOUBLE,
        componentsPerAttribute: 3,
        values: flatPositions
      })
    });
    return new Geometry_default({
      attributes,
      indices,
      primitiveType: PrimitiveType_default.LINES
    });
  }
  function CoplanarPolygonOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const polygonHierarchy = options.polygonHierarchy;
    Check_default.defined("options.polygonHierarchy", polygonHierarchy);
    this._polygonHierarchy = polygonHierarchy;
    this._workerName = "createCoplanarPolygonOutlineGeometry";
    this.packedLength = PolygonGeometryLibrary_default.computeHierarchyPackedLength(
      polygonHierarchy,
      Cartesian3_default
    ) + 1;
  }
  var scratchOptions8, CoplanarPolygonOutlineGeometry_default;
  var init_CoplanarPolygonOutlineGeometry = __esm({
    "packages/engine/Source/Core/CoplanarPolygonOutlineGeometry.js"() {
      init_arrayRemoveDuplicates();
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_CoplanarPolygonGeometryLibrary();
      init_defaultValue();
      init_defined();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryInstance();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_PolygonGeometryLibrary();
      init_PrimitiveType();
      CoplanarPolygonOutlineGeometry.fromPositions = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        Check_default.defined("options.positions", options.positions);
        const newOptions = {
          polygonHierarchy: {
            positions: options.positions
          }
        };
        return new CoplanarPolygonOutlineGeometry(newOptions);
      };
      CoplanarPolygonOutlineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        startingIndex = PolygonGeometryLibrary_default.packPolygonHierarchy(
          value._polygonHierarchy,
          array,
          startingIndex,
          Cartesian3_default
        );
        array[startingIndex] = value.packedLength;
        return array;
      };
      scratchOptions8 = {
        polygonHierarchy: {}
      };
      CoplanarPolygonOutlineGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const polygonHierarchy = PolygonGeometryLibrary_default.unpackPolygonHierarchy(
          array,
          startingIndex,
          Cartesian3_default
        );
        startingIndex = polygonHierarchy.startingIndex;
        delete polygonHierarchy.startingIndex;
        const packedLength = array[startingIndex];
        if (!defined_default(result)) {
          result = new CoplanarPolygonOutlineGeometry(scratchOptions8);
        }
        result._polygonHierarchy = polygonHierarchy;
        result.packedLength = packedLength;
        return result;
      };
      CoplanarPolygonOutlineGeometry.createGeometry = function(polygonGeometry) {
        const polygonHierarchy = polygonGeometry._polygonHierarchy;
        let outerPositions = polygonHierarchy.positions;
        outerPositions = arrayRemoveDuplicates_default(
          outerPositions,
          Cartesian3_default.equalsEpsilon,
          true
        );
        if (outerPositions.length < 3) {
          return;
        }
        const isValid = CoplanarPolygonGeometryLibrary_default.validOutline(outerPositions);
        if (!isValid) {
          return void 0;
        }
        const polygons = PolygonGeometryLibrary_default.polygonOutlinesFromHierarchy(
          polygonHierarchy,
          false
        );
        if (polygons.length === 0) {
          return void 0;
        }
        const geometries = [];
        for (let i = 0; i < polygons.length; i++) {
          const geometryInstance = new GeometryInstance_default({
            geometry: createGeometryFromPositions(polygons[i])
          });
          geometries.push(geometryInstance);
        }
        const geometry = GeometryPipeline_default.combineInstances(geometries)[0];
        const boundingSphere = BoundingSphere_default.fromPoints(polygonHierarchy.positions);
        return new Geometry_default({
          attributes: geometry.attributes,
          indices: geometry.indices,
          primitiveType: geometry.primitiveType,
          boundingSphere
        });
      };
      CoplanarPolygonOutlineGeometry_default = CoplanarPolygonOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createCoplanarPolygonOutlineGeometry.js
  var createCoplanarPolygonOutlineGeometry_exports = {};
  __export(createCoplanarPolygonOutlineGeometry_exports, {
    default: () => createCoplanarPolygonOutlineGeometry_default
  });
  function createCoplanarPolygonOutlineGeometry(polygonGeometry, offset) {
    if (defined_default(offset)) {
      polygonGeometry = CoplanarPolygonOutlineGeometry_default.unpack(
        polygonGeometry,
        offset
      );
    }
    polygonGeometry._ellipsoid = Ellipsoid_default.clone(polygonGeometry._ellipsoid);
    return CoplanarPolygonOutlineGeometry_default.createGeometry(polygonGeometry);
  }
  var createCoplanarPolygonOutlineGeometry_default;
  var init_createCoplanarPolygonOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createCoplanarPolygonOutlineGeometry.js"() {
      init_CoplanarPolygonOutlineGeometry();
      init_defined();
      init_Ellipsoid();
      createCoplanarPolygonOutlineGeometry_default = createCoplanarPolygonOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/CornerType.js
  var CornerType, CornerType_default;
  var init_CornerType = __esm({
    "packages/engine/Source/Core/CornerType.js"() {
      CornerType = {
        /**
         * <img src="Images/CornerTypeRounded.png" style="vertical-align: middle;" width="186" height="189" />
         *
         * Corner has a smooth edge.
         * @type {number}
         * @constant
         */
        ROUNDED: 0,
        /**
         * <img src="Images/CornerTypeMitered.png" style="vertical-align: middle;" width="186" height="189" />
         *
         * Corner point is the intersection of adjacent edges.
         * @type {number}
         * @constant
         */
        MITERED: 1,
        /**
         * <img src="Images/CornerTypeBeveled.png" style="vertical-align: middle;" width="186" height="189" />
         *
         * Corner is clipped.
         * @type {number}
         * @constant
         */
        BEVELED: 2
      };
      CornerType_default = Object.freeze(CornerType);
    }
  });

  // packages/engine/Source/Core/EllipsoidGeodesic.js
  function setConstants(ellipsoidGeodesic2) {
    const uSquared = ellipsoidGeodesic2._uSquared;
    const a3 = ellipsoidGeodesic2._ellipsoid.maximumRadius;
    const b = ellipsoidGeodesic2._ellipsoid.minimumRadius;
    const f = (a3 - b) / a3;
    const cosineHeading = Math.cos(ellipsoidGeodesic2._startHeading);
    const sineHeading = Math.sin(ellipsoidGeodesic2._startHeading);
    const tanU = (1 - f) * Math.tan(ellipsoidGeodesic2._start.latitude);
    const cosineU = 1 / Math.sqrt(1 + tanU * tanU);
    const sineU = cosineU * tanU;
    const sigma = Math.atan2(tanU, cosineHeading);
    const sineAlpha = cosineU * sineHeading;
    const sineSquaredAlpha = sineAlpha * sineAlpha;
    const cosineSquaredAlpha = 1 - sineSquaredAlpha;
    const cosineAlpha = Math.sqrt(cosineSquaredAlpha);
    const u2Over4 = uSquared / 4;
    const u4Over16 = u2Over4 * u2Over4;
    const u6Over64 = u4Over16 * u2Over4;
    const u8Over256 = u4Over16 * u4Over16;
    const a0 = 1 + u2Over4 - 3 * u4Over16 / 4 + 5 * u6Over64 / 4 - 175 * u8Over256 / 64;
    const a1 = 1 - u2Over4 + 15 * u4Over16 / 8 - 35 * u6Over64 / 8;
    const a22 = 1 - 3 * u2Over4 + 35 * u4Over16 / 4;
    const a32 = 1 - 5 * u2Over4;
    const distanceRatio = a0 * sigma - a1 * Math.sin(2 * sigma) * u2Over4 / 2 - a22 * Math.sin(4 * sigma) * u4Over16 / 16 - a32 * Math.sin(6 * sigma) * u6Over64 / 48 - Math.sin(8 * sigma) * 5 * u8Over256 / 512;
    const constants = ellipsoidGeodesic2._constants;
    constants.a = a3;
    constants.b = b;
    constants.f = f;
    constants.cosineHeading = cosineHeading;
    constants.sineHeading = sineHeading;
    constants.tanU = tanU;
    constants.cosineU = cosineU;
    constants.sineU = sineU;
    constants.sigma = sigma;
    constants.sineAlpha = sineAlpha;
    constants.sineSquaredAlpha = sineSquaredAlpha;
    constants.cosineSquaredAlpha = cosineSquaredAlpha;
    constants.cosineAlpha = cosineAlpha;
    constants.u2Over4 = u2Over4;
    constants.u4Over16 = u4Over16;
    constants.u6Over64 = u6Over64;
    constants.u8Over256 = u8Over256;
    constants.a0 = a0;
    constants.a1 = a1;
    constants.a2 = a22;
    constants.a3 = a32;
    constants.distanceRatio = distanceRatio;
  }
  function computeC(f, cosineSquaredAlpha) {
    return f * cosineSquaredAlpha * (4 + f * (4 - 3 * cosineSquaredAlpha)) / 16;
  }
  function computeDeltaLambda(f, sineAlpha, cosineSquaredAlpha, sigma, sineSigma, cosineSigma, cosineTwiceSigmaMidpoint) {
    const C = computeC(f, cosineSquaredAlpha);
    return (1 - C) * f * sineAlpha * (sigma + C * sineSigma * (cosineTwiceSigmaMidpoint + C * cosineSigma * (2 * cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint - 1)));
  }
  function vincentyInverseFormula(ellipsoidGeodesic2, major, minor, firstLongitude, firstLatitude, secondLongitude, secondLatitude) {
    const eff = (major - minor) / major;
    const l = secondLongitude - firstLongitude;
    const u12 = Math.atan((1 - eff) * Math.tan(firstLatitude));
    const u22 = Math.atan((1 - eff) * Math.tan(secondLatitude));
    const cosineU1 = Math.cos(u12);
    const sineU1 = Math.sin(u12);
    const cosineU2 = Math.cos(u22);
    const sineU2 = Math.sin(u22);
    const cc = cosineU1 * cosineU2;
    const cs = cosineU1 * sineU2;
    const ss = sineU1 * sineU2;
    const sc = sineU1 * cosineU2;
    let lambda = l;
    let lambdaDot = Math_default.TWO_PI;
    let cosineLambda = Math.cos(lambda);
    let sineLambda = Math.sin(lambda);
    let sigma;
    let cosineSigma;
    let sineSigma;
    let cosineSquaredAlpha;
    let cosineTwiceSigmaMidpoint;
    do {
      cosineLambda = Math.cos(lambda);
      sineLambda = Math.sin(lambda);
      const temp = cs - sc * cosineLambda;
      sineSigma = Math.sqrt(
        cosineU2 * cosineU2 * sineLambda * sineLambda + temp * temp
      );
      cosineSigma = ss + cc * cosineLambda;
      sigma = Math.atan2(sineSigma, cosineSigma);
      let sineAlpha;
      if (sineSigma === 0) {
        sineAlpha = 0;
        cosineSquaredAlpha = 1;
      } else {
        sineAlpha = cc * sineLambda / sineSigma;
        cosineSquaredAlpha = 1 - sineAlpha * sineAlpha;
      }
      lambdaDot = lambda;
      cosineTwiceSigmaMidpoint = cosineSigma - 2 * ss / cosineSquaredAlpha;
      if (!isFinite(cosineTwiceSigmaMidpoint)) {
        cosineTwiceSigmaMidpoint = 0;
      }
      lambda = l + computeDeltaLambda(
        eff,
        sineAlpha,
        cosineSquaredAlpha,
        sigma,
        sineSigma,
        cosineSigma,
        cosineTwiceSigmaMidpoint
      );
    } while (Math.abs(lambda - lambdaDot) > Math_default.EPSILON12);
    const uSquared = cosineSquaredAlpha * (major * major - minor * minor) / (minor * minor);
    const A = 1 + uSquared * (4096 + uSquared * (uSquared * (320 - 175 * uSquared) - 768)) / 16384;
    const B = uSquared * (256 + uSquared * (uSquared * (74 - 47 * uSquared) - 128)) / 1024;
    const cosineSquaredTwiceSigmaMidpoint = cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint;
    const deltaSigma = B * sineSigma * (cosineTwiceSigmaMidpoint + B * (cosineSigma * (2 * cosineSquaredTwiceSigmaMidpoint - 1) - B * cosineTwiceSigmaMidpoint * (4 * sineSigma * sineSigma - 3) * (4 * cosineSquaredTwiceSigmaMidpoint - 3) / 6) / 4);
    const distance = minor * A * (sigma - deltaSigma);
    const startHeading = Math.atan2(
      cosineU2 * sineLambda,
      cs - sc * cosineLambda
    );
    const endHeading = Math.atan2(cosineU1 * sineLambda, cs * cosineLambda - sc);
    ellipsoidGeodesic2._distance = distance;
    ellipsoidGeodesic2._startHeading = startHeading;
    ellipsoidGeodesic2._endHeading = endHeading;
    ellipsoidGeodesic2._uSquared = uSquared;
  }
  function computeProperties2(ellipsoidGeodesic2, start, end, ellipsoid) {
    const firstCartesian = Cartesian3_default.normalize(
      ellipsoid.cartographicToCartesian(start, scratchCart22),
      scratchCart12
    );
    const lastCartesian = Cartesian3_default.normalize(
      ellipsoid.cartographicToCartesian(end, scratchCart22),
      scratchCart22
    );
    Check_default.typeOf.number.greaterThanOrEquals(
      "value",
      Math.abs(
        Math.abs(Cartesian3_default.angleBetween(firstCartesian, lastCartesian)) - Math.PI
      ),
      0.0125
    );
    vincentyInverseFormula(
      ellipsoidGeodesic2,
      ellipsoid.maximumRadius,
      ellipsoid.minimumRadius,
      start.longitude,
      start.latitude,
      end.longitude,
      end.latitude
    );
    ellipsoidGeodesic2._start = Cartographic_default.clone(
      start,
      ellipsoidGeodesic2._start
    );
    ellipsoidGeodesic2._end = Cartographic_default.clone(end, ellipsoidGeodesic2._end);
    ellipsoidGeodesic2._start.height = 0;
    ellipsoidGeodesic2._end.height = 0;
    setConstants(ellipsoidGeodesic2);
  }
  function EllipsoidGeodesic(start, end, ellipsoid) {
    const e = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
    this._ellipsoid = e;
    this._start = new Cartographic_default();
    this._end = new Cartographic_default();
    this._constants = {};
    this._startHeading = void 0;
    this._endHeading = void 0;
    this._distance = void 0;
    this._uSquared = void 0;
    if (defined_default(start) && defined_default(end)) {
      computeProperties2(this, start, end, e);
    }
  }
  var scratchCart12, scratchCart22, EllipsoidGeodesic_default;
  var init_EllipsoidGeodesic = __esm({
    "packages/engine/Source/Core/EllipsoidGeodesic.js"() {
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_Math();
      scratchCart12 = new Cartesian3_default();
      scratchCart22 = new Cartesian3_default();
      Object.defineProperties(EllipsoidGeodesic.prototype, {
        /**
         * Gets the ellipsoid.
         * @memberof EllipsoidGeodesic.prototype
         * @type {Ellipsoid}
         * @readonly
         */
        ellipsoid: {
          get: function() {
            return this._ellipsoid;
          }
        },
        /**
         * Gets the surface distance between the start and end point
         * @memberof EllipsoidGeodesic.prototype
         * @type {number}
         * @readonly
         */
        surfaceDistance: {
          get: function() {
            Check_default.defined("distance", this._distance);
            return this._distance;
          }
        },
        /**
         * Gets the initial planetodetic point on the path.
         * @memberof EllipsoidGeodesic.prototype
         * @type {Cartographic}
         * @readonly
         */
        start: {
          get: function() {
            return this._start;
          }
        },
        /**
         * Gets the final planetodetic point on the path.
         * @memberof EllipsoidGeodesic.prototype
         * @type {Cartographic}
         * @readonly
         */
        end: {
          get: function() {
            return this._end;
          }
        },
        /**
         * Gets the heading at the initial point.
         * @memberof EllipsoidGeodesic.prototype
         * @type {number}
         * @readonly
         */
        startHeading: {
          get: function() {
            Check_default.defined("distance", this._distance);
            return this._startHeading;
          }
        },
        /**
         * Gets the heading at the final point.
         * @memberof EllipsoidGeodesic.prototype
         * @type {number}
         * @readonly
         */
        endHeading: {
          get: function() {
            Check_default.defined("distance", this._distance);
            return this._endHeading;
          }
        }
      });
      EllipsoidGeodesic.prototype.setEndPoints = function(start, end) {
        Check_default.defined("start", start);
        Check_default.defined("end", end);
        computeProperties2(this, start, end, this._ellipsoid);
      };
      EllipsoidGeodesic.prototype.interpolateUsingFraction = function(fraction, result) {
        return this.interpolateUsingSurfaceDistance(
          this._distance * fraction,
          result
        );
      };
      EllipsoidGeodesic.prototype.interpolateUsingSurfaceDistance = function(distance, result) {
        Check_default.defined("distance", this._distance);
        const constants = this._constants;
        const s = constants.distanceRatio + distance / constants.b;
        const cosine2S = Math.cos(2 * s);
        const cosine4S = Math.cos(4 * s);
        const cosine6S = Math.cos(6 * s);
        const sine2S = Math.sin(2 * s);
        const sine4S = Math.sin(4 * s);
        const sine6S = Math.sin(6 * s);
        const sine8S = Math.sin(8 * s);
        const s2 = s * s;
        const s3 = s * s2;
        const u8Over256 = constants.u8Over256;
        const u2Over4 = constants.u2Over4;
        const u6Over64 = constants.u6Over64;
        const u4Over16 = constants.u4Over16;
        let sigma = 2 * s3 * u8Over256 * cosine2S / 3 + s * (1 - u2Over4 + 7 * u4Over16 / 4 - 15 * u6Over64 / 4 + 579 * u8Over256 / 64 - (u4Over16 - 15 * u6Over64 / 4 + 187 * u8Over256 / 16) * cosine2S - (5 * u6Over64 / 4 - 115 * u8Over256 / 16) * cosine4S - 29 * u8Over256 * cosine6S / 16) + (u2Over4 / 2 - u4Over16 + 71 * u6Over64 / 32 - 85 * u8Over256 / 16) * sine2S + (5 * u4Over16 / 16 - 5 * u6Over64 / 4 + 383 * u8Over256 / 96) * sine4S - s2 * ((u6Over64 - 11 * u8Over256 / 2) * sine2S + 5 * u8Over256 * sine4S / 2) + (29 * u6Over64 / 96 - 29 * u8Over256 / 16) * sine6S + 539 * u8Over256 * sine8S / 1536;
        const theta = Math.asin(Math.sin(sigma) * constants.cosineAlpha);
        const latitude = Math.atan(constants.a / constants.b * Math.tan(theta));
        sigma = sigma - constants.sigma;
        const cosineTwiceSigmaMidpoint = Math.cos(2 * constants.sigma + sigma);
        const sineSigma = Math.sin(sigma);
        const cosineSigma = Math.cos(sigma);
        const cc = constants.cosineU * cosineSigma;
        const ss = constants.sineU * sineSigma;
        const lambda = Math.atan2(
          sineSigma * constants.sineHeading,
          cc - ss * constants.cosineHeading
        );
        const l = lambda - computeDeltaLambda(
          constants.f,
          constants.sineAlpha,
          constants.cosineSquaredAlpha,
          sigma,
          sineSigma,
          cosineSigma,
          cosineTwiceSigmaMidpoint
        );
        if (defined_default(result)) {
          result.longitude = this._start.longitude + l;
          result.latitude = latitude;
          result.height = 0;
          return result;
        }
        return new Cartographic_default(this._start.longitude + l, latitude, 0);
      };
      EllipsoidGeodesic_default = EllipsoidGeodesic;
    }
  });

  // packages/engine/Source/Core/PolylinePipeline.js
  function subdivideHeights(numPoints, h0, h1) {
    const heights = subdivideHeightsScratchArray;
    heights.length = numPoints;
    let i;
    if (h0 === h1) {
      for (i = 0; i < numPoints; i++) {
        heights[i] = h0;
      }
      return heights;
    }
    const dHeight = h1 - h0;
    const heightPerVertex = dHeight / numPoints;
    for (i = 0; i < numPoints; i++) {
      const h = h0 + i * heightPerVertex;
      heights[i] = h;
    }
    return heights;
  }
  function generateCartesianArc(p0, p1, minDistance, ellipsoid, h0, h1, array, offset) {
    const first = ellipsoid.scaleToGeodeticSurface(p0, scaleFirst);
    const last = ellipsoid.scaleToGeodeticSurface(p1, scaleLast);
    const numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);
    const start = ellipsoid.cartesianToCartographic(first, carto1);
    const end = ellipsoid.cartesianToCartographic(last, carto2);
    const heights = subdivideHeights(numPoints, h0, h1);
    ellipsoidGeodesic.setEndPoints(start, end);
    const surfaceDistanceBetweenPoints = ellipsoidGeodesic.surfaceDistance / numPoints;
    let index = offset;
    start.height = h0;
    let cart = ellipsoid.cartographicToCartesian(start, cartesian);
    Cartesian3_default.pack(cart, array, index);
    index += 3;
    for (let i = 1; i < numPoints; i++) {
      const carto = ellipsoidGeodesic.interpolateUsingSurfaceDistance(
        i * surfaceDistanceBetweenPoints,
        carto2
      );
      carto.height = heights[i];
      cart = ellipsoid.cartographicToCartesian(carto, cartesian);
      Cartesian3_default.pack(cart, array, index);
      index += 3;
    }
    return index;
  }
  function generateCartesianRhumbArc(p0, p1, granularity, ellipsoid, h0, h1, array, offset) {
    const start = ellipsoid.cartesianToCartographic(p0, carto1);
    const end = ellipsoid.cartesianToCartographic(p1, carto2);
    const numPoints = PolylinePipeline.numberOfPointsRhumbLine(
      start,
      end,
      granularity
    );
    start.height = 0;
    end.height = 0;
    const heights = subdivideHeights(numPoints, h0, h1);
    if (!ellipsoidRhumb.ellipsoid.equals(ellipsoid)) {
      ellipsoidRhumb = new EllipsoidRhumbLine_default(void 0, void 0, ellipsoid);
    }
    ellipsoidRhumb.setEndPoints(start, end);
    const surfaceDistanceBetweenPoints = ellipsoidRhumb.surfaceDistance / numPoints;
    let index = offset;
    start.height = h0;
    let cart = ellipsoid.cartographicToCartesian(start, cartesian);
    Cartesian3_default.pack(cart, array, index);
    index += 3;
    for (let i = 1; i < numPoints; i++) {
      const carto = ellipsoidRhumb.interpolateUsingSurfaceDistance(
        i * surfaceDistanceBetweenPoints,
        carto2
      );
      carto.height = heights[i];
      cart = ellipsoid.cartographicToCartesian(carto, cartesian);
      Cartesian3_default.pack(cart, array, index);
      index += 3;
    }
    return index;
  }
  var PolylinePipeline, cartoScratch, wrapLongitudeInversMatrix, wrapLongitudeOrigin, wrapLongitudeXZNormal, wrapLongitudeXZPlane, wrapLongitudeYZNormal, wrapLongitudeYZPlane, wrapLongitudeIntersection, wrapLongitudeOffset, subdivideHeightsScratchArray, carto1, carto2, cartesian, scaleFirst, scaleLast, ellipsoidGeodesic, ellipsoidRhumb, scratchCartographic02, scratchCartographic12, PolylinePipeline_default;
  var init_PolylinePipeline = __esm({
    "packages/engine/Source/Core/PolylinePipeline.js"() {
      init_Cartesian3();
      init_Cartographic();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_EllipsoidGeodesic();
      init_EllipsoidRhumbLine();
      init_IntersectionTests();
      init_Math();
      init_Matrix4();
      init_Plane();
      PolylinePipeline = {};
      PolylinePipeline.numberOfPoints = function(p0, p1, minDistance) {
        const distance = Cartesian3_default.distance(p0, p1);
        return Math.ceil(distance / minDistance);
      };
      PolylinePipeline.numberOfPointsRhumbLine = function(p0, p1, granularity) {
        const radiansDistanceSquared = Math.pow(p0.longitude - p1.longitude, 2) + Math.pow(p0.latitude - p1.latitude, 2);
        return Math.max(
          1,
          Math.ceil(Math.sqrt(radiansDistanceSquared / (granularity * granularity)))
        );
      };
      cartoScratch = new Cartographic_default();
      PolylinePipeline.extractHeights = function(positions, ellipsoid) {
        const length = positions.length;
        const heights = new Array(length);
        for (let i = 0; i < length; i++) {
          const p = positions[i];
          heights[i] = ellipsoid.cartesianToCartographic(p, cartoScratch).height;
        }
        return heights;
      };
      wrapLongitudeInversMatrix = new Matrix4_default();
      wrapLongitudeOrigin = new Cartesian3_default();
      wrapLongitudeXZNormal = new Cartesian3_default();
      wrapLongitudeXZPlane = new Plane_default(Cartesian3_default.UNIT_X, 0);
      wrapLongitudeYZNormal = new Cartesian3_default();
      wrapLongitudeYZPlane = new Plane_default(Cartesian3_default.UNIT_X, 0);
      wrapLongitudeIntersection = new Cartesian3_default();
      wrapLongitudeOffset = new Cartesian3_default();
      subdivideHeightsScratchArray = [];
      carto1 = new Cartographic_default();
      carto2 = new Cartographic_default();
      cartesian = new Cartesian3_default();
      scaleFirst = new Cartesian3_default();
      scaleLast = new Cartesian3_default();
      ellipsoidGeodesic = new EllipsoidGeodesic_default();
      ellipsoidRhumb = new EllipsoidRhumbLine_default();
      PolylinePipeline.wrapLongitude = function(positions, modelMatrix) {
        const cartesians = [];
        const segments = [];
        if (defined_default(positions) && positions.length > 0) {
          modelMatrix = defaultValue_default(modelMatrix, Matrix4_default.IDENTITY);
          const inverseModelMatrix = Matrix4_default.inverseTransformation(
            modelMatrix,
            wrapLongitudeInversMatrix
          );
          const origin = Matrix4_default.multiplyByPoint(
            inverseModelMatrix,
            Cartesian3_default.ZERO,
            wrapLongitudeOrigin
          );
          const xzNormal = Cartesian3_default.normalize(
            Matrix4_default.multiplyByPointAsVector(
              inverseModelMatrix,
              Cartesian3_default.UNIT_Y,
              wrapLongitudeXZNormal
            ),
            wrapLongitudeXZNormal
          );
          const xzPlane2 = Plane_default.fromPointNormal(
            origin,
            xzNormal,
            wrapLongitudeXZPlane
          );
          const yzNormal = Cartesian3_default.normalize(
            Matrix4_default.multiplyByPointAsVector(
              inverseModelMatrix,
              Cartesian3_default.UNIT_X,
              wrapLongitudeYZNormal
            ),
            wrapLongitudeYZNormal
          );
          const yzPlane = Plane_default.fromPointNormal(
            origin,
            yzNormal,
            wrapLongitudeYZPlane
          );
          let count = 1;
          cartesians.push(Cartesian3_default.clone(positions[0]));
          let prev = cartesians[0];
          const length = positions.length;
          for (let i = 1; i < length; ++i) {
            const cur = positions[i];
            if (Plane_default.getPointDistance(yzPlane, prev) < 0 || Plane_default.getPointDistance(yzPlane, cur) < 0) {
              const intersection = IntersectionTests_default.lineSegmentPlane(
                prev,
                cur,
                xzPlane2,
                wrapLongitudeIntersection
              );
              if (defined_default(intersection)) {
                const offset = Cartesian3_default.multiplyByScalar(
                  xzNormal,
                  5e-9,
                  wrapLongitudeOffset
                );
                if (Plane_default.getPointDistance(xzPlane2, prev) < 0) {
                  Cartesian3_default.negate(offset, offset);
                }
                cartesians.push(
                  Cartesian3_default.add(intersection, offset, new Cartesian3_default())
                );
                segments.push(count + 1);
                Cartesian3_default.negate(offset, offset);
                cartesians.push(
                  Cartesian3_default.add(intersection, offset, new Cartesian3_default())
                );
                count = 1;
              }
            }
            cartesians.push(Cartesian3_default.clone(positions[i]));
            count++;
            prev = cur;
          }
          segments.push(count);
        }
        return {
          positions: cartesians,
          lengths: segments
        };
      };
      PolylinePipeline.generateArc = function(options) {
        if (!defined_default(options)) {
          options = {};
        }
        const positions = options.positions;
        if (!defined_default(positions)) {
          throw new DeveloperError_default("options.positions is required.");
        }
        const length = positions.length;
        const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
        let height = defaultValue_default(options.height, 0);
        const hasHeightArray = Array.isArray(height);
        if (length < 1) {
          return [];
        } else if (length === 1) {
          const p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);
          height = hasHeightArray ? height[0] : height;
          if (height !== 0) {
            const n = ellipsoid.geodeticSurfaceNormal(p, cartesian);
            Cartesian3_default.multiplyByScalar(n, height, n);
            Cartesian3_default.add(p, n, p);
          }
          return [p.x, p.y, p.z];
        }
        let minDistance = options.minDistance;
        if (!defined_default(minDistance)) {
          const granularity = defaultValue_default(
            options.granularity,
            Math_default.RADIANS_PER_DEGREE
          );
          minDistance = Math_default.chordLength(granularity, ellipsoid.maximumRadius);
        }
        let numPoints = 0;
        let i;
        for (i = 0; i < length - 1; i++) {
          numPoints += PolylinePipeline.numberOfPoints(
            positions[i],
            positions[i + 1],
            minDistance
          );
        }
        const arrayLength = (numPoints + 1) * 3;
        const newPositions = new Array(arrayLength);
        let offset = 0;
        for (i = 0; i < length - 1; i++) {
          const p0 = positions[i];
          const p1 = positions[i + 1];
          const h0 = hasHeightArray ? height[i] : height;
          const h1 = hasHeightArray ? height[i + 1] : height;
          offset = generateCartesianArc(
            p0,
            p1,
            minDistance,
            ellipsoid,
            h0,
            h1,
            newPositions,
            offset
          );
        }
        subdivideHeightsScratchArray.length = 0;
        const lastPoint = positions[length - 1];
        const carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);
        carto.height = hasHeightArray ? height[length - 1] : height;
        const cart = ellipsoid.cartographicToCartesian(carto, cartesian);
        Cartesian3_default.pack(cart, newPositions, arrayLength - 3);
        return newPositions;
      };
      scratchCartographic02 = new Cartographic_default();
      scratchCartographic12 = new Cartographic_default();
      PolylinePipeline.generateRhumbArc = function(options) {
        if (!defined_default(options)) {
          options = {};
        }
        const positions = options.positions;
        if (!defined_default(positions)) {
          throw new DeveloperError_default("options.positions is required.");
        }
        const length = positions.length;
        const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
        let height = defaultValue_default(options.height, 0);
        const hasHeightArray = Array.isArray(height);
        if (length < 1) {
          return [];
        } else if (length === 1) {
          const p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);
          height = hasHeightArray ? height[0] : height;
          if (height !== 0) {
            const n = ellipsoid.geodeticSurfaceNormal(p, cartesian);
            Cartesian3_default.multiplyByScalar(n, height, n);
            Cartesian3_default.add(p, n, p);
          }
          return [p.x, p.y, p.z];
        }
        const granularity = defaultValue_default(
          options.granularity,
          Math_default.RADIANS_PER_DEGREE
        );
        let numPoints = 0;
        let i;
        let c0 = ellipsoid.cartesianToCartographic(
          positions[0],
          scratchCartographic02
        );
        let c1;
        for (i = 0; i < length - 1; i++) {
          c1 = ellipsoid.cartesianToCartographic(
            positions[i + 1],
            scratchCartographic12
          );
          numPoints += PolylinePipeline.numberOfPointsRhumbLine(c0, c1, granularity);
          c0 = Cartographic_default.clone(c1, scratchCartographic02);
        }
        const arrayLength = (numPoints + 1) * 3;
        const newPositions = new Array(arrayLength);
        let offset = 0;
        for (i = 0; i < length - 1; i++) {
          const p0 = positions[i];
          const p1 = positions[i + 1];
          const h0 = hasHeightArray ? height[i] : height;
          const h1 = hasHeightArray ? height[i + 1] : height;
          offset = generateCartesianRhumbArc(
            p0,
            p1,
            granularity,
            ellipsoid,
            h0,
            h1,
            newPositions,
            offset
          );
        }
        subdivideHeightsScratchArray.length = 0;
        const lastPoint = positions[length - 1];
        const carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);
        carto.height = hasHeightArray ? height[length - 1] : height;
        const cart = ellipsoid.cartographicToCartesian(carto, cartesian);
        Cartesian3_default.pack(cart, newPositions, arrayLength - 3);
        return newPositions;
      };
      PolylinePipeline.generateCartesianArc = function(options) {
        const numberArray = PolylinePipeline.generateArc(options);
        const size = numberArray.length / 3;
        const newPositions = new Array(size);
        for (let i = 0; i < size; i++) {
          newPositions[i] = Cartesian3_default.unpack(numberArray, i * 3);
        }
        return newPositions;
      };
      PolylinePipeline.generateCartesianRhumbArc = function(options) {
        const numberArray = PolylinePipeline.generateRhumbArc(options);
        const size = numberArray.length / 3;
        const newPositions = new Array(size);
        for (let i = 0; i < size; i++) {
          newPositions[i] = Cartesian3_default.unpack(numberArray, i * 3);
        }
        return newPositions;
      };
      PolylinePipeline_default = PolylinePipeline;
    }
  });

  // packages/engine/Source/Core/oneTimeWarning.js
  function oneTimeWarning(identifier, message) {
    if (!defined_default(identifier)) {
      throw new DeveloperError_default("identifier is required.");
    }
    if (!defined_default(warnings[identifier])) {
      warnings[identifier] = true;
      console.warn(defaultValue_default(message, identifier));
    }
  }
  var warnings, oneTimeWarning_default;
  var init_oneTimeWarning = __esm({
    "packages/engine/Source/Core/oneTimeWarning.js"() {
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      warnings = {};
      oneTimeWarning.geometryOutlines = "Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.";
      oneTimeWarning.geometryZIndex = "Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored";
      oneTimeWarning.geometryHeightReference = "Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored";
      oneTimeWarning.geometryExtrudedHeightReference = "Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored";
      oneTimeWarning_default = oneTimeWarning;
    }
  });

  // packages/engine/Source/Core/PolylineVolumeGeometryLibrary.js
  function scaleToSurface(positions, ellipsoid) {
    const heights = new Array(positions.length);
    for (let i = 0; i < positions.length; i++) {
      const pos = positions[i];
      cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);
      heights[i] = cartographic.height;
      positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);
    }
    return heights;
  }
  function subdivideHeights2(points, h0, h1, granularity) {
    const p0 = points[0];
    const p1 = points[1];
    const angleBetween = Cartesian3_default.angleBetween(p0, p1);
    const numPoints = Math.ceil(angleBetween / granularity);
    const heights = new Array(numPoints);
    let i;
    if (h0 === h1) {
      for (i = 0; i < numPoints; i++) {
        heights[i] = h0;
      }
      heights.push(h1);
      return heights;
    }
    const dHeight = h1 - h0;
    const heightPerVertex = dHeight / numPoints;
    for (i = 1; i < numPoints; i++) {
      const h = h0 + i * heightPerVertex;
      heights[i] = h;
    }
    heights[0] = h0;
    heights.push(h1);
    return heights;
  }
  function computeRotationAngle(start, end, position, ellipsoid) {
    const tangentPlane = new EllipsoidTangentPlane_default(position, ellipsoid);
    const next = tangentPlane.projectPointOntoPlane(
      Cartesian3_default.add(position, start, nextScratch),
      nextScratch
    );
    const prev = tangentPlane.projectPointOntoPlane(
      Cartesian3_default.add(position, end, prevScratch),
      prevScratch
    );
    const angle = Cartesian2_default.angleBetween(next, prev);
    return prev.x * next.y - prev.y * next.x >= 0 ? -angle : angle;
  }
  function addPosition(center, left, shape, finalPositions, ellipsoid, height, xScalar, repeat) {
    let west = westScratch;
    let finalPosition = finalPosScratch;
    transform = Transforms_default.eastNorthUpToFixedFrame(center, ellipsoid, transform);
    west = Matrix4_default.multiplyByPointAsVector(transform, negativeX, west);
    west = Cartesian3_default.normalize(west, west);
    const angle = computeRotationAngle(west, left, center, ellipsoid);
    rotationZ = Matrix3_default.fromRotationZ(angle, rotationZ);
    heightCartesian.z = height;
    transform = Matrix4_default.multiplyTransformation(
      transform,
      Matrix4_default.fromRotationTranslation(rotationZ, heightCartesian, translation),
      transform
    );
    const scale = scaleMatrix;
    scale[0] = xScalar;
    for (let j = 0; j < repeat; j++) {
      for (let i = 0; i < shape.length; i += 3) {
        finalPosition = Cartesian3_default.fromArray(shape, i, finalPosition);
        finalPosition = Matrix3_default.multiplyByVector(
          scale,
          finalPosition,
          finalPosition
        );
        finalPosition = Matrix4_default.multiplyByPoint(
          transform,
          finalPosition,
          finalPosition
        );
        finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);
      }
    }
    return finalPositions;
  }
  function addPositions(centers, left, shape, finalPositions, ellipsoid, heights, xScalar) {
    for (let i = 0; i < centers.length; i += 3) {
      const center = Cartesian3_default.fromArray(centers, i, centerScratch2);
      finalPositions = addPosition(
        center,
        left,
        shape,
        finalPositions,
        ellipsoid,
        heights[i / 3],
        xScalar,
        1
      );
    }
    return finalPositions;
  }
  function convertShapeTo3DDuplicate(shape2D, boundingRectangle) {
    const length = shape2D.length;
    const shape = new Array(length * 6);
    let index = 0;
    const xOffset = boundingRectangle.x + boundingRectangle.width / 2;
    const yOffset = boundingRectangle.y + boundingRectangle.height / 2;
    let point = shape2D[0];
    shape[index++] = point.x - xOffset;
    shape[index++] = 0;
    shape[index++] = point.y - yOffset;
    for (let i = 1; i < length; i++) {
      point = shape2D[i];
      const x = point.x - xOffset;
      const z = point.y - yOffset;
      shape[index++] = x;
      shape[index++] = 0;
      shape[index++] = z;
      shape[index++] = x;
      shape[index++] = 0;
      shape[index++] = z;
    }
    point = shape2D[0];
    shape[index++] = point.x - xOffset;
    shape[index++] = 0;
    shape[index++] = point.y - yOffset;
    return shape;
  }
  function convertShapeTo3D(shape2D, boundingRectangle) {
    const length = shape2D.length;
    const shape = new Array(length * 3);
    let index = 0;
    const xOffset = boundingRectangle.x + boundingRectangle.width / 2;
    const yOffset = boundingRectangle.y + boundingRectangle.height / 2;
    for (let i = 0; i < length; i++) {
      shape[index++] = shape2D[i].x - xOffset;
      shape[index++] = 0;
      shape[index++] = shape2D[i].y - yOffset;
    }
    return shape;
  }
  function computeRoundCorner(pivot, startPoint, endPoint, cornerType, leftIsOutside, ellipsoid, finalPositions, shape, height, duplicatePoints) {
    const angle = Cartesian3_default.angleBetween(
      Cartesian3_default.subtract(startPoint, pivot, scratch1),
      Cartesian3_default.subtract(endPoint, pivot, scratch2)
    );
    const granularity = cornerType === CornerType_default.BEVELED ? 0 : Math.ceil(angle / Math_default.toRadians(5));
    let m;
    if (leftIsOutside) {
      m = Matrix3_default.fromQuaternion(
        Quaternion_default.fromAxisAngle(
          Cartesian3_default.negate(pivot, scratch1),
          angle / (granularity + 1),
          quaterion
        ),
        rotMatrix
      );
    } else {
      m = Matrix3_default.fromQuaternion(
        Quaternion_default.fromAxisAngle(pivot, angle / (granularity + 1), quaterion),
        rotMatrix
      );
    }
    let left;
    let surfacePoint;
    startPoint = Cartesian3_default.clone(startPoint, startPointScratch);
    if (granularity > 0) {
      const repeat = duplicatePoints ? 2 : 1;
      for (let i = 0; i < granularity; i++) {
        startPoint = Matrix3_default.multiplyByVector(m, startPoint, startPoint);
        left = Cartesian3_default.subtract(startPoint, pivot, scratch1);
        left = Cartesian3_default.normalize(left, left);
        if (!leftIsOutside) {
          left = Cartesian3_default.negate(left, left);
        }
        surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);
        finalPositions = addPosition(
          surfacePoint,
          left,
          shape,
          finalPositions,
          ellipsoid,
          height,
          1,
          repeat
        );
      }
    } else {
      left = Cartesian3_default.subtract(startPoint, pivot, scratch1);
      left = Cartesian3_default.normalize(left, left);
      if (!leftIsOutside) {
        left = Cartesian3_default.negate(left, left);
      }
      surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);
      finalPositions = addPosition(
        surfacePoint,
        left,
        shape,
        finalPositions,
        ellipsoid,
        height,
        1,
        1
      );
      endPoint = Cartesian3_default.clone(endPoint, startPointScratch);
      left = Cartesian3_default.subtract(endPoint, pivot, scratch1);
      left = Cartesian3_default.normalize(left, left);
      if (!leftIsOutside) {
        left = Cartesian3_default.negate(left, left);
      }
      surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);
      finalPositions = addPosition(
        surfacePoint,
        left,
        shape,
        finalPositions,
        ellipsoid,
        height,
        1,
        1
      );
    }
    return finalPositions;
  }
  var scratch2Array, scratchCartesian16, scratchCartesian26, scratchCartesian37, scratchCartesian43, scratchCartesian52, scratchCartesian62, scratchCartesian7, scratchCartesian8, scratchCartesian9, scratch1, scratch2, PolylineVolumeGeometryLibrary, cartographic, nextScratch, prevScratch, negativeX, transform, translation, rotationZ, scaleMatrix, westScratch, finalPosScratch, heightCartesian, centerScratch2, quaterion, startPointScratch, rotMatrix, scratchForwardProjection, scratchBackwardProjection, PolylineVolumeGeometryLibrary_default;
  var init_PolylineVolumeGeometryLibrary = __esm({
    "packages/engine/Source/Core/PolylineVolumeGeometryLibrary.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Cartesian4();
      init_Cartographic();
      init_CornerType();
      init_EllipsoidTangentPlane();
      init_Math();
      init_Matrix3();
      init_Matrix4();
      init_PolylinePipeline();
      init_Quaternion();
      init_Transforms();
      init_oneTimeWarning();
      scratch2Array = [new Cartesian3_default(), new Cartesian3_default()];
      scratchCartesian16 = new Cartesian3_default();
      scratchCartesian26 = new Cartesian3_default();
      scratchCartesian37 = new Cartesian3_default();
      scratchCartesian43 = new Cartesian3_default();
      scratchCartesian52 = new Cartesian3_default();
      scratchCartesian62 = new Cartesian3_default();
      scratchCartesian7 = new Cartesian3_default();
      scratchCartesian8 = new Cartesian3_default();
      scratchCartesian9 = new Cartesian3_default();
      scratch1 = new Cartesian3_default();
      scratch2 = new Cartesian3_default();
      PolylineVolumeGeometryLibrary = {};
      cartographic = new Cartographic_default();
      nextScratch = new Cartesian3_default();
      prevScratch = new Cartesian3_default();
      negativeX = new Cartesian3_default(-1, 0, 0);
      transform = new Matrix4_default();
      translation = new Matrix4_default();
      rotationZ = new Matrix3_default();
      scaleMatrix = Matrix3_default.IDENTITY.clone();
      westScratch = new Cartesian3_default();
      finalPosScratch = new Cartesian4_default();
      heightCartesian = new Cartesian3_default();
      centerScratch2 = new Cartesian3_default();
      quaterion = new Quaternion_default();
      startPointScratch = new Cartesian3_default();
      rotMatrix = new Matrix3_default();
      PolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function(shapePositions) {
        const length = shapePositions.length;
        const cleanedPositions = [];
        for (let i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {
          const v02 = shapePositions[i0];
          const v12 = shapePositions[i1];
          if (!Cartesian2_default.equals(v02, v12)) {
            cleanedPositions.push(v12);
          }
        }
        return cleanedPositions;
      };
      PolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function(forward, backward, position, ellipsoid) {
        const tangentPlane = new EllipsoidTangentPlane_default(position, ellipsoid);
        const next = tangentPlane.projectPointOntoPlane(
          Cartesian3_default.add(position, forward, nextScratch),
          nextScratch
        );
        const prev = tangentPlane.projectPointOntoPlane(
          Cartesian3_default.add(position, backward, prevScratch),
          prevScratch
        );
        return prev.x * next.y - prev.y * next.x >= 0;
      };
      scratchForwardProjection = new Cartesian3_default();
      scratchBackwardProjection = new Cartesian3_default();
      PolylineVolumeGeometryLibrary.computePositions = function(positions, shape2D, boundingRectangle, geometry, duplicatePoints) {
        const ellipsoid = geometry._ellipsoid;
        const heights = scaleToSurface(positions, ellipsoid);
        const granularity = geometry._granularity;
        const cornerType = geometry._cornerType;
        const shapeForSides = duplicatePoints ? convertShapeTo3DDuplicate(shape2D, boundingRectangle) : convertShapeTo3D(shape2D, boundingRectangle);
        const shapeForEnds = duplicatePoints ? convertShapeTo3D(shape2D, boundingRectangle) : void 0;
        const heightOffset = boundingRectangle.height / 2;
        const width = boundingRectangle.width / 2;
        let length = positions.length;
        let finalPositions = [];
        let ends = duplicatePoints ? [] : void 0;
        let forward = scratchCartesian16;
        let backward = scratchCartesian26;
        let cornerDirection = scratchCartesian37;
        let surfaceNormal = scratchCartesian43;
        let pivot = scratchCartesian52;
        let start = scratchCartesian62;
        let end = scratchCartesian7;
        let left = scratchCartesian8;
        let previousPosition = scratchCartesian9;
        let position = positions[0];
        let nextPosition = positions[1];
        surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);
        forward = Cartesian3_default.subtract(nextPosition, position, forward);
        forward = Cartesian3_default.normalize(forward, forward);
        left = Cartesian3_default.cross(surfaceNormal, forward, left);
        left = Cartesian3_default.normalize(left, left);
        let h0 = heights[0];
        let h1 = heights[1];
        if (duplicatePoints) {
          ends = addPosition(
            position,
            left,
            shapeForEnds,
            ends,
            ellipsoid,
            h0 + heightOffset,
            1,
            1
          );
        }
        previousPosition = Cartesian3_default.clone(position, previousPosition);
        position = nextPosition;
        backward = Cartesian3_default.negate(forward, backward);
        let subdividedHeights;
        let subdividedPositions;
        for (let i = 1; i < length - 1; i++) {
          const repeat = duplicatePoints ? 2 : 1;
          nextPosition = positions[i + 1];
          if (position.equals(nextPosition)) {
            oneTimeWarning_default(
              "Positions are too close and are considered equivalent with rounding error."
            );
            continue;
          }
          forward = Cartesian3_default.subtract(nextPosition, position, forward);
          forward = Cartesian3_default.normalize(forward, forward);
          cornerDirection = Cartesian3_default.add(forward, backward, cornerDirection);
          cornerDirection = Cartesian3_default.normalize(cornerDirection, cornerDirection);
          surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);
          const forwardProjection = Cartesian3_default.multiplyByScalar(
            surfaceNormal,
            Cartesian3_default.dot(forward, surfaceNormal),
            scratchForwardProjection
          );
          Cartesian3_default.subtract(forward, forwardProjection, forwardProjection);
          Cartesian3_default.normalize(forwardProjection, forwardProjection);
          const backwardProjection = Cartesian3_default.multiplyByScalar(
            surfaceNormal,
            Cartesian3_default.dot(backward, surfaceNormal),
            scratchBackwardProjection
          );
          Cartesian3_default.subtract(backward, backwardProjection, backwardProjection);
          Cartesian3_default.normalize(backwardProjection, backwardProjection);
          const doCorner = !Math_default.equalsEpsilon(
            Math.abs(Cartesian3_default.dot(forwardProjection, backwardProjection)),
            1,
            Math_default.EPSILON7
          );
          if (doCorner) {
            cornerDirection = Cartesian3_default.cross(
              cornerDirection,
              surfaceNormal,
              cornerDirection
            );
            cornerDirection = Cartesian3_default.cross(
              surfaceNormal,
              cornerDirection,
              cornerDirection
            );
            cornerDirection = Cartesian3_default.normalize(cornerDirection, cornerDirection);
            const scalar = 1 / Math.max(
              0.25,
              Cartesian3_default.magnitude(
                Cartesian3_default.cross(cornerDirection, backward, scratch1)
              )
            );
            const leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(
              forward,
              backward,
              position,
              ellipsoid
            );
            if (leftIsOutside) {
              pivot = Cartesian3_default.add(
                position,
                Cartesian3_default.multiplyByScalar(
                  cornerDirection,
                  scalar * width,
                  cornerDirection
                ),
                pivot
              );
              start = Cartesian3_default.add(
                pivot,
                Cartesian3_default.multiplyByScalar(left, width, start),
                start
              );
              scratch2Array[0] = Cartesian3_default.clone(previousPosition, scratch2Array[0]);
              scratch2Array[1] = Cartesian3_default.clone(start, scratch2Array[1]);
              subdividedHeights = subdivideHeights2(
                scratch2Array,
                h0 + heightOffset,
                h1 + heightOffset,
                granularity
              );
              subdividedPositions = PolylinePipeline_default.generateArc({
                positions: scratch2Array,
                granularity,
                ellipsoid
              });
              finalPositions = addPositions(
                subdividedPositions,
                left,
                shapeForSides,
                finalPositions,
                ellipsoid,
                subdividedHeights,
                1
              );
              left = Cartesian3_default.cross(surfaceNormal, forward, left);
              left = Cartesian3_default.normalize(left, left);
              end = Cartesian3_default.add(
                pivot,
                Cartesian3_default.multiplyByScalar(left, width, end),
                end
              );
              if (cornerType === CornerType_default.ROUNDED || cornerType === CornerType_default.BEVELED) {
                computeRoundCorner(
                  pivot,
                  start,
                  end,
                  cornerType,
                  leftIsOutside,
                  ellipsoid,
                  finalPositions,
                  shapeForSides,
                  h1 + heightOffset,
                  duplicatePoints
                );
              } else {
                cornerDirection = Cartesian3_default.negate(cornerDirection, cornerDirection);
                finalPositions = addPosition(
                  position,
                  cornerDirection,
                  shapeForSides,
                  finalPositions,
                  ellipsoid,
                  h1 + heightOffset,
                  scalar,
                  repeat
                );
              }
              previousPosition = Cartesian3_default.clone(end, previousPosition);
            } else {
              pivot = Cartesian3_default.add(
                position,
                Cartesian3_default.multiplyByScalar(
                  cornerDirection,
                  scalar * width,
                  cornerDirection
                ),
                pivot
              );
              start = Cartesian3_default.add(
                pivot,
                Cartesian3_default.multiplyByScalar(left, -width, start),
                start
              );
              scratch2Array[0] = Cartesian3_default.clone(previousPosition, scratch2Array[0]);
              scratch2Array[1] = Cartesian3_default.clone(start, scratch2Array[1]);
              subdividedHeights = subdivideHeights2(
                scratch2Array,
                h0 + heightOffset,
                h1 + heightOffset,
                granularity
              );
              subdividedPositions = PolylinePipeline_default.generateArc({
                positions: scratch2Array,
                granularity,
                ellipsoid
              });
              finalPositions = addPositions(
                subdividedPositions,
                left,
                shapeForSides,
                finalPositions,
                ellipsoid,
                subdividedHeights,
                1
              );
              left = Cartesian3_default.cross(surfaceNormal, forward, left);
              left = Cartesian3_default.normalize(left, left);
              end = Cartesian3_default.add(
                pivot,
                Cartesian3_default.multiplyByScalar(left, -width, end),
                end
              );
              if (cornerType === CornerType_default.ROUNDED || cornerType === CornerType_default.BEVELED) {
                computeRoundCorner(
                  pivot,
                  start,
                  end,
                  cornerType,
                  leftIsOutside,
                  ellipsoid,
                  finalPositions,
                  shapeForSides,
                  h1 + heightOffset,
                  duplicatePoints
                );
              } else {
                finalPositions = addPosition(
                  position,
                  cornerDirection,
                  shapeForSides,
                  finalPositions,
                  ellipsoid,
                  h1 + heightOffset,
                  scalar,
                  repeat
                );
              }
              previousPosition = Cartesian3_default.clone(end, previousPosition);
            }
            backward = Cartesian3_default.negate(forward, backward);
          } else {
            finalPositions = addPosition(
              previousPosition,
              left,
              shapeForSides,
              finalPositions,
              ellipsoid,
              h0 + heightOffset,
              1,
              1
            );
            previousPosition = position;
          }
          h0 = h1;
          h1 = heights[i + 1];
          position = nextPosition;
        }
        scratch2Array[0] = Cartesian3_default.clone(previousPosition, scratch2Array[0]);
        scratch2Array[1] = Cartesian3_default.clone(position, scratch2Array[1]);
        subdividedHeights = subdivideHeights2(
          scratch2Array,
          h0 + heightOffset,
          h1 + heightOffset,
          granularity
        );
        subdividedPositions = PolylinePipeline_default.generateArc({
          positions: scratch2Array,
          granularity,
          ellipsoid
        });
        finalPositions = addPositions(
          subdividedPositions,
          left,
          shapeForSides,
          finalPositions,
          ellipsoid,
          subdividedHeights,
          1
        );
        if (duplicatePoints) {
          ends = addPosition(
            position,
            left,
            shapeForEnds,
            ends,
            ellipsoid,
            h1 + heightOffset,
            1,
            1
          );
        }
        length = finalPositions.length;
        const posLength = duplicatePoints ? length + ends.length : length;
        const combinedPositions = new Float64Array(posLength);
        combinedPositions.set(finalPositions);
        if (duplicatePoints) {
          combinedPositions.set(ends, length);
        }
        return combinedPositions;
      };
      PolylineVolumeGeometryLibrary_default = PolylineVolumeGeometryLibrary;
    }
  });

  // packages/engine/Source/Core/CorridorGeometryLibrary.js
  function computeRoundCorner2(cornerPoint, startPoint, endPoint, cornerType, leftIsOutside) {
    const angle = Cartesian3_default.angleBetween(
      Cartesian3_default.subtract(startPoint, cornerPoint, scratch12),
      Cartesian3_default.subtract(endPoint, cornerPoint, scratch22)
    );
    const granularity = cornerType === CornerType_default.BEVELED ? 1 : Math.ceil(angle / Math_default.toRadians(5)) + 1;
    const size = granularity * 3;
    const array = new Array(size);
    array[size - 3] = endPoint.x;
    array[size - 2] = endPoint.y;
    array[size - 1] = endPoint.z;
    let m;
    if (leftIsOutside) {
      m = Matrix3_default.fromQuaternion(
        Quaternion_default.fromAxisAngle(
          Cartesian3_default.negate(cornerPoint, scratch12),
          angle / granularity,
          quaterion2
        ),
        rotMatrix2
      );
    } else {
      m = Matrix3_default.fromQuaternion(
        Quaternion_default.fromAxisAngle(cornerPoint, angle / granularity, quaterion2),
        rotMatrix2
      );
    }
    let index = 0;
    startPoint = Cartesian3_default.clone(startPoint, scratch12);
    for (let i = 0; i < granularity; i++) {
      startPoint = Matrix3_default.multiplyByVector(m, startPoint, startPoint);
      array[index++] = startPoint.x;
      array[index++] = startPoint.y;
      array[index++] = startPoint.z;
    }
    return array;
  }
  function addEndCaps(calculatedPositions) {
    let cornerPoint = cartesian1;
    let startPoint = cartesian2;
    let endPoint = cartesian3;
    let leftEdge = calculatedPositions[1];
    startPoint = Cartesian3_default.fromArray(
      calculatedPositions[1],
      leftEdge.length - 3,
      startPoint
    );
    endPoint = Cartesian3_default.fromArray(calculatedPositions[0], 0, endPoint);
    cornerPoint = Cartesian3_default.midpoint(startPoint, endPoint, cornerPoint);
    const firstEndCap = computeRoundCorner2(
      cornerPoint,
      startPoint,
      endPoint,
      CornerType_default.ROUNDED,
      false
    );
    const length = calculatedPositions.length - 1;
    const rightEdge = calculatedPositions[length - 1];
    leftEdge = calculatedPositions[length];
    startPoint = Cartesian3_default.fromArray(
      rightEdge,
      rightEdge.length - 3,
      startPoint
    );
    endPoint = Cartesian3_default.fromArray(leftEdge, 0, endPoint);
    cornerPoint = Cartesian3_default.midpoint(startPoint, endPoint, cornerPoint);
    const lastEndCap = computeRoundCorner2(
      cornerPoint,
      startPoint,
      endPoint,
      CornerType_default.ROUNDED,
      false
    );
    return [firstEndCap, lastEndCap];
  }
  function computeMiteredCorner(position, leftCornerDirection, lastPoint, leftIsOutside) {
    let cornerPoint = scratch12;
    if (leftIsOutside) {
      cornerPoint = Cartesian3_default.add(position, leftCornerDirection, cornerPoint);
    } else {
      leftCornerDirection = Cartesian3_default.negate(
        leftCornerDirection,
        leftCornerDirection
      );
      cornerPoint = Cartesian3_default.add(position, leftCornerDirection, cornerPoint);
    }
    return [
      cornerPoint.x,
      cornerPoint.y,
      cornerPoint.z,
      lastPoint.x,
      lastPoint.y,
      lastPoint.z
    ];
  }
  function addShiftedPositions(positions, left, scalar, calculatedPositions) {
    const rightPositions = new Array(positions.length);
    const leftPositions = new Array(positions.length);
    const scaledLeft = Cartesian3_default.multiplyByScalar(left, scalar, scratch12);
    const scaledRight = Cartesian3_default.negate(scaledLeft, scratch22);
    let rightIndex = 0;
    let leftIndex = positions.length - 1;
    for (let i = 0; i < positions.length; i += 3) {
      const pos = Cartesian3_default.fromArray(positions, i, scratch3);
      const rightPos = Cartesian3_default.add(pos, scaledRight, scratch4);
      rightPositions[rightIndex++] = rightPos.x;
      rightPositions[rightIndex++] = rightPos.y;
      rightPositions[rightIndex++] = rightPos.z;
      const leftPos = Cartesian3_default.add(pos, scaledLeft, scratch4);
      leftPositions[leftIndex--] = leftPos.z;
      leftPositions[leftIndex--] = leftPos.y;
      leftPositions[leftIndex--] = leftPos.x;
    }
    calculatedPositions.push(rightPositions, leftPositions);
    return calculatedPositions;
  }
  var CorridorGeometryLibrary, scratch12, scratch22, scratch3, scratch4, scaleArray2, cartesian1, cartesian2, cartesian3, cartesian4, cartesian5, cartesian6, cartesian7, cartesian8, cartesian9, cartesian10, quaterion2, rotMatrix2, scratchForwardProjection2, scratchBackwardProjection2, CorridorGeometryLibrary_default;
  var init_CorridorGeometryLibrary = __esm({
    "packages/engine/Source/Core/CorridorGeometryLibrary.js"() {
      init_Cartesian3();
      init_CornerType();
      init_defined();
      init_Math();
      init_Matrix3();
      init_PolylinePipeline();
      init_PolylineVolumeGeometryLibrary();
      init_Quaternion();
      CorridorGeometryLibrary = {};
      scratch12 = new Cartesian3_default();
      scratch22 = new Cartesian3_default();
      scratch3 = new Cartesian3_default();
      scratch4 = new Cartesian3_default();
      scaleArray2 = [new Cartesian3_default(), new Cartesian3_default()];
      cartesian1 = new Cartesian3_default();
      cartesian2 = new Cartesian3_default();
      cartesian3 = new Cartesian3_default();
      cartesian4 = new Cartesian3_default();
      cartesian5 = new Cartesian3_default();
      cartesian6 = new Cartesian3_default();
      cartesian7 = new Cartesian3_default();
      cartesian8 = new Cartesian3_default();
      cartesian9 = new Cartesian3_default();
      cartesian10 = new Cartesian3_default();
      quaterion2 = new Quaternion_default();
      rotMatrix2 = new Matrix3_default();
      CorridorGeometryLibrary.addAttribute = function(attribute, value, front, back) {
        const x = value.x;
        const y = value.y;
        const z = value.z;
        if (defined_default(front)) {
          attribute[front] = x;
          attribute[front + 1] = y;
          attribute[front + 2] = z;
        }
        if (defined_default(back)) {
          attribute[back] = z;
          attribute[back - 1] = y;
          attribute[back - 2] = x;
        }
      };
      scratchForwardProjection2 = new Cartesian3_default();
      scratchBackwardProjection2 = new Cartesian3_default();
      CorridorGeometryLibrary.computePositions = function(params) {
        const granularity = params.granularity;
        const positions = params.positions;
        const ellipsoid = params.ellipsoid;
        const width = params.width / 2;
        const cornerType = params.cornerType;
        const saveAttributes = params.saveAttributes;
        let normal2 = cartesian1;
        let forward = cartesian2;
        let backward = cartesian3;
        let left = cartesian4;
        let cornerDirection = cartesian5;
        let startPoint = cartesian6;
        let previousPos = cartesian7;
        let rightPos = cartesian8;
        let leftPos = cartesian9;
        let center = cartesian10;
        let calculatedPositions = [];
        const calculatedLefts = saveAttributes ? [] : void 0;
        const calculatedNormals = saveAttributes ? [] : void 0;
        let position = positions[0];
        let nextPosition = positions[1];
        forward = Cartesian3_default.normalize(
          Cartesian3_default.subtract(nextPosition, position, forward),
          forward
        );
        normal2 = ellipsoid.geodeticSurfaceNormal(position, normal2);
        left = Cartesian3_default.normalize(Cartesian3_default.cross(normal2, forward, left), left);
        if (saveAttributes) {
          calculatedLefts.push(left.x, left.y, left.z);
          calculatedNormals.push(normal2.x, normal2.y, normal2.z);
        }
        previousPos = Cartesian3_default.clone(position, previousPos);
        position = nextPosition;
        backward = Cartesian3_default.negate(forward, backward);
        let subdividedPositions;
        const corners = [];
        let i;
        const length = positions.length;
        for (i = 1; i < length - 1; i++) {
          normal2 = ellipsoid.geodeticSurfaceNormal(position, normal2);
          nextPosition = positions[i + 1];
          forward = Cartesian3_default.normalize(
            Cartesian3_default.subtract(nextPosition, position, forward),
            forward
          );
          cornerDirection = Cartesian3_default.normalize(
            Cartesian3_default.add(forward, backward, cornerDirection),
            cornerDirection
          );
          const forwardProjection = Cartesian3_default.multiplyByScalar(
            normal2,
            Cartesian3_default.dot(forward, normal2),
            scratchForwardProjection2
          );
          Cartesian3_default.subtract(forward, forwardProjection, forwardProjection);
          Cartesian3_default.normalize(forwardProjection, forwardProjection);
          const backwardProjection = Cartesian3_default.multiplyByScalar(
            normal2,
            Cartesian3_default.dot(backward, normal2),
            scratchBackwardProjection2
          );
          Cartesian3_default.subtract(backward, backwardProjection, backwardProjection);
          Cartesian3_default.normalize(backwardProjection, backwardProjection);
          const doCorner = !Math_default.equalsEpsilon(
            Math.abs(Cartesian3_default.dot(forwardProjection, backwardProjection)),
            1,
            Math_default.EPSILON7
          );
          if (doCorner) {
            cornerDirection = Cartesian3_default.cross(
              cornerDirection,
              normal2,
              cornerDirection
            );
            cornerDirection = Cartesian3_default.cross(
              normal2,
              cornerDirection,
              cornerDirection
            );
            cornerDirection = Cartesian3_default.normalize(cornerDirection, cornerDirection);
            const scalar = width / Math.max(
              0.25,
              Cartesian3_default.magnitude(
                Cartesian3_default.cross(cornerDirection, backward, scratch12)
              )
            );
            const leftIsOutside = PolylineVolumeGeometryLibrary_default.angleIsGreaterThanPi(
              forward,
              backward,
              position,
              ellipsoid
            );
            cornerDirection = Cartesian3_default.multiplyByScalar(
              cornerDirection,
              scalar,
              cornerDirection
            );
            if (leftIsOutside) {
              rightPos = Cartesian3_default.add(position, cornerDirection, rightPos);
              center = Cartesian3_default.add(
                rightPos,
                Cartesian3_default.multiplyByScalar(left, width, center),
                center
              );
              leftPos = Cartesian3_default.add(
                rightPos,
                Cartesian3_default.multiplyByScalar(left, width * 2, leftPos),
                leftPos
              );
              scaleArray2[0] = Cartesian3_default.clone(previousPos, scaleArray2[0]);
              scaleArray2[1] = Cartesian3_default.clone(center, scaleArray2[1]);
              subdividedPositions = PolylinePipeline_default.generateArc({
                positions: scaleArray2,
                granularity,
                ellipsoid
              });
              calculatedPositions = addShiftedPositions(
                subdividedPositions,
                left,
                width,
                calculatedPositions
              );
              if (saveAttributes) {
                calculatedLefts.push(left.x, left.y, left.z);
                calculatedNormals.push(normal2.x, normal2.y, normal2.z);
              }
              startPoint = Cartesian3_default.clone(leftPos, startPoint);
              left = Cartesian3_default.normalize(
                Cartesian3_default.cross(normal2, forward, left),
                left
              );
              leftPos = Cartesian3_default.add(
                rightPos,
                Cartesian3_default.multiplyByScalar(left, width * 2, leftPos),
                leftPos
              );
              previousPos = Cartesian3_default.add(
                rightPos,
                Cartesian3_default.multiplyByScalar(left, width, previousPos),
                previousPos
              );
              if (cornerType === CornerType_default.ROUNDED || cornerType === CornerType_default.BEVELED) {
                corners.push({
                  leftPositions: computeRoundCorner2(
                    rightPos,
                    startPoint,
                    leftPos,
                    cornerType,
                    leftIsOutside
                  )
                });
              } else {
                corners.push({
                  leftPositions: computeMiteredCorner(
                    position,
                    Cartesian3_default.negate(cornerDirection, cornerDirection),
                    leftPos,
                    leftIsOutside
                  )
                });
              }
            } else {
              leftPos = Cartesian3_default.add(position, cornerDirection, leftPos);
              center = Cartesian3_default.add(
                leftPos,
                Cartesian3_default.negate(
                  Cartesian3_default.multiplyByScalar(left, width, center),
                  center
                ),
                center
              );
              rightPos = Cartesian3_default.add(
                leftPos,
                Cartesian3_default.negate(
                  Cartesian3_default.multiplyByScalar(left, width * 2, rightPos),
                  rightPos
                ),
                rightPos
              );
              scaleArray2[0] = Cartesian3_default.clone(previousPos, scaleArray2[0]);
              scaleArray2[1] = Cartesian3_default.clone(center, scaleArray2[1]);
              subdividedPositions = PolylinePipeline_default.generateArc({
                positions: scaleArray2,
                granularity,
                ellipsoid
              });
              calculatedPositions = addShiftedPositions(
                subdividedPositions,
                left,
                width,
                calculatedPositions
              );
              if (saveAttributes) {
                calculatedLefts.push(left.x, left.y, left.z);
                calculatedNormals.push(normal2.x, normal2.y, normal2.z);
              }
              startPoint = Cartesian3_default.clone(rightPos, startPoint);
              left = Cartesian3_default.normalize(
                Cartesian3_default.cross(normal2, forward, left),
                left
              );
              rightPos = Cartesian3_default.add(
                leftPos,
                Cartesian3_default.negate(
                  Cartesian3_default.multiplyByScalar(left, width * 2, rightPos),
                  rightPos
                ),
                rightPos
              );
              previousPos = Cartesian3_default.add(
                leftPos,
                Cartesian3_default.negate(
                  Cartesian3_default.multiplyByScalar(left, width, previousPos),
                  previousPos
                ),
                previousPos
              );
              if (cornerType === CornerType_default.ROUNDED || cornerType === CornerType_default.BEVELED) {
                corners.push({
                  rightPositions: computeRoundCorner2(
                    leftPos,
                    startPoint,
                    rightPos,
                    cornerType,
                    leftIsOutside
                  )
                });
              } else {
                corners.push({
                  rightPositions: computeMiteredCorner(
                    position,
                    cornerDirection,
                    rightPos,
                    leftIsOutside
                  )
                });
              }
            }
            backward = Cartesian3_default.negate(forward, backward);
          }
          position = nextPosition;
        }
        normal2 = ellipsoid.geodeticSurfaceNormal(position, normal2);
        scaleArray2[0] = Cartesian3_default.clone(previousPos, scaleArray2[0]);
        scaleArray2[1] = Cartesian3_default.clone(position, scaleArray2[1]);
        subdividedPositions = PolylinePipeline_default.generateArc({
          positions: scaleArray2,
          granularity,
          ellipsoid
        });
        calculatedPositions = addShiftedPositions(
          subdividedPositions,
          left,
          width,
          calculatedPositions
        );
        if (saveAttributes) {
          calculatedLefts.push(left.x, left.y, left.z);
          calculatedNormals.push(normal2.x, normal2.y, normal2.z);
        }
        let endPositions;
        if (cornerType === CornerType_default.ROUNDED) {
          endPositions = addEndCaps(calculatedPositions);
        }
        return {
          positions: calculatedPositions,
          corners,
          lefts: calculatedLefts,
          normals: calculatedNormals,
          endPositions
        };
      };
      CorridorGeometryLibrary_default = CorridorGeometryLibrary;
    }
  });

  // packages/engine/Source/Core/CorridorGeometry.js
  function scaleToSurface2(positions, ellipsoid) {
    for (let i = 0; i < positions.length; i++) {
      positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);
    }
    return positions;
  }
  function addNormals(attr, normal2, left, front, back, vertexFormat) {
    const normals = attr.normals;
    const tangents = attr.tangents;
    const bitangents = attr.bitangents;
    const forward = Cartesian3_default.normalize(
      Cartesian3_default.cross(left, normal2, scratch13),
      scratch13
    );
    if (vertexFormat.normal) {
      CorridorGeometryLibrary_default.addAttribute(normals, normal2, front, back);
    }
    if (vertexFormat.tangent) {
      CorridorGeometryLibrary_default.addAttribute(tangents, forward, front, back);
    }
    if (vertexFormat.bitangent) {
      CorridorGeometryLibrary_default.addAttribute(bitangents, left, front, back);
    }
  }
  function combine2(computedPositions, vertexFormat, ellipsoid) {
    const positions = computedPositions.positions;
    const corners = computedPositions.corners;
    const endPositions = computedPositions.endPositions;
    const computedLefts = computedPositions.lefts;
    const computedNormals = computedPositions.normals;
    const attributes = new GeometryAttributes_default();
    let corner;
    let leftCount = 0;
    let rightCount = 0;
    let i;
    let indicesLength = 0;
    let length;
    for (i = 0; i < positions.length; i += 2) {
      length = positions[i].length - 3;
      leftCount += length;
      indicesLength += length * 2;
      rightCount += positions[i + 1].length - 3;
    }
    leftCount += 3;
    rightCount += 3;
    for (i = 0; i < corners.length; i++) {
      corner = corners[i];
      const leftSide = corners[i].leftPositions;
      if (defined_default(leftSide)) {
        length = leftSide.length;
        leftCount += length;
        indicesLength += length;
      } else {
        length = corners[i].rightPositions.length;
        rightCount += length;
        indicesLength += length;
      }
    }
    const addEndPositions = defined_default(endPositions);
    let endPositionLength;
    if (addEndPositions) {
      endPositionLength = endPositions[0].length - 3;
      leftCount += endPositionLength;
      rightCount += endPositionLength;
      endPositionLength /= 3;
      indicesLength += endPositionLength * 6;
    }
    const size = leftCount + rightCount;
    const finalPositions = new Float64Array(size);
    const normals = vertexFormat.normal ? new Float32Array(size) : void 0;
    const tangents = vertexFormat.tangent ? new Float32Array(size) : void 0;
    const bitangents = vertexFormat.bitangent ? new Float32Array(size) : void 0;
    const attr = {
      normals,
      tangents,
      bitangents
    };
    let front = 0;
    let back = size - 1;
    let UL, LL, UR, LR;
    let normal2 = cartesian12;
    let left = cartesian22;
    let rightPos, leftPos;
    const halfLength = endPositionLength / 2;
    const indices = IndexDatatype_default.createTypedArray(size / 3, indicesLength);
    let index = 0;
    if (addEndPositions) {
      leftPos = cartesian32;
      rightPos = cartesian42;
      const firstEndPositions = endPositions[0];
      normal2 = Cartesian3_default.fromArray(computedNormals, 0, normal2);
      left = Cartesian3_default.fromArray(computedLefts, 0, left);
      for (i = 0; i < halfLength; i++) {
        leftPos = Cartesian3_default.fromArray(
          firstEndPositions,
          (halfLength - 1 - i) * 3,
          leftPos
        );
        rightPos = Cartesian3_default.fromArray(
          firstEndPositions,
          (halfLength + i) * 3,
          rightPos
        );
        CorridorGeometryLibrary_default.addAttribute(finalPositions, rightPos, front);
        CorridorGeometryLibrary_default.addAttribute(
          finalPositions,
          leftPos,
          void 0,
          back
        );
        addNormals(attr, normal2, left, front, back, vertexFormat);
        LL = front / 3;
        LR = LL + 1;
        UL = (back - 2) / 3;
        UR = UL - 1;
        indices[index++] = UL;
        indices[index++] = LL;
        indices[index++] = UR;
        indices[index++] = UR;
        indices[index++] = LL;
        indices[index++] = LR;
        front += 3;
        back -= 3;
      }
    }
    let posIndex = 0;
    let compIndex = 0;
    let rightEdge = positions[posIndex++];
    let leftEdge = positions[posIndex++];
    finalPositions.set(rightEdge, front);
    finalPositions.set(leftEdge, back - leftEdge.length + 1);
    left = Cartesian3_default.fromArray(computedLefts, compIndex, left);
    let rightNormal;
    let leftNormal;
    length = leftEdge.length - 3;
    for (i = 0; i < length; i += 3) {
      rightNormal = ellipsoid.geodeticSurfaceNormal(
        Cartesian3_default.fromArray(rightEdge, i, scratch13),
        scratch13
      );
      leftNormal = ellipsoid.geodeticSurfaceNormal(
        Cartesian3_default.fromArray(leftEdge, length - i, scratch23),
        scratch23
      );
      normal2 = Cartesian3_default.normalize(
        Cartesian3_default.add(rightNormal, leftNormal, normal2),
        normal2
      );
      addNormals(attr, normal2, left, front, back, vertexFormat);
      LL = front / 3;
      LR = LL + 1;
      UL = (back - 2) / 3;
      UR = UL - 1;
      indices[index++] = UL;
      indices[index++] = LL;
      indices[index++] = UR;
      indices[index++] = UR;
      indices[index++] = LL;
      indices[index++] = LR;
      front += 3;
      back -= 3;
    }
    rightNormal = ellipsoid.geodeticSurfaceNormal(
      Cartesian3_default.fromArray(rightEdge, length, scratch13),
      scratch13
    );
    leftNormal = ellipsoid.geodeticSurfaceNormal(
      Cartesian3_default.fromArray(leftEdge, length, scratch23),
      scratch23
    );
    normal2 = Cartesian3_default.normalize(
      Cartesian3_default.add(rightNormal, leftNormal, normal2),
      normal2
    );
    compIndex += 3;
    for (i = 0; i < corners.length; i++) {
      let j;
      corner = corners[i];
      const l = corner.leftPositions;
      const r = corner.rightPositions;
      let pivot;
      let start;
      let outsidePoint = cartesian62;
      let previousPoint = cartesian32;
      let nextPoint = cartesian42;
      normal2 = Cartesian3_default.fromArray(computedNormals, compIndex, normal2);
      if (defined_default(l)) {
        addNormals(attr, normal2, left, void 0, back, vertexFormat);
        back -= 3;
        pivot = LR;
        start = UR;
        for (j = 0; j < l.length / 3; j++) {
          outsidePoint = Cartesian3_default.fromArray(l, j * 3, outsidePoint);
          indices[index++] = pivot;
          indices[index++] = start - j - 1;
          indices[index++] = start - j;
          CorridorGeometryLibrary_default.addAttribute(
            finalPositions,
            outsidePoint,
            void 0,
            back
          );
          previousPoint = Cartesian3_default.fromArray(
            finalPositions,
            (start - j - 1) * 3,
            previousPoint
          );
          nextPoint = Cartesian3_default.fromArray(finalPositions, pivot * 3, nextPoint);
          left = Cartesian3_default.normalize(
            Cartesian3_default.subtract(previousPoint, nextPoint, left),
            left
          );
          addNormals(attr, normal2, left, void 0, back, vertexFormat);
          back -= 3;
        }
        outsidePoint = Cartesian3_default.fromArray(
          finalPositions,
          pivot * 3,
          outsidePoint
        );
        previousPoint = Cartesian3_default.subtract(
          Cartesian3_default.fromArray(finalPositions, start * 3, previousPoint),
          outsidePoint,
          previousPoint
        );
        nextPoint = Cartesian3_default.subtract(
          Cartesian3_default.fromArray(finalPositions, (start - j) * 3, nextPoint),
          outsidePoint,
          nextPoint
        );
        left = Cartesian3_default.normalize(
          Cartesian3_default.add(previousPoint, nextPoint, left),
          left
        );
        addNormals(attr, normal2, left, front, void 0, vertexFormat);
        front += 3;
      } else {
        addNormals(attr, normal2, left, front, void 0, vertexFormat);
        front += 3;
        pivot = UR;
        start = LR;
        for (j = 0; j < r.length / 3; j++) {
          outsidePoint = Cartesian3_default.fromArray(r, j * 3, outsidePoint);
          indices[index++] = pivot;
          indices[index++] = start + j;
          indices[index++] = start + j + 1;
          CorridorGeometryLibrary_default.addAttribute(
            finalPositions,
            outsidePoint,
            front
          );
          previousPoint = Cartesian3_default.fromArray(
            finalPositions,
            pivot * 3,
            previousPoint
          );
          nextPoint = Cartesian3_default.fromArray(
            finalPositions,
            (start + j) * 3,
            nextPoint
          );
          left = Cartesian3_default.normalize(
            Cartesian3_default.subtract(previousPoint, nextPoint, left),
            left
          );
          addNormals(attr, normal2, left, front, void 0, vertexFormat);
          front += 3;
        }
        outsidePoint = Cartesian3_default.fromArray(
          finalPositions,
          pivot * 3,
          outsidePoint
        );
        previousPoint = Cartesian3_default.subtract(
          Cartesian3_default.fromArray(finalPositions, (start + j) * 3, previousPoint),
          outsidePoint,
          previousPoint
        );
        nextPoint = Cartesian3_default.subtract(
          Cartesian3_default.fromArray(finalPositions, start * 3, nextPoint),
          outsidePoint,
          nextPoint
        );
        left = Cartesian3_default.normalize(
          Cartesian3_default.negate(Cartesian3_default.add(nextPoint, previousPoint, left), left),
          left
        );
        addNormals(attr, normal2, left, void 0, back, vertexFormat);
        back -= 3;
      }
      rightEdge = positions[posIndex++];
      leftEdge = positions[posIndex++];
      rightEdge.splice(0, 3);
      leftEdge.splice(leftEdge.length - 3, 3);
      finalPositions.set(rightEdge, front);
      finalPositions.set(leftEdge, back - leftEdge.length + 1);
      length = leftEdge.length - 3;
      compIndex += 3;
      left = Cartesian3_default.fromArray(computedLefts, compIndex, left);
      for (j = 0; j < leftEdge.length; j += 3) {
        rightNormal = ellipsoid.geodeticSurfaceNormal(
          Cartesian3_default.fromArray(rightEdge, j, scratch13),
          scratch13
        );
        leftNormal = ellipsoid.geodeticSurfaceNormal(
          Cartesian3_default.fromArray(leftEdge, length - j, scratch23),
          scratch23
        );
        normal2 = Cartesian3_default.normalize(
          Cartesian3_default.add(rightNormal, leftNormal, normal2),
          normal2
        );
        addNormals(attr, normal2, left, front, back, vertexFormat);
        LR = front / 3;
        LL = LR - 1;
        UR = (back - 2) / 3;
        UL = UR + 1;
        indices[index++] = UL;
        indices[index++] = LL;
        indices[index++] = UR;
        indices[index++] = UR;
        indices[index++] = LL;
        indices[index++] = LR;
        front += 3;
        back -= 3;
      }
      front -= 3;
      back += 3;
    }
    normal2 = Cartesian3_default.fromArray(
      computedNormals,
      computedNormals.length - 3,
      normal2
    );
    addNormals(attr, normal2, left, front, back, vertexFormat);
    if (addEndPositions) {
      front += 3;
      back -= 3;
      leftPos = cartesian32;
      rightPos = cartesian42;
      const lastEndPositions = endPositions[1];
      for (i = 0; i < halfLength; i++) {
        leftPos = Cartesian3_default.fromArray(
          lastEndPositions,
          (endPositionLength - i - 1) * 3,
          leftPos
        );
        rightPos = Cartesian3_default.fromArray(lastEndPositions, i * 3, rightPos);
        CorridorGeometryLibrary_default.addAttribute(
          finalPositions,
          leftPos,
          void 0,
          back
        );
        CorridorGeometryLibrary_default.addAttribute(finalPositions, rightPos, front);
        addNormals(attr, normal2, left, front, back, vertexFormat);
        LR = front / 3;
        LL = LR - 1;
        UR = (back - 2) / 3;
        UL = UR + 1;
        indices[index++] = UL;
        indices[index++] = LL;
        indices[index++] = UR;
        indices[index++] = UR;
        indices[index++] = LL;
        indices[index++] = LR;
        front += 3;
        back -= 3;
      }
    }
    attributes.position = new GeometryAttribute_default({
      componentDatatype: ComponentDatatype_default.DOUBLE,
      componentsPerAttribute: 3,
      values: finalPositions
    });
    if (vertexFormat.st) {
      const st = new Float32Array(size / 3 * 2);
      let rightSt;
      let leftSt;
      let stIndex = 0;
      if (addEndPositions) {
        leftCount /= 3;
        rightCount /= 3;
        const theta = Math.PI / (endPositionLength + 1);
        leftSt = 1 / (leftCount - endPositionLength + 1);
        rightSt = 1 / (rightCount - endPositionLength + 1);
        let a3;
        const halfEndPos = endPositionLength / 2;
        for (i = halfEndPos + 1; i < endPositionLength + 1; i++) {
          a3 = Math_default.PI_OVER_TWO + theta * i;
          st[stIndex++] = rightSt * (1 + Math.cos(a3));
          st[stIndex++] = 0.5 * (1 + Math.sin(a3));
        }
        for (i = 1; i < rightCount - endPositionLength + 1; i++) {
          st[stIndex++] = i * rightSt;
          st[stIndex++] = 0;
        }
        for (i = endPositionLength; i > halfEndPos; i--) {
          a3 = Math_default.PI_OVER_TWO - i * theta;
          st[stIndex++] = 1 - rightSt * (1 + Math.cos(a3));
          st[stIndex++] = 0.5 * (1 + Math.sin(a3));
        }
        for (i = halfEndPos; i > 0; i--) {
          a3 = Math_default.PI_OVER_TWO - theta * i;
          st[stIndex++] = 1 - leftSt * (1 + Math.cos(a3));
          st[stIndex++] = 0.5 * (1 + Math.sin(a3));
        }
        for (i = leftCount - endPositionLength; i > 0; i--) {
          st[stIndex++] = i * leftSt;
          st[stIndex++] = 1;
        }
        for (i = 1; i < halfEndPos + 1; i++) {
          a3 = Math_default.PI_OVER_TWO + theta * i;
          st[stIndex++] = leftSt * (1 + Math.cos(a3));
          st[stIndex++] = 0.5 * (1 + Math.sin(a3));
        }
      } else {
        leftCount /= 3;
        rightCount /= 3;
        leftSt = 1 / (leftCount - 1);
        rightSt = 1 / (rightCount - 1);
        for (i = 0; i < rightCount; i++) {
          st[stIndex++] = i * rightSt;
          st[stIndex++] = 0;
        }
        for (i = leftCount; i > 0; i--) {
          st[stIndex++] = (i - 1) * leftSt;
          st[stIndex++] = 1;
        }
      }
      attributes.st = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 2,
        values: st
      });
    }
    if (vertexFormat.normal) {
      attributes.normal = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: attr.normals
      });
    }
    if (vertexFormat.tangent) {
      attributes.tangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: attr.tangents
      });
    }
    if (vertexFormat.bitangent) {
      attributes.bitangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: attr.bitangents
      });
    }
    return {
      attributes,
      indices
    };
  }
  function extrudedAttributes(attributes, vertexFormat) {
    if (!vertexFormat.normal && !vertexFormat.tangent && !vertexFormat.bitangent && !vertexFormat.st) {
      return attributes;
    }
    const positions = attributes.position.values;
    let topNormals;
    let topBitangents;
    if (vertexFormat.normal || vertexFormat.bitangent) {
      topNormals = attributes.normal.values;
      topBitangents = attributes.bitangent.values;
    }
    const size = attributes.position.values.length / 18;
    const threeSize = size * 3;
    const twoSize = size * 2;
    const sixSize = threeSize * 2;
    let i;
    if (vertexFormat.normal || vertexFormat.bitangent || vertexFormat.tangent) {
      const normals = vertexFormat.normal ? new Float32Array(threeSize * 6) : void 0;
      const tangents = vertexFormat.tangent ? new Float32Array(threeSize * 6) : void 0;
      const bitangents = vertexFormat.bitangent ? new Float32Array(threeSize * 6) : void 0;
      let topPosition = cartesian12;
      let bottomPosition = cartesian22;
      let previousPosition = cartesian32;
      let normal2 = cartesian42;
      let tangent = cartesian52;
      let bitangent = cartesian62;
      let attrIndex = sixSize;
      for (i = 0; i < threeSize; i += 3) {
        const attrIndexOffset = attrIndex + sixSize;
        topPosition = Cartesian3_default.fromArray(positions, i, topPosition);
        bottomPosition = Cartesian3_default.fromArray(
          positions,
          i + threeSize,
          bottomPosition
        );
        previousPosition = Cartesian3_default.fromArray(
          positions,
          (i + 3) % threeSize,
          previousPosition
        );
        bottomPosition = Cartesian3_default.subtract(
          bottomPosition,
          topPosition,
          bottomPosition
        );
        previousPosition = Cartesian3_default.subtract(
          previousPosition,
          topPosition,
          previousPosition
        );
        normal2 = Cartesian3_default.normalize(
          Cartesian3_default.cross(bottomPosition, previousPosition, normal2),
          normal2
        );
        if (vertexFormat.normal) {
          CorridorGeometryLibrary_default.addAttribute(normals, normal2, attrIndexOffset);
          CorridorGeometryLibrary_default.addAttribute(
            normals,
            normal2,
            attrIndexOffset + 3
          );
          CorridorGeometryLibrary_default.addAttribute(normals, normal2, attrIndex);
          CorridorGeometryLibrary_default.addAttribute(normals, normal2, attrIndex + 3);
        }
        if (vertexFormat.tangent || vertexFormat.bitangent) {
          bitangent = Cartesian3_default.fromArray(topNormals, i, bitangent);
          if (vertexFormat.bitangent) {
            CorridorGeometryLibrary_default.addAttribute(
              bitangents,
              bitangent,
              attrIndexOffset
            );
            CorridorGeometryLibrary_default.addAttribute(
              bitangents,
              bitangent,
              attrIndexOffset + 3
            );
            CorridorGeometryLibrary_default.addAttribute(
              bitangents,
              bitangent,
              attrIndex
            );
            CorridorGeometryLibrary_default.addAttribute(
              bitangents,
              bitangent,
              attrIndex + 3
            );
          }
          if (vertexFormat.tangent) {
            tangent = Cartesian3_default.normalize(
              Cartesian3_default.cross(bitangent, normal2, tangent),
              tangent
            );
            CorridorGeometryLibrary_default.addAttribute(
              tangents,
              tangent,
              attrIndexOffset
            );
            CorridorGeometryLibrary_default.addAttribute(
              tangents,
              tangent,
              attrIndexOffset + 3
            );
            CorridorGeometryLibrary_default.addAttribute(tangents, tangent, attrIndex);
            CorridorGeometryLibrary_default.addAttribute(
              tangents,
              tangent,
              attrIndex + 3
            );
          }
        }
        attrIndex += 6;
      }
      if (vertexFormat.normal) {
        normals.set(topNormals);
        for (i = 0; i < threeSize; i += 3) {
          normals[i + threeSize] = -topNormals[i];
          normals[i + threeSize + 1] = -topNormals[i + 1];
          normals[i + threeSize + 2] = -topNormals[i + 2];
        }
        attributes.normal.values = normals;
      } else {
        attributes.normal = void 0;
      }
      if (vertexFormat.bitangent) {
        bitangents.set(topBitangents);
        bitangents.set(topBitangents, threeSize);
        attributes.bitangent.values = bitangents;
      } else {
        attributes.bitangent = void 0;
      }
      if (vertexFormat.tangent) {
        const topTangents = attributes.tangent.values;
        tangents.set(topTangents);
        tangents.set(topTangents, threeSize);
        attributes.tangent.values = tangents;
      }
    }
    if (vertexFormat.st) {
      const topSt = attributes.st.values;
      const st = new Float32Array(twoSize * 6);
      st.set(topSt);
      st.set(topSt, twoSize);
      let index = twoSize * 2;
      for (let j = 0; j < 2; j++) {
        st[index++] = topSt[0];
        st[index++] = topSt[1];
        for (i = 2; i < twoSize; i += 2) {
          const s = topSt[i];
          const t = topSt[i + 1];
          st[index++] = s;
          st[index++] = t;
          st[index++] = s;
          st[index++] = t;
        }
        st[index++] = topSt[0];
        st[index++] = topSt[1];
      }
      attributes.st.values = st;
    }
    return attributes;
  }
  function addWallPositions(positions, index, wallPositions) {
    wallPositions[index++] = positions[0];
    wallPositions[index++] = positions[1];
    wallPositions[index++] = positions[2];
    for (let i = 3; i < positions.length; i += 3) {
      const x = positions[i];
      const y = positions[i + 1];
      const z = positions[i + 2];
      wallPositions[index++] = x;
      wallPositions[index++] = y;
      wallPositions[index++] = z;
      wallPositions[index++] = x;
      wallPositions[index++] = y;
      wallPositions[index++] = z;
    }
    wallPositions[index++] = positions[0];
    wallPositions[index++] = positions[1];
    wallPositions[index++] = positions[2];
    return wallPositions;
  }
  function computePositionsExtruded(params, vertexFormat) {
    const topVertexFormat = new VertexFormat_default({
      position: vertexFormat.position,
      normal: vertexFormat.normal || vertexFormat.bitangent || params.shadowVolume,
      tangent: vertexFormat.tangent,
      bitangent: vertexFormat.normal || vertexFormat.bitangent,
      st: vertexFormat.st
    });
    const ellipsoid = params.ellipsoid;
    const computedPositions = CorridorGeometryLibrary_default.computePositions(params);
    const attr = combine2(computedPositions, topVertexFormat, ellipsoid);
    const height = params.height;
    const extrudedHeight = params.extrudedHeight;
    let attributes = attr.attributes;
    const indices = attr.indices;
    let positions = attributes.position.values;
    let length = positions.length;
    const newPositions = new Float64Array(length * 6);
    let extrudedPositions = new Float64Array(length);
    extrudedPositions.set(positions);
    let wallPositions = new Float64Array(length * 4);
    positions = PolygonPipeline_default.scaleToGeodeticHeight(
      positions,
      height,
      ellipsoid
    );
    wallPositions = addWallPositions(positions, 0, wallPositions);
    extrudedPositions = PolygonPipeline_default.scaleToGeodeticHeight(
      extrudedPositions,
      extrudedHeight,
      ellipsoid
    );
    wallPositions = addWallPositions(
      extrudedPositions,
      length * 2,
      wallPositions
    );
    newPositions.set(positions);
    newPositions.set(extrudedPositions, length);
    newPositions.set(wallPositions, length * 2);
    attributes.position.values = newPositions;
    attributes = extrudedAttributes(attributes, vertexFormat);
    let i;
    const size = length / 3;
    if (params.shadowVolume) {
      const topNormals = attributes.normal.values;
      length = topNormals.length;
      let extrudeNormals = new Float32Array(length * 6);
      for (i = 0; i < length; i++) {
        topNormals[i] = -topNormals[i];
      }
      extrudeNormals.set(topNormals, length);
      extrudeNormals = addWallPositions(topNormals, length * 4, extrudeNormals);
      attributes.extrudeDirection = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: extrudeNormals
      });
      if (!vertexFormat.normal) {
        attributes.normal = void 0;
      }
    }
    if (defined_default(params.offsetAttribute)) {
      let applyOffset = new Uint8Array(size * 6);
      if (params.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
        applyOffset = applyOffset.fill(1, 0, size).fill(1, size * 2, size * 4);
      } else {
        const applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
        applyOffset = applyOffset.fill(applyOffsetValue);
      }
      attributes.applyOffset = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
        componentsPerAttribute: 1,
        values: applyOffset
      });
    }
    const iLength = indices.length;
    const twoSize = size + size;
    const newIndices = IndexDatatype_default.createTypedArray(
      newPositions.length / 3,
      iLength * 2 + twoSize * 3
    );
    newIndices.set(indices);
    let index = iLength;
    for (i = 0; i < iLength; i += 3) {
      const v02 = indices[i];
      const v12 = indices[i + 1];
      const v22 = indices[i + 2];
      newIndices[index++] = v22 + size;
      newIndices[index++] = v12 + size;
      newIndices[index++] = v02 + size;
    }
    let UL, LL, UR, LR;
    for (i = 0; i < twoSize; i += 2) {
      UL = i + twoSize;
      LL = UL + twoSize;
      UR = UL + 1;
      LR = LL + 1;
      newIndices[index++] = UL;
      newIndices[index++] = LL;
      newIndices[index++] = UR;
      newIndices[index++] = UR;
      newIndices[index++] = LL;
      newIndices[index++] = LR;
    }
    return {
      attributes,
      indices: newIndices
    };
  }
  function computeOffsetPoints(position1, position2, ellipsoid, halfWidth, min3, max3) {
    const direction2 = Cartesian3_default.subtract(
      position2,
      position1,
      scratchCartesian17
    );
    Cartesian3_default.normalize(direction2, direction2);
    const normal2 = ellipsoid.geodeticSurfaceNormal(position1, scratchCartesian27);
    const offsetDirection = Cartesian3_default.cross(
      direction2,
      normal2,
      scratchCartesian17
    );
    Cartesian3_default.multiplyByScalar(offsetDirection, halfWidth, offsetDirection);
    let minLat = min3.latitude;
    let minLon = min3.longitude;
    let maxLat = max3.latitude;
    let maxLon = max3.longitude;
    Cartesian3_default.add(position1, offsetDirection, scratchCartesian27);
    ellipsoid.cartesianToCartographic(scratchCartesian27, scratchCartographic4);
    let lat = scratchCartographic4.latitude;
    let lon = scratchCartographic4.longitude;
    minLat = Math.min(minLat, lat);
    minLon = Math.min(minLon, lon);
    maxLat = Math.max(maxLat, lat);
    maxLon = Math.max(maxLon, lon);
    Cartesian3_default.subtract(position1, offsetDirection, scratchCartesian27);
    ellipsoid.cartesianToCartographic(scratchCartesian27, scratchCartographic4);
    lat = scratchCartographic4.latitude;
    lon = scratchCartographic4.longitude;
    minLat = Math.min(minLat, lat);
    minLon = Math.min(minLon, lon);
    maxLat = Math.max(maxLat, lat);
    maxLon = Math.max(maxLon, lon);
    min3.latitude = minLat;
    min3.longitude = minLon;
    max3.latitude = maxLat;
    max3.longitude = maxLon;
  }
  function computeRectangle2(positions, ellipsoid, width, cornerType, result) {
    positions = scaleToSurface2(positions, ellipsoid);
    const cleanPositions = arrayRemoveDuplicates_default(
      positions,
      Cartesian3_default.equalsEpsilon
    );
    const length = cleanPositions.length;
    if (length < 2 || width <= 0) {
      return new Rectangle_default();
    }
    const halfWidth = width * 0.5;
    scratchCartographicMin.latitude = Number.POSITIVE_INFINITY;
    scratchCartographicMin.longitude = Number.POSITIVE_INFINITY;
    scratchCartographicMax.latitude = Number.NEGATIVE_INFINITY;
    scratchCartographicMax.longitude = Number.NEGATIVE_INFINITY;
    let lat, lon;
    if (cornerType === CornerType_default.ROUNDED) {
      const first = cleanPositions[0];
      Cartesian3_default.subtract(first, cleanPositions[1], scratchCartesianOffset);
      Cartesian3_default.normalize(scratchCartesianOffset, scratchCartesianOffset);
      Cartesian3_default.multiplyByScalar(
        scratchCartesianOffset,
        halfWidth,
        scratchCartesianOffset
      );
      Cartesian3_default.add(first, scratchCartesianOffset, scratchCartesianEnds);
      ellipsoid.cartesianToCartographic(
        scratchCartesianEnds,
        scratchCartographic4
      );
      lat = scratchCartographic4.latitude;
      lon = scratchCartographic4.longitude;
      scratchCartographicMin.latitude = Math.min(
        scratchCartographicMin.latitude,
        lat
      );
      scratchCartographicMin.longitude = Math.min(
        scratchCartographicMin.longitude,
        lon
      );
      scratchCartographicMax.latitude = Math.max(
        scratchCartographicMax.latitude,
        lat
      );
      scratchCartographicMax.longitude = Math.max(
        scratchCartographicMax.longitude,
        lon
      );
    }
    for (let i = 0; i < length - 1; ++i) {
      computeOffsetPoints(
        cleanPositions[i],
        cleanPositions[i + 1],
        ellipsoid,
        halfWidth,
        scratchCartographicMin,
        scratchCartographicMax
      );
    }
    const last = cleanPositions[length - 1];
    Cartesian3_default.subtract(last, cleanPositions[length - 2], scratchCartesianOffset);
    Cartesian3_default.normalize(scratchCartesianOffset, scratchCartesianOffset);
    Cartesian3_default.multiplyByScalar(
      scratchCartesianOffset,
      halfWidth,
      scratchCartesianOffset
    );
    Cartesian3_default.add(last, scratchCartesianOffset, scratchCartesianEnds);
    computeOffsetPoints(
      last,
      scratchCartesianEnds,
      ellipsoid,
      halfWidth,
      scratchCartographicMin,
      scratchCartographicMax
    );
    if (cornerType === CornerType_default.ROUNDED) {
      ellipsoid.cartesianToCartographic(
        scratchCartesianEnds,
        scratchCartographic4
      );
      lat = scratchCartographic4.latitude;
      lon = scratchCartographic4.longitude;
      scratchCartographicMin.latitude = Math.min(
        scratchCartographicMin.latitude,
        lat
      );
      scratchCartographicMin.longitude = Math.min(
        scratchCartographicMin.longitude,
        lon
      );
      scratchCartographicMax.latitude = Math.max(
        scratchCartographicMax.latitude,
        lat
      );
      scratchCartographicMax.longitude = Math.max(
        scratchCartographicMax.longitude,
        lon
      );
    }
    const rectangle = defined_default(result) ? result : new Rectangle_default();
    rectangle.north = scratchCartographicMax.latitude;
    rectangle.south = scratchCartographicMin.latitude;
    rectangle.east = scratchCartographicMax.longitude;
    rectangle.west = scratchCartographicMin.longitude;
    return rectangle;
  }
  function CorridorGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const positions = options.positions;
    const width = options.width;
    Check_default.defined("options.positions", positions);
    Check_default.defined("options.width", width);
    const height = defaultValue_default(options.height, 0);
    const extrudedHeight = defaultValue_default(options.extrudedHeight, height);
    this._positions = positions;
    this._ellipsoid = Ellipsoid_default.clone(
      defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84)
    );
    this._vertexFormat = VertexFormat_default.clone(
      defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT)
    );
    this._width = width;
    this._height = Math.max(height, extrudedHeight);
    this._extrudedHeight = Math.min(height, extrudedHeight);
    this._cornerType = defaultValue_default(options.cornerType, CornerType_default.ROUNDED);
    this._granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    this._shadowVolume = defaultValue_default(options.shadowVolume, false);
    this._workerName = "createCorridorGeometry";
    this._offsetAttribute = options.offsetAttribute;
    this._rectangle = void 0;
    this.packedLength = 1 + positions.length * Cartesian3_default.packedLength + Ellipsoid_default.packedLength + VertexFormat_default.packedLength + 7;
  }
  var cartesian12, cartesian22, cartesian32, cartesian42, cartesian52, cartesian62, scratch13, scratch23, scratchCartesian17, scratchCartesian27, scratchCartographic4, scratchCartesianOffset, scratchCartesianEnds, scratchCartographicMin, scratchCartographicMax, scratchEllipsoid4, scratchVertexFormat4, scratchOptions9, CorridorGeometry_default;
  var init_CorridorGeometry = __esm({
    "packages/engine/Source/Core/CorridorGeometry.js"() {
      init_arrayRemoveDuplicates();
      init_BoundingSphere();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_ComponentDatatype();
      init_CornerType();
      init_CorridorGeometryLibrary();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_IndexDatatype();
      init_Math();
      init_PolygonPipeline();
      init_PrimitiveType();
      init_Rectangle();
      init_VertexFormat();
      cartesian12 = new Cartesian3_default();
      cartesian22 = new Cartesian3_default();
      cartesian32 = new Cartesian3_default();
      cartesian42 = new Cartesian3_default();
      cartesian52 = new Cartesian3_default();
      cartesian62 = new Cartesian3_default();
      scratch13 = new Cartesian3_default();
      scratch23 = new Cartesian3_default();
      scratchCartesian17 = new Cartesian3_default();
      scratchCartesian27 = new Cartesian3_default();
      scratchCartographic4 = new Cartographic_default();
      scratchCartesianOffset = new Cartesian3_default();
      scratchCartesianEnds = new Cartesian3_default();
      scratchCartographicMin = new Cartographic_default();
      scratchCartographicMax = new Cartographic_default();
      CorridorGeometry.pack = function(value, array, startingIndex) {
        Check_default.defined("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const positions = value._positions;
        const length = positions.length;
        array[startingIndex++] = length;
        for (let i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          Cartesian3_default.pack(positions[i], array, startingIndex);
        }
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._width;
        array[startingIndex++] = value._height;
        array[startingIndex++] = value._extrudedHeight;
        array[startingIndex++] = value._cornerType;
        array[startingIndex++] = value._granularity;
        array[startingIndex++] = value._shadowVolume ? 1 : 0;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchEllipsoid4 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchVertexFormat4 = new VertexFormat_default();
      scratchOptions9 = {
        positions: void 0,
        ellipsoid: scratchEllipsoid4,
        vertexFormat: scratchVertexFormat4,
        width: void 0,
        height: void 0,
        extrudedHeight: void 0,
        cornerType: void 0,
        granularity: void 0,
        shadowVolume: void 0,
        offsetAttribute: void 0
      };
      CorridorGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const length = array[startingIndex++];
        const positions = new Array(length);
        for (let i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          positions[i] = Cartesian3_default.unpack(array, startingIndex);
        }
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid4);
        startingIndex += Ellipsoid_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat4
        );
        startingIndex += VertexFormat_default.packedLength;
        const width = array[startingIndex++];
        const height = array[startingIndex++];
        const extrudedHeight = array[startingIndex++];
        const cornerType = array[startingIndex++];
        const granularity = array[startingIndex++];
        const shadowVolume = array[startingIndex++] === 1;
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions9.positions = positions;
          scratchOptions9.width = width;
          scratchOptions9.height = height;
          scratchOptions9.extrudedHeight = extrudedHeight;
          scratchOptions9.cornerType = cornerType;
          scratchOptions9.granularity = granularity;
          scratchOptions9.shadowVolume = shadowVolume;
          scratchOptions9.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new CorridorGeometry(scratchOptions9);
        }
        result._positions = positions;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._width = width;
        result._height = height;
        result._extrudedHeight = extrudedHeight;
        result._cornerType = cornerType;
        result._granularity = granularity;
        result._shadowVolume = shadowVolume;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      CorridorGeometry.computeRectangle = function(options, result) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const positions = options.positions;
        const width = options.width;
        Check_default.defined("options.positions", positions);
        Check_default.defined("options.width", width);
        const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
        const cornerType = defaultValue_default(options.cornerType, CornerType_default.ROUNDED);
        return computeRectangle2(positions, ellipsoid, width, cornerType, result);
      };
      CorridorGeometry.createGeometry = function(corridorGeometry) {
        let positions = corridorGeometry._positions;
        const width = corridorGeometry._width;
        const ellipsoid = corridorGeometry._ellipsoid;
        positions = scaleToSurface2(positions, ellipsoid);
        const cleanPositions = arrayRemoveDuplicates_default(
          positions,
          Cartesian3_default.equalsEpsilon
        );
        if (cleanPositions.length < 2 || width <= 0) {
          return;
        }
        const height = corridorGeometry._height;
        const extrudedHeight = corridorGeometry._extrudedHeight;
        const extrude = !Math_default.equalsEpsilon(
          height,
          extrudedHeight,
          0,
          Math_default.EPSILON2
        );
        const vertexFormat = corridorGeometry._vertexFormat;
        const params = {
          ellipsoid,
          positions: cleanPositions,
          width,
          cornerType: corridorGeometry._cornerType,
          granularity: corridorGeometry._granularity,
          saveAttributes: true
        };
        let attr;
        if (extrude) {
          params.height = height;
          params.extrudedHeight = extrudedHeight;
          params.shadowVolume = corridorGeometry._shadowVolume;
          params.offsetAttribute = corridorGeometry._offsetAttribute;
          attr = computePositionsExtruded(params, vertexFormat);
        } else {
          const computedPositions = CorridorGeometryLibrary_default.computePositions(params);
          attr = combine2(computedPositions, vertexFormat, ellipsoid);
          attr.attributes.position.values = PolygonPipeline_default.scaleToGeodeticHeight(
            attr.attributes.position.values,
            height,
            ellipsoid
          );
          if (defined_default(corridorGeometry._offsetAttribute)) {
            const applyOffsetValue = corridorGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
            const length = attr.attributes.position.values.length;
            const applyOffset = new Uint8Array(length / 3).fill(applyOffsetValue);
            attr.attributes.applyOffset = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
              componentsPerAttribute: 1,
              values: applyOffset
            });
          }
        }
        const attributes = attr.attributes;
        const boundingSphere = BoundingSphere_default.fromVertices(
          attributes.position.values,
          void 0,
          3
        );
        if (!vertexFormat.position) {
          attr.attributes.position.values = void 0;
        }
        return new Geometry_default({
          attributes,
          indices: attr.indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere,
          offsetAttribute: corridorGeometry._offsetAttribute
        });
      };
      CorridorGeometry.createShadowVolume = function(corridorGeometry, minHeightFunc, maxHeightFunc) {
        const granularity = corridorGeometry._granularity;
        const ellipsoid = corridorGeometry._ellipsoid;
        const minHeight = minHeightFunc(granularity, ellipsoid);
        const maxHeight = maxHeightFunc(granularity, ellipsoid);
        return new CorridorGeometry({
          positions: corridorGeometry._positions,
          width: corridorGeometry._width,
          cornerType: corridorGeometry._cornerType,
          ellipsoid,
          granularity,
          extrudedHeight: minHeight,
          height: maxHeight,
          vertexFormat: VertexFormat_default.POSITION_ONLY,
          shadowVolume: true
        });
      };
      Object.defineProperties(CorridorGeometry.prototype, {
        /**
         * @private
         */
        rectangle: {
          get: function() {
            if (!defined_default(this._rectangle)) {
              this._rectangle = computeRectangle2(
                this._positions,
                this._ellipsoid,
                this._width,
                this._cornerType
              );
            }
            return this._rectangle;
          }
        },
        /**
         * For remapping texture coordinates when rendering CorridorGeometries as GroundPrimitives.
         *
         * Corridors don't support stRotation,
         * so just return the corners of the original system.
         * @private
         */
        textureCoordinateRotationPoints: {
          get: function() {
            return [0, 0, 0, 1, 1, 0];
          }
        }
      });
      CorridorGeometry_default = CorridorGeometry;
    }
  });

  // packages/engine/Source/Workers/createCorridorGeometry.js
  var createCorridorGeometry_exports = {};
  __export(createCorridorGeometry_exports, {
    default: () => createCorridorGeometry_default
  });
  function createCorridorGeometry(corridorGeometry, offset) {
    if (defined_default(offset)) {
      corridorGeometry = CorridorGeometry_default.unpack(corridorGeometry, offset);
    }
    corridorGeometry._ellipsoid = Ellipsoid_default.clone(corridorGeometry._ellipsoid);
    return CorridorGeometry_default.createGeometry(corridorGeometry);
  }
  var createCorridorGeometry_default;
  var init_createCorridorGeometry = __esm({
    "packages/engine/Source/Workers/createCorridorGeometry.js"() {
      init_CorridorGeometry();
      init_defined();
      init_Ellipsoid();
      createCorridorGeometry_default = createCorridorGeometry;
    }
  });

  // packages/engine/Source/Core/CorridorOutlineGeometry.js
  function scaleToSurface3(positions, ellipsoid) {
    for (let i = 0; i < positions.length; i++) {
      positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);
    }
    return positions;
  }
  function combine3(computedPositions, cornerType) {
    const wallIndices = [];
    const positions = computedPositions.positions;
    const corners = computedPositions.corners;
    const endPositions = computedPositions.endPositions;
    const attributes = new GeometryAttributes_default();
    let corner;
    let leftCount = 0;
    let rightCount = 0;
    let i;
    let indicesLength = 0;
    let length;
    for (i = 0; i < positions.length; i += 2) {
      length = positions[i].length - 3;
      leftCount += length;
      indicesLength += length / 3 * 4;
      rightCount += positions[i + 1].length - 3;
    }
    leftCount += 3;
    rightCount += 3;
    for (i = 0; i < corners.length; i++) {
      corner = corners[i];
      const leftSide = corners[i].leftPositions;
      if (defined_default(leftSide)) {
        length = leftSide.length;
        leftCount += length;
        indicesLength += length / 3 * 2;
      } else {
        length = corners[i].rightPositions.length;
        rightCount += length;
        indicesLength += length / 3 * 2;
      }
    }
    const addEndPositions = defined_default(endPositions);
    let endPositionLength;
    if (addEndPositions) {
      endPositionLength = endPositions[0].length - 3;
      leftCount += endPositionLength;
      rightCount += endPositionLength;
      endPositionLength /= 3;
      indicesLength += endPositionLength * 4;
    }
    const size = leftCount + rightCount;
    const finalPositions = new Float64Array(size);
    let front = 0;
    let back = size - 1;
    let UL, LL, UR, LR;
    let rightPos, leftPos;
    const halfLength = endPositionLength / 2;
    const indices = IndexDatatype_default.createTypedArray(size / 3, indicesLength + 4);
    let index = 0;
    indices[index++] = front / 3;
    indices[index++] = (back - 2) / 3;
    if (addEndPositions) {
      wallIndices.push(front / 3);
      leftPos = cartesian13;
      rightPos = cartesian23;
      const firstEndPositions = endPositions[0];
      for (i = 0; i < halfLength; i++) {
        leftPos = Cartesian3_default.fromArray(
          firstEndPositions,
          (halfLength - 1 - i) * 3,
          leftPos
        );
        rightPos = Cartesian3_default.fromArray(
          firstEndPositions,
          (halfLength + i) * 3,
          rightPos
        );
        CorridorGeometryLibrary_default.addAttribute(finalPositions, rightPos, front);
        CorridorGeometryLibrary_default.addAttribute(
          finalPositions,
          leftPos,
          void 0,
          back
        );
        LL = front / 3;
        LR = LL + 1;
        UL = (back - 2) / 3;
        UR = UL - 1;
        indices[index++] = UL;
        indices[index++] = UR;
        indices[index++] = LL;
        indices[index++] = LR;
        front += 3;
        back -= 3;
      }
    }
    let posIndex = 0;
    let rightEdge = positions[posIndex++];
    let leftEdge = positions[posIndex++];
    finalPositions.set(rightEdge, front);
    finalPositions.set(leftEdge, back - leftEdge.length + 1);
    length = leftEdge.length - 3;
    wallIndices.push(front / 3, (back - 2) / 3);
    for (i = 0; i < length; i += 3) {
      LL = front / 3;
      LR = LL + 1;
      UL = (back - 2) / 3;
      UR = UL - 1;
      indices[index++] = UL;
      indices[index++] = UR;
      indices[index++] = LL;
      indices[index++] = LR;
      front += 3;
      back -= 3;
    }
    for (i = 0; i < corners.length; i++) {
      let j;
      corner = corners[i];
      const l = corner.leftPositions;
      const r = corner.rightPositions;
      let start;
      let outsidePoint = cartesian33;
      if (defined_default(l)) {
        back -= 3;
        start = UR;
        wallIndices.push(LR);
        for (j = 0; j < l.length / 3; j++) {
          outsidePoint = Cartesian3_default.fromArray(l, j * 3, outsidePoint);
          indices[index++] = start - j - 1;
          indices[index++] = start - j;
          CorridorGeometryLibrary_default.addAttribute(
            finalPositions,
            outsidePoint,
            void 0,
            back
          );
          back -= 3;
        }
        wallIndices.push(start - Math.floor(l.length / 6));
        if (cornerType === CornerType_default.BEVELED) {
          wallIndices.push((back - 2) / 3 + 1);
        }
        front += 3;
      } else {
        front += 3;
        start = LR;
        wallIndices.push(UR);
        for (j = 0; j < r.length / 3; j++) {
          outsidePoint = Cartesian3_default.fromArray(r, j * 3, outsidePoint);
          indices[index++] = start + j;
          indices[index++] = start + j + 1;
          CorridorGeometryLibrary_default.addAttribute(
            finalPositions,
            outsidePoint,
            front
          );
          front += 3;
        }
        wallIndices.push(start + Math.floor(r.length / 6));
        if (cornerType === CornerType_default.BEVELED) {
          wallIndices.push(front / 3 - 1);
        }
        back -= 3;
      }
      rightEdge = positions[posIndex++];
      leftEdge = positions[posIndex++];
      rightEdge.splice(0, 3);
      leftEdge.splice(leftEdge.length - 3, 3);
      finalPositions.set(rightEdge, front);
      finalPositions.set(leftEdge, back - leftEdge.length + 1);
      length = leftEdge.length - 3;
      for (j = 0; j < leftEdge.length; j += 3) {
        LR = front / 3;
        LL = LR - 1;
        UR = (back - 2) / 3;
        UL = UR + 1;
        indices[index++] = UL;
        indices[index++] = UR;
        indices[index++] = LL;
        indices[index++] = LR;
        front += 3;
        back -= 3;
      }
      front -= 3;
      back += 3;
      wallIndices.push(front / 3, (back - 2) / 3);
    }
    if (addEndPositions) {
      front += 3;
      back -= 3;
      leftPos = cartesian13;
      rightPos = cartesian23;
      const lastEndPositions = endPositions[1];
      for (i = 0; i < halfLength; i++) {
        leftPos = Cartesian3_default.fromArray(
          lastEndPositions,
          (endPositionLength - i - 1) * 3,
          leftPos
        );
        rightPos = Cartesian3_default.fromArray(lastEndPositions, i * 3, rightPos);
        CorridorGeometryLibrary_default.addAttribute(
          finalPositions,
          leftPos,
          void 0,
          back
        );
        CorridorGeometryLibrary_default.addAttribute(finalPositions, rightPos, front);
        LR = front / 3;
        LL = LR - 1;
        UR = (back - 2) / 3;
        UL = UR + 1;
        indices[index++] = UL;
        indices[index++] = UR;
        indices[index++] = LL;
        indices[index++] = LR;
        front += 3;
        back -= 3;
      }
      wallIndices.push(front / 3);
    } else {
      wallIndices.push(front / 3, (back - 2) / 3);
    }
    indices[index++] = front / 3;
    indices[index++] = (back - 2) / 3;
    attributes.position = new GeometryAttribute_default({
      componentDatatype: ComponentDatatype_default.DOUBLE,
      componentsPerAttribute: 3,
      values: finalPositions
    });
    return {
      attributes,
      indices,
      wallIndices
    };
  }
  function computePositionsExtruded2(params) {
    const ellipsoid = params.ellipsoid;
    const computedPositions = CorridorGeometryLibrary_default.computePositions(params);
    const attr = combine3(computedPositions, params.cornerType);
    const wallIndices = attr.wallIndices;
    const height = params.height;
    const extrudedHeight = params.extrudedHeight;
    const attributes = attr.attributes;
    const indices = attr.indices;
    let positions = attributes.position.values;
    let length = positions.length;
    let extrudedPositions = new Float64Array(length);
    extrudedPositions.set(positions);
    const newPositions = new Float64Array(length * 2);
    positions = PolygonPipeline_default.scaleToGeodeticHeight(
      positions,
      height,
      ellipsoid
    );
    extrudedPositions = PolygonPipeline_default.scaleToGeodeticHeight(
      extrudedPositions,
      extrudedHeight,
      ellipsoid
    );
    newPositions.set(positions);
    newPositions.set(extrudedPositions, length);
    attributes.position.values = newPositions;
    length /= 3;
    if (defined_default(params.offsetAttribute)) {
      let applyOffset = new Uint8Array(length * 2);
      if (params.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
        applyOffset = applyOffset.fill(1, 0, length);
      } else {
        const applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
        applyOffset = applyOffset.fill(applyOffsetValue);
      }
      attributes.applyOffset = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
        componentsPerAttribute: 1,
        values: applyOffset
      });
    }
    let i;
    const iLength = indices.length;
    const newIndices = IndexDatatype_default.createTypedArray(
      newPositions.length / 3,
      (iLength + wallIndices.length) * 2
    );
    newIndices.set(indices);
    let index = iLength;
    for (i = 0; i < iLength; i += 2) {
      const v02 = indices[i];
      const v12 = indices[i + 1];
      newIndices[index++] = v02 + length;
      newIndices[index++] = v12 + length;
    }
    let UL, LL;
    for (i = 0; i < wallIndices.length; i++) {
      UL = wallIndices[i];
      LL = UL + length;
      newIndices[index++] = UL;
      newIndices[index++] = LL;
    }
    return {
      attributes,
      indices: newIndices
    };
  }
  function CorridorOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const positions = options.positions;
    const width = options.width;
    Check_default.typeOf.object("options.positions", positions);
    Check_default.typeOf.number("options.width", width);
    const height = defaultValue_default(options.height, 0);
    const extrudedHeight = defaultValue_default(options.extrudedHeight, height);
    this._positions = positions;
    this._ellipsoid = Ellipsoid_default.clone(
      defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84)
    );
    this._width = width;
    this._height = Math.max(height, extrudedHeight);
    this._extrudedHeight = Math.min(height, extrudedHeight);
    this._cornerType = defaultValue_default(options.cornerType, CornerType_default.ROUNDED);
    this._granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createCorridorOutlineGeometry";
    this.packedLength = 1 + positions.length * Cartesian3_default.packedLength + Ellipsoid_default.packedLength + 6;
  }
  var cartesian13, cartesian23, cartesian33, scratchEllipsoid5, scratchOptions10, CorridorOutlineGeometry_default;
  var init_CorridorOutlineGeometry = __esm({
    "packages/engine/Source/Core/CorridorOutlineGeometry.js"() {
      init_arrayRemoveDuplicates();
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_CornerType();
      init_CorridorGeometryLibrary();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_IndexDatatype();
      init_Math();
      init_PolygonPipeline();
      init_PrimitiveType();
      cartesian13 = new Cartesian3_default();
      cartesian23 = new Cartesian3_default();
      cartesian33 = new Cartesian3_default();
      CorridorOutlineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.typeOf.object("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const positions = value._positions;
        const length = positions.length;
        array[startingIndex++] = length;
        for (let i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          Cartesian3_default.pack(positions[i], array, startingIndex);
        }
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        array[startingIndex++] = value._width;
        array[startingIndex++] = value._height;
        array[startingIndex++] = value._extrudedHeight;
        array[startingIndex++] = value._cornerType;
        array[startingIndex++] = value._granularity;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchEllipsoid5 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchOptions10 = {
        positions: void 0,
        ellipsoid: scratchEllipsoid5,
        width: void 0,
        height: void 0,
        extrudedHeight: void 0,
        cornerType: void 0,
        granularity: void 0,
        offsetAttribute: void 0
      };
      CorridorOutlineGeometry.unpack = function(array, startingIndex, result) {
        Check_default.typeOf.object("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const length = array[startingIndex++];
        const positions = new Array(length);
        for (let i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          positions[i] = Cartesian3_default.unpack(array, startingIndex);
        }
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid5);
        startingIndex += Ellipsoid_default.packedLength;
        const width = array[startingIndex++];
        const height = array[startingIndex++];
        const extrudedHeight = array[startingIndex++];
        const cornerType = array[startingIndex++];
        const granularity = array[startingIndex++];
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions10.positions = positions;
          scratchOptions10.width = width;
          scratchOptions10.height = height;
          scratchOptions10.extrudedHeight = extrudedHeight;
          scratchOptions10.cornerType = cornerType;
          scratchOptions10.granularity = granularity;
          scratchOptions10.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new CorridorOutlineGeometry(scratchOptions10);
        }
        result._positions = positions;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._width = width;
        result._height = height;
        result._extrudedHeight = extrudedHeight;
        result._cornerType = cornerType;
        result._granularity = granularity;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      CorridorOutlineGeometry.createGeometry = function(corridorOutlineGeometry) {
        let positions = corridorOutlineGeometry._positions;
        const width = corridorOutlineGeometry._width;
        const ellipsoid = corridorOutlineGeometry._ellipsoid;
        positions = scaleToSurface3(positions, ellipsoid);
        const cleanPositions = arrayRemoveDuplicates_default(
          positions,
          Cartesian3_default.equalsEpsilon
        );
        if (cleanPositions.length < 2 || width <= 0) {
          return;
        }
        const height = corridorOutlineGeometry._height;
        const extrudedHeight = corridorOutlineGeometry._extrudedHeight;
        const extrude = !Math_default.equalsEpsilon(
          height,
          extrudedHeight,
          0,
          Math_default.EPSILON2
        );
        const params = {
          ellipsoid,
          positions: cleanPositions,
          width,
          cornerType: corridorOutlineGeometry._cornerType,
          granularity: corridorOutlineGeometry._granularity,
          saveAttributes: false
        };
        let attr;
        if (extrude) {
          params.height = height;
          params.extrudedHeight = extrudedHeight;
          params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;
          attr = computePositionsExtruded2(params);
        } else {
          const computedPositions = CorridorGeometryLibrary_default.computePositions(params);
          attr = combine3(computedPositions, params.cornerType);
          attr.attributes.position.values = PolygonPipeline_default.scaleToGeodeticHeight(
            attr.attributes.position.values,
            height,
            ellipsoid
          );
          if (defined_default(corridorOutlineGeometry._offsetAttribute)) {
            const length = attr.attributes.position.values.length;
            const offsetValue = corridorOutlineGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
            const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
            attr.attributes.applyOffset = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
              componentsPerAttribute: 1,
              values: applyOffset
            });
          }
        }
        const attributes = attr.attributes;
        const boundingSphere = BoundingSphere_default.fromVertices(
          attributes.position.values,
          void 0,
          3
        );
        return new Geometry_default({
          attributes,
          indices: attr.indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere,
          offsetAttribute: corridorOutlineGeometry._offsetAttribute
        });
      };
      CorridorOutlineGeometry_default = CorridorOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createCorridorOutlineGeometry.js
  var createCorridorOutlineGeometry_exports = {};
  __export(createCorridorOutlineGeometry_exports, {
    default: () => createCorridorOutlineGeometry_default
  });
  function createCorridorOutlineGeometry(corridorOutlineGeometry, offset) {
    if (defined_default(offset)) {
      corridorOutlineGeometry = CorridorOutlineGeometry_default.unpack(
        corridorOutlineGeometry,
        offset
      );
    }
    corridorOutlineGeometry._ellipsoid = Ellipsoid_default.clone(
      corridorOutlineGeometry._ellipsoid
    );
    return CorridorOutlineGeometry_default.createGeometry(corridorOutlineGeometry);
  }
  var createCorridorOutlineGeometry_default;
  var init_createCorridorOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createCorridorOutlineGeometry.js"() {
      init_CorridorOutlineGeometry();
      init_defined();
      init_Ellipsoid();
      createCorridorOutlineGeometry_default = createCorridorOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/CylinderGeometryLibrary.js
  var CylinderGeometryLibrary, CylinderGeometryLibrary_default;
  var init_CylinderGeometryLibrary = __esm({
    "packages/engine/Source/Core/CylinderGeometryLibrary.js"() {
      init_Math();
      CylinderGeometryLibrary = {};
      CylinderGeometryLibrary.computePositions = function(length, topRadius, bottomRadius, slices, fill) {
        const topZ = length * 0.5;
        const bottomZ = -topZ;
        const twoSlice = slices + slices;
        const size = fill ? 2 * twoSlice : twoSlice;
        const positions = new Float64Array(size * 3);
        let i;
        let index = 0;
        let tbIndex = 0;
        const bottomOffset = fill ? twoSlice * 3 : 0;
        const topOffset = fill ? (twoSlice + slices) * 3 : slices * 3;
        for (i = 0; i < slices; i++) {
          const angle = i / slices * Math_default.TWO_PI;
          const x = Math.cos(angle);
          const y = Math.sin(angle);
          const bottomX = x * bottomRadius;
          const bottomY = y * bottomRadius;
          const topX = x * topRadius;
          const topY = y * topRadius;
          positions[tbIndex + bottomOffset] = bottomX;
          positions[tbIndex + bottomOffset + 1] = bottomY;
          positions[tbIndex + bottomOffset + 2] = bottomZ;
          positions[tbIndex + topOffset] = topX;
          positions[tbIndex + topOffset + 1] = topY;
          positions[tbIndex + topOffset + 2] = topZ;
          tbIndex += 3;
          if (fill) {
            positions[index++] = bottomX;
            positions[index++] = bottomY;
            positions[index++] = bottomZ;
            positions[index++] = topX;
            positions[index++] = topY;
            positions[index++] = topZ;
          }
        }
        return positions;
      };
      CylinderGeometryLibrary_default = CylinderGeometryLibrary;
    }
  });

  // packages/engine/Source/Core/CylinderGeometry.js
  function CylinderGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const length = options.length;
    const topRadius = options.topRadius;
    const bottomRadius = options.bottomRadius;
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    const slices = defaultValue_default(options.slices, 128);
    if (!defined_default(length)) {
      throw new DeveloperError_default("options.length must be defined.");
    }
    if (!defined_default(topRadius)) {
      throw new DeveloperError_default("options.topRadius must be defined.");
    }
    if (!defined_default(bottomRadius)) {
      throw new DeveloperError_default("options.bottomRadius must be defined.");
    }
    if (slices < 3) {
      throw new DeveloperError_default(
        "options.slices must be greater than or equal to 3."
      );
    }
    if (defined_default(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
      throw new DeveloperError_default(
        "GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry."
      );
    }
    this._length = length;
    this._topRadius = topRadius;
    this._bottomRadius = bottomRadius;
    this._vertexFormat = VertexFormat_default.clone(vertexFormat);
    this._slices = slices;
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createCylinderGeometry";
  }
  var radiusScratch, normalScratch3, bitangentScratch, tangentScratch, positionScratch, scratchVertexFormat5, scratchOptions11, unitCylinderGeometry, CylinderGeometry_default;
  var init_CylinderGeometry = __esm({
    "packages/engine/Source/Core/CylinderGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_ComponentDatatype();
      init_CylinderGeometryLibrary();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_IndexDatatype();
      init_Math();
      init_PrimitiveType();
      init_VertexFormat();
      radiusScratch = new Cartesian2_default();
      normalScratch3 = new Cartesian3_default();
      bitangentScratch = new Cartesian3_default();
      tangentScratch = new Cartesian3_default();
      positionScratch = new Cartesian3_default();
      CylinderGeometry.packedLength = VertexFormat_default.packedLength + 5;
      CylinderGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._length;
        array[startingIndex++] = value._topRadius;
        array[startingIndex++] = value._bottomRadius;
        array[startingIndex++] = value._slices;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchVertexFormat5 = new VertexFormat_default();
      scratchOptions11 = {
        vertexFormat: scratchVertexFormat5,
        length: void 0,
        topRadius: void 0,
        bottomRadius: void 0,
        slices: void 0,
        offsetAttribute: void 0
      };
      CylinderGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat5
        );
        startingIndex += VertexFormat_default.packedLength;
        const length = array[startingIndex++];
        const topRadius = array[startingIndex++];
        const bottomRadius = array[startingIndex++];
        const slices = array[startingIndex++];
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions11.length = length;
          scratchOptions11.topRadius = topRadius;
          scratchOptions11.bottomRadius = bottomRadius;
          scratchOptions11.slices = slices;
          scratchOptions11.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new CylinderGeometry(scratchOptions11);
        }
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._length = length;
        result._topRadius = topRadius;
        result._bottomRadius = bottomRadius;
        result._slices = slices;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      CylinderGeometry.createGeometry = function(cylinderGeometry) {
        let length = cylinderGeometry._length;
        const topRadius = cylinderGeometry._topRadius;
        const bottomRadius = cylinderGeometry._bottomRadius;
        const vertexFormat = cylinderGeometry._vertexFormat;
        const slices = cylinderGeometry._slices;
        if (length <= 0 || topRadius < 0 || bottomRadius < 0 || topRadius === 0 && bottomRadius === 0) {
          return;
        }
        const twoSlices = slices + slices;
        const threeSlices = slices + twoSlices;
        const numVertices = twoSlices + twoSlices;
        const positions = CylinderGeometryLibrary_default.computePositions(
          length,
          topRadius,
          bottomRadius,
          slices,
          true
        );
        const st = vertexFormat.st ? new Float32Array(numVertices * 2) : void 0;
        const normals = vertexFormat.normal ? new Float32Array(numVertices * 3) : void 0;
        const tangents = vertexFormat.tangent ? new Float32Array(numVertices * 3) : void 0;
        const bitangents = vertexFormat.bitangent ? new Float32Array(numVertices * 3) : void 0;
        let i;
        const computeNormal = vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent;
        if (computeNormal) {
          const computeTangent = vertexFormat.tangent || vertexFormat.bitangent;
          let normalIndex = 0;
          let tangentIndex = 0;
          let bitangentIndex = 0;
          const theta = Math.atan2(bottomRadius - topRadius, length);
          const normal2 = normalScratch3;
          normal2.z = Math.sin(theta);
          const normalScale2 = Math.cos(theta);
          let tangent = tangentScratch;
          let bitangent = bitangentScratch;
          for (i = 0; i < slices; i++) {
            const angle = i / slices * Math_default.TWO_PI;
            const x = normalScale2 * Math.cos(angle);
            const y = normalScale2 * Math.sin(angle);
            if (computeNormal) {
              normal2.x = x;
              normal2.y = y;
              if (computeTangent) {
                tangent = Cartesian3_default.normalize(
                  Cartesian3_default.cross(Cartesian3_default.UNIT_Z, normal2, tangent),
                  tangent
                );
              }
              if (vertexFormat.normal) {
                normals[normalIndex++] = normal2.x;
                normals[normalIndex++] = normal2.y;
                normals[normalIndex++] = normal2.z;
                normals[normalIndex++] = normal2.x;
                normals[normalIndex++] = normal2.y;
                normals[normalIndex++] = normal2.z;
              }
              if (vertexFormat.tangent) {
                tangents[tangentIndex++] = tangent.x;
                tangents[tangentIndex++] = tangent.y;
                tangents[tangentIndex++] = tangent.z;
                tangents[tangentIndex++] = tangent.x;
                tangents[tangentIndex++] = tangent.y;
                tangents[tangentIndex++] = tangent.z;
              }
              if (vertexFormat.bitangent) {
                bitangent = Cartesian3_default.normalize(
                  Cartesian3_default.cross(normal2, tangent, bitangent),
                  bitangent
                );
                bitangents[bitangentIndex++] = bitangent.x;
                bitangents[bitangentIndex++] = bitangent.y;
                bitangents[bitangentIndex++] = bitangent.z;
                bitangents[bitangentIndex++] = bitangent.x;
                bitangents[bitangentIndex++] = bitangent.y;
                bitangents[bitangentIndex++] = bitangent.z;
              }
            }
          }
          for (i = 0; i < slices; i++) {
            if (vertexFormat.normal) {
              normals[normalIndex++] = 0;
              normals[normalIndex++] = 0;
              normals[normalIndex++] = -1;
            }
            if (vertexFormat.tangent) {
              tangents[tangentIndex++] = 1;
              tangents[tangentIndex++] = 0;
              tangents[tangentIndex++] = 0;
            }
            if (vertexFormat.bitangent) {
              bitangents[bitangentIndex++] = 0;
              bitangents[bitangentIndex++] = -1;
              bitangents[bitangentIndex++] = 0;
            }
          }
          for (i = 0; i < slices; i++) {
            if (vertexFormat.normal) {
              normals[normalIndex++] = 0;
              normals[normalIndex++] = 0;
              normals[normalIndex++] = 1;
            }
            if (vertexFormat.tangent) {
              tangents[tangentIndex++] = 1;
              tangents[tangentIndex++] = 0;
              tangents[tangentIndex++] = 0;
            }
            if (vertexFormat.bitangent) {
              bitangents[bitangentIndex++] = 0;
              bitangents[bitangentIndex++] = 1;
              bitangents[bitangentIndex++] = 0;
            }
          }
        }
        const numIndices = 12 * slices - 12;
        const indices = IndexDatatype_default.createTypedArray(numVertices, numIndices);
        let index = 0;
        let j = 0;
        for (i = 0; i < slices - 1; i++) {
          indices[index++] = j;
          indices[index++] = j + 2;
          indices[index++] = j + 3;
          indices[index++] = j;
          indices[index++] = j + 3;
          indices[index++] = j + 1;
          j += 2;
        }
        indices[index++] = twoSlices - 2;
        indices[index++] = 0;
        indices[index++] = 1;
        indices[index++] = twoSlices - 2;
        indices[index++] = 1;
        indices[index++] = twoSlices - 1;
        for (i = 1; i < slices - 1; i++) {
          indices[index++] = twoSlices + i + 1;
          indices[index++] = twoSlices + i;
          indices[index++] = twoSlices;
        }
        for (i = 1; i < slices - 1; i++) {
          indices[index++] = threeSlices;
          indices[index++] = threeSlices + i;
          indices[index++] = threeSlices + i + 1;
        }
        let textureCoordIndex = 0;
        if (vertexFormat.st) {
          const rad = Math.max(topRadius, bottomRadius);
          for (i = 0; i < numVertices; i++) {
            const position = Cartesian3_default.fromArray(positions, i * 3, positionScratch);
            st[textureCoordIndex++] = (position.x + rad) / (2 * rad);
            st[textureCoordIndex++] = (position.y + rad) / (2 * rad);
          }
        }
        const attributes = new GeometryAttributes_default();
        if (vertexFormat.position) {
          attributes.position = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          });
        }
        if (vertexFormat.normal) {
          attributes.normal = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 3,
            values: normals
          });
        }
        if (vertexFormat.tangent) {
          attributes.tangent = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 3,
            values: tangents
          });
        }
        if (vertexFormat.bitangent) {
          attributes.bitangent = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 3,
            values: bitangents
          });
        }
        if (vertexFormat.st) {
          attributes.st = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 2,
            values: st
          });
        }
        radiusScratch.x = length * 0.5;
        radiusScratch.y = Math.max(bottomRadius, topRadius);
        const boundingSphere = new BoundingSphere_default(
          Cartesian3_default.ZERO,
          Cartesian2_default.magnitude(radiusScratch)
        );
        if (defined_default(cylinderGeometry._offsetAttribute)) {
          length = positions.length;
          const offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
          const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
          attributes.applyOffset = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
            componentsPerAttribute: 1,
            values: applyOffset
          });
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere,
          offsetAttribute: cylinderGeometry._offsetAttribute
        });
      };
      CylinderGeometry.getUnitCylinder = function() {
        if (!defined_default(unitCylinderGeometry)) {
          unitCylinderGeometry = CylinderGeometry.createGeometry(
            new CylinderGeometry({
              topRadius: 1,
              bottomRadius: 1,
              length: 1,
              vertexFormat: VertexFormat_default.POSITION_ONLY
            })
          );
        }
        return unitCylinderGeometry;
      };
      CylinderGeometry_default = CylinderGeometry;
    }
  });

  // packages/engine/Source/Workers/createCylinderGeometry.js
  var createCylinderGeometry_exports = {};
  __export(createCylinderGeometry_exports, {
    default: () => createCylinderGeometry_default
  });
  function createCylinderGeometry(cylinderGeometry, offset) {
    if (defined_default(offset)) {
      cylinderGeometry = CylinderGeometry_default.unpack(cylinderGeometry, offset);
    }
    return CylinderGeometry_default.createGeometry(cylinderGeometry);
  }
  var createCylinderGeometry_default;
  var init_createCylinderGeometry = __esm({
    "packages/engine/Source/Workers/createCylinderGeometry.js"() {
      init_CylinderGeometry();
      init_defined();
      createCylinderGeometry_default = createCylinderGeometry;
    }
  });

  // packages/engine/Source/Core/CylinderOutlineGeometry.js
  function CylinderOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const length = options.length;
    const topRadius = options.topRadius;
    const bottomRadius = options.bottomRadius;
    const slices = defaultValue_default(options.slices, 128);
    const numberOfVerticalLines = Math.max(
      defaultValue_default(options.numberOfVerticalLines, 16),
      0
    );
    Check_default.typeOf.number("options.positions", length);
    Check_default.typeOf.number("options.topRadius", topRadius);
    Check_default.typeOf.number("options.bottomRadius", bottomRadius);
    Check_default.typeOf.number.greaterThanOrEquals("options.slices", slices, 3);
    if (defined_default(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
      throw new DeveloperError_default(
        "GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry."
      );
    }
    this._length = length;
    this._topRadius = topRadius;
    this._bottomRadius = bottomRadius;
    this._slices = slices;
    this._numberOfVerticalLines = numberOfVerticalLines;
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createCylinderOutlineGeometry";
  }
  var radiusScratch2, scratchOptions12, CylinderOutlineGeometry_default;
  var init_CylinderOutlineGeometry = __esm({
    "packages/engine/Source/Core/CylinderOutlineGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_CylinderGeometryLibrary();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_IndexDatatype();
      init_PrimitiveType();
      radiusScratch2 = new Cartesian2_default();
      CylinderOutlineGeometry.packedLength = 6;
      CylinderOutlineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value._length;
        array[startingIndex++] = value._topRadius;
        array[startingIndex++] = value._bottomRadius;
        array[startingIndex++] = value._slices;
        array[startingIndex++] = value._numberOfVerticalLines;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchOptions12 = {
        length: void 0,
        topRadius: void 0,
        bottomRadius: void 0,
        slices: void 0,
        numberOfVerticalLines: void 0,
        offsetAttribute: void 0
      };
      CylinderOutlineGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const length = array[startingIndex++];
        const topRadius = array[startingIndex++];
        const bottomRadius = array[startingIndex++];
        const slices = array[startingIndex++];
        const numberOfVerticalLines = array[startingIndex++];
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions12.length = length;
          scratchOptions12.topRadius = topRadius;
          scratchOptions12.bottomRadius = bottomRadius;
          scratchOptions12.slices = slices;
          scratchOptions12.numberOfVerticalLines = numberOfVerticalLines;
          scratchOptions12.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new CylinderOutlineGeometry(scratchOptions12);
        }
        result._length = length;
        result._topRadius = topRadius;
        result._bottomRadius = bottomRadius;
        result._slices = slices;
        result._numberOfVerticalLines = numberOfVerticalLines;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      CylinderOutlineGeometry.createGeometry = function(cylinderGeometry) {
        let length = cylinderGeometry._length;
        const topRadius = cylinderGeometry._topRadius;
        const bottomRadius = cylinderGeometry._bottomRadius;
        const slices = cylinderGeometry._slices;
        const numberOfVerticalLines = cylinderGeometry._numberOfVerticalLines;
        if (length <= 0 || topRadius < 0 || bottomRadius < 0 || topRadius === 0 && bottomRadius === 0) {
          return;
        }
        const numVertices = slices * 2;
        const positions = CylinderGeometryLibrary_default.computePositions(
          length,
          topRadius,
          bottomRadius,
          slices,
          false
        );
        let numIndices = slices * 2;
        let numSide;
        if (numberOfVerticalLines > 0) {
          const numSideLines = Math.min(numberOfVerticalLines, slices);
          numSide = Math.round(slices / numSideLines);
          numIndices += numSideLines;
        }
        const indices = IndexDatatype_default.createTypedArray(numVertices, numIndices * 2);
        let index = 0;
        let i;
        for (i = 0; i < slices - 1; i++) {
          indices[index++] = i;
          indices[index++] = i + 1;
          indices[index++] = i + slices;
          indices[index++] = i + 1 + slices;
        }
        indices[index++] = slices - 1;
        indices[index++] = 0;
        indices[index++] = slices + slices - 1;
        indices[index++] = slices;
        if (numberOfVerticalLines > 0) {
          for (i = 0; i < slices; i += numSide) {
            indices[index++] = i;
            indices[index++] = i + slices;
          }
        }
        const attributes = new GeometryAttributes_default();
        attributes.position = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.DOUBLE,
          componentsPerAttribute: 3,
          values: positions
        });
        radiusScratch2.x = length * 0.5;
        radiusScratch2.y = Math.max(bottomRadius, topRadius);
        const boundingSphere = new BoundingSphere_default(
          Cartesian3_default.ZERO,
          Cartesian2_default.magnitude(radiusScratch2)
        );
        if (defined_default(cylinderGeometry._offsetAttribute)) {
          length = positions.length;
          const offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
          const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
          attributes.applyOffset = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
            componentsPerAttribute: 1,
            values: applyOffset
          });
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere,
          offsetAttribute: cylinderGeometry._offsetAttribute
        });
      };
      CylinderOutlineGeometry_default = CylinderOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createCylinderOutlineGeometry.js
  var createCylinderOutlineGeometry_exports = {};
  __export(createCylinderOutlineGeometry_exports, {
    default: () => createCylinderOutlineGeometry_default
  });
  function createCylinderOutlineGeometry(cylinderGeometry, offset) {
    if (defined_default(offset)) {
      cylinderGeometry = CylinderOutlineGeometry_default.unpack(cylinderGeometry, offset);
    }
    return CylinderOutlineGeometry_default.createGeometry(cylinderGeometry);
  }
  var createCylinderOutlineGeometry_default;
  var init_createCylinderOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createCylinderOutlineGeometry.js"() {
      init_CylinderOutlineGeometry();
      init_defined();
      createCylinderOutlineGeometry_default = createCylinderOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createEllipseGeometry.js
  var createEllipseGeometry_exports = {};
  __export(createEllipseGeometry_exports, {
    default: () => createEllipseGeometry_default
  });
  function createEllipseGeometry(ellipseGeometry, offset) {
    if (defined_default(offset)) {
      ellipseGeometry = EllipseGeometry_default.unpack(ellipseGeometry, offset);
    }
    ellipseGeometry._center = Cartesian3_default.clone(ellipseGeometry._center);
    ellipseGeometry._ellipsoid = Ellipsoid_default.clone(ellipseGeometry._ellipsoid);
    return EllipseGeometry_default.createGeometry(ellipseGeometry);
  }
  var createEllipseGeometry_default;
  var init_createEllipseGeometry = __esm({
    "packages/engine/Source/Workers/createEllipseGeometry.js"() {
      init_Cartesian3();
      init_defined();
      init_EllipseGeometry();
      init_Ellipsoid();
      createEllipseGeometry_default = createEllipseGeometry;
    }
  });

  // packages/engine/Source/Workers/createEllipseOutlineGeometry.js
  var createEllipseOutlineGeometry_exports = {};
  __export(createEllipseOutlineGeometry_exports, {
    default: () => createEllipseOutlineGeometry_default
  });
  function createEllipseOutlineGeometry(ellipseGeometry, offset) {
    if (defined_default(offset)) {
      ellipseGeometry = EllipseOutlineGeometry_default.unpack(ellipseGeometry, offset);
    }
    ellipseGeometry._center = Cartesian3_default.clone(ellipseGeometry._center);
    ellipseGeometry._ellipsoid = Ellipsoid_default.clone(ellipseGeometry._ellipsoid);
    return EllipseOutlineGeometry_default.createGeometry(ellipseGeometry);
  }
  var createEllipseOutlineGeometry_default;
  var init_createEllipseOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createEllipseOutlineGeometry.js"() {
      init_Cartesian3();
      init_defined();
      init_EllipseOutlineGeometry();
      init_Ellipsoid();
      createEllipseOutlineGeometry_default = createEllipseOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/EllipsoidGeometry.js
  function EllipsoidGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const radii = defaultValue_default(options.radii, defaultRadii);
    const innerRadii = defaultValue_default(options.innerRadii, radii);
    const minimumClock = defaultValue_default(options.minimumClock, 0);
    const maximumClock = defaultValue_default(options.maximumClock, Math_default.TWO_PI);
    const minimumCone = defaultValue_default(options.minimumCone, 0);
    const maximumCone = defaultValue_default(options.maximumCone, Math_default.PI);
    const stackPartitions = Math.round(defaultValue_default(options.stackPartitions, 64));
    const slicePartitions = Math.round(defaultValue_default(options.slicePartitions, 64));
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    if (slicePartitions < 3) {
      throw new DeveloperError_default(
        "options.slicePartitions cannot be less than three."
      );
    }
    if (stackPartitions < 3) {
      throw new DeveloperError_default(
        "options.stackPartitions cannot be less than three."
      );
    }
    this._radii = Cartesian3_default.clone(radii);
    this._innerRadii = Cartesian3_default.clone(innerRadii);
    this._minimumClock = minimumClock;
    this._maximumClock = maximumClock;
    this._minimumCone = minimumCone;
    this._maximumCone = maximumCone;
    this._stackPartitions = stackPartitions;
    this._slicePartitions = slicePartitions;
    this._vertexFormat = VertexFormat_default.clone(vertexFormat);
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createEllipsoidGeometry";
  }
  var scratchPosition2, scratchNormal5, scratchTangent3, scratchBitangent3, scratchNormalST, defaultRadii, cos, sin, scratchRadii, scratchInnerRadii, scratchVertexFormat6, scratchOptions13, unitEllipsoidGeometry, EllipsoidGeometry_default;
  var init_EllipsoidGeometry = __esm({
    "packages/engine/Source/Core/EllipsoidGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_IndexDatatype();
      init_Math();
      init_PrimitiveType();
      init_VertexFormat();
      scratchPosition2 = new Cartesian3_default();
      scratchNormal5 = new Cartesian3_default();
      scratchTangent3 = new Cartesian3_default();
      scratchBitangent3 = new Cartesian3_default();
      scratchNormalST = new Cartesian3_default();
      defaultRadii = new Cartesian3_default(1, 1, 1);
      cos = Math.cos;
      sin = Math.sin;
      EllipsoidGeometry.packedLength = 2 * Cartesian3_default.packedLength + VertexFormat_default.packedLength + 7;
      EllipsoidGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        Cartesian3_default.pack(value._radii, array, startingIndex);
        startingIndex += Cartesian3_default.packedLength;
        Cartesian3_default.pack(value._innerRadii, array, startingIndex);
        startingIndex += Cartesian3_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._minimumClock;
        array[startingIndex++] = value._maximumClock;
        array[startingIndex++] = value._minimumCone;
        array[startingIndex++] = value._maximumCone;
        array[startingIndex++] = value._stackPartitions;
        array[startingIndex++] = value._slicePartitions;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchRadii = new Cartesian3_default();
      scratchInnerRadii = new Cartesian3_default();
      scratchVertexFormat6 = new VertexFormat_default();
      scratchOptions13 = {
        radii: scratchRadii,
        innerRadii: scratchInnerRadii,
        vertexFormat: scratchVertexFormat6,
        minimumClock: void 0,
        maximumClock: void 0,
        minimumCone: void 0,
        maximumCone: void 0,
        stackPartitions: void 0,
        slicePartitions: void 0,
        offsetAttribute: void 0
      };
      EllipsoidGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        const radii = Cartesian3_default.unpack(array, startingIndex, scratchRadii);
        startingIndex += Cartesian3_default.packedLength;
        const innerRadii = Cartesian3_default.unpack(array, startingIndex, scratchInnerRadii);
        startingIndex += Cartesian3_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat6
        );
        startingIndex += VertexFormat_default.packedLength;
        const minimumClock = array[startingIndex++];
        const maximumClock = array[startingIndex++];
        const minimumCone = array[startingIndex++];
        const maximumCone = array[startingIndex++];
        const stackPartitions = array[startingIndex++];
        const slicePartitions = array[startingIndex++];
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions13.minimumClock = minimumClock;
          scratchOptions13.maximumClock = maximumClock;
          scratchOptions13.minimumCone = minimumCone;
          scratchOptions13.maximumCone = maximumCone;
          scratchOptions13.stackPartitions = stackPartitions;
          scratchOptions13.slicePartitions = slicePartitions;
          scratchOptions13.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new EllipsoidGeometry(scratchOptions13);
        }
        result._radii = Cartesian3_default.clone(radii, result._radii);
        result._innerRadii = Cartesian3_default.clone(innerRadii, result._innerRadii);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._minimumClock = minimumClock;
        result._maximumClock = maximumClock;
        result._minimumCone = minimumCone;
        result._maximumCone = maximumCone;
        result._stackPartitions = stackPartitions;
        result._slicePartitions = slicePartitions;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      EllipsoidGeometry.createGeometry = function(ellipsoidGeometry) {
        const radii = ellipsoidGeometry._radii;
        if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {
          return;
        }
        const innerRadii = ellipsoidGeometry._innerRadii;
        if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {
          return;
        }
        const minimumClock = ellipsoidGeometry._minimumClock;
        const maximumClock = ellipsoidGeometry._maximumClock;
        const minimumCone = ellipsoidGeometry._minimumCone;
        const maximumCone = ellipsoidGeometry._maximumCone;
        const vertexFormat = ellipsoidGeometry._vertexFormat;
        let slicePartitions = ellipsoidGeometry._slicePartitions + 1;
        let stackPartitions = ellipsoidGeometry._stackPartitions + 1;
        slicePartitions = Math.round(
          slicePartitions * Math.abs(maximumClock - minimumClock) / Math_default.TWO_PI
        );
        stackPartitions = Math.round(
          stackPartitions * Math.abs(maximumCone - minimumCone) / Math_default.PI
        );
        if (slicePartitions < 2) {
          slicePartitions = 2;
        }
        if (stackPartitions < 2) {
          stackPartitions = 2;
        }
        let i;
        let j;
        let index = 0;
        const phis = [minimumCone];
        const thetas = [minimumClock];
        for (i = 0; i < stackPartitions; i++) {
          phis.push(
            minimumCone + i * (maximumCone - minimumCone) / (stackPartitions - 1)
          );
        }
        phis.push(maximumCone);
        for (j = 0; j < slicePartitions; j++) {
          thetas.push(
            minimumClock + j * (maximumClock - minimumClock) / (slicePartitions - 1)
          );
        }
        thetas.push(maximumClock);
        const numPhis = phis.length;
        const numThetas = thetas.length;
        let extraIndices = 0;
        let vertexMultiplier = 1;
        const hasInnerSurface = innerRadii.x !== radii.x || innerRadii.y !== radii.y || innerRadii.z !== radii.z;
        let isTopOpen = false;
        let isBotOpen = false;
        let isClockOpen = false;
        if (hasInnerSurface) {
          vertexMultiplier = 2;
          if (minimumCone > 0) {
            isTopOpen = true;
            extraIndices += slicePartitions - 1;
          }
          if (maximumCone < Math.PI) {
            isBotOpen = true;
            extraIndices += slicePartitions - 1;
          }
          if ((maximumClock - minimumClock) % Math_default.TWO_PI) {
            isClockOpen = true;
            extraIndices += (stackPartitions - 1) * 2 + 1;
          } else {
            extraIndices += 1;
          }
        }
        const vertexCount = numThetas * numPhis * vertexMultiplier;
        const positions = new Float64Array(vertexCount * 3);
        const isInner = new Array(vertexCount).fill(false);
        const negateNormal = new Array(vertexCount).fill(false);
        const indexCount = slicePartitions * stackPartitions * vertexMultiplier;
        const numIndices = 6 * (indexCount + extraIndices + 1 - (slicePartitions + stackPartitions) * vertexMultiplier);
        const indices = IndexDatatype_default.createTypedArray(indexCount, numIndices);
        const normals = vertexFormat.normal ? new Float32Array(vertexCount * 3) : void 0;
        const tangents = vertexFormat.tangent ? new Float32Array(vertexCount * 3) : void 0;
        const bitangents = vertexFormat.bitangent ? new Float32Array(vertexCount * 3) : void 0;
        const st = vertexFormat.st ? new Float32Array(vertexCount * 2) : void 0;
        const sinPhi = new Array(numPhis);
        const cosPhi = new Array(numPhis);
        for (i = 0; i < numPhis; i++) {
          sinPhi[i] = sin(phis[i]);
          cosPhi[i] = cos(phis[i]);
        }
        const sinTheta = new Array(numThetas);
        const cosTheta = new Array(numThetas);
        for (j = 0; j < numThetas; j++) {
          cosTheta[j] = cos(thetas[j]);
          sinTheta[j] = sin(thetas[j]);
        }
        for (i = 0; i < numPhis; i++) {
          for (j = 0; j < numThetas; j++) {
            positions[index++] = radii.x * sinPhi[i] * cosTheta[j];
            positions[index++] = radii.y * sinPhi[i] * sinTheta[j];
            positions[index++] = radii.z * cosPhi[i];
          }
        }
        let vertexIndex = vertexCount / 2;
        if (hasInnerSurface) {
          for (i = 0; i < numPhis; i++) {
            for (j = 0; j < numThetas; j++) {
              positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];
              positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];
              positions[index++] = innerRadii.z * cosPhi[i];
              isInner[vertexIndex] = true;
              if (i > 0 && i !== numPhis - 1 && j !== 0 && j !== numThetas - 1) {
                negateNormal[vertexIndex] = true;
              }
              vertexIndex++;
            }
          }
        }
        index = 0;
        let topOffset;
        let bottomOffset;
        for (i = 1; i < numPhis - 2; i++) {
          topOffset = i * numThetas;
          bottomOffset = (i + 1) * numThetas;
          for (j = 1; j < numThetas - 2; j++) {
            indices[index++] = bottomOffset + j;
            indices[index++] = bottomOffset + j + 1;
            indices[index++] = topOffset + j + 1;
            indices[index++] = bottomOffset + j;
            indices[index++] = topOffset + j + 1;
            indices[index++] = topOffset + j;
          }
        }
        if (hasInnerSurface) {
          const offset = numPhis * numThetas;
          for (i = 1; i < numPhis - 2; i++) {
            topOffset = offset + i * numThetas;
            bottomOffset = offset + (i + 1) * numThetas;
            for (j = 1; j < numThetas - 2; j++) {
              indices[index++] = bottomOffset + j;
              indices[index++] = topOffset + j;
              indices[index++] = topOffset + j + 1;
              indices[index++] = bottomOffset + j;
              indices[index++] = topOffset + j + 1;
              indices[index++] = bottomOffset + j + 1;
            }
          }
        }
        let outerOffset;
        let innerOffset;
        if (hasInnerSurface) {
          if (isTopOpen) {
            innerOffset = numPhis * numThetas;
            for (i = 1; i < numThetas - 2; i++) {
              indices[index++] = i;
              indices[index++] = i + 1;
              indices[index++] = innerOffset + i + 1;
              indices[index++] = i;
              indices[index++] = innerOffset + i + 1;
              indices[index++] = innerOffset + i;
            }
          }
          if (isBotOpen) {
            outerOffset = numPhis * numThetas - numThetas;
            innerOffset = numPhis * numThetas * vertexMultiplier - numThetas;
            for (i = 1; i < numThetas - 2; i++) {
              indices[index++] = outerOffset + i + 1;
              indices[index++] = outerOffset + i;
              indices[index++] = innerOffset + i;
              indices[index++] = outerOffset + i + 1;
              indices[index++] = innerOffset + i;
              indices[index++] = innerOffset + i + 1;
            }
          }
        }
        if (isClockOpen) {
          for (i = 1; i < numPhis - 2; i++) {
            innerOffset = numThetas * numPhis + numThetas * i;
            outerOffset = numThetas * i;
            indices[index++] = innerOffset;
            indices[index++] = outerOffset + numThetas;
            indices[index++] = outerOffset;
            indices[index++] = innerOffset;
            indices[index++] = innerOffset + numThetas;
            indices[index++] = outerOffset + numThetas;
          }
          for (i = 1; i < numPhis - 2; i++) {
            innerOffset = numThetas * numPhis + numThetas * (i + 1) - 1;
            outerOffset = numThetas * (i + 1) - 1;
            indices[index++] = outerOffset + numThetas;
            indices[index++] = innerOffset;
            indices[index++] = outerOffset;
            indices[index++] = outerOffset + numThetas;
            indices[index++] = innerOffset + numThetas;
            indices[index++] = innerOffset;
          }
        }
        const attributes = new GeometryAttributes_default();
        if (vertexFormat.position) {
          attributes.position = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          });
        }
        let stIndex = 0;
        let normalIndex = 0;
        let tangentIndex = 0;
        let bitangentIndex = 0;
        const vertexCountHalf = vertexCount / 2;
        let ellipsoid;
        const ellipsoidOuter = Ellipsoid_default.fromCartesian3(radii);
        const ellipsoidInner = Ellipsoid_default.fromCartesian3(innerRadii);
        if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {
          for (i = 0; i < vertexCount; i++) {
            ellipsoid = isInner[i] ? ellipsoidInner : ellipsoidOuter;
            const position = Cartesian3_default.fromArray(positions, i * 3, scratchPosition2);
            const normal2 = ellipsoid.geodeticSurfaceNormal(position, scratchNormal5);
            if (negateNormal[i]) {
              Cartesian3_default.negate(normal2, normal2);
            }
            if (vertexFormat.st) {
              const normalST = Cartesian2_default.negate(normal2, scratchNormalST);
              st[stIndex++] = Math.atan2(normalST.y, normalST.x) / Math_default.TWO_PI + 0.5;
              st[stIndex++] = Math.asin(normal2.z) / Math.PI + 0.5;
            }
            if (vertexFormat.normal) {
              normals[normalIndex++] = normal2.x;
              normals[normalIndex++] = normal2.y;
              normals[normalIndex++] = normal2.z;
            }
            if (vertexFormat.tangent || vertexFormat.bitangent) {
              const tangent = scratchTangent3;
              let tangetOffset = 0;
              let unit;
              if (isInner[i]) {
                tangetOffset = vertexCountHalf;
              }
              if (!isTopOpen && i >= tangetOffset && i < tangetOffset + numThetas * 2) {
                unit = Cartesian3_default.UNIT_X;
              } else {
                unit = Cartesian3_default.UNIT_Z;
              }
              Cartesian3_default.cross(unit, normal2, tangent);
              Cartesian3_default.normalize(tangent, tangent);
              if (vertexFormat.tangent) {
                tangents[tangentIndex++] = tangent.x;
                tangents[tangentIndex++] = tangent.y;
                tangents[tangentIndex++] = tangent.z;
              }
              if (vertexFormat.bitangent) {
                const bitangent = Cartesian3_default.cross(normal2, tangent, scratchBitangent3);
                Cartesian3_default.normalize(bitangent, bitangent);
                bitangents[bitangentIndex++] = bitangent.x;
                bitangents[bitangentIndex++] = bitangent.y;
                bitangents[bitangentIndex++] = bitangent.z;
              }
            }
          }
          if (vertexFormat.st) {
            attributes.st = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 2,
              values: st
            });
          }
          if (vertexFormat.normal) {
            attributes.normal = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: normals
            });
          }
          if (vertexFormat.tangent) {
            attributes.tangent = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: tangents
            });
          }
          if (vertexFormat.bitangent) {
            attributes.bitangent = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: bitangents
            });
          }
        }
        if (defined_default(ellipsoidGeometry._offsetAttribute)) {
          const length = positions.length;
          const offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
          const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
          attributes.applyOffset = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
            componentsPerAttribute: 1,
            values: applyOffset
          });
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere: BoundingSphere_default.fromEllipsoid(ellipsoidOuter),
          offsetAttribute: ellipsoidGeometry._offsetAttribute
        });
      };
      EllipsoidGeometry.getUnitEllipsoid = function() {
        if (!defined_default(unitEllipsoidGeometry)) {
          unitEllipsoidGeometry = EllipsoidGeometry.createGeometry(
            new EllipsoidGeometry({
              radii: new Cartesian3_default(1, 1, 1),
              vertexFormat: VertexFormat_default.POSITION_ONLY
            })
          );
        }
        return unitEllipsoidGeometry;
      };
      EllipsoidGeometry_default = EllipsoidGeometry;
    }
  });

  // packages/engine/Source/Workers/createEllipsoidGeometry.js
  var createEllipsoidGeometry_exports = {};
  __export(createEllipsoidGeometry_exports, {
    default: () => createEllipsoidGeometry_default
  });
  function createEllipsoidGeometry(ellipsoidGeometry, offset) {
    if (defined_default(offset)) {
      ellipsoidGeometry = EllipsoidGeometry_default.unpack(ellipsoidGeometry, offset);
    }
    return EllipsoidGeometry_default.createGeometry(ellipsoidGeometry);
  }
  var createEllipsoidGeometry_default;
  var init_createEllipsoidGeometry = __esm({
    "packages/engine/Source/Workers/createEllipsoidGeometry.js"() {
      init_defined();
      init_EllipsoidGeometry();
      createEllipsoidGeometry_default = createEllipsoidGeometry;
    }
  });

  // packages/engine/Source/Core/EllipsoidOutlineGeometry.js
  function EllipsoidOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const radii = defaultValue_default(options.radii, defaultRadii2);
    const innerRadii = defaultValue_default(options.innerRadii, radii);
    const minimumClock = defaultValue_default(options.minimumClock, 0);
    const maximumClock = defaultValue_default(options.maximumClock, Math_default.TWO_PI);
    const minimumCone = defaultValue_default(options.minimumCone, 0);
    const maximumCone = defaultValue_default(options.maximumCone, Math_default.PI);
    const stackPartitions = Math.round(defaultValue_default(options.stackPartitions, 10));
    const slicePartitions = Math.round(defaultValue_default(options.slicePartitions, 8));
    const subdivisions = Math.round(defaultValue_default(options.subdivisions, 128));
    if (stackPartitions < 1) {
      throw new DeveloperError_default("options.stackPartitions cannot be less than 1");
    }
    if (slicePartitions < 0) {
      throw new DeveloperError_default("options.slicePartitions cannot be less than 0");
    }
    if (subdivisions < 0) {
      throw new DeveloperError_default(
        "options.subdivisions must be greater than or equal to zero."
      );
    }
    if (defined_default(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
      throw new DeveloperError_default(
        "GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry."
      );
    }
    this._radii = Cartesian3_default.clone(radii);
    this._innerRadii = Cartesian3_default.clone(innerRadii);
    this._minimumClock = minimumClock;
    this._maximumClock = maximumClock;
    this._minimumCone = minimumCone;
    this._maximumCone = maximumCone;
    this._stackPartitions = stackPartitions;
    this._slicePartitions = slicePartitions;
    this._subdivisions = subdivisions;
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createEllipsoidOutlineGeometry";
  }
  var defaultRadii2, cos2, sin2, scratchRadii2, scratchInnerRadii2, scratchOptions14, EllipsoidOutlineGeometry_default;
  var init_EllipsoidOutlineGeometry = __esm({
    "packages/engine/Source/Core/EllipsoidOutlineGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_IndexDatatype();
      init_Math();
      init_PrimitiveType();
      defaultRadii2 = new Cartesian3_default(1, 1, 1);
      cos2 = Math.cos;
      sin2 = Math.sin;
      EllipsoidOutlineGeometry.packedLength = 2 * Cartesian3_default.packedLength + 8;
      EllipsoidOutlineGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        Cartesian3_default.pack(value._radii, array, startingIndex);
        startingIndex += Cartesian3_default.packedLength;
        Cartesian3_default.pack(value._innerRadii, array, startingIndex);
        startingIndex += Cartesian3_default.packedLength;
        array[startingIndex++] = value._minimumClock;
        array[startingIndex++] = value._maximumClock;
        array[startingIndex++] = value._minimumCone;
        array[startingIndex++] = value._maximumCone;
        array[startingIndex++] = value._stackPartitions;
        array[startingIndex++] = value._slicePartitions;
        array[startingIndex++] = value._subdivisions;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchRadii2 = new Cartesian3_default();
      scratchInnerRadii2 = new Cartesian3_default();
      scratchOptions14 = {
        radii: scratchRadii2,
        innerRadii: scratchInnerRadii2,
        minimumClock: void 0,
        maximumClock: void 0,
        minimumCone: void 0,
        maximumCone: void 0,
        stackPartitions: void 0,
        slicePartitions: void 0,
        subdivisions: void 0,
        offsetAttribute: void 0
      };
      EllipsoidOutlineGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        const radii = Cartesian3_default.unpack(array, startingIndex, scratchRadii2);
        startingIndex += Cartesian3_default.packedLength;
        const innerRadii = Cartesian3_default.unpack(array, startingIndex, scratchInnerRadii2);
        startingIndex += Cartesian3_default.packedLength;
        const minimumClock = array[startingIndex++];
        const maximumClock = array[startingIndex++];
        const minimumCone = array[startingIndex++];
        const maximumCone = array[startingIndex++];
        const stackPartitions = array[startingIndex++];
        const slicePartitions = array[startingIndex++];
        const subdivisions = array[startingIndex++];
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions14.minimumClock = minimumClock;
          scratchOptions14.maximumClock = maximumClock;
          scratchOptions14.minimumCone = minimumCone;
          scratchOptions14.maximumCone = maximumCone;
          scratchOptions14.stackPartitions = stackPartitions;
          scratchOptions14.slicePartitions = slicePartitions;
          scratchOptions14.subdivisions = subdivisions;
          scratchOptions14.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new EllipsoidOutlineGeometry(scratchOptions14);
        }
        result._radii = Cartesian3_default.clone(radii, result._radii);
        result._innerRadii = Cartesian3_default.clone(innerRadii, result._innerRadii);
        result._minimumClock = minimumClock;
        result._maximumClock = maximumClock;
        result._minimumCone = minimumCone;
        result._maximumCone = maximumCone;
        result._stackPartitions = stackPartitions;
        result._slicePartitions = slicePartitions;
        result._subdivisions = subdivisions;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      EllipsoidOutlineGeometry.createGeometry = function(ellipsoidGeometry) {
        const radii = ellipsoidGeometry._radii;
        if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {
          return;
        }
        const innerRadii = ellipsoidGeometry._innerRadii;
        if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {
          return;
        }
        const minimumClock = ellipsoidGeometry._minimumClock;
        const maximumClock = ellipsoidGeometry._maximumClock;
        const minimumCone = ellipsoidGeometry._minimumCone;
        const maximumCone = ellipsoidGeometry._maximumCone;
        const subdivisions = ellipsoidGeometry._subdivisions;
        const ellipsoid = Ellipsoid_default.fromCartesian3(radii);
        let slicePartitions = ellipsoidGeometry._slicePartitions + 1;
        let stackPartitions = ellipsoidGeometry._stackPartitions + 1;
        slicePartitions = Math.round(
          slicePartitions * Math.abs(maximumClock - minimumClock) / Math_default.TWO_PI
        );
        stackPartitions = Math.round(
          stackPartitions * Math.abs(maximumCone - minimumCone) / Math_default.PI
        );
        if (slicePartitions < 2) {
          slicePartitions = 2;
        }
        if (stackPartitions < 2) {
          stackPartitions = 2;
        }
        let extraIndices = 0;
        let vertexMultiplier = 1;
        const hasInnerSurface = innerRadii.x !== radii.x || innerRadii.y !== radii.y || innerRadii.z !== radii.z;
        let isTopOpen = false;
        let isBotOpen = false;
        if (hasInnerSurface) {
          vertexMultiplier = 2;
          if (minimumCone > 0) {
            isTopOpen = true;
            extraIndices += slicePartitions;
          }
          if (maximumCone < Math.PI) {
            isBotOpen = true;
            extraIndices += slicePartitions;
          }
        }
        const vertexCount = subdivisions * vertexMultiplier * (stackPartitions + slicePartitions);
        const positions = new Float64Array(vertexCount * 3);
        const numIndices = 2 * (vertexCount + extraIndices - (slicePartitions + stackPartitions) * vertexMultiplier);
        const indices = IndexDatatype_default.createTypedArray(vertexCount, numIndices);
        let i;
        let j;
        let theta;
        let phi;
        let index = 0;
        const sinPhi = new Array(stackPartitions);
        const cosPhi = new Array(stackPartitions);
        for (i = 0; i < stackPartitions; i++) {
          phi = minimumCone + i * (maximumCone - minimumCone) / (stackPartitions - 1);
          sinPhi[i] = sin2(phi);
          cosPhi[i] = cos2(phi);
        }
        const sinTheta = new Array(subdivisions);
        const cosTheta = new Array(subdivisions);
        for (i = 0; i < subdivisions; i++) {
          theta = minimumClock + i * (maximumClock - minimumClock) / (subdivisions - 1);
          sinTheta[i] = sin2(theta);
          cosTheta[i] = cos2(theta);
        }
        for (i = 0; i < stackPartitions; i++) {
          for (j = 0; j < subdivisions; j++) {
            positions[index++] = radii.x * sinPhi[i] * cosTheta[j];
            positions[index++] = radii.y * sinPhi[i] * sinTheta[j];
            positions[index++] = radii.z * cosPhi[i];
          }
        }
        if (hasInnerSurface) {
          for (i = 0; i < stackPartitions; i++) {
            for (j = 0; j < subdivisions; j++) {
              positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];
              positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];
              positions[index++] = innerRadii.z * cosPhi[i];
            }
          }
        }
        sinPhi.length = subdivisions;
        cosPhi.length = subdivisions;
        for (i = 0; i < subdivisions; i++) {
          phi = minimumCone + i * (maximumCone - minimumCone) / (subdivisions - 1);
          sinPhi[i] = sin2(phi);
          cosPhi[i] = cos2(phi);
        }
        sinTheta.length = slicePartitions;
        cosTheta.length = slicePartitions;
        for (i = 0; i < slicePartitions; i++) {
          theta = minimumClock + i * (maximumClock - minimumClock) / (slicePartitions - 1);
          sinTheta[i] = sin2(theta);
          cosTheta[i] = cos2(theta);
        }
        for (i = 0; i < subdivisions; i++) {
          for (j = 0; j < slicePartitions; j++) {
            positions[index++] = radii.x * sinPhi[i] * cosTheta[j];
            positions[index++] = radii.y * sinPhi[i] * sinTheta[j];
            positions[index++] = radii.z * cosPhi[i];
          }
        }
        if (hasInnerSurface) {
          for (i = 0; i < subdivisions; i++) {
            for (j = 0; j < slicePartitions; j++) {
              positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];
              positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];
              positions[index++] = innerRadii.z * cosPhi[i];
            }
          }
        }
        index = 0;
        for (i = 0; i < stackPartitions * vertexMultiplier; i++) {
          const topOffset = i * subdivisions;
          for (j = 0; j < subdivisions - 1; j++) {
            indices[index++] = topOffset + j;
            indices[index++] = topOffset + j + 1;
          }
        }
        let offset = stackPartitions * subdivisions * vertexMultiplier;
        for (i = 0; i < slicePartitions; i++) {
          for (j = 0; j < subdivisions - 1; j++) {
            indices[index++] = offset + i + j * slicePartitions;
            indices[index++] = offset + i + (j + 1) * slicePartitions;
          }
        }
        if (hasInnerSurface) {
          offset = stackPartitions * subdivisions * vertexMultiplier + slicePartitions * subdivisions;
          for (i = 0; i < slicePartitions; i++) {
            for (j = 0; j < subdivisions - 1; j++) {
              indices[index++] = offset + i + j * slicePartitions;
              indices[index++] = offset + i + (j + 1) * slicePartitions;
            }
          }
        }
        if (hasInnerSurface) {
          let outerOffset = stackPartitions * subdivisions * vertexMultiplier;
          let innerOffset = outerOffset + subdivisions * slicePartitions;
          if (isTopOpen) {
            for (i = 0; i < slicePartitions; i++) {
              indices[index++] = outerOffset + i;
              indices[index++] = innerOffset + i;
            }
          }
          if (isBotOpen) {
            outerOffset += subdivisions * slicePartitions - slicePartitions;
            innerOffset += subdivisions * slicePartitions - slicePartitions;
            for (i = 0; i < slicePartitions; i++) {
              indices[index++] = outerOffset + i;
              indices[index++] = innerOffset + i;
            }
          }
        }
        const attributes = new GeometryAttributes_default({
          position: new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          })
        });
        if (defined_default(ellipsoidGeometry._offsetAttribute)) {
          const length = positions.length;
          const offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
          const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
          attributes.applyOffset = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
            componentsPerAttribute: 1,
            values: applyOffset
          });
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere: BoundingSphere_default.fromEllipsoid(ellipsoid),
          offsetAttribute: ellipsoidGeometry._offsetAttribute
        });
      };
      EllipsoidOutlineGeometry_default = EllipsoidOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createEllipsoidOutlineGeometry.js
  var createEllipsoidOutlineGeometry_exports = {};
  __export(createEllipsoidOutlineGeometry_exports, {
    default: () => createEllipsoidOutlineGeometry_default
  });
  function createEllipsoidOutlineGeometry(ellipsoidGeometry, offset) {
    if (defined_default(ellipsoidGeometry.buffer, offset)) {
      ellipsoidGeometry = EllipsoidOutlineGeometry_default.unpack(
        ellipsoidGeometry,
        offset
      );
    }
    return EllipsoidOutlineGeometry_default.createGeometry(ellipsoidGeometry);
  }
  var createEllipsoidOutlineGeometry_default;
  var init_createEllipsoidOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createEllipsoidOutlineGeometry.js"() {
      init_defined();
      init_EllipsoidOutlineGeometry();
      createEllipsoidOutlineGeometry_default = createEllipsoidOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/CullingVolume.js
  function CullingVolume(planes) {
    this.planes = defaultValue_default(planes, []);
  }
  var faces, scratchPlaneCenter, scratchPlaneNormal2, scratchPlane2, CullingVolume_default;
  var init_CullingVolume = __esm({
    "packages/engine/Source/Core/CullingVolume.js"() {
      init_Cartesian3();
      init_Cartesian4();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Intersect();
      init_Plane();
      faces = [new Cartesian3_default(), new Cartesian3_default(), new Cartesian3_default()];
      Cartesian3_default.clone(Cartesian3_default.UNIT_X, faces[0]);
      Cartesian3_default.clone(Cartesian3_default.UNIT_Y, faces[1]);
      Cartesian3_default.clone(Cartesian3_default.UNIT_Z, faces[2]);
      scratchPlaneCenter = new Cartesian3_default();
      scratchPlaneNormal2 = new Cartesian3_default();
      scratchPlane2 = new Plane_default(new Cartesian3_default(1, 0, 0), 0);
      CullingVolume.fromBoundingSphere = function(boundingSphere, result) {
        if (!defined_default(boundingSphere)) {
          throw new DeveloperError_default("boundingSphere is required.");
        }
        if (!defined_default(result)) {
          result = new CullingVolume();
        }
        const length = faces.length;
        const planes = result.planes;
        planes.length = 2 * length;
        const center = boundingSphere.center;
        const radius = boundingSphere.radius;
        let planeIndex = 0;
        for (let i = 0; i < length; ++i) {
          const faceNormal = faces[i];
          let plane0 = planes[planeIndex];
          let plane1 = planes[planeIndex + 1];
          if (!defined_default(plane0)) {
            plane0 = planes[planeIndex] = new Cartesian4_default();
          }
          if (!defined_default(plane1)) {
            plane1 = planes[planeIndex + 1] = new Cartesian4_default();
          }
          Cartesian3_default.multiplyByScalar(faceNormal, -radius, scratchPlaneCenter);
          Cartesian3_default.add(center, scratchPlaneCenter, scratchPlaneCenter);
          plane0.x = faceNormal.x;
          plane0.y = faceNormal.y;
          plane0.z = faceNormal.z;
          plane0.w = -Cartesian3_default.dot(faceNormal, scratchPlaneCenter);
          Cartesian3_default.multiplyByScalar(faceNormal, radius, scratchPlaneCenter);
          Cartesian3_default.add(center, scratchPlaneCenter, scratchPlaneCenter);
          plane1.x = -faceNormal.x;
          plane1.y = -faceNormal.y;
          plane1.z = -faceNormal.z;
          plane1.w = -Cartesian3_default.dot(
            Cartesian3_default.negate(faceNormal, scratchPlaneNormal2),
            scratchPlaneCenter
          );
          planeIndex += 2;
        }
        return result;
      };
      CullingVolume.prototype.computeVisibility = function(boundingVolume) {
        if (!defined_default(boundingVolume)) {
          throw new DeveloperError_default("boundingVolume is required.");
        }
        const planes = this.planes;
        let intersecting = false;
        for (let k = 0, len = planes.length; k < len; ++k) {
          const result = boundingVolume.intersectPlane(
            Plane_default.fromCartesian4(planes[k], scratchPlane2)
          );
          if (result === Intersect_default.OUTSIDE) {
            return Intersect_default.OUTSIDE;
          } else if (result === Intersect_default.INTERSECTING) {
            intersecting = true;
          }
        }
        return intersecting ? Intersect_default.INTERSECTING : Intersect_default.INSIDE;
      };
      CullingVolume.prototype.computeVisibilityWithPlaneMask = function(boundingVolume, parentPlaneMask) {
        if (!defined_default(boundingVolume)) {
          throw new DeveloperError_default("boundingVolume is required.");
        }
        if (!defined_default(parentPlaneMask)) {
          throw new DeveloperError_default("parentPlaneMask is required.");
        }
        if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {
          return parentPlaneMask;
        }
        let mask = CullingVolume.MASK_INSIDE;
        const planes = this.planes;
        for (let k = 0, len = planes.length; k < len; ++k) {
          const flag = k < 31 ? 1 << k : 0;
          if (k < 31 && (parentPlaneMask & flag) === 0) {
            continue;
          }
          const result = boundingVolume.intersectPlane(
            Plane_default.fromCartesian4(planes[k], scratchPlane2)
          );
          if (result === Intersect_default.OUTSIDE) {
            return CullingVolume.MASK_OUTSIDE;
          } else if (result === Intersect_default.INTERSECTING) {
            mask |= flag;
          }
        }
        return mask;
      };
      CullingVolume.MASK_OUTSIDE = 4294967295;
      CullingVolume.MASK_INSIDE = 0;
      CullingVolume.MASK_INDETERMINATE = 2147483647;
      CullingVolume_default = CullingVolume;
    }
  });

  // packages/engine/Source/Core/OrthographicOffCenterFrustum.js
  function OrthographicOffCenterFrustum(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this.left = options.left;
    this._left = void 0;
    this.right = options.right;
    this._right = void 0;
    this.top = options.top;
    this._top = void 0;
    this.bottom = options.bottom;
    this._bottom = void 0;
    this.near = defaultValue_default(options.near, 1);
    this._near = this.near;
    this.far = defaultValue_default(options.far, 5e8);
    this._far = this.far;
    this._cullingVolume = new CullingVolume_default();
    this._orthographicMatrix = new Matrix4_default();
  }
  function update(frustum) {
    if (!defined_default(frustum.right) || !defined_default(frustum.left) || !defined_default(frustum.top) || !defined_default(frustum.bottom) || !defined_default(frustum.near) || !defined_default(frustum.far)) {
      throw new DeveloperError_default(
        "right, left, top, bottom, near, or far parameters are not set."
      );
    }
    if (frustum.top !== frustum._top || frustum.bottom !== frustum._bottom || frustum.left !== frustum._left || frustum.right !== frustum._right || frustum.near !== frustum._near || frustum.far !== frustum._far) {
      if (frustum.left > frustum.right) {
        throw new DeveloperError_default("right must be greater than left.");
      }
      if (frustum.bottom > frustum.top) {
        throw new DeveloperError_default("top must be greater than bottom.");
      }
      if (frustum.near <= 0 || frustum.near > frustum.far) {
        throw new DeveloperError_default(
          "near must be greater than zero and less than far."
        );
      }
      frustum._left = frustum.left;
      frustum._right = frustum.right;
      frustum._top = frustum.top;
      frustum._bottom = frustum.bottom;
      frustum._near = frustum.near;
      frustum._far = frustum.far;
      frustum._orthographicMatrix = Matrix4_default.computeOrthographicOffCenter(
        frustum.left,
        frustum.right,
        frustum.bottom,
        frustum.top,
        frustum.near,
        frustum.far,
        frustum._orthographicMatrix
      );
    }
  }
  var getPlanesRight, getPlanesNearCenter, getPlanesPoint, negateScratch, OrthographicOffCenterFrustum_default;
  var init_OrthographicOffCenterFrustum = __esm({
    "packages/engine/Source/Core/OrthographicOffCenterFrustum.js"() {
      init_Cartesian3();
      init_Cartesian4();
      init_CullingVolume();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      init_Matrix4();
      Object.defineProperties(OrthographicOffCenterFrustum.prototype, {
        /**
         * Gets the orthographic projection matrix computed from the view frustum.
         * @memberof OrthographicOffCenterFrustum.prototype
         * @type {Matrix4}
         * @readonly
         */
        projectionMatrix: {
          get: function() {
            update(this);
            return this._orthographicMatrix;
          }
        }
      });
      getPlanesRight = new Cartesian3_default();
      getPlanesNearCenter = new Cartesian3_default();
      getPlanesPoint = new Cartesian3_default();
      negateScratch = new Cartesian3_default();
      OrthographicOffCenterFrustum.prototype.computeCullingVolume = function(position, direction2, up) {
        if (!defined_default(position)) {
          throw new DeveloperError_default("position is required.");
        }
        if (!defined_default(direction2)) {
          throw new DeveloperError_default("direction is required.");
        }
        if (!defined_default(up)) {
          throw new DeveloperError_default("up is required.");
        }
        const planes = this._cullingVolume.planes;
        const t = this.top;
        const b = this.bottom;
        const r = this.right;
        const l = this.left;
        const n = this.near;
        const f = this.far;
        const right = Cartesian3_default.cross(direction2, up, getPlanesRight);
        Cartesian3_default.normalize(right, right);
        const nearCenter = getPlanesNearCenter;
        Cartesian3_default.multiplyByScalar(direction2, n, nearCenter);
        Cartesian3_default.add(position, nearCenter, nearCenter);
        const point = getPlanesPoint;
        Cartesian3_default.multiplyByScalar(right, l, point);
        Cartesian3_default.add(nearCenter, point, point);
        let plane = planes[0];
        if (!defined_default(plane)) {
          plane = planes[0] = new Cartesian4_default();
        }
        plane.x = right.x;
        plane.y = right.y;
        plane.z = right.z;
        plane.w = -Cartesian3_default.dot(right, point);
        Cartesian3_default.multiplyByScalar(right, r, point);
        Cartesian3_default.add(nearCenter, point, point);
        plane = planes[1];
        if (!defined_default(plane)) {
          plane = planes[1] = new Cartesian4_default();
        }
        plane.x = -right.x;
        plane.y = -right.y;
        plane.z = -right.z;
        plane.w = -Cartesian3_default.dot(Cartesian3_default.negate(right, negateScratch), point);
        Cartesian3_default.multiplyByScalar(up, b, point);
        Cartesian3_default.add(nearCenter, point, point);
        plane = planes[2];
        if (!defined_default(plane)) {
          plane = planes[2] = new Cartesian4_default();
        }
        plane.x = up.x;
        plane.y = up.y;
        plane.z = up.z;
        plane.w = -Cartesian3_default.dot(up, point);
        Cartesian3_default.multiplyByScalar(up, t, point);
        Cartesian3_default.add(nearCenter, point, point);
        plane = planes[3];
        if (!defined_default(plane)) {
          plane = planes[3] = new Cartesian4_default();
        }
        plane.x = -up.x;
        plane.y = -up.y;
        plane.z = -up.z;
        plane.w = -Cartesian3_default.dot(Cartesian3_default.negate(up, negateScratch), point);
        plane = planes[4];
        if (!defined_default(plane)) {
          plane = planes[4] = new Cartesian4_default();
        }
        plane.x = direction2.x;
        plane.y = direction2.y;
        plane.z = direction2.z;
        plane.w = -Cartesian3_default.dot(direction2, nearCenter);
        Cartesian3_default.multiplyByScalar(direction2, f, point);
        Cartesian3_default.add(position, point, point);
        plane = planes[5];
        if (!defined_default(plane)) {
          plane = planes[5] = new Cartesian4_default();
        }
        plane.x = -direction2.x;
        plane.y = -direction2.y;
        plane.z = -direction2.z;
        plane.w = -Cartesian3_default.dot(Cartesian3_default.negate(direction2, negateScratch), point);
        return this._cullingVolume;
      };
      OrthographicOffCenterFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {
        update(this);
        if (!defined_default(drawingBufferWidth) || !defined_default(drawingBufferHeight)) {
          throw new DeveloperError_default(
            "Both drawingBufferWidth and drawingBufferHeight are required."
          );
        }
        if (drawingBufferWidth <= 0) {
          throw new DeveloperError_default("drawingBufferWidth must be greater than zero.");
        }
        if (drawingBufferHeight <= 0) {
          throw new DeveloperError_default("drawingBufferHeight must be greater than zero.");
        }
        if (!defined_default(distance)) {
          throw new DeveloperError_default("distance is required.");
        }
        if (!defined_default(pixelRatio)) {
          throw new DeveloperError_default("pixelRatio is required.");
        }
        if (pixelRatio <= 0) {
          throw new DeveloperError_default("pixelRatio must be greater than zero.");
        }
        if (!defined_default(result)) {
          throw new DeveloperError_default("A result object is required.");
        }
        const frustumWidth = this.right - this.left;
        const frustumHeight = this.top - this.bottom;
        const pixelWidth = pixelRatio * frustumWidth / drawingBufferWidth;
        const pixelHeight = pixelRatio * frustumHeight / drawingBufferHeight;
        result.x = pixelWidth;
        result.y = pixelHeight;
        return result;
      };
      OrthographicOffCenterFrustum.prototype.clone = function(result) {
        if (!defined_default(result)) {
          result = new OrthographicOffCenterFrustum();
        }
        result.left = this.left;
        result.right = this.right;
        result.top = this.top;
        result.bottom = this.bottom;
        result.near = this.near;
        result.far = this.far;
        result._left = void 0;
        result._right = void 0;
        result._top = void 0;
        result._bottom = void 0;
        result._near = void 0;
        result._far = void 0;
        return result;
      };
      OrthographicOffCenterFrustum.prototype.equals = function(other) {
        return defined_default(other) && other instanceof OrthographicOffCenterFrustum && this.right === other.right && this.left === other.left && this.top === other.top && this.bottom === other.bottom && this.near === other.near && this.far === other.far;
      };
      OrthographicOffCenterFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {
        return other === this || defined_default(other) && other instanceof OrthographicOffCenterFrustum && Math_default.equalsEpsilon(
          this.right,
          other.right,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.left,
          other.left,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.top,
          other.top,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.bottom,
          other.bottom,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.near,
          other.near,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.far,
          other.far,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      OrthographicOffCenterFrustum_default = OrthographicOffCenterFrustum;
    }
  });

  // packages/engine/Source/Core/OrthographicFrustum.js
  function OrthographicFrustum(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this._offCenterFrustum = new OrthographicOffCenterFrustum_default();
    this.width = options.width;
    this._width = void 0;
    this.aspectRatio = options.aspectRatio;
    this._aspectRatio = void 0;
    this.near = defaultValue_default(options.near, 1);
    this._near = this.near;
    this.far = defaultValue_default(options.far, 5e8);
    this._far = this.far;
  }
  function update2(frustum) {
    if (!defined_default(frustum.width) || !defined_default(frustum.aspectRatio) || !defined_default(frustum.near) || !defined_default(frustum.far)) {
      throw new DeveloperError_default(
        "width, aspectRatio, near, or far parameters are not set."
      );
    }
    const f = frustum._offCenterFrustum;
    if (frustum.width !== frustum._width || frustum.aspectRatio !== frustum._aspectRatio || frustum.near !== frustum._near || frustum.far !== frustum._far) {
      if (frustum.aspectRatio < 0) {
        throw new DeveloperError_default("aspectRatio must be positive.");
      }
      if (frustum.near < 0 || frustum.near > frustum.far) {
        throw new DeveloperError_default(
          "near must be greater than zero and less than far."
        );
      }
      frustum._aspectRatio = frustum.aspectRatio;
      frustum._width = frustum.width;
      frustum._near = frustum.near;
      frustum._far = frustum.far;
      const ratio = 1 / frustum.aspectRatio;
      f.right = frustum.width * 0.5;
      f.left = -f.right;
      f.top = ratio * f.right;
      f.bottom = -f.top;
      f.near = frustum.near;
      f.far = frustum.far;
    }
  }
  var OrthographicFrustum_default;
  var init_OrthographicFrustum = __esm({
    "packages/engine/Source/Core/OrthographicFrustum.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      init_OrthographicOffCenterFrustum();
      OrthographicFrustum.packedLength = 4;
      OrthographicFrustum.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.width;
        array[startingIndex++] = value.aspectRatio;
        array[startingIndex++] = value.near;
        array[startingIndex] = value.far;
        return array;
      };
      OrthographicFrustum.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new OrthographicFrustum();
        }
        result.width = array[startingIndex++];
        result.aspectRatio = array[startingIndex++];
        result.near = array[startingIndex++];
        result.far = array[startingIndex];
        return result;
      };
      Object.defineProperties(OrthographicFrustum.prototype, {
        /**
         * Gets the orthographic projection matrix computed from the view frustum.
         * @memberof OrthographicFrustum.prototype
         * @type {Matrix4}
         * @readonly
         */
        projectionMatrix: {
          get: function() {
            update2(this);
            return this._offCenterFrustum.projectionMatrix;
          }
        },
        /**
         * Gets the orthographic projection matrix computed from the view frustum.
         * @memberof OrthographicFrustum.prototype
         * @type {OrthographicOffCenterFrustum}
         * @readonly
         * @private
         */
        offCenterFrustum: {
          get: function() {
            update2(this);
            return this._offCenterFrustum;
          }
        }
      });
      OrthographicFrustum.prototype.computeCullingVolume = function(position, direction2, up) {
        update2(this);
        return this._offCenterFrustum.computeCullingVolume(position, direction2, up);
      };
      OrthographicFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {
        update2(this);
        return this._offCenterFrustum.getPixelDimensions(
          drawingBufferWidth,
          drawingBufferHeight,
          distance,
          pixelRatio,
          result
        );
      };
      OrthographicFrustum.prototype.clone = function(result) {
        if (!defined_default(result)) {
          result = new OrthographicFrustum();
        }
        result.aspectRatio = this.aspectRatio;
        result.width = this.width;
        result.near = this.near;
        result.far = this.far;
        result._aspectRatio = void 0;
        result._width = void 0;
        result._near = void 0;
        result._far = void 0;
        this._offCenterFrustum.clone(result._offCenterFrustum);
        return result;
      };
      OrthographicFrustum.prototype.equals = function(other) {
        if (!defined_default(other) || !(other instanceof OrthographicFrustum)) {
          return false;
        }
        update2(this);
        update2(other);
        return this.width === other.width && this.aspectRatio === other.aspectRatio && this._offCenterFrustum.equals(other._offCenterFrustum);
      };
      OrthographicFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {
        if (!defined_default(other) || !(other instanceof OrthographicFrustum)) {
          return false;
        }
        update2(this);
        update2(other);
        return Math_default.equalsEpsilon(
          this.width,
          other.width,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.aspectRatio,
          other.aspectRatio,
          relativeEpsilon,
          absoluteEpsilon
        ) && this._offCenterFrustum.equalsEpsilon(
          other._offCenterFrustum,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      OrthographicFrustum_default = OrthographicFrustum;
    }
  });

  // packages/engine/Source/Core/PerspectiveOffCenterFrustum.js
  function PerspectiveOffCenterFrustum(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this.left = options.left;
    this._left = void 0;
    this.right = options.right;
    this._right = void 0;
    this.top = options.top;
    this._top = void 0;
    this.bottom = options.bottom;
    this._bottom = void 0;
    this.near = defaultValue_default(options.near, 1);
    this._near = this.near;
    this.far = defaultValue_default(options.far, 5e8);
    this._far = this.far;
    this._cullingVolume = new CullingVolume_default();
    this._perspectiveMatrix = new Matrix4_default();
    this._infinitePerspective = new Matrix4_default();
  }
  function update3(frustum) {
    if (!defined_default(frustum.right) || !defined_default(frustum.left) || !defined_default(frustum.top) || !defined_default(frustum.bottom) || !defined_default(frustum.near) || !defined_default(frustum.far)) {
      throw new DeveloperError_default(
        "right, left, top, bottom, near, or far parameters are not set."
      );
    }
    const t = frustum.top;
    const b = frustum.bottom;
    const r = frustum.right;
    const l = frustum.left;
    const n = frustum.near;
    const f = frustum.far;
    if (t !== frustum._top || b !== frustum._bottom || l !== frustum._left || r !== frustum._right || n !== frustum._near || f !== frustum._far) {
      if (frustum.near <= 0 || frustum.near > frustum.far) {
        throw new DeveloperError_default(
          "near must be greater than zero and less than far."
        );
      }
      frustum._left = l;
      frustum._right = r;
      frustum._top = t;
      frustum._bottom = b;
      frustum._near = n;
      frustum._far = f;
      frustum._perspectiveMatrix = Matrix4_default.computePerspectiveOffCenter(
        l,
        r,
        b,
        t,
        n,
        f,
        frustum._perspectiveMatrix
      );
      frustum._infinitePerspective = Matrix4_default.computeInfinitePerspectiveOffCenter(
        l,
        r,
        b,
        t,
        n,
        frustum._infinitePerspective
      );
    }
  }
  var getPlanesRight2, getPlanesNearCenter2, getPlanesFarCenter, getPlanesNormal, PerspectiveOffCenterFrustum_default;
  var init_PerspectiveOffCenterFrustum = __esm({
    "packages/engine/Source/Core/PerspectiveOffCenterFrustum.js"() {
      init_Cartesian3();
      init_Cartesian4();
      init_CullingVolume();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      init_Matrix4();
      Object.defineProperties(PerspectiveOffCenterFrustum.prototype, {
        /**
         * Gets the perspective projection matrix computed from the view frustum.
         * @memberof PerspectiveOffCenterFrustum.prototype
         * @type {Matrix4}
         * @readonly
         *
         * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix
         */
        projectionMatrix: {
          get: function() {
            update3(this);
            return this._perspectiveMatrix;
          }
        },
        /**
         * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.
         * @memberof PerspectiveOffCenterFrustum.prototype
         * @type {Matrix4}
         * @readonly
         *
         * @see PerspectiveOffCenterFrustum#projectionMatrix
         */
        infiniteProjectionMatrix: {
          get: function() {
            update3(this);
            return this._infinitePerspective;
          }
        }
      });
      getPlanesRight2 = new Cartesian3_default();
      getPlanesNearCenter2 = new Cartesian3_default();
      getPlanesFarCenter = new Cartesian3_default();
      getPlanesNormal = new Cartesian3_default();
      PerspectiveOffCenterFrustum.prototype.computeCullingVolume = function(position, direction2, up) {
        if (!defined_default(position)) {
          throw new DeveloperError_default("position is required.");
        }
        if (!defined_default(direction2)) {
          throw new DeveloperError_default("direction is required.");
        }
        if (!defined_default(up)) {
          throw new DeveloperError_default("up is required.");
        }
        const planes = this._cullingVolume.planes;
        const t = this.top;
        const b = this.bottom;
        const r = this.right;
        const l = this.left;
        const n = this.near;
        const f = this.far;
        const right = Cartesian3_default.cross(direction2, up, getPlanesRight2);
        const nearCenter = getPlanesNearCenter2;
        Cartesian3_default.multiplyByScalar(direction2, n, nearCenter);
        Cartesian3_default.add(position, nearCenter, nearCenter);
        const farCenter = getPlanesFarCenter;
        Cartesian3_default.multiplyByScalar(direction2, f, farCenter);
        Cartesian3_default.add(position, farCenter, farCenter);
        const normal2 = getPlanesNormal;
        Cartesian3_default.multiplyByScalar(right, l, normal2);
        Cartesian3_default.add(nearCenter, normal2, normal2);
        Cartesian3_default.subtract(normal2, position, normal2);
        Cartesian3_default.normalize(normal2, normal2);
        Cartesian3_default.cross(normal2, up, normal2);
        Cartesian3_default.normalize(normal2, normal2);
        let plane = planes[0];
        if (!defined_default(plane)) {
          plane = planes[0] = new Cartesian4_default();
        }
        plane.x = normal2.x;
        plane.y = normal2.y;
        plane.z = normal2.z;
        plane.w = -Cartesian3_default.dot(normal2, position);
        Cartesian3_default.multiplyByScalar(right, r, normal2);
        Cartesian3_default.add(nearCenter, normal2, normal2);
        Cartesian3_default.subtract(normal2, position, normal2);
        Cartesian3_default.cross(up, normal2, normal2);
        Cartesian3_default.normalize(normal2, normal2);
        plane = planes[1];
        if (!defined_default(plane)) {
          plane = planes[1] = new Cartesian4_default();
        }
        plane.x = normal2.x;
        plane.y = normal2.y;
        plane.z = normal2.z;
        plane.w = -Cartesian3_default.dot(normal2, position);
        Cartesian3_default.multiplyByScalar(up, b, normal2);
        Cartesian3_default.add(nearCenter, normal2, normal2);
        Cartesian3_default.subtract(normal2, position, normal2);
        Cartesian3_default.cross(right, normal2, normal2);
        Cartesian3_default.normalize(normal2, normal2);
        plane = planes[2];
        if (!defined_default(plane)) {
          plane = planes[2] = new Cartesian4_default();
        }
        plane.x = normal2.x;
        plane.y = normal2.y;
        plane.z = normal2.z;
        plane.w = -Cartesian3_default.dot(normal2, position);
        Cartesian3_default.multiplyByScalar(up, t, normal2);
        Cartesian3_default.add(nearCenter, normal2, normal2);
        Cartesian3_default.subtract(normal2, position, normal2);
        Cartesian3_default.cross(normal2, right, normal2);
        Cartesian3_default.normalize(normal2, normal2);
        plane = planes[3];
        if (!defined_default(plane)) {
          plane = planes[3] = new Cartesian4_default();
        }
        plane.x = normal2.x;
        plane.y = normal2.y;
        plane.z = normal2.z;
        plane.w = -Cartesian3_default.dot(normal2, position);
        plane = planes[4];
        if (!defined_default(plane)) {
          plane = planes[4] = new Cartesian4_default();
        }
        plane.x = direction2.x;
        plane.y = direction2.y;
        plane.z = direction2.z;
        plane.w = -Cartesian3_default.dot(direction2, nearCenter);
        Cartesian3_default.negate(direction2, normal2);
        plane = planes[5];
        if (!defined_default(plane)) {
          plane = planes[5] = new Cartesian4_default();
        }
        plane.x = normal2.x;
        plane.y = normal2.y;
        plane.z = normal2.z;
        plane.w = -Cartesian3_default.dot(normal2, farCenter);
        return this._cullingVolume;
      };
      PerspectiveOffCenterFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {
        update3(this);
        if (!defined_default(drawingBufferWidth) || !defined_default(drawingBufferHeight)) {
          throw new DeveloperError_default(
            "Both drawingBufferWidth and drawingBufferHeight are required."
          );
        }
        if (drawingBufferWidth <= 0) {
          throw new DeveloperError_default("drawingBufferWidth must be greater than zero.");
        }
        if (drawingBufferHeight <= 0) {
          throw new DeveloperError_default("drawingBufferHeight must be greater than zero.");
        }
        if (!defined_default(distance)) {
          throw new DeveloperError_default("distance is required.");
        }
        if (!defined_default(pixelRatio)) {
          throw new DeveloperError_default("pixelRatio is required");
        }
        if (pixelRatio <= 0) {
          throw new DeveloperError_default("pixelRatio must be greater than zero.");
        }
        if (!defined_default(result)) {
          throw new DeveloperError_default("A result object is required.");
        }
        const inverseNear = 1 / this.near;
        let tanTheta = this.top * inverseNear;
        const pixelHeight = 2 * pixelRatio * distance * tanTheta / drawingBufferHeight;
        tanTheta = this.right * inverseNear;
        const pixelWidth = 2 * pixelRatio * distance * tanTheta / drawingBufferWidth;
        result.x = pixelWidth;
        result.y = pixelHeight;
        return result;
      };
      PerspectiveOffCenterFrustum.prototype.clone = function(result) {
        if (!defined_default(result)) {
          result = new PerspectiveOffCenterFrustum();
        }
        result.right = this.right;
        result.left = this.left;
        result.top = this.top;
        result.bottom = this.bottom;
        result.near = this.near;
        result.far = this.far;
        result._left = void 0;
        result._right = void 0;
        result._top = void 0;
        result._bottom = void 0;
        result._near = void 0;
        result._far = void 0;
        return result;
      };
      PerspectiveOffCenterFrustum.prototype.equals = function(other) {
        return defined_default(other) && other instanceof PerspectiveOffCenterFrustum && this.right === other.right && this.left === other.left && this.top === other.top && this.bottom === other.bottom && this.near === other.near && this.far === other.far;
      };
      PerspectiveOffCenterFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {
        return other === this || defined_default(other) && other instanceof PerspectiveOffCenterFrustum && Math_default.equalsEpsilon(
          this.right,
          other.right,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.left,
          other.left,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.top,
          other.top,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.bottom,
          other.bottom,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.near,
          other.near,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.far,
          other.far,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      PerspectiveOffCenterFrustum_default = PerspectiveOffCenterFrustum;
    }
  });

  // packages/engine/Source/Core/PerspectiveFrustum.js
  function PerspectiveFrustum(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this._offCenterFrustum = new PerspectiveOffCenterFrustum_default();
    this.fov = options.fov;
    this._fov = void 0;
    this._fovy = void 0;
    this._sseDenominator = void 0;
    this.aspectRatio = options.aspectRatio;
    this._aspectRatio = void 0;
    this.near = defaultValue_default(options.near, 1);
    this._near = this.near;
    this.far = defaultValue_default(options.far, 5e8);
    this._far = this.far;
    this.xOffset = defaultValue_default(options.xOffset, 0);
    this._xOffset = this.xOffset;
    this.yOffset = defaultValue_default(options.yOffset, 0);
    this._yOffset = this.yOffset;
  }
  function update4(frustum) {
    if (!defined_default(frustum.fov) || !defined_default(frustum.aspectRatio) || !defined_default(frustum.near) || !defined_default(frustum.far)) {
      throw new DeveloperError_default(
        "fov, aspectRatio, near, or far parameters are not set."
      );
    }
    const f = frustum._offCenterFrustum;
    if (frustum.fov !== frustum._fov || frustum.aspectRatio !== frustum._aspectRatio || frustum.near !== frustum._near || frustum.far !== frustum._far || frustum.xOffset !== frustum._xOffset || frustum.yOffset !== frustum._yOffset) {
      if (frustum.fov < 0 || frustum.fov >= Math.PI) {
        throw new DeveloperError_default("fov must be in the range [0, PI).");
      }
      if (frustum.aspectRatio < 0) {
        throw new DeveloperError_default("aspectRatio must be positive.");
      }
      if (frustum.near < 0 || frustum.near > frustum.far) {
        throw new DeveloperError_default(
          "near must be greater than zero and less than far."
        );
      }
      frustum._aspectRatio = frustum.aspectRatio;
      frustum._fov = frustum.fov;
      frustum._fovy = frustum.aspectRatio <= 1 ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2;
      frustum._near = frustum.near;
      frustum._far = frustum.far;
      frustum._sseDenominator = 2 * Math.tan(0.5 * frustum._fovy);
      frustum._xOffset = frustum.xOffset;
      frustum._yOffset = frustum.yOffset;
      f.top = frustum.near * Math.tan(0.5 * frustum._fovy);
      f.bottom = -f.top;
      f.right = frustum.aspectRatio * f.top;
      f.left = -f.right;
      f.near = frustum.near;
      f.far = frustum.far;
      f.right += frustum.xOffset;
      f.left += frustum.xOffset;
      f.top += frustum.yOffset;
      f.bottom += frustum.yOffset;
    }
  }
  var PerspectiveFrustum_default;
  var init_PerspectiveFrustum = __esm({
    "packages/engine/Source/Core/PerspectiveFrustum.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Math();
      init_PerspectiveOffCenterFrustum();
      PerspectiveFrustum.packedLength = 6;
      PerspectiveFrustum.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.fov;
        array[startingIndex++] = value.aspectRatio;
        array[startingIndex++] = value.near;
        array[startingIndex++] = value.far;
        array[startingIndex++] = value.xOffset;
        array[startingIndex] = value.yOffset;
        return array;
      };
      PerspectiveFrustum.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new PerspectiveFrustum();
        }
        result.fov = array[startingIndex++];
        result.aspectRatio = array[startingIndex++];
        result.near = array[startingIndex++];
        result.far = array[startingIndex++];
        result.xOffset = array[startingIndex++];
        result.yOffset = array[startingIndex];
        return result;
      };
      Object.defineProperties(PerspectiveFrustum.prototype, {
        /**
         * Gets the perspective projection matrix computed from the view frustum.
         * @memberof PerspectiveFrustum.prototype
         * @type {Matrix4}
         * @readonly
         *
         * @see PerspectiveFrustum#infiniteProjectionMatrix
         */
        projectionMatrix: {
          get: function() {
            update4(this);
            return this._offCenterFrustum.projectionMatrix;
          }
        },
        /**
         * The perspective projection matrix computed from the view frustum with an infinite far plane.
         * @memberof PerspectiveFrustum.prototype
         * @type {Matrix4}
         * @readonly
         *
         * @see PerspectiveFrustum#projectionMatrix
         */
        infiniteProjectionMatrix: {
          get: function() {
            update4(this);
            return this._offCenterFrustum.infiniteProjectionMatrix;
          }
        },
        /**
         * Gets the angle of the vertical field of view, in radians.
         * @memberof PerspectiveFrustum.prototype
         * @type {number}
         * @readonly
         * @default undefined
         */
        fovy: {
          get: function() {
            update4(this);
            return this._fovy;
          }
        },
        /**
         * @readonly
         * @private
         */
        sseDenominator: {
          get: function() {
            update4(this);
            return this._sseDenominator;
          }
        },
        /**
         * Gets the orthographic projection matrix computed from the view frustum.
         * @memberof PerspectiveFrustum.prototype
         * @type {PerspectiveOffCenterFrustum}
         * @readonly
         * @private
         */
        offCenterFrustum: {
          get: function() {
            update4(this);
            return this._offCenterFrustum;
          }
        }
      });
      PerspectiveFrustum.prototype.computeCullingVolume = function(position, direction2, up) {
        update4(this);
        return this._offCenterFrustum.computeCullingVolume(position, direction2, up);
      };
      PerspectiveFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {
        update4(this);
        return this._offCenterFrustum.getPixelDimensions(
          drawingBufferWidth,
          drawingBufferHeight,
          distance,
          pixelRatio,
          result
        );
      };
      PerspectiveFrustum.prototype.clone = function(result) {
        if (!defined_default(result)) {
          result = new PerspectiveFrustum();
        }
        result.aspectRatio = this.aspectRatio;
        result.fov = this.fov;
        result.near = this.near;
        result.far = this.far;
        result._aspectRatio = void 0;
        result._fov = void 0;
        result._near = void 0;
        result._far = void 0;
        this._offCenterFrustum.clone(result._offCenterFrustum);
        return result;
      };
      PerspectiveFrustum.prototype.equals = function(other) {
        if (!defined_default(other) || !(other instanceof PerspectiveFrustum)) {
          return false;
        }
        update4(this);
        update4(other);
        return this.fov === other.fov && this.aspectRatio === other.aspectRatio && this._offCenterFrustum.equals(other._offCenterFrustum);
      };
      PerspectiveFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {
        if (!defined_default(other) || !(other instanceof PerspectiveFrustum)) {
          return false;
        }
        update4(this);
        update4(other);
        return Math_default.equalsEpsilon(
          this.fov,
          other.fov,
          relativeEpsilon,
          absoluteEpsilon
        ) && Math_default.equalsEpsilon(
          this.aspectRatio,
          other.aspectRatio,
          relativeEpsilon,
          absoluteEpsilon
        ) && this._offCenterFrustum.equalsEpsilon(
          other._offCenterFrustum,
          relativeEpsilon,
          absoluteEpsilon
        );
      };
      PerspectiveFrustum_default = PerspectiveFrustum;
    }
  });

  // packages/engine/Source/Core/FrustumGeometry.js
  function FrustumGeometry(options) {
    Check_default.typeOf.object("options", options);
    Check_default.typeOf.object("options.frustum", options.frustum);
    Check_default.typeOf.object("options.origin", options.origin);
    Check_default.typeOf.object("options.orientation", options.orientation);
    const frustum = options.frustum;
    const orientation = options.orientation;
    const origin = options.origin;
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    const drawNearPlane = defaultValue_default(options._drawNearPlane, true);
    let frustumType;
    let frustumPackedLength;
    if (frustum instanceof PerspectiveFrustum_default) {
      frustumType = PERSPECTIVE;
      frustumPackedLength = PerspectiveFrustum_default.packedLength;
    } else if (frustum instanceof OrthographicFrustum_default) {
      frustumType = ORTHOGRAPHIC;
      frustumPackedLength = OrthographicFrustum_default.packedLength;
    }
    this._frustumType = frustumType;
    this._frustum = frustum.clone();
    this._origin = Cartesian3_default.clone(origin);
    this._orientation = Quaternion_default.clone(orientation);
    this._drawNearPlane = drawNearPlane;
    this._vertexFormat = vertexFormat;
    this._workerName = "createFrustumGeometry";
    this.packedLength = 2 + frustumPackedLength + Cartesian3_default.packedLength + Quaternion_default.packedLength + VertexFormat_default.packedLength;
  }
  function getAttributes(offset, normals, tangents, bitangents, st, normal2, tangent, bitangent) {
    const stOffset = offset / 3 * 2;
    for (let i = 0; i < 4; ++i) {
      if (defined_default(normals)) {
        normals[offset] = normal2.x;
        normals[offset + 1] = normal2.y;
        normals[offset + 2] = normal2.z;
      }
      if (defined_default(tangents)) {
        tangents[offset] = tangent.x;
        tangents[offset + 1] = tangent.y;
        tangents[offset + 2] = tangent.z;
      }
      if (defined_default(bitangents)) {
        bitangents[offset] = bitangent.x;
        bitangents[offset + 1] = bitangent.y;
        bitangents[offset + 2] = bitangent.z;
      }
      offset += 3;
    }
    st[stOffset] = 0;
    st[stOffset + 1] = 0;
    st[stOffset + 2] = 1;
    st[stOffset + 3] = 0;
    st[stOffset + 4] = 1;
    st[stOffset + 5] = 1;
    st[stOffset + 6] = 0;
    st[stOffset + 7] = 1;
  }
  var PERSPECTIVE, ORTHOGRAPHIC, scratchPackPerspective, scratchPackOrthographic, scratchPackQuaternion, scratchPackorigin, scratchVertexFormat7, scratchRotationMatrix, scratchViewMatrix, scratchInverseMatrix, scratchXDirection, scratchYDirection, scratchZDirection, scratchNegativeX, scratchNegativeY, scratchNegativeZ, frustumSplits, frustumCornersNDC, scratchFrustumCorners, FrustumGeometry_default;
  var init_FrustumGeometry = __esm({
    "packages/engine/Source/Core/FrustumGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_Cartesian4();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_Matrix3();
      init_Matrix4();
      init_OrthographicFrustum();
      init_PerspectiveFrustum();
      init_PrimitiveType();
      init_Quaternion();
      init_VertexFormat();
      PERSPECTIVE = 0;
      ORTHOGRAPHIC = 1;
      FrustumGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const frustumType = value._frustumType;
        const frustum = value._frustum;
        array[startingIndex++] = frustumType;
        if (frustumType === PERSPECTIVE) {
          PerspectiveFrustum_default.pack(frustum, array, startingIndex);
          startingIndex += PerspectiveFrustum_default.packedLength;
        } else {
          OrthographicFrustum_default.pack(frustum, array, startingIndex);
          startingIndex += OrthographicFrustum_default.packedLength;
        }
        Cartesian3_default.pack(value._origin, array, startingIndex);
        startingIndex += Cartesian3_default.packedLength;
        Quaternion_default.pack(value._orientation, array, startingIndex);
        startingIndex += Quaternion_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex] = value._drawNearPlane ? 1 : 0;
        return array;
      };
      scratchPackPerspective = new PerspectiveFrustum_default();
      scratchPackOrthographic = new OrthographicFrustum_default();
      scratchPackQuaternion = new Quaternion_default();
      scratchPackorigin = new Cartesian3_default();
      scratchVertexFormat7 = new VertexFormat_default();
      FrustumGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const frustumType = array[startingIndex++];
        let frustum;
        if (frustumType === PERSPECTIVE) {
          frustum = PerspectiveFrustum_default.unpack(
            array,
            startingIndex,
            scratchPackPerspective
          );
          startingIndex += PerspectiveFrustum_default.packedLength;
        } else {
          frustum = OrthographicFrustum_default.unpack(
            array,
            startingIndex,
            scratchPackOrthographic
          );
          startingIndex += OrthographicFrustum_default.packedLength;
        }
        const origin = Cartesian3_default.unpack(array, startingIndex, scratchPackorigin);
        startingIndex += Cartesian3_default.packedLength;
        const orientation = Quaternion_default.unpack(
          array,
          startingIndex,
          scratchPackQuaternion
        );
        startingIndex += Quaternion_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat7
        );
        startingIndex += VertexFormat_default.packedLength;
        const drawNearPlane = array[startingIndex] === 1;
        if (!defined_default(result)) {
          return new FrustumGeometry({
            frustum,
            origin,
            orientation,
            vertexFormat,
            _drawNearPlane: drawNearPlane
          });
        }
        const frustumResult = frustumType === result._frustumType ? result._frustum : void 0;
        result._frustum = frustum.clone(frustumResult);
        result._frustumType = frustumType;
        result._origin = Cartesian3_default.clone(origin, result._origin);
        result._orientation = Quaternion_default.clone(orientation, result._orientation);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._drawNearPlane = drawNearPlane;
        return result;
      };
      scratchRotationMatrix = new Matrix3_default();
      scratchViewMatrix = new Matrix4_default();
      scratchInverseMatrix = new Matrix4_default();
      scratchXDirection = new Cartesian3_default();
      scratchYDirection = new Cartesian3_default();
      scratchZDirection = new Cartesian3_default();
      scratchNegativeX = new Cartesian3_default();
      scratchNegativeY = new Cartesian3_default();
      scratchNegativeZ = new Cartesian3_default();
      frustumSplits = new Array(3);
      frustumCornersNDC = new Array(4);
      frustumCornersNDC[0] = new Cartesian4_default(-1, -1, 1, 1);
      frustumCornersNDC[1] = new Cartesian4_default(1, -1, 1, 1);
      frustumCornersNDC[2] = new Cartesian4_default(1, 1, 1, 1);
      frustumCornersNDC[3] = new Cartesian4_default(-1, 1, 1, 1);
      scratchFrustumCorners = new Array(4);
      for (let i = 0; i < 4; ++i) {
        scratchFrustumCorners[i] = new Cartesian4_default();
      }
      FrustumGeometry._computeNearFarPlanes = function(origin, orientation, frustumType, frustum, positions, xDirection, yDirection, zDirection) {
        const rotationMatrix = Matrix3_default.fromQuaternion(
          orientation,
          scratchRotationMatrix
        );
        let x = defaultValue_default(xDirection, scratchXDirection);
        let y = defaultValue_default(yDirection, scratchYDirection);
        let z = defaultValue_default(zDirection, scratchZDirection);
        x = Matrix3_default.getColumn(rotationMatrix, 0, x);
        y = Matrix3_default.getColumn(rotationMatrix, 1, y);
        z = Matrix3_default.getColumn(rotationMatrix, 2, z);
        Cartesian3_default.normalize(x, x);
        Cartesian3_default.normalize(y, y);
        Cartesian3_default.normalize(z, z);
        Cartesian3_default.negate(x, x);
        const view = Matrix4_default.computeView(origin, z, y, x, scratchViewMatrix);
        let inverseView;
        let inverseViewProjection;
        const projection = frustum.projectionMatrix;
        if (frustumType === PERSPECTIVE) {
          const viewProjection = Matrix4_default.multiply(
            projection,
            view,
            scratchInverseMatrix
          );
          inverseViewProjection = Matrix4_default.inverse(
            viewProjection,
            scratchInverseMatrix
          );
        } else {
          inverseView = Matrix4_default.inverseTransformation(view, scratchInverseMatrix);
        }
        if (defined_default(inverseViewProjection)) {
          frustumSplits[0] = frustum.near;
          frustumSplits[1] = frustum.far;
        } else {
          frustumSplits[0] = 0;
          frustumSplits[1] = frustum.near;
          frustumSplits[2] = frustum.far;
        }
        for (let i = 0; i < 2; ++i) {
          for (let j = 0; j < 4; ++j) {
            let corner = Cartesian4_default.clone(
              frustumCornersNDC[j],
              scratchFrustumCorners[j]
            );
            if (!defined_default(inverseViewProjection)) {
              const offCenterFrustum = frustum.offCenterFrustum;
              if (defined_default(offCenterFrustum)) {
                frustum = offCenterFrustum;
              }
              const near = frustumSplits[i];
              const far = frustumSplits[i + 1];
              corner.x = (corner.x * (frustum.right - frustum.left) + frustum.left + frustum.right) * 0.5;
              corner.y = (corner.y * (frustum.top - frustum.bottom) + frustum.bottom + frustum.top) * 0.5;
              corner.z = (corner.z * (near - far) - near - far) * 0.5;
              corner.w = 1;
              Matrix4_default.multiplyByVector(inverseView, corner, corner);
            } else {
              corner = Matrix4_default.multiplyByVector(
                inverseViewProjection,
                corner,
                corner
              );
              const w = 1 / corner.w;
              Cartesian3_default.multiplyByScalar(corner, w, corner);
              Cartesian3_default.subtract(corner, origin, corner);
              Cartesian3_default.normalize(corner, corner);
              const fac = Cartesian3_default.dot(z, corner);
              Cartesian3_default.multiplyByScalar(corner, frustumSplits[i] / fac, corner);
              Cartesian3_default.add(corner, origin, corner);
            }
            positions[12 * i + j * 3] = corner.x;
            positions[12 * i + j * 3 + 1] = corner.y;
            positions[12 * i + j * 3 + 2] = corner.z;
          }
        }
      };
      FrustumGeometry.createGeometry = function(frustumGeometry) {
        const frustumType = frustumGeometry._frustumType;
        const frustum = frustumGeometry._frustum;
        const origin = frustumGeometry._origin;
        const orientation = frustumGeometry._orientation;
        const drawNearPlane = frustumGeometry._drawNearPlane;
        const vertexFormat = frustumGeometry._vertexFormat;
        const numberOfPlanes = drawNearPlane ? 6 : 5;
        let positions = new Float64Array(3 * 4 * 6);
        FrustumGeometry._computeNearFarPlanes(
          origin,
          orientation,
          frustumType,
          frustum,
          positions
        );
        let offset = 3 * 4 * 2;
        positions[offset] = positions[3 * 4];
        positions[offset + 1] = positions[3 * 4 + 1];
        positions[offset + 2] = positions[3 * 4 + 2];
        positions[offset + 3] = positions[0];
        positions[offset + 4] = positions[1];
        positions[offset + 5] = positions[2];
        positions[offset + 6] = positions[3 * 3];
        positions[offset + 7] = positions[3 * 3 + 1];
        positions[offset + 8] = positions[3 * 3 + 2];
        positions[offset + 9] = positions[3 * 7];
        positions[offset + 10] = positions[3 * 7 + 1];
        positions[offset + 11] = positions[3 * 7 + 2];
        offset += 3 * 4;
        positions[offset] = positions[3 * 5];
        positions[offset + 1] = positions[3 * 5 + 1];
        positions[offset + 2] = positions[3 * 5 + 2];
        positions[offset + 3] = positions[3];
        positions[offset + 4] = positions[3 + 1];
        positions[offset + 5] = positions[3 + 2];
        positions[offset + 6] = positions[0];
        positions[offset + 7] = positions[1];
        positions[offset + 8] = positions[2];
        positions[offset + 9] = positions[3 * 4];
        positions[offset + 10] = positions[3 * 4 + 1];
        positions[offset + 11] = positions[3 * 4 + 2];
        offset += 3 * 4;
        positions[offset] = positions[3];
        positions[offset + 1] = positions[3 + 1];
        positions[offset + 2] = positions[3 + 2];
        positions[offset + 3] = positions[3 * 5];
        positions[offset + 4] = positions[3 * 5 + 1];
        positions[offset + 5] = positions[3 * 5 + 2];
        positions[offset + 6] = positions[3 * 6];
        positions[offset + 7] = positions[3 * 6 + 1];
        positions[offset + 8] = positions[3 * 6 + 2];
        positions[offset + 9] = positions[3 * 2];
        positions[offset + 10] = positions[3 * 2 + 1];
        positions[offset + 11] = positions[3 * 2 + 2];
        offset += 3 * 4;
        positions[offset] = positions[3 * 2];
        positions[offset + 1] = positions[3 * 2 + 1];
        positions[offset + 2] = positions[3 * 2 + 2];
        positions[offset + 3] = positions[3 * 6];
        positions[offset + 4] = positions[3 * 6 + 1];
        positions[offset + 5] = positions[3 * 6 + 2];
        positions[offset + 6] = positions[3 * 7];
        positions[offset + 7] = positions[3 * 7 + 1];
        positions[offset + 8] = positions[3 * 7 + 2];
        positions[offset + 9] = positions[3 * 3];
        positions[offset + 10] = positions[3 * 3 + 1];
        positions[offset + 11] = positions[3 * 3 + 2];
        if (!drawNearPlane) {
          positions = positions.subarray(3 * 4);
        }
        const attributes = new GeometryAttributes_default({
          position: new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          })
        });
        if (defined_default(vertexFormat.normal) || defined_default(vertexFormat.tangent) || defined_default(vertexFormat.bitangent) || defined_default(vertexFormat.st)) {
          const normals = defined_default(vertexFormat.normal) ? new Float32Array(3 * 4 * numberOfPlanes) : void 0;
          const tangents = defined_default(vertexFormat.tangent) ? new Float32Array(3 * 4 * numberOfPlanes) : void 0;
          const bitangents = defined_default(vertexFormat.bitangent) ? new Float32Array(3 * 4 * numberOfPlanes) : void 0;
          const st = defined_default(vertexFormat.st) ? new Float32Array(2 * 4 * numberOfPlanes) : void 0;
          const x = scratchXDirection;
          const y = scratchYDirection;
          const z = scratchZDirection;
          const negativeX2 = Cartesian3_default.negate(x, scratchNegativeX);
          const negativeY = Cartesian3_default.negate(y, scratchNegativeY);
          const negativeZ = Cartesian3_default.negate(z, scratchNegativeZ);
          offset = 0;
          if (drawNearPlane) {
            getAttributes(offset, normals, tangents, bitangents, st, negativeZ, x, y);
            offset += 3 * 4;
          }
          getAttributes(offset, normals, tangents, bitangents, st, z, negativeX2, y);
          offset += 3 * 4;
          getAttributes(
            offset,
            normals,
            tangents,
            bitangents,
            st,
            negativeX2,
            negativeZ,
            y
          );
          offset += 3 * 4;
          getAttributes(
            offset,
            normals,
            tangents,
            bitangents,
            st,
            negativeY,
            negativeZ,
            negativeX2
          );
          offset += 3 * 4;
          getAttributes(offset, normals, tangents, bitangents, st, x, z, y);
          offset += 3 * 4;
          getAttributes(offset, normals, tangents, bitangents, st, y, z, negativeX2);
          if (defined_default(normals)) {
            attributes.normal = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: normals
            });
          }
          if (defined_default(tangents)) {
            attributes.tangent = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: tangents
            });
          }
          if (defined_default(bitangents)) {
            attributes.bitangent = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: bitangents
            });
          }
          if (defined_default(st)) {
            attributes.st = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 2,
              values: st
            });
          }
        }
        const indices = new Uint16Array(6 * numberOfPlanes);
        for (let i = 0; i < numberOfPlanes; ++i) {
          const indexOffset = i * 6;
          const index = i * 4;
          indices[indexOffset] = index;
          indices[indexOffset + 1] = index + 1;
          indices[indexOffset + 2] = index + 2;
          indices[indexOffset + 3] = index;
          indices[indexOffset + 4] = index + 2;
          indices[indexOffset + 5] = index + 3;
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere: BoundingSphere_default.fromVertices(positions)
        });
      };
      FrustumGeometry_default = FrustumGeometry;
    }
  });

  // packages/engine/Source/Workers/createFrustumGeometry.js
  var createFrustumGeometry_exports = {};
  __export(createFrustumGeometry_exports, {
    default: () => createFrustumGeometry_default
  });
  function createFrustumGeometry(frustumGeometry, offset) {
    if (defined_default(offset)) {
      frustumGeometry = FrustumGeometry_default.unpack(frustumGeometry, offset);
    }
    return FrustumGeometry_default.createGeometry(frustumGeometry);
  }
  var createFrustumGeometry_default;
  var init_createFrustumGeometry = __esm({
    "packages/engine/Source/Workers/createFrustumGeometry.js"() {
      init_defined();
      init_FrustumGeometry();
      createFrustumGeometry_default = createFrustumGeometry;
    }
  });

  // packages/engine/Source/Core/FrustumOutlineGeometry.js
  function FrustumOutlineGeometry(options) {
    Check_default.typeOf.object("options", options);
    Check_default.typeOf.object("options.frustum", options.frustum);
    Check_default.typeOf.object("options.origin", options.origin);
    Check_default.typeOf.object("options.orientation", options.orientation);
    const frustum = options.frustum;
    const orientation = options.orientation;
    const origin = options.origin;
    const drawNearPlane = defaultValue_default(options._drawNearPlane, true);
    let frustumType;
    let frustumPackedLength;
    if (frustum instanceof PerspectiveFrustum_default) {
      frustumType = PERSPECTIVE2;
      frustumPackedLength = PerspectiveFrustum_default.packedLength;
    } else if (frustum instanceof OrthographicFrustum_default) {
      frustumType = ORTHOGRAPHIC2;
      frustumPackedLength = OrthographicFrustum_default.packedLength;
    }
    this._frustumType = frustumType;
    this._frustum = frustum.clone();
    this._origin = Cartesian3_default.clone(origin);
    this._orientation = Quaternion_default.clone(orientation);
    this._drawNearPlane = drawNearPlane;
    this._workerName = "createFrustumOutlineGeometry";
    this.packedLength = 2 + frustumPackedLength + Cartesian3_default.packedLength + Quaternion_default.packedLength;
  }
  var PERSPECTIVE2, ORTHOGRAPHIC2, scratchPackPerspective2, scratchPackOrthographic2, scratchPackQuaternion2, scratchPackorigin2, FrustumOutlineGeometry_default;
  var init_FrustumOutlineGeometry = __esm({
    "packages/engine/Source/Core/FrustumOutlineGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_FrustumGeometry();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_OrthographicFrustum();
      init_PerspectiveFrustum();
      init_PrimitiveType();
      init_Quaternion();
      PERSPECTIVE2 = 0;
      ORTHOGRAPHIC2 = 1;
      FrustumOutlineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const frustumType = value._frustumType;
        const frustum = value._frustum;
        array[startingIndex++] = frustumType;
        if (frustumType === PERSPECTIVE2) {
          PerspectiveFrustum_default.pack(frustum, array, startingIndex);
          startingIndex += PerspectiveFrustum_default.packedLength;
        } else {
          OrthographicFrustum_default.pack(frustum, array, startingIndex);
          startingIndex += OrthographicFrustum_default.packedLength;
        }
        Cartesian3_default.pack(value._origin, array, startingIndex);
        startingIndex += Cartesian3_default.packedLength;
        Quaternion_default.pack(value._orientation, array, startingIndex);
        startingIndex += Quaternion_default.packedLength;
        array[startingIndex] = value._drawNearPlane ? 1 : 0;
        return array;
      };
      scratchPackPerspective2 = new PerspectiveFrustum_default();
      scratchPackOrthographic2 = new OrthographicFrustum_default();
      scratchPackQuaternion2 = new Quaternion_default();
      scratchPackorigin2 = new Cartesian3_default();
      FrustumOutlineGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const frustumType = array[startingIndex++];
        let frustum;
        if (frustumType === PERSPECTIVE2) {
          frustum = PerspectiveFrustum_default.unpack(
            array,
            startingIndex,
            scratchPackPerspective2
          );
          startingIndex += PerspectiveFrustum_default.packedLength;
        } else {
          frustum = OrthographicFrustum_default.unpack(
            array,
            startingIndex,
            scratchPackOrthographic2
          );
          startingIndex += OrthographicFrustum_default.packedLength;
        }
        const origin = Cartesian3_default.unpack(array, startingIndex, scratchPackorigin2);
        startingIndex += Cartesian3_default.packedLength;
        const orientation = Quaternion_default.unpack(
          array,
          startingIndex,
          scratchPackQuaternion2
        );
        startingIndex += Quaternion_default.packedLength;
        const drawNearPlane = array[startingIndex] === 1;
        if (!defined_default(result)) {
          return new FrustumOutlineGeometry({
            frustum,
            origin,
            orientation,
            _drawNearPlane: drawNearPlane
          });
        }
        const frustumResult = frustumType === result._frustumType ? result._frustum : void 0;
        result._frustum = frustum.clone(frustumResult);
        result._frustumType = frustumType;
        result._origin = Cartesian3_default.clone(origin, result._origin);
        result._orientation = Quaternion_default.clone(orientation, result._orientation);
        result._drawNearPlane = drawNearPlane;
        return result;
      };
      FrustumOutlineGeometry.createGeometry = function(frustumGeometry) {
        const frustumType = frustumGeometry._frustumType;
        const frustum = frustumGeometry._frustum;
        const origin = frustumGeometry._origin;
        const orientation = frustumGeometry._orientation;
        const drawNearPlane = frustumGeometry._drawNearPlane;
        const positions = new Float64Array(3 * 4 * 2);
        FrustumGeometry_default._computeNearFarPlanes(
          origin,
          orientation,
          frustumType,
          frustum,
          positions
        );
        const attributes = new GeometryAttributes_default({
          position: new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          })
        });
        let offset;
        let index;
        const numberOfPlanes = drawNearPlane ? 2 : 1;
        const indices = new Uint16Array(8 * (numberOfPlanes + 1));
        let i = drawNearPlane ? 0 : 1;
        for (; i < 2; ++i) {
          offset = drawNearPlane ? i * 8 : 0;
          index = i * 4;
          indices[offset] = index;
          indices[offset + 1] = index + 1;
          indices[offset + 2] = index + 1;
          indices[offset + 3] = index + 2;
          indices[offset + 4] = index + 2;
          indices[offset + 5] = index + 3;
          indices[offset + 6] = index + 3;
          indices[offset + 7] = index;
        }
        for (i = 0; i < 2; ++i) {
          offset = (numberOfPlanes + i) * 8;
          index = i * 4;
          indices[offset] = index;
          indices[offset + 1] = index + 4;
          indices[offset + 2] = index + 1;
          indices[offset + 3] = index + 5;
          indices[offset + 4] = index + 2;
          indices[offset + 5] = index + 6;
          indices[offset + 6] = index + 3;
          indices[offset + 7] = index + 7;
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere: BoundingSphere_default.fromVertices(positions)
        });
      };
      FrustumOutlineGeometry_default = FrustumOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createFrustumOutlineGeometry.js
  var createFrustumOutlineGeometry_exports = {};
  __export(createFrustumOutlineGeometry_exports, {
    default: () => createFrustumOutlineGeometry_default
  });
  function createFrustumOutlineGeometry(frustumGeometry, offset) {
    if (defined_default(offset)) {
      frustumGeometry = FrustumOutlineGeometry_default.unpack(frustumGeometry, offset);
    }
    return FrustumOutlineGeometry_default.createGeometry(frustumGeometry);
  }
  var createFrustumOutlineGeometry_default;
  var init_createFrustumOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createFrustumOutlineGeometry.js"() {
      init_defined();
      init_FrustumOutlineGeometry();
      createFrustumOutlineGeometry_default = createFrustumOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/GeographicTilingScheme.js
  function GeographicTilingScheme(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    this._ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    this._rectangle = defaultValue_default(options.rectangle, Rectangle_default.MAX_VALUE);
    this._projection = new GeographicProjection_default(this._ellipsoid);
    this._numberOfLevelZeroTilesX = defaultValue_default(
      options.numberOfLevelZeroTilesX,
      2
    );
    this._numberOfLevelZeroTilesY = defaultValue_default(
      options.numberOfLevelZeroTilesY,
      1
    );
  }
  var GeographicTilingScheme_default;
  var init_GeographicTilingScheme = __esm({
    "packages/engine/Source/Core/GeographicTilingScheme.js"() {
      init_Cartesian2();
      init_Check();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_GeographicProjection();
      init_Math();
      init_Rectangle();
      Object.defineProperties(GeographicTilingScheme.prototype, {
        /**
         * Gets the ellipsoid that is tiled by this tiling scheme.
         * @memberof GeographicTilingScheme.prototype
         * @type {Ellipsoid}
         */
        ellipsoid: {
          get: function() {
            return this._ellipsoid;
          }
        },
        /**
         * Gets the rectangle, in radians, covered by this tiling scheme.
         * @memberof GeographicTilingScheme.prototype
         * @type {Rectangle}
         */
        rectangle: {
          get: function() {
            return this._rectangle;
          }
        },
        /**
         * Gets the map projection used by this tiling scheme.
         * @memberof GeographicTilingScheme.prototype
         * @type {MapProjection}
         */
        projection: {
          get: function() {
            return this._projection;
          }
        }
      });
      GeographicTilingScheme.prototype.getNumberOfXTilesAtLevel = function(level) {
        return this._numberOfLevelZeroTilesX << level;
      };
      GeographicTilingScheme.prototype.getNumberOfYTilesAtLevel = function(level) {
        return this._numberOfLevelZeroTilesY << level;
      };
      GeographicTilingScheme.prototype.rectangleToNativeRectangle = function(rectangle, result) {
        Check_default.defined("rectangle", rectangle);
        const west = Math_default.toDegrees(rectangle.west);
        const south = Math_default.toDegrees(rectangle.south);
        const east = Math_default.toDegrees(rectangle.east);
        const north = Math_default.toDegrees(rectangle.north);
        if (!defined_default(result)) {
          return new Rectangle_default(west, south, east, north);
        }
        result.west = west;
        result.south = south;
        result.east = east;
        result.north = north;
        return result;
      };
      GeographicTilingScheme.prototype.tileXYToNativeRectangle = function(x, y, level, result) {
        const rectangleRadians = this.tileXYToRectangle(x, y, level, result);
        rectangleRadians.west = Math_default.toDegrees(rectangleRadians.west);
        rectangleRadians.south = Math_default.toDegrees(rectangleRadians.south);
        rectangleRadians.east = Math_default.toDegrees(rectangleRadians.east);
        rectangleRadians.north = Math_default.toDegrees(rectangleRadians.north);
        return rectangleRadians;
      };
      GeographicTilingScheme.prototype.tileXYToRectangle = function(x, y, level, result) {
        const rectangle = this._rectangle;
        const xTiles = this.getNumberOfXTilesAtLevel(level);
        const yTiles = this.getNumberOfYTilesAtLevel(level);
        const xTileWidth = rectangle.width / xTiles;
        const west = x * xTileWidth + rectangle.west;
        const east = (x + 1) * xTileWidth + rectangle.west;
        const yTileHeight = rectangle.height / yTiles;
        const north = rectangle.north - y * yTileHeight;
        const south = rectangle.north - (y + 1) * yTileHeight;
        if (!defined_default(result)) {
          result = new Rectangle_default(west, south, east, north);
        }
        result.west = west;
        result.south = south;
        result.east = east;
        result.north = north;
        return result;
      };
      GeographicTilingScheme.prototype.positionToTileXY = function(position, level, result) {
        const rectangle = this._rectangle;
        if (!Rectangle_default.contains(rectangle, position)) {
          return void 0;
        }
        const xTiles = this.getNumberOfXTilesAtLevel(level);
        const yTiles = this.getNumberOfYTilesAtLevel(level);
        const xTileWidth = rectangle.width / xTiles;
        const yTileHeight = rectangle.height / yTiles;
        let longitude = position.longitude;
        if (rectangle.east < rectangle.west) {
          longitude += Math_default.TWO_PI;
        }
        let xTileCoordinate = (longitude - rectangle.west) / xTileWidth | 0;
        if (xTileCoordinate >= xTiles) {
          xTileCoordinate = xTiles - 1;
        }
        let yTileCoordinate = (rectangle.north - position.latitude) / yTileHeight | 0;
        if (yTileCoordinate >= yTiles) {
          yTileCoordinate = yTiles - 1;
        }
        if (!defined_default(result)) {
          return new Cartesian2_default(xTileCoordinate, yTileCoordinate);
        }
        result.x = xTileCoordinate;
        result.y = yTileCoordinate;
        return result;
      };
      GeographicTilingScheme_default = GeographicTilingScheme;
    }
  });

  // packages/engine/Source/Core/ApproximateTerrainHeights.js
  function getTileXYLevel(rectangle) {
    Cartographic_default.fromRadians(
      rectangle.east,
      rectangle.north,
      0,
      scratchCorners[0]
    );
    Cartographic_default.fromRadians(
      rectangle.west,
      rectangle.north,
      0,
      scratchCorners[1]
    );
    Cartographic_default.fromRadians(
      rectangle.east,
      rectangle.south,
      0,
      scratchCorners[2]
    );
    Cartographic_default.fromRadians(
      rectangle.west,
      rectangle.south,
      0,
      scratchCorners[3]
    );
    let lastLevelX = 0, lastLevelY = 0;
    let currentX = 0, currentY = 0;
    const maxLevel = ApproximateTerrainHeights._terrainHeightsMaxLevel;
    let i;
    for (i = 0; i <= maxLevel; ++i) {
      let failed = false;
      for (let j = 0; j < 4; ++j) {
        const corner = scratchCorners[j];
        tilingScheme.positionToTileXY(corner, i, scratchTileXY);
        if (j === 0) {
          currentX = scratchTileXY.x;
          currentY = scratchTileXY.y;
        } else if (currentX !== scratchTileXY.x || currentY !== scratchTileXY.y) {
          failed = true;
          break;
        }
      }
      if (failed) {
        break;
      }
      lastLevelX = currentX;
      lastLevelY = currentY;
    }
    if (i === 0) {
      return void 0;
    }
    return {
      x: lastLevelX,
      y: lastLevelY,
      level: i > maxLevel ? maxLevel : i - 1
    };
  }
  var scratchDiagonalCartesianNE, scratchDiagonalCartesianSW, scratchDiagonalCartographic, scratchCenterCartesian, scratchSurfaceCartesian, scratchBoundingSphere2, tilingScheme, scratchCorners, scratchTileXY, ApproximateTerrainHeights, ApproximateTerrainHeights_default;
  var init_ApproximateTerrainHeights = __esm({
    "packages/engine/Source/Core/ApproximateTerrainHeights.js"() {
      init_BoundingSphere();
      init_buildModuleUrl();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_GeographicTilingScheme();
      init_Rectangle();
      init_Resource();
      scratchDiagonalCartesianNE = new Cartesian3_default();
      scratchDiagonalCartesianSW = new Cartesian3_default();
      scratchDiagonalCartographic = new Cartographic_default();
      scratchCenterCartesian = new Cartesian3_default();
      scratchSurfaceCartesian = new Cartesian3_default();
      scratchBoundingSphere2 = new BoundingSphere_default();
      tilingScheme = new GeographicTilingScheme_default();
      scratchCorners = [
        new Cartographic_default(),
        new Cartographic_default(),
        new Cartographic_default(),
        new Cartographic_default()
      ];
      scratchTileXY = new Cartesian2_default();
      ApproximateTerrainHeights = {};
      ApproximateTerrainHeights.initialize = function() {
        let initPromise = ApproximateTerrainHeights._initPromise;
        if (defined_default(initPromise)) {
          return initPromise;
        }
        initPromise = Resource_default.fetchJson(
          buildModuleUrl_default("Assets/approximateTerrainHeights.json")
        ).then(function(json) {
          ApproximateTerrainHeights._terrainHeights = json;
        });
        ApproximateTerrainHeights._initPromise = initPromise;
        return initPromise;
      };
      ApproximateTerrainHeights.getMinimumMaximumHeights = function(rectangle, ellipsoid) {
        Check_default.defined("rectangle", rectangle);
        if (!defined_default(ApproximateTerrainHeights._terrainHeights)) {
          throw new DeveloperError_default(
            "You must call ApproximateTerrainHeights.initialize and wait for the promise to resolve before using this function"
          );
        }
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        const xyLevel = getTileXYLevel(rectangle);
        let minTerrainHeight = ApproximateTerrainHeights._defaultMinTerrainHeight;
        let maxTerrainHeight = ApproximateTerrainHeights._defaultMaxTerrainHeight;
        if (defined_default(xyLevel)) {
          const key = `${xyLevel.level}-${xyLevel.x}-${xyLevel.y}`;
          const heights = ApproximateTerrainHeights._terrainHeights[key];
          if (defined_default(heights)) {
            minTerrainHeight = heights[0];
            maxTerrainHeight = heights[1];
          }
          ellipsoid.cartographicToCartesian(
            Rectangle_default.northeast(rectangle, scratchDiagonalCartographic),
            scratchDiagonalCartesianNE
          );
          ellipsoid.cartographicToCartesian(
            Rectangle_default.southwest(rectangle, scratchDiagonalCartographic),
            scratchDiagonalCartesianSW
          );
          Cartesian3_default.midpoint(
            scratchDiagonalCartesianSW,
            scratchDiagonalCartesianNE,
            scratchCenterCartesian
          );
          const surfacePosition = ellipsoid.scaleToGeodeticSurface(
            scratchCenterCartesian,
            scratchSurfaceCartesian
          );
          if (defined_default(surfacePosition)) {
            const distance = Cartesian3_default.distance(
              scratchCenterCartesian,
              surfacePosition
            );
            minTerrainHeight = Math.min(minTerrainHeight, -distance);
          } else {
            minTerrainHeight = ApproximateTerrainHeights._defaultMinTerrainHeight;
          }
        }
        minTerrainHeight = Math.max(
          ApproximateTerrainHeights._defaultMinTerrainHeight,
          minTerrainHeight
        );
        return {
          minimumTerrainHeight: minTerrainHeight,
          maximumTerrainHeight: maxTerrainHeight
        };
      };
      ApproximateTerrainHeights.getBoundingSphere = function(rectangle, ellipsoid) {
        Check_default.defined("rectangle", rectangle);
        if (!defined_default(ApproximateTerrainHeights._terrainHeights)) {
          throw new DeveloperError_default(
            "You must call ApproximateTerrainHeights.initialize and wait for the promise to resolve before using this function"
          );
        }
        ellipsoid = defaultValue_default(ellipsoid, Ellipsoid_default.WGS84);
        const xyLevel = getTileXYLevel(rectangle);
        let maxTerrainHeight = ApproximateTerrainHeights._defaultMaxTerrainHeight;
        if (defined_default(xyLevel)) {
          const key = `${xyLevel.level}-${xyLevel.x}-${xyLevel.y}`;
          const heights = ApproximateTerrainHeights._terrainHeights[key];
          if (defined_default(heights)) {
            maxTerrainHeight = heights[1];
          }
        }
        const result = BoundingSphere_default.fromRectangle3D(rectangle, ellipsoid, 0);
        BoundingSphere_default.fromRectangle3D(
          rectangle,
          ellipsoid,
          maxTerrainHeight,
          scratchBoundingSphere2
        );
        return BoundingSphere_default.union(result, scratchBoundingSphere2, result);
      };
      ApproximateTerrainHeights._terrainHeightsMaxLevel = 6;
      ApproximateTerrainHeights._defaultMaxTerrainHeight = 9e3;
      ApproximateTerrainHeights._defaultMinTerrainHeight = -1e5;
      ApproximateTerrainHeights._terrainHeights = void 0;
      ApproximateTerrainHeights._initPromise = void 0;
      Object.defineProperties(ApproximateTerrainHeights, {
        /**
         * Determines if the terrain heights are initialized and ready to use. To initialize the terrain heights,
         * call {@link ApproximateTerrainHeights#initialize} and wait for the returned promise to resolve.
         * @type {boolean}
         * @readonly
         * @memberof ApproximateTerrainHeights
         */
        initialized: {
          get: function() {
            return defined_default(ApproximateTerrainHeights._terrainHeights);
          }
        }
      });
      ApproximateTerrainHeights_default = ApproximateTerrainHeights;
    }
  });

  // packages/engine/Source/Core/GroundPolylineGeometry.js
  function GroundPolylineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const positions = options.positions;
    if (!defined_default(positions) || positions.length < 2) {
      throw new DeveloperError_default("At least two positions are required.");
    }
    if (defined_default(options.arcType) && options.arcType !== ArcType_default.GEODESIC && options.arcType !== ArcType_default.RHUMB) {
      throw new DeveloperError_default(
        "Valid options for arcType are ArcType.GEODESIC and ArcType.RHUMB."
      );
    }
    this.width = defaultValue_default(options.width, 1);
    this._positions = positions;
    this.granularity = defaultValue_default(options.granularity, 9999);
    this.loop = defaultValue_default(options.loop, false);
    this.arcType = defaultValue_default(options.arcType, ArcType_default.GEODESIC);
    this._ellipsoid = Ellipsoid_default.WGS84;
    this._projectionIndex = 0;
    this._workerName = "createGroundPolylineGeometry";
    this._scene3DOnly = false;
  }
  function computeRightNormal(start, end, maxHeight, ellipsoid, result) {
    const startBottom = getPosition(ellipsoid, start, 0, cart3Scratch1);
    const startTop = getPosition(ellipsoid, start, maxHeight, cart3Scratch2);
    const endBottom = getPosition(ellipsoid, end, 0, cart3Scratch3);
    const up = direction(startTop, startBottom, cart3Scratch2);
    const forward = direction(endBottom, startBottom, cart3Scratch3);
    Cartesian3_default.cross(forward, up, result);
    return Cartesian3_default.normalize(result, result);
  }
  function interpolateSegment(start, end, minHeight, maxHeight, granularity, arcType, ellipsoid, normalsArray, bottomPositionsArray, topPositionsArray, cartographicsArray) {
    if (granularity === 0) {
      return;
    }
    let ellipsoidLine;
    if (arcType === ArcType_default.GEODESIC) {
      ellipsoidLine = new EllipsoidGeodesic_default(start, end, ellipsoid);
    } else if (arcType === ArcType_default.RHUMB) {
      ellipsoidLine = new EllipsoidRhumbLine_default(start, end, ellipsoid);
    }
    const surfaceDistance = ellipsoidLine.surfaceDistance;
    if (surfaceDistance < granularity) {
      return;
    }
    const interpolatedNormal = computeRightNormal(
      start,
      end,
      maxHeight,
      ellipsoid,
      interpolatedNormalScratch
    );
    const segments = Math.ceil(surfaceDistance / granularity);
    const interpointDistance = surfaceDistance / segments;
    let distanceFromStart = interpointDistance;
    const pointsToAdd = segments - 1;
    let packIndex = normalsArray.length;
    for (let i = 0; i < pointsToAdd; i++) {
      const interpolatedCartographic = ellipsoidLine.interpolateUsingSurfaceDistance(
        distanceFromStart,
        interpolatedCartographicScratch
      );
      const interpolatedBottom = getPosition(
        ellipsoid,
        interpolatedCartographic,
        minHeight,
        interpolatedBottomScratch
      );
      const interpolatedTop = getPosition(
        ellipsoid,
        interpolatedCartographic,
        maxHeight,
        interpolatedTopScratch
      );
      Cartesian3_default.pack(interpolatedNormal, normalsArray, packIndex);
      Cartesian3_default.pack(interpolatedBottom, bottomPositionsArray, packIndex);
      Cartesian3_default.pack(interpolatedTop, topPositionsArray, packIndex);
      cartographicsArray.push(interpolatedCartographic.latitude);
      cartographicsArray.push(interpolatedCartographic.longitude);
      packIndex += 3;
      distanceFromStart += interpointDistance;
    }
  }
  function getPosition(ellipsoid, cartographic2, height, result) {
    Cartographic_default.clone(cartographic2, heightlessCartographicScratch);
    heightlessCartographicScratch.height = height;
    return Cartographic_default.toCartesian(
      heightlessCartographicScratch,
      ellipsoid,
      result
    );
  }
  function direction(target, origin, result) {
    Cartesian3_default.subtract(target, origin, result);
    Cartesian3_default.normalize(result, result);
    return result;
  }
  function tangentDirection(target, origin, up, result) {
    result = direction(target, origin, result);
    result = Cartesian3_default.cross(result, up, result);
    result = Cartesian3_default.normalize(result, result);
    result = Cartesian3_default.cross(up, result, result);
    return result;
  }
  function computeVertexMiterNormal(previousBottom, vertexBottom, vertexTop, nextBottom, result) {
    const up = direction(vertexTop, vertexBottom, vertexUpScratch);
    const toPrevious = tangentDirection(
      previousBottom,
      vertexBottom,
      up,
      toPreviousScratch
    );
    const toNext = tangentDirection(nextBottom, vertexBottom, up, toNextScratch);
    if (Math_default.equalsEpsilon(
      Cartesian3_default.dot(toPrevious, toNext),
      cosine180,
      Math_default.EPSILON5
    )) {
      result = Cartesian3_default.cross(up, toPrevious, result);
      result = Cartesian3_default.normalize(result, result);
      return result;
    }
    result = Cartesian3_default.add(toNext, toPrevious, result);
    result = Cartesian3_default.normalize(result, result);
    const forward = Cartesian3_default.cross(up, result, forwardScratch);
    if (Cartesian3_default.dot(toNext, forward) < cosine90) {
      result = Cartesian3_default.negate(result, result);
    }
    return result;
  }
  function breakMiter(endGeometryNormal, startBottom, endBottom, endTop) {
    const lineDirection = direction(endBottom, startBottom, lineDirectionScratch);
    const dot = Cartesian3_default.dot(lineDirection, endGeometryNormal);
    if (dot > MITER_BREAK_SMALL || dot < MITER_BREAK_LARGE) {
      const vertexUp = direction(endTop, endBottom, vertexUpScratch);
      const angle = dot < MITER_BREAK_LARGE ? Math_default.PI_OVER_TWO : -Math_default.PI_OVER_TWO;
      const quaternion = Quaternion_default.fromAxisAngle(
        vertexUp,
        angle,
        quaternionScratch3
      );
      const rotationMatrix = Matrix3_default.fromQuaternion(quaternion, matrix3Scratch);
      Matrix3_default.multiplyByVector(
        rotationMatrix,
        endGeometryNormal,
        endGeometryNormal
      );
      return true;
    }
    return false;
  }
  function projectNormal(projection, cartographic2, normal2, projectedPosition, result) {
    const position = Cartographic_default.toCartesian(
      cartographic2,
      projection._ellipsoid,
      normalStartpointScratch
    );
    let normalEndpoint = Cartesian3_default.add(position, normal2, normalEndpointScratch);
    let flipNormal = false;
    const ellipsoid = projection._ellipsoid;
    let normalEndpointCartographic = ellipsoid.cartesianToCartographic(
      normalEndpoint,
      endPosCartographicScratch
    );
    if (Math.abs(cartographic2.longitude - normalEndpointCartographic.longitude) > Math_default.PI_OVER_TWO) {
      flipNormal = true;
      normalEndpoint = Cartesian3_default.subtract(
        position,
        normal2,
        normalEndpointScratch
      );
      normalEndpointCartographic = ellipsoid.cartesianToCartographic(
        normalEndpoint,
        endPosCartographicScratch
      );
    }
    normalEndpointCartographic.height = 0;
    const normalEndpointProjected = projection.project(
      normalEndpointCartographic,
      result
    );
    result = Cartesian3_default.subtract(
      normalEndpointProjected,
      projectedPosition,
      result
    );
    result.z = 0;
    result = Cartesian3_default.normalize(result, result);
    if (flipNormal) {
      Cartesian3_default.negate(result, result);
    }
    return result;
  }
  function adjustHeights(bottom, top, minHeight, maxHeight, adjustHeightBottom, adjustHeightTop) {
    const adjustHeightNormal = Cartesian3_default.subtract(
      top,
      bottom,
      adjustHeightNormalScratch
    );
    Cartesian3_default.normalize(adjustHeightNormal, adjustHeightNormal);
    const distanceForBottom = minHeight - WALL_INITIAL_MIN_HEIGHT;
    let adjustHeightOffset = Cartesian3_default.multiplyByScalar(
      adjustHeightNormal,
      distanceForBottom,
      adjustHeightOffsetScratch
    );
    Cartesian3_default.add(bottom, adjustHeightOffset, adjustHeightBottom);
    const distanceForTop = maxHeight - WALL_INITIAL_MAX_HEIGHT;
    adjustHeightOffset = Cartesian3_default.multiplyByScalar(
      adjustHeightNormal,
      distanceForTop,
      adjustHeightOffsetScratch
    );
    Cartesian3_default.add(top, adjustHeightOffset, adjustHeightTop);
  }
  function nudgeXZ(start, end) {
    const startToXZdistance = Plane_default.getPointDistance(XZ_PLANE, start);
    const endToXZdistance = Plane_default.getPointDistance(XZ_PLANE, end);
    let offset = nudgeDirectionScratch;
    if (Math_default.equalsEpsilon(startToXZdistance, 0, Math_default.EPSILON2)) {
      offset = direction(end, start, offset);
      Cartesian3_default.multiplyByScalar(offset, Math_default.EPSILON2, offset);
      Cartesian3_default.add(start, offset, start);
    } else if (Math_default.equalsEpsilon(endToXZdistance, 0, Math_default.EPSILON2)) {
      offset = direction(start, end, offset);
      Cartesian3_default.multiplyByScalar(offset, Math_default.EPSILON2, offset);
      Cartesian3_default.add(end, offset, end);
    }
  }
  function nudgeCartographic(start, end) {
    const absStartLon = Math.abs(start.longitude);
    const absEndLon = Math.abs(end.longitude);
    if (Math_default.equalsEpsilon(absStartLon, Math_default.PI, Math_default.EPSILON11)) {
      const endSign = Math_default.sign(end.longitude);
      start.longitude = endSign * (absStartLon - Math_default.EPSILON11);
      return 1;
    } else if (Math_default.equalsEpsilon(absEndLon, Math_default.PI, Math_default.EPSILON11)) {
      const startSign = Math_default.sign(start.longitude);
      end.longitude = startSign * (absEndLon - Math_default.EPSILON11);
      return 2;
    }
    return 0;
  }
  function generateGeometryAttributes(loop, projection, bottomPositionsArray, topPositionsArray, normalsArray, cartographicsArray, compute2dAttributes) {
    let i;
    let index;
    const ellipsoid = projection._ellipsoid;
    const segmentCount = bottomPositionsArray.length / 3 - 1;
    const vertexCount = segmentCount * 8;
    const arraySizeVec4 = vertexCount * 4;
    const indexCount = segmentCount * 36;
    const indices = vertexCount > 65535 ? new Uint32Array(indexCount) : new Uint16Array(indexCount);
    const positionsArray = new Float64Array(vertexCount * 3);
    const startHiAndForwardOffsetX = new Float32Array(arraySizeVec4);
    const startLoAndForwardOffsetY = new Float32Array(arraySizeVec4);
    const startNormalAndForwardOffsetZ = new Float32Array(arraySizeVec4);
    const endNormalAndTextureCoordinateNormalizationX = new Float32Array(
      arraySizeVec4
    );
    const rightNormalAndTextureCoordinateNormalizationY = new Float32Array(
      arraySizeVec4
    );
    let startHiLo2D;
    let offsetAndRight2D;
    let startEndNormals2D;
    let texcoordNormalization2D;
    if (compute2dAttributes) {
      startHiLo2D = new Float32Array(arraySizeVec4);
      offsetAndRight2D = new Float32Array(arraySizeVec4);
      startEndNormals2D = new Float32Array(arraySizeVec4);
      texcoordNormalization2D = new Float32Array(vertexCount * 2);
    }
    const cartographicsLength = cartographicsArray.length / 2;
    let length2D = 0;
    const startCartographic = startCartographicScratch;
    startCartographic.height = 0;
    const endCartographic = endCartographicScratch;
    endCartographic.height = 0;
    let segmentStartCartesian = segmentStartTopScratch;
    let segmentEndCartesian = segmentEndTopScratch;
    if (compute2dAttributes) {
      index = 0;
      for (i = 1; i < cartographicsLength; i++) {
        startCartographic.latitude = cartographicsArray[index];
        startCartographic.longitude = cartographicsArray[index + 1];
        endCartographic.latitude = cartographicsArray[index + 2];
        endCartographic.longitude = cartographicsArray[index + 3];
        segmentStartCartesian = projection.project(
          startCartographic,
          segmentStartCartesian
        );
        segmentEndCartesian = projection.project(
          endCartographic,
          segmentEndCartesian
        );
        length2D += Cartesian3_default.distance(
          segmentStartCartesian,
          segmentEndCartesian
        );
        index += 2;
      }
    }
    const positionsLength = topPositionsArray.length / 3;
    segmentEndCartesian = Cartesian3_default.unpack(
      topPositionsArray,
      0,
      segmentEndCartesian
    );
    let length3D = 0;
    index = 3;
    for (i = 1; i < positionsLength; i++) {
      segmentStartCartesian = Cartesian3_default.clone(
        segmentEndCartesian,
        segmentStartCartesian
      );
      segmentEndCartesian = Cartesian3_default.unpack(
        topPositionsArray,
        index,
        segmentEndCartesian
      );
      length3D += Cartesian3_default.distance(segmentStartCartesian, segmentEndCartesian);
      index += 3;
    }
    let j;
    index = 3;
    let cartographicsIndex = 0;
    let vec2sWriteIndex = 0;
    let vec3sWriteIndex = 0;
    let vec4sWriteIndex = 0;
    let miterBroken = false;
    let endBottom = Cartesian3_default.unpack(
      bottomPositionsArray,
      0,
      segmentEndBottomScratch
    );
    let endTop = Cartesian3_default.unpack(topPositionsArray, 0, segmentEndTopScratch);
    let endGeometryNormal = Cartesian3_default.unpack(
      normalsArray,
      0,
      segmentEndNormalScratch
    );
    if (loop) {
      const preEndBottom = Cartesian3_default.unpack(
        bottomPositionsArray,
        bottomPositionsArray.length - 6,
        segmentStartBottomScratch
      );
      if (breakMiter(endGeometryNormal, preEndBottom, endBottom, endTop)) {
        endGeometryNormal = Cartesian3_default.negate(
          endGeometryNormal,
          endGeometryNormal
        );
      }
    }
    let lengthSoFar3D = 0;
    let lengthSoFar2D = 0;
    let sumHeights = 0;
    for (i = 0; i < segmentCount; i++) {
      const startBottom = Cartesian3_default.clone(endBottom, segmentStartBottomScratch);
      const startTop = Cartesian3_default.clone(endTop, segmentStartTopScratch);
      let startGeometryNormal = Cartesian3_default.clone(
        endGeometryNormal,
        segmentStartNormalScratch
      );
      if (miterBroken) {
        startGeometryNormal = Cartesian3_default.negate(
          startGeometryNormal,
          startGeometryNormal
        );
      }
      endBottom = Cartesian3_default.unpack(
        bottomPositionsArray,
        index,
        segmentEndBottomScratch
      );
      endTop = Cartesian3_default.unpack(topPositionsArray, index, segmentEndTopScratch);
      endGeometryNormal = Cartesian3_default.unpack(
        normalsArray,
        index,
        segmentEndNormalScratch
      );
      miterBroken = breakMiter(endGeometryNormal, startBottom, endBottom, endTop);
      startCartographic.latitude = cartographicsArray[cartographicsIndex];
      startCartographic.longitude = cartographicsArray[cartographicsIndex + 1];
      endCartographic.latitude = cartographicsArray[cartographicsIndex + 2];
      endCartographic.longitude = cartographicsArray[cartographicsIndex + 3];
      let start2D;
      let end2D;
      let startGeometryNormal2D;
      let endGeometryNormal2D;
      if (compute2dAttributes) {
        const nudgeResult = nudgeCartographic(startCartographic, endCartographic);
        start2D = projection.project(startCartographic, segmentStart2DScratch);
        end2D = projection.project(endCartographic, segmentEnd2DScratch);
        const direction2D = direction(end2D, start2D, forwardOffset2DScratch);
        direction2D.y = Math.abs(direction2D.y);
        startGeometryNormal2D = segmentStartNormal2DScratch;
        endGeometryNormal2D = segmentEndNormal2DScratch;
        if (nudgeResult === 0 || Cartesian3_default.dot(direction2D, Cartesian3_default.UNIT_Y) > MITER_BREAK_SMALL) {
          startGeometryNormal2D = projectNormal(
            projection,
            startCartographic,
            startGeometryNormal,
            start2D,
            segmentStartNormal2DScratch
          );
          endGeometryNormal2D = projectNormal(
            projection,
            endCartographic,
            endGeometryNormal,
            end2D,
            segmentEndNormal2DScratch
          );
        } else if (nudgeResult === 1) {
          endGeometryNormal2D = projectNormal(
            projection,
            endCartographic,
            endGeometryNormal,
            end2D,
            segmentEndNormal2DScratch
          );
          startGeometryNormal2D.x = 0;
          startGeometryNormal2D.y = Math_default.sign(
            startCartographic.longitude - Math.abs(endCartographic.longitude)
          );
          startGeometryNormal2D.z = 0;
        } else {
          startGeometryNormal2D = projectNormal(
            projection,
            startCartographic,
            startGeometryNormal,
            start2D,
            segmentStartNormal2DScratch
          );
          endGeometryNormal2D.x = 0;
          endGeometryNormal2D.y = Math_default.sign(
            startCartographic.longitude - endCartographic.longitude
          );
          endGeometryNormal2D.z = 0;
        }
      }
      const segmentLength3D = Cartesian3_default.distance(startTop, endTop);
      const encodedStart = EncodedCartesian3_default.fromCartesian(
        startBottom,
        encodeScratch
      );
      const forwardOffset = Cartesian3_default.subtract(
        endBottom,
        startBottom,
        offsetScratch2
      );
      const forward = Cartesian3_default.normalize(forwardOffset, rightScratch2);
      let startUp = Cartesian3_default.subtract(startTop, startBottom, startUpScratch);
      startUp = Cartesian3_default.normalize(startUp, startUp);
      let rightNormal = Cartesian3_default.cross(forward, startUp, rightScratch2);
      rightNormal = Cartesian3_default.normalize(rightNormal, rightNormal);
      let startPlaneNormal = Cartesian3_default.cross(
        startUp,
        startGeometryNormal,
        startPlaneNormalScratch
      );
      startPlaneNormal = Cartesian3_default.normalize(startPlaneNormal, startPlaneNormal);
      let endUp = Cartesian3_default.subtract(endTop, endBottom, endUpScratch);
      endUp = Cartesian3_default.normalize(endUp, endUp);
      let endPlaneNormal = Cartesian3_default.cross(
        endGeometryNormal,
        endUp,
        endPlaneNormalScratch
      );
      endPlaneNormal = Cartesian3_default.normalize(endPlaneNormal, endPlaneNormal);
      const texcoordNormalization3DX = segmentLength3D / length3D;
      const texcoordNormalization3DY = lengthSoFar3D / length3D;
      let segmentLength2D = 0;
      let encodedStart2D;
      let forwardOffset2D;
      let right2D;
      let texcoordNormalization2DX = 0;
      let texcoordNormalization2DY = 0;
      if (compute2dAttributes) {
        segmentLength2D = Cartesian3_default.distance(start2D, end2D);
        encodedStart2D = EncodedCartesian3_default.fromCartesian(
          start2D,
          encodeScratch2D
        );
        forwardOffset2D = Cartesian3_default.subtract(
          end2D,
          start2D,
          forwardOffset2DScratch
        );
        right2D = Cartesian3_default.normalize(forwardOffset2D, right2DScratch);
        const swap2 = right2D.x;
        right2D.x = right2D.y;
        right2D.y = -swap2;
        texcoordNormalization2DX = segmentLength2D / length2D;
        texcoordNormalization2DY = lengthSoFar2D / length2D;
      }
      for (j = 0; j < 8; j++) {
        const vec4Index = vec4sWriteIndex + j * 4;
        const vec2Index = vec2sWriteIndex + j * 2;
        const wIndex = vec4Index + 3;
        const rightPlaneSide = j < 4 ? 1 : -1;
        const topBottomSide = j === 2 || j === 3 || j === 6 || j === 7 ? 1 : -1;
        Cartesian3_default.pack(encodedStart.high, startHiAndForwardOffsetX, vec4Index);
        startHiAndForwardOffsetX[wIndex] = forwardOffset.x;
        Cartesian3_default.pack(encodedStart.low, startLoAndForwardOffsetY, vec4Index);
        startLoAndForwardOffsetY[wIndex] = forwardOffset.y;
        Cartesian3_default.pack(
          startPlaneNormal,
          startNormalAndForwardOffsetZ,
          vec4Index
        );
        startNormalAndForwardOffsetZ[wIndex] = forwardOffset.z;
        Cartesian3_default.pack(
          endPlaneNormal,
          endNormalAndTextureCoordinateNormalizationX,
          vec4Index
        );
        endNormalAndTextureCoordinateNormalizationX[wIndex] = texcoordNormalization3DX * rightPlaneSide;
        Cartesian3_default.pack(
          rightNormal,
          rightNormalAndTextureCoordinateNormalizationY,
          vec4Index
        );
        let texcoordNormalization = texcoordNormalization3DY * topBottomSide;
        if (texcoordNormalization === 0 && topBottomSide < 0) {
          texcoordNormalization = 9;
        }
        rightNormalAndTextureCoordinateNormalizationY[wIndex] = texcoordNormalization;
        if (compute2dAttributes) {
          startHiLo2D[vec4Index] = encodedStart2D.high.x;
          startHiLo2D[vec4Index + 1] = encodedStart2D.high.y;
          startHiLo2D[vec4Index + 2] = encodedStart2D.low.x;
          startHiLo2D[vec4Index + 3] = encodedStart2D.low.y;
          startEndNormals2D[vec4Index] = -startGeometryNormal2D.y;
          startEndNormals2D[vec4Index + 1] = startGeometryNormal2D.x;
          startEndNormals2D[vec4Index + 2] = endGeometryNormal2D.y;
          startEndNormals2D[vec4Index + 3] = -endGeometryNormal2D.x;
          offsetAndRight2D[vec4Index] = forwardOffset2D.x;
          offsetAndRight2D[vec4Index + 1] = forwardOffset2D.y;
          offsetAndRight2D[vec4Index + 2] = right2D.x;
          offsetAndRight2D[vec4Index + 3] = right2D.y;
          texcoordNormalization2D[vec2Index] = texcoordNormalization2DX * rightPlaneSide;
          texcoordNormalization = texcoordNormalization2DY * topBottomSide;
          if (texcoordNormalization === 0 && topBottomSide < 0) {
            texcoordNormalization = 9;
          }
          texcoordNormalization2D[vec2Index + 1] = texcoordNormalization;
        }
      }
      const adjustHeightStartBottom = adjustHeightStartBottomScratch;
      const adjustHeightEndBottom = adjustHeightEndBottomScratch;
      const adjustHeightStartTop = adjustHeightStartTopScratch;
      const adjustHeightEndTop = adjustHeightEndTopScratch;
      const getHeightsRectangle = Rectangle_default.fromCartographicArray(
        getHeightCartographics,
        getHeightRectangleScratch
      );
      const minMaxHeights = ApproximateTerrainHeights_default.getMinimumMaximumHeights(
        getHeightsRectangle,
        ellipsoid
      );
      const minHeight = minMaxHeights.minimumTerrainHeight;
      const maxHeight = minMaxHeights.maximumTerrainHeight;
      sumHeights += Math.abs(minHeight);
      sumHeights += Math.abs(maxHeight);
      adjustHeights(
        startBottom,
        startTop,
        minHeight,
        maxHeight,
        adjustHeightStartBottom,
        adjustHeightStartTop
      );
      adjustHeights(
        endBottom,
        endTop,
        minHeight,
        maxHeight,
        adjustHeightEndBottom,
        adjustHeightEndTop
      );
      let normalNudge = Cartesian3_default.multiplyByScalar(
        rightNormal,
        Math_default.EPSILON5,
        normalNudgeScratch
      );
      Cartesian3_default.add(
        adjustHeightStartBottom,
        normalNudge,
        adjustHeightStartBottom
      );
      Cartesian3_default.add(adjustHeightEndBottom, normalNudge, adjustHeightEndBottom);
      Cartesian3_default.add(adjustHeightStartTop, normalNudge, adjustHeightStartTop);
      Cartesian3_default.add(adjustHeightEndTop, normalNudge, adjustHeightEndTop);
      nudgeXZ(adjustHeightStartBottom, adjustHeightEndBottom);
      nudgeXZ(adjustHeightStartTop, adjustHeightEndTop);
      Cartesian3_default.pack(adjustHeightStartBottom, positionsArray, vec3sWriteIndex);
      Cartesian3_default.pack(adjustHeightEndBottom, positionsArray, vec3sWriteIndex + 3);
      Cartesian3_default.pack(adjustHeightEndTop, positionsArray, vec3sWriteIndex + 6);
      Cartesian3_default.pack(adjustHeightStartTop, positionsArray, vec3sWriteIndex + 9);
      normalNudge = Cartesian3_default.multiplyByScalar(
        rightNormal,
        -2 * Math_default.EPSILON5,
        normalNudgeScratch
      );
      Cartesian3_default.add(
        adjustHeightStartBottom,
        normalNudge,
        adjustHeightStartBottom
      );
      Cartesian3_default.add(adjustHeightEndBottom, normalNudge, adjustHeightEndBottom);
      Cartesian3_default.add(adjustHeightStartTop, normalNudge, adjustHeightStartTop);
      Cartesian3_default.add(adjustHeightEndTop, normalNudge, adjustHeightEndTop);
      nudgeXZ(adjustHeightStartBottom, adjustHeightEndBottom);
      nudgeXZ(adjustHeightStartTop, adjustHeightEndTop);
      Cartesian3_default.pack(
        adjustHeightStartBottom,
        positionsArray,
        vec3sWriteIndex + 12
      );
      Cartesian3_default.pack(
        adjustHeightEndBottom,
        positionsArray,
        vec3sWriteIndex + 15
      );
      Cartesian3_default.pack(adjustHeightEndTop, positionsArray, vec3sWriteIndex + 18);
      Cartesian3_default.pack(adjustHeightStartTop, positionsArray, vec3sWriteIndex + 21);
      cartographicsIndex += 2;
      index += 3;
      vec2sWriteIndex += 16;
      vec3sWriteIndex += 24;
      vec4sWriteIndex += 32;
      lengthSoFar3D += segmentLength3D;
      lengthSoFar2D += segmentLength2D;
    }
    index = 0;
    let indexOffset = 0;
    for (i = 0; i < segmentCount; i++) {
      for (j = 0; j < REFERENCE_INDICES_LENGTH; j++) {
        indices[index + j] = REFERENCE_INDICES[j] + indexOffset;
      }
      indexOffset += 8;
      index += REFERENCE_INDICES_LENGTH;
    }
    const boundingSpheres = scratchBoundingSpheres;
    BoundingSphere_default.fromVertices(
      bottomPositionsArray,
      Cartesian3_default.ZERO,
      3,
      boundingSpheres[0]
    );
    BoundingSphere_default.fromVertices(
      topPositionsArray,
      Cartesian3_default.ZERO,
      3,
      boundingSpheres[1]
    );
    const boundingSphere = BoundingSphere_default.fromBoundingSpheres(boundingSpheres);
    boundingSphere.radius += sumHeights / (segmentCount * 2);
    const attributes = {
      position: new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.DOUBLE,
        componentsPerAttribute: 3,
        normalize: false,
        values: positionsArray
      }),
      startHiAndForwardOffsetX: getVec4GeometryAttribute(
        startHiAndForwardOffsetX
      ),
      startLoAndForwardOffsetY: getVec4GeometryAttribute(
        startLoAndForwardOffsetY
      ),
      startNormalAndForwardOffsetZ: getVec4GeometryAttribute(
        startNormalAndForwardOffsetZ
      ),
      endNormalAndTextureCoordinateNormalizationX: getVec4GeometryAttribute(
        endNormalAndTextureCoordinateNormalizationX
      ),
      rightNormalAndTextureCoordinateNormalizationY: getVec4GeometryAttribute(
        rightNormalAndTextureCoordinateNormalizationY
      )
    };
    if (compute2dAttributes) {
      attributes.startHiLo2D = getVec4GeometryAttribute(startHiLo2D);
      attributes.offsetAndRight2D = getVec4GeometryAttribute(offsetAndRight2D);
      attributes.startEndNormals2D = getVec4GeometryAttribute(startEndNormals2D);
      attributes.texcoordNormalization2D = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 2,
        normalize: false,
        values: texcoordNormalization2D
      });
    }
    return new Geometry_default({
      attributes,
      indices,
      boundingSphere
    });
  }
  function getVec4GeometryAttribute(typedArray) {
    return new GeometryAttribute_default({
      componentDatatype: ComponentDatatype_default.FLOAT,
      componentsPerAttribute: 4,
      normalize: false,
      values: typedArray
    });
  }
  var PROJECTIONS, PROJECTION_COUNT, MITER_BREAK_SMALL, MITER_BREAK_LARGE, WALL_INITIAL_MIN_HEIGHT, WALL_INITIAL_MAX_HEIGHT, cart3Scratch1, cart3Scratch2, cart3Scratch3, interpolatedCartographicScratch, interpolatedBottomScratch, interpolatedTopScratch, interpolatedNormalScratch, heightlessCartographicScratch, toPreviousScratch, toNextScratch, forwardScratch, vertexUpScratch, cosine90, cosine180, XZ_PLANE, previousBottomScratch, vertexBottomScratch, vertexTopScratch, nextBottomScratch, vertexNormalScratch, intersectionScratch, cartographicScratch0, cartographicScratch1, cartographicIntersectionScratch, lineDirectionScratch, matrix3Scratch, quaternionScratch3, endPosCartographicScratch, normalStartpointScratch, normalEndpointScratch, adjustHeightNormalScratch, adjustHeightOffsetScratch, nudgeDirectionScratch, startCartographicScratch, endCartographicScratch, segmentStartTopScratch, segmentEndTopScratch, segmentStartBottomScratch, segmentEndBottomScratch, segmentStartNormalScratch, segmentEndNormalScratch, getHeightCartographics, getHeightRectangleScratch, adjustHeightStartTopScratch, adjustHeightEndTopScratch, adjustHeightStartBottomScratch, adjustHeightEndBottomScratch, segmentStart2DScratch, segmentEnd2DScratch, segmentStartNormal2DScratch, segmentEndNormal2DScratch, offsetScratch2, startUpScratch, endUpScratch, rightScratch2, startPlaneNormalScratch, endPlaneNormalScratch, encodeScratch, encodeScratch2D, forwardOffset2DScratch, right2DScratch, normalNudgeScratch, scratchBoundingSpheres, REFERENCE_INDICES, REFERENCE_INDICES_LENGTH, GroundPolylineGeometry_default;
  var init_GroundPolylineGeometry = __esm({
    "packages/engine/Source/Core/GroundPolylineGeometry.js"() {
      init_ApproximateTerrainHeights();
      init_ArcType();
      init_arrayRemoveDuplicates();
      init_BoundingSphere();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_EllipsoidGeodesic();
      init_EllipsoidRhumbLine();
      init_EncodedCartesian3();
      init_GeographicProjection();
      init_Geometry();
      init_GeometryAttribute();
      init_IntersectionTests();
      init_Math();
      init_Matrix3();
      init_Plane();
      init_Quaternion();
      init_Rectangle();
      init_WebMercatorProjection();
      PROJECTIONS = [GeographicProjection_default, WebMercatorProjection_default];
      PROJECTION_COUNT = PROJECTIONS.length;
      MITER_BREAK_SMALL = Math.cos(Math_default.toRadians(30));
      MITER_BREAK_LARGE = Math.cos(Math_default.toRadians(150));
      WALL_INITIAL_MIN_HEIGHT = 0;
      WALL_INITIAL_MAX_HEIGHT = 1e3;
      Object.defineProperties(GroundPolylineGeometry.prototype, {
        /**
         * The number of elements used to pack the object into an array.
         * @memberof GroundPolylineGeometry.prototype
         * @type {number}
         * @readonly
         * @private
         */
        packedLength: {
          get: function() {
            return 1 + this._positions.length * 3 + 1 + 1 + 1 + Ellipsoid_default.packedLength + 1 + 1;
          }
        }
      });
      GroundPolylineGeometry.setProjectionAndEllipsoid = function(groundPolylineGeometry, mapProjection) {
        let projectionIndex = 0;
        for (let i = 0; i < PROJECTION_COUNT; i++) {
          if (mapProjection instanceof PROJECTIONS[i]) {
            projectionIndex = i;
            break;
          }
        }
        groundPolylineGeometry._projectionIndex = projectionIndex;
        groundPolylineGeometry._ellipsoid = mapProjection.ellipsoid;
      };
      cart3Scratch1 = new Cartesian3_default();
      cart3Scratch2 = new Cartesian3_default();
      cart3Scratch3 = new Cartesian3_default();
      interpolatedCartographicScratch = new Cartographic_default();
      interpolatedBottomScratch = new Cartesian3_default();
      interpolatedTopScratch = new Cartesian3_default();
      interpolatedNormalScratch = new Cartesian3_default();
      heightlessCartographicScratch = new Cartographic_default();
      GroundPolylineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        let index = defaultValue_default(startingIndex, 0);
        const positions = value._positions;
        const positionsLength = positions.length;
        array[index++] = positionsLength;
        for (let i = 0; i < positionsLength; ++i) {
          const cartesian11 = positions[i];
          Cartesian3_default.pack(cartesian11, array, index);
          index += 3;
        }
        array[index++] = value.granularity;
        array[index++] = value.loop ? 1 : 0;
        array[index++] = value.arcType;
        Ellipsoid_default.pack(value._ellipsoid, array, index);
        index += Ellipsoid_default.packedLength;
        array[index++] = value._projectionIndex;
        array[index++] = value._scene3DOnly ? 1 : 0;
        return array;
      };
      GroundPolylineGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        let index = defaultValue_default(startingIndex, 0);
        const positionsLength = array[index++];
        const positions = new Array(positionsLength);
        for (let i = 0; i < positionsLength; i++) {
          positions[i] = Cartesian3_default.unpack(array, index);
          index += 3;
        }
        const granularity = array[index++];
        const loop = array[index++] === 1;
        const arcType = array[index++];
        const ellipsoid = Ellipsoid_default.unpack(array, index);
        index += Ellipsoid_default.packedLength;
        const projectionIndex = array[index++];
        const scene3DOnly = array[index++] === 1;
        if (!defined_default(result)) {
          result = new GroundPolylineGeometry({
            positions
          });
        }
        result._positions = positions;
        result.granularity = granularity;
        result.loop = loop;
        result.arcType = arcType;
        result._ellipsoid = ellipsoid;
        result._projectionIndex = projectionIndex;
        result._scene3DOnly = scene3DOnly;
        return result;
      };
      toPreviousScratch = new Cartesian3_default();
      toNextScratch = new Cartesian3_default();
      forwardScratch = new Cartesian3_default();
      vertexUpScratch = new Cartesian3_default();
      cosine90 = 0;
      cosine180 = -1;
      XZ_PLANE = Plane_default.fromPointNormal(Cartesian3_default.ZERO, Cartesian3_default.UNIT_Y);
      previousBottomScratch = new Cartesian3_default();
      vertexBottomScratch = new Cartesian3_default();
      vertexTopScratch = new Cartesian3_default();
      nextBottomScratch = new Cartesian3_default();
      vertexNormalScratch = new Cartesian3_default();
      intersectionScratch = new Cartesian3_default();
      cartographicScratch0 = new Cartographic_default();
      cartographicScratch1 = new Cartographic_default();
      cartographicIntersectionScratch = new Cartographic_default();
      GroundPolylineGeometry.createGeometry = function(groundPolylineGeometry) {
        const compute2dAttributes = !groundPolylineGeometry._scene3DOnly;
        let loop = groundPolylineGeometry.loop;
        const ellipsoid = groundPolylineGeometry._ellipsoid;
        const granularity = groundPolylineGeometry.granularity;
        const arcType = groundPolylineGeometry.arcType;
        const projection = new PROJECTIONS[groundPolylineGeometry._projectionIndex](
          ellipsoid
        );
        const minHeight = WALL_INITIAL_MIN_HEIGHT;
        const maxHeight = WALL_INITIAL_MAX_HEIGHT;
        let index;
        let i;
        const positions = groundPolylineGeometry._positions;
        const positionsLength = positions.length;
        if (positionsLength === 2) {
          loop = false;
        }
        let p0;
        let p1;
        let c0;
        let c1;
        const rhumbLine = new EllipsoidRhumbLine_default(void 0, void 0, ellipsoid);
        let intersection;
        let intersectionCartographic;
        let intersectionLongitude;
        const splitPositions = [positions[0]];
        for (i = 0; i < positionsLength - 1; i++) {
          p0 = positions[i];
          p1 = positions[i + 1];
          intersection = IntersectionTests_default.lineSegmentPlane(
            p0,
            p1,
            XZ_PLANE,
            intersectionScratch
          );
          if (defined_default(intersection) && !Cartesian3_default.equalsEpsilon(intersection, p0, Math_default.EPSILON7) && !Cartesian3_default.equalsEpsilon(intersection, p1, Math_default.EPSILON7)) {
            if (groundPolylineGeometry.arcType === ArcType_default.GEODESIC) {
              splitPositions.push(Cartesian3_default.clone(intersection));
            } else if (groundPolylineGeometry.arcType === ArcType_default.RHUMB) {
              intersectionLongitude = ellipsoid.cartesianToCartographic(
                intersection,
                cartographicScratch0
              ).longitude;
              c0 = ellipsoid.cartesianToCartographic(p0, cartographicScratch0);
              c1 = ellipsoid.cartesianToCartographic(p1, cartographicScratch1);
              rhumbLine.setEndPoints(c0, c1);
              intersectionCartographic = rhumbLine.findIntersectionWithLongitude(
                intersectionLongitude,
                cartographicIntersectionScratch
              );
              intersection = ellipsoid.cartographicToCartesian(
                intersectionCartographic,
                intersectionScratch
              );
              if (defined_default(intersection) && !Cartesian3_default.equalsEpsilon(intersection, p0, Math_default.EPSILON7) && !Cartesian3_default.equalsEpsilon(intersection, p1, Math_default.EPSILON7)) {
                splitPositions.push(Cartesian3_default.clone(intersection));
              }
            }
          }
          splitPositions.push(p1);
        }
        if (loop) {
          p0 = positions[positionsLength - 1];
          p1 = positions[0];
          intersection = IntersectionTests_default.lineSegmentPlane(
            p0,
            p1,
            XZ_PLANE,
            intersectionScratch
          );
          if (defined_default(intersection) && !Cartesian3_default.equalsEpsilon(intersection, p0, Math_default.EPSILON7) && !Cartesian3_default.equalsEpsilon(intersection, p1, Math_default.EPSILON7)) {
            if (groundPolylineGeometry.arcType === ArcType_default.GEODESIC) {
              splitPositions.push(Cartesian3_default.clone(intersection));
            } else if (groundPolylineGeometry.arcType === ArcType_default.RHUMB) {
              intersectionLongitude = ellipsoid.cartesianToCartographic(
                intersection,
                cartographicScratch0
              ).longitude;
              c0 = ellipsoid.cartesianToCartographic(p0, cartographicScratch0);
              c1 = ellipsoid.cartesianToCartographic(p1, cartographicScratch1);
              rhumbLine.setEndPoints(c0, c1);
              intersectionCartographic = rhumbLine.findIntersectionWithLongitude(
                intersectionLongitude,
                cartographicIntersectionScratch
              );
              intersection = ellipsoid.cartographicToCartesian(
                intersectionCartographic,
                intersectionScratch
              );
              if (defined_default(intersection) && !Cartesian3_default.equalsEpsilon(intersection, p0, Math_default.EPSILON7) && !Cartesian3_default.equalsEpsilon(intersection, p1, Math_default.EPSILON7)) {
                splitPositions.push(Cartesian3_default.clone(intersection));
              }
            }
          }
        }
        let cartographicsLength = splitPositions.length;
        let cartographics = new Array(cartographicsLength);
        for (i = 0; i < cartographicsLength; i++) {
          const cartographic2 = Cartographic_default.fromCartesian(
            splitPositions[i],
            ellipsoid
          );
          cartographic2.height = 0;
          cartographics[i] = cartographic2;
        }
        cartographics = arrayRemoveDuplicates_default(
          cartographics,
          Cartographic_default.equalsEpsilon
        );
        cartographicsLength = cartographics.length;
        if (cartographicsLength < 2) {
          return void 0;
        }
        const cartographicsArray = [];
        const normalsArray = [];
        const bottomPositionsArray = [];
        const topPositionsArray = [];
        let previousBottom = previousBottomScratch;
        let vertexBottom = vertexBottomScratch;
        let vertexTop = vertexTopScratch;
        let nextBottom = nextBottomScratch;
        let vertexNormal = vertexNormalScratch;
        const startCartographic = cartographics[0];
        const nextCartographic = cartographics[1];
        const prestartCartographic = cartographics[cartographicsLength - 1];
        previousBottom = getPosition(
          ellipsoid,
          prestartCartographic,
          minHeight,
          previousBottom
        );
        nextBottom = getPosition(ellipsoid, nextCartographic, minHeight, nextBottom);
        vertexBottom = getPosition(
          ellipsoid,
          startCartographic,
          minHeight,
          vertexBottom
        );
        vertexTop = getPosition(ellipsoid, startCartographic, maxHeight, vertexTop);
        if (loop) {
          vertexNormal = computeVertexMiterNormal(
            previousBottom,
            vertexBottom,
            vertexTop,
            nextBottom,
            vertexNormal
          );
        } else {
          vertexNormal = computeRightNormal(
            startCartographic,
            nextCartographic,
            maxHeight,
            ellipsoid,
            vertexNormal
          );
        }
        Cartesian3_default.pack(vertexNormal, normalsArray, 0);
        Cartesian3_default.pack(vertexBottom, bottomPositionsArray, 0);
        Cartesian3_default.pack(vertexTop, topPositionsArray, 0);
        cartographicsArray.push(startCartographic.latitude);
        cartographicsArray.push(startCartographic.longitude);
        interpolateSegment(
          startCartographic,
          nextCartographic,
          minHeight,
          maxHeight,
          granularity,
          arcType,
          ellipsoid,
          normalsArray,
          bottomPositionsArray,
          topPositionsArray,
          cartographicsArray
        );
        for (i = 1; i < cartographicsLength - 1; ++i) {
          previousBottom = Cartesian3_default.clone(vertexBottom, previousBottom);
          vertexBottom = Cartesian3_default.clone(nextBottom, vertexBottom);
          const vertexCartographic = cartographics[i];
          getPosition(ellipsoid, vertexCartographic, maxHeight, vertexTop);
          getPosition(ellipsoid, cartographics[i + 1], minHeight, nextBottom);
          computeVertexMiterNormal(
            previousBottom,
            vertexBottom,
            vertexTop,
            nextBottom,
            vertexNormal
          );
          index = normalsArray.length;
          Cartesian3_default.pack(vertexNormal, normalsArray, index);
          Cartesian3_default.pack(vertexBottom, bottomPositionsArray, index);
          Cartesian3_default.pack(vertexTop, topPositionsArray, index);
          cartographicsArray.push(vertexCartographic.latitude);
          cartographicsArray.push(vertexCartographic.longitude);
          interpolateSegment(
            cartographics[i],
            cartographics[i + 1],
            minHeight,
            maxHeight,
            granularity,
            arcType,
            ellipsoid,
            normalsArray,
            bottomPositionsArray,
            topPositionsArray,
            cartographicsArray
          );
        }
        const endCartographic = cartographics[cartographicsLength - 1];
        const preEndCartographic = cartographics[cartographicsLength - 2];
        vertexBottom = getPosition(
          ellipsoid,
          endCartographic,
          minHeight,
          vertexBottom
        );
        vertexTop = getPosition(ellipsoid, endCartographic, maxHeight, vertexTop);
        if (loop) {
          const postEndCartographic = cartographics[0];
          previousBottom = getPosition(
            ellipsoid,
            preEndCartographic,
            minHeight,
            previousBottom
          );
          nextBottom = getPosition(
            ellipsoid,
            postEndCartographic,
            minHeight,
            nextBottom
          );
          vertexNormal = computeVertexMiterNormal(
            previousBottom,
            vertexBottom,
            vertexTop,
            nextBottom,
            vertexNormal
          );
        } else {
          vertexNormal = computeRightNormal(
            preEndCartographic,
            endCartographic,
            maxHeight,
            ellipsoid,
            vertexNormal
          );
        }
        index = normalsArray.length;
        Cartesian3_default.pack(vertexNormal, normalsArray, index);
        Cartesian3_default.pack(vertexBottom, bottomPositionsArray, index);
        Cartesian3_default.pack(vertexTop, topPositionsArray, index);
        cartographicsArray.push(endCartographic.latitude);
        cartographicsArray.push(endCartographic.longitude);
        if (loop) {
          interpolateSegment(
            endCartographic,
            startCartographic,
            minHeight,
            maxHeight,
            granularity,
            arcType,
            ellipsoid,
            normalsArray,
            bottomPositionsArray,
            topPositionsArray,
            cartographicsArray
          );
          index = normalsArray.length;
          for (i = 0; i < 3; ++i) {
            normalsArray[index + i] = normalsArray[i];
            bottomPositionsArray[index + i] = bottomPositionsArray[i];
            topPositionsArray[index + i] = topPositionsArray[i];
          }
          cartographicsArray.push(startCartographic.latitude);
          cartographicsArray.push(startCartographic.longitude);
        }
        return generateGeometryAttributes(
          loop,
          projection,
          bottomPositionsArray,
          topPositionsArray,
          normalsArray,
          cartographicsArray,
          compute2dAttributes
        );
      };
      lineDirectionScratch = new Cartesian3_default();
      matrix3Scratch = new Matrix3_default();
      quaternionScratch3 = new Quaternion_default();
      endPosCartographicScratch = new Cartographic_default();
      normalStartpointScratch = new Cartesian3_default();
      normalEndpointScratch = new Cartesian3_default();
      adjustHeightNormalScratch = new Cartesian3_default();
      adjustHeightOffsetScratch = new Cartesian3_default();
      nudgeDirectionScratch = new Cartesian3_default();
      startCartographicScratch = new Cartographic_default();
      endCartographicScratch = new Cartographic_default();
      segmentStartTopScratch = new Cartesian3_default();
      segmentEndTopScratch = new Cartesian3_default();
      segmentStartBottomScratch = new Cartesian3_default();
      segmentEndBottomScratch = new Cartesian3_default();
      segmentStartNormalScratch = new Cartesian3_default();
      segmentEndNormalScratch = new Cartesian3_default();
      getHeightCartographics = [
        startCartographicScratch,
        endCartographicScratch
      ];
      getHeightRectangleScratch = new Rectangle_default();
      adjustHeightStartTopScratch = new Cartesian3_default();
      adjustHeightEndTopScratch = new Cartesian3_default();
      adjustHeightStartBottomScratch = new Cartesian3_default();
      adjustHeightEndBottomScratch = new Cartesian3_default();
      segmentStart2DScratch = new Cartesian3_default();
      segmentEnd2DScratch = new Cartesian3_default();
      segmentStartNormal2DScratch = new Cartesian3_default();
      segmentEndNormal2DScratch = new Cartesian3_default();
      offsetScratch2 = new Cartesian3_default();
      startUpScratch = new Cartesian3_default();
      endUpScratch = new Cartesian3_default();
      rightScratch2 = new Cartesian3_default();
      startPlaneNormalScratch = new Cartesian3_default();
      endPlaneNormalScratch = new Cartesian3_default();
      encodeScratch = new EncodedCartesian3_default();
      encodeScratch2D = new EncodedCartesian3_default();
      forwardOffset2DScratch = new Cartesian3_default();
      right2DScratch = new Cartesian3_default();
      normalNudgeScratch = new Cartesian3_default();
      scratchBoundingSpheres = [new BoundingSphere_default(), new BoundingSphere_default()];
      REFERENCE_INDICES = [
        0,
        2,
        1,
        0,
        3,
        2,
        // right
        0,
        7,
        3,
        0,
        4,
        7,
        // start
        0,
        5,
        4,
        0,
        1,
        5,
        // bottom
        5,
        7,
        4,
        5,
        6,
        7,
        // left
        5,
        2,
        6,
        5,
        1,
        2,
        // end
        3,
        6,
        2,
        3,
        7,
        6
        // top
      ];
      REFERENCE_INDICES_LENGTH = REFERENCE_INDICES.length;
      GroundPolylineGeometry._projectNormal = projectNormal;
      GroundPolylineGeometry_default = GroundPolylineGeometry;
    }
  });

  // packages/engine/Source/Workers/createGroundPolylineGeometry.js
  var createGroundPolylineGeometry_exports = {};
  __export(createGroundPolylineGeometry_exports, {
    default: () => createGroundPolylineGeometry_default
  });
  function createGroundPolylineGeometry(groundPolylineGeometry, offset) {
    return ApproximateTerrainHeights_default.initialize().then(function() {
      if (defined_default(offset)) {
        groundPolylineGeometry = GroundPolylineGeometry_default.unpack(
          groundPolylineGeometry,
          offset
        );
      }
      return GroundPolylineGeometry_default.createGeometry(groundPolylineGeometry);
    });
  }
  var createGroundPolylineGeometry_default;
  var init_createGroundPolylineGeometry = __esm({
    "packages/engine/Source/Workers/createGroundPolylineGeometry.js"() {
      init_ApproximateTerrainHeights();
      init_defined();
      init_GroundPolylineGeometry();
      createGroundPolylineGeometry_default = createGroundPolylineGeometry;
    }
  });

  // packages/engine/Source/Core/PlaneGeometry.js
  function PlaneGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    this._vertexFormat = vertexFormat;
    this._workerName = "createPlaneGeometry";
  }
  var scratchVertexFormat8, scratchOptions15, min, max, PlaneGeometry_default;
  var init_PlaneGeometry = __esm({
    "packages/engine/Source/Core/PlaneGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_PrimitiveType();
      init_VertexFormat();
      PlaneGeometry.packedLength = VertexFormat_default.packedLength;
      PlaneGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        return array;
      };
      scratchVertexFormat8 = new VertexFormat_default();
      scratchOptions15 = {
        vertexFormat: scratchVertexFormat8
      };
      PlaneGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat8
        );
        if (!defined_default(result)) {
          return new PlaneGeometry(scratchOptions15);
        }
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        return result;
      };
      min = new Cartesian3_default(-0.5, -0.5, 0);
      max = new Cartesian3_default(0.5, 0.5, 0);
      PlaneGeometry.createGeometry = function(planeGeometry) {
        const vertexFormat = planeGeometry._vertexFormat;
        const attributes = new GeometryAttributes_default();
        let indices;
        let positions;
        if (vertexFormat.position) {
          positions = new Float64Array(4 * 3);
          positions[0] = min.x;
          positions[1] = min.y;
          positions[2] = 0;
          positions[3] = max.x;
          positions[4] = min.y;
          positions[5] = 0;
          positions[6] = max.x;
          positions[7] = max.y;
          positions[8] = 0;
          positions[9] = min.x;
          positions[10] = max.y;
          positions[11] = 0;
          attributes.position = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          });
          if (vertexFormat.normal) {
            const normals = new Float32Array(4 * 3);
            normals[0] = 0;
            normals[1] = 0;
            normals[2] = 1;
            normals[3] = 0;
            normals[4] = 0;
            normals[5] = 1;
            normals[6] = 0;
            normals[7] = 0;
            normals[8] = 1;
            normals[9] = 0;
            normals[10] = 0;
            normals[11] = 1;
            attributes.normal = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: normals
            });
          }
          if (vertexFormat.st) {
            const texCoords = new Float32Array(4 * 2);
            texCoords[0] = 0;
            texCoords[1] = 0;
            texCoords[2] = 1;
            texCoords[3] = 0;
            texCoords[4] = 1;
            texCoords[5] = 1;
            texCoords[6] = 0;
            texCoords[7] = 1;
            attributes.st = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 2,
              values: texCoords
            });
          }
          if (vertexFormat.tangent) {
            const tangents = new Float32Array(4 * 3);
            tangents[0] = 1;
            tangents[1] = 0;
            tangents[2] = 0;
            tangents[3] = 1;
            tangents[4] = 0;
            tangents[5] = 0;
            tangents[6] = 1;
            tangents[7] = 0;
            tangents[8] = 0;
            tangents[9] = 1;
            tangents[10] = 0;
            tangents[11] = 0;
            attributes.tangent = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: tangents
            });
          }
          if (vertexFormat.bitangent) {
            const bitangents = new Float32Array(4 * 3);
            bitangents[0] = 0;
            bitangents[1] = 1;
            bitangents[2] = 0;
            bitangents[3] = 0;
            bitangents[4] = 1;
            bitangents[5] = 0;
            bitangents[6] = 0;
            bitangents[7] = 1;
            bitangents[8] = 0;
            bitangents[9] = 0;
            bitangents[10] = 1;
            bitangents[11] = 0;
            attributes.bitangent = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.FLOAT,
              componentsPerAttribute: 3,
              values: bitangents
            });
          }
          indices = new Uint16Array(2 * 3);
          indices[0] = 0;
          indices[1] = 1;
          indices[2] = 2;
          indices[3] = 0;
          indices[4] = 2;
          indices[5] = 3;
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere: new BoundingSphere_default(Cartesian3_default.ZERO, Math.sqrt(2))
        });
      };
      PlaneGeometry_default = PlaneGeometry;
    }
  });

  // packages/engine/Source/Workers/createPlaneGeometry.js
  var createPlaneGeometry_exports = {};
  __export(createPlaneGeometry_exports, {
    default: () => createPlaneGeometry_default
  });
  function createPlaneGeometry(planeGeometry, offset) {
    if (defined_default(offset)) {
      planeGeometry = PlaneGeometry_default.unpack(planeGeometry, offset);
    }
    return PlaneGeometry_default.createGeometry(planeGeometry);
  }
  var createPlaneGeometry_default;
  var init_createPlaneGeometry = __esm({
    "packages/engine/Source/Workers/createPlaneGeometry.js"() {
      init_defined();
      init_PlaneGeometry();
      createPlaneGeometry_default = createPlaneGeometry;
    }
  });

  // packages/engine/Source/Core/PlaneOutlineGeometry.js
  function PlaneOutlineGeometry() {
    this._workerName = "createPlaneOutlineGeometry";
  }
  var min2, max2, PlaneOutlineGeometry_default;
  var init_PlaneOutlineGeometry = __esm({
    "packages/engine/Source/Core/PlaneOutlineGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_defined();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_PrimitiveType();
      PlaneOutlineGeometry.packedLength = 0;
      PlaneOutlineGeometry.pack = function(value, array) {
        Check_default.defined("value", value);
        Check_default.defined("array", array);
        return array;
      };
      PlaneOutlineGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        if (!defined_default(result)) {
          return new PlaneOutlineGeometry();
        }
        return result;
      };
      min2 = new Cartesian3_default(-0.5, -0.5, 0);
      max2 = new Cartesian3_default(0.5, 0.5, 0);
      PlaneOutlineGeometry.createGeometry = function() {
        const attributes = new GeometryAttributes_default();
        const indices = new Uint16Array(4 * 2);
        const positions = new Float64Array(4 * 3);
        positions[0] = min2.x;
        positions[1] = min2.y;
        positions[2] = min2.z;
        positions[3] = max2.x;
        positions[4] = min2.y;
        positions[5] = min2.z;
        positions[6] = max2.x;
        positions[7] = max2.y;
        positions[8] = min2.z;
        positions[9] = min2.x;
        positions[10] = max2.y;
        positions[11] = min2.z;
        attributes.position = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.DOUBLE,
          componentsPerAttribute: 3,
          values: positions
        });
        indices[0] = 0;
        indices[1] = 1;
        indices[2] = 1;
        indices[3] = 2;
        indices[4] = 2;
        indices[5] = 3;
        indices[6] = 3;
        indices[7] = 0;
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere: new BoundingSphere_default(Cartesian3_default.ZERO, Math.sqrt(2))
        });
      };
      PlaneOutlineGeometry_default = PlaneOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createPlaneOutlineGeometry.js
  var createPlaneOutlineGeometry_exports = {};
  __export(createPlaneOutlineGeometry_exports, {
    default: () => createPlaneOutlineGeometry_default
  });
  function createPlaneOutlineGeometry(planeGeometry, offset) {
    if (defined_default(offset)) {
      planeGeometry = PlaneOutlineGeometry_default.unpack(planeGeometry, offset);
    }
    return PlaneOutlineGeometry_default.createGeometry(planeGeometry);
  }
  var createPlaneOutlineGeometry_default;
  var init_createPlaneOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createPlaneOutlineGeometry.js"() {
      init_defined();
      init_PlaneOutlineGeometry();
      createPlaneOutlineGeometry_default = createPlaneOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/Stereographic.js
  function Stereographic(position, tangentPlane) {
    this.position = position;
    if (!defined_default(this.position)) {
      this.position = new Cartesian2_default();
    }
    this.tangentPlane = tangentPlane;
    if (!defined_default(this.tangentPlane)) {
      this.tangentPlane = Stereographic.NORTH_POLE_TANGENT_PLANE;
    }
  }
  var scratchCartographic5, scratchCartesian10, scratchProjectPointOntoPlaneRay2, scratchProjectPointOntoPlaneRayDirection, scratchProjectPointOntoPlaneCartesian32, Stereographic_default;
  var init_Stereographic = __esm({
    "packages/engine/Source/Core/Stereographic.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_defined();
      init_Ellipsoid();
      init_EllipsoidTangentPlane();
      init_IntersectionTests();
      init_Math();
      init_Ray();
      Object.defineProperties(Stereographic.prototype, {
        /**
         * Gets the ellipsoid.
         * @memberof Stereographic.prototype
         * @type {Ellipsoid}
         */
        ellipsoid: {
          get: function() {
            return this.tangentPlane.ellipsoid;
          }
        },
        /**
         * Gets the x coordinate
         * @memberof Stereographic.prototype
         * @type {number}
         */
        x: {
          get: function() {
            return this.position.x;
          }
        },
        /**
         * Gets the y coordinate
         * @memberof Stereographic.prototype
         * @type {number}
         */
        y: {
          get: function() {
            return this.position.y;
          }
        },
        /**
         * Computes the conformal latitude, or the ellipsoidal latitude projected onto an arbitrary sphere.
         * @memberof Stereographic.prototype
         * @type {number}
         */
        conformalLatitude: {
          get: function() {
            const r = Cartesian2_default.magnitude(this.position);
            const d = 2 * this.ellipsoid.maximumRadius;
            const sign2 = this.tangentPlane.plane.normal.z;
            return sign2 * (Math_default.PI_OVER_TWO - 2 * Math.atan2(r, d));
          }
        },
        /**
         * Computes the longitude
         * @memberof Stereographic.prototype
         * @type {number}
         */
        longitude: {
          get: function() {
            let longitude = Math_default.PI_OVER_TWO + Math.atan2(this.y, this.x);
            if (longitude > Math.PI) {
              longitude -= Math_default.TWO_PI;
            }
            return longitude;
          }
        }
      });
      scratchCartographic5 = new Cartographic_default();
      scratchCartesian10 = new Cartesian3_default();
      Stereographic.prototype.getLatitude = function(ellipsoid) {
        if (!defined_default(ellipsoid)) {
          ellipsoid = Ellipsoid_default.WGS84;
        }
        scratchCartographic5.latitude = this.conformalLatitude;
        scratchCartographic5.longitude = this.longitude;
        scratchCartographic5.height = 0;
        const cartesian11 = this.ellipsoid.cartographicToCartesian(
          scratchCartographic5,
          scratchCartesian10
        );
        ellipsoid.cartesianToCartographic(cartesian11, scratchCartographic5);
        return scratchCartographic5.latitude;
      };
      scratchProjectPointOntoPlaneRay2 = new Ray_default();
      scratchProjectPointOntoPlaneRayDirection = new Cartesian3_default();
      scratchProjectPointOntoPlaneCartesian32 = new Cartesian3_default();
      Stereographic.fromCartesian = function(cartesian11, result) {
        Check_default.defined("cartesian", cartesian11);
        const sign2 = Math_default.signNotZero(cartesian11.z);
        let tangentPlane = Stereographic.NORTH_POLE_TANGENT_PLANE;
        let origin = Stereographic.SOUTH_POLE;
        if (sign2 < 0) {
          tangentPlane = Stereographic.SOUTH_POLE_TANGENT_PLANE;
          origin = Stereographic.NORTH_POLE;
        }
        const ray = scratchProjectPointOntoPlaneRay2;
        ray.origin = tangentPlane.ellipsoid.scaleToGeocentricSurface(
          cartesian11,
          ray.origin
        );
        ray.direction = Cartesian3_default.subtract(
          ray.origin,
          origin,
          scratchProjectPointOntoPlaneRayDirection
        );
        Cartesian3_default.normalize(ray.direction, ray.direction);
        const intersectionPoint = IntersectionTests_default.rayPlane(
          ray,
          tangentPlane.plane,
          scratchProjectPointOntoPlaneCartesian32
        );
        const v3 = Cartesian3_default.subtract(intersectionPoint, origin, intersectionPoint);
        const x = Cartesian3_default.dot(tangentPlane.xAxis, v3);
        const y = sign2 * Cartesian3_default.dot(tangentPlane.yAxis, v3);
        if (!defined_default(result)) {
          return new Stereographic(new Cartesian2_default(x, y), tangentPlane);
        }
        result.position = new Cartesian2_default(x, y);
        result.tangentPlane = tangentPlane;
        return result;
      };
      Stereographic.fromCartesianArray = function(cartesians, result) {
        Check_default.defined("cartesians", cartesians);
        const length = cartesians.length;
        if (!defined_default(result)) {
          result = new Array(length);
        } else {
          result.length = length;
        }
        for (let i = 0; i < length; i++) {
          result[i] = Stereographic.fromCartesian(cartesians[i], result[i]);
        }
        return result;
      };
      Stereographic.clone = function(stereographic, result) {
        if (!defined_default(stereographic)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Stereographic(
            stereographic.position,
            stereographic.tangentPlane
          );
        }
        result.position = stereographic.position;
        result.tangentPlane = stereographic.tangentPlane;
        return result;
      };
      Stereographic.HALF_UNIT_SPHERE = Object.freeze(new Ellipsoid_default(0.5, 0.5, 0.5));
      Stereographic.NORTH_POLE = Object.freeze(new Cartesian3_default(0, 0, 0.5));
      Stereographic.SOUTH_POLE = Object.freeze(new Cartesian3_default(0, 0, -0.5));
      Stereographic.NORTH_POLE_TANGENT_PLANE = Object.freeze(
        new EllipsoidTangentPlane_default(
          Stereographic.NORTH_POLE,
          Stereographic.HALF_UNIT_SPHERE
        )
      );
      Stereographic.SOUTH_POLE_TANGENT_PLANE = Object.freeze(
        new EllipsoidTangentPlane_default(
          Stereographic.SOUTH_POLE,
          Stereographic.HALF_UNIT_SPHERE
        )
      );
      Stereographic_default = Stereographic;
    }
  });

  // packages/engine/Source/Core/PolygonGeometry.js
  function adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {
    const carto12 = ellipsoid.cartesianToCartographic(position, scratchCarto1);
    const height = carto12.height;
    const p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);
    p1Carto.height = height;
    ellipsoid.cartographicToCartesian(p1Carto, p1);
    const p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);
    p2Carto.height = height - 100;
    ellipsoid.cartographicToCartesian(p2Carto, p2);
  }
  function computeAttributes(options) {
    const vertexFormat = options.vertexFormat;
    const geometry = options.geometry;
    const shadowVolume = options.shadowVolume;
    const flatPositions = geometry.attributes.position.values;
    const flatTexcoords = defined_default(geometry.attributes.st) ? geometry.attributes.st.values : void 0;
    let length = flatPositions.length;
    const wall = options.wall;
    const top = options.top || wall;
    const bottom = options.bottom || wall;
    if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {
      const boundingRectangle = options.boundingRectangle;
      const rotationAxis = options.rotationAxis;
      const projectTo2d = options.projectTo2d;
      const ellipsoid = options.ellipsoid;
      const stRotation = options.stRotation;
      const perPositionHeight = options.perPositionHeight;
      const origin = appendTextureCoordinatesOrigin;
      origin.x = boundingRectangle.x;
      origin.y = boundingRectangle.y;
      const textureCoordinates = vertexFormat.st ? new Float32Array(2 * (length / 3)) : void 0;
      let normals;
      if (vertexFormat.normal) {
        if (perPositionHeight && top && !wall) {
          normals = geometry.attributes.normal.values;
        } else {
          normals = new Float32Array(length);
        }
      }
      const tangents = vertexFormat.tangent ? new Float32Array(length) : void 0;
      const bitangents = vertexFormat.bitangent ? new Float32Array(length) : void 0;
      const extrudeNormals = shadowVolume ? new Float32Array(length) : void 0;
      let textureCoordIndex = 0;
      let attrIndex = 0;
      let normal2 = scratchNormal6;
      let tangent = scratchTangent4;
      let bitangent = scratchBitangent4;
      let recomputeNormal = true;
      let textureMatrix = appendTextureCoordinatesMatrix3;
      let tangentRotationMatrix = tangentMatrixScratch2;
      if (stRotation !== 0) {
        let rotation = Quaternion_default.fromAxisAngle(
          rotationAxis,
          stRotation,
          appendTextureCoordinatesQuaternion
        );
        textureMatrix = Matrix3_default.fromQuaternion(rotation, textureMatrix);
        rotation = Quaternion_default.fromAxisAngle(
          rotationAxis,
          -stRotation,
          appendTextureCoordinatesQuaternion
        );
        tangentRotationMatrix = Matrix3_default.fromQuaternion(
          rotation,
          tangentRotationMatrix
        );
      } else {
        textureMatrix = Matrix3_default.clone(Matrix3_default.IDENTITY, textureMatrix);
        tangentRotationMatrix = Matrix3_default.clone(
          Matrix3_default.IDENTITY,
          tangentRotationMatrix
        );
      }
      let bottomOffset = 0;
      let bottomOffset2 = 0;
      if (top && bottom) {
        bottomOffset = length / 2;
        bottomOffset2 = length / 3;
        length /= 2;
      }
      for (let i = 0; i < length; i += 3) {
        const position = Cartesian3_default.fromArray(
          flatPositions,
          i,
          appendTextureCoordinatesCartesian3
        );
        if (vertexFormat.st) {
          if (!defined_default(flatTexcoords)) {
            let p = Matrix3_default.multiplyByVector(
              textureMatrix,
              position,
              scratchPosition3
            );
            p = ellipsoid.scaleToGeodeticSurface(p, p);
            const st = projectTo2d(p, appendTextureCoordinatesCartesian2);
            Cartesian2_default.subtract(st, origin, st);
            const stx = Math_default.clamp(st.x / boundingRectangle.width, 0, 1);
            const sty = Math_default.clamp(st.y / boundingRectangle.height, 0, 1);
            if (bottom) {
              textureCoordinates[textureCoordIndex + bottomOffset2] = stx;
              textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = sty;
            }
            if (top) {
              textureCoordinates[textureCoordIndex] = stx;
              textureCoordinates[textureCoordIndex + 1] = sty;
            }
            textureCoordIndex += 2;
          }
        }
        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {
          const attrIndex1 = attrIndex + 1;
          const attrIndex2 = attrIndex + 2;
          if (wall) {
            if (i + 3 < length) {
              const p1 = Cartesian3_default.fromArray(flatPositions, i + 3, p1Scratch3);
              if (recomputeNormal) {
                const p2 = Cartesian3_default.fromArray(
                  flatPositions,
                  i + length,
                  p2Scratch3
                );
                if (perPositionHeight) {
                  adjustPosHeightsForNormal(position, p1, p2, ellipsoid);
                }
                Cartesian3_default.subtract(p1, position, p1);
                Cartesian3_default.subtract(p2, position, p2);
                normal2 = Cartesian3_default.normalize(
                  Cartesian3_default.cross(p2, p1, normal2),
                  normal2
                );
                recomputeNormal = false;
              }
              if (Cartesian3_default.equalsEpsilon(p1, position, Math_default.EPSILON10)) {
                recomputeNormal = true;
              }
            }
            if (vertexFormat.tangent || vertexFormat.bitangent) {
              bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);
              if (vertexFormat.tangent) {
                tangent = Cartesian3_default.normalize(
                  Cartesian3_default.cross(bitangent, normal2, tangent),
                  tangent
                );
              }
            }
          } else {
            normal2 = ellipsoid.geodeticSurfaceNormal(position, normal2);
            if (vertexFormat.tangent || vertexFormat.bitangent) {
              if (perPositionHeight) {
                scratchPerPosNormal = Cartesian3_default.fromArray(
                  normals,
                  attrIndex,
                  scratchPerPosNormal
                );
                scratchPerPosTangent = Cartesian3_default.cross(
                  Cartesian3_default.UNIT_Z,
                  scratchPerPosNormal,
                  scratchPerPosTangent
                );
                scratchPerPosTangent = Cartesian3_default.normalize(
                  Matrix3_default.multiplyByVector(
                    tangentRotationMatrix,
                    scratchPerPosTangent,
                    scratchPerPosTangent
                  ),
                  scratchPerPosTangent
                );
                if (vertexFormat.bitangent) {
                  scratchPerPosBitangent = Cartesian3_default.normalize(
                    Cartesian3_default.cross(
                      scratchPerPosNormal,
                      scratchPerPosTangent,
                      scratchPerPosBitangent
                    ),
                    scratchPerPosBitangent
                  );
                }
              }
              tangent = Cartesian3_default.cross(Cartesian3_default.UNIT_Z, normal2, tangent);
              tangent = Cartesian3_default.normalize(
                Matrix3_default.multiplyByVector(tangentRotationMatrix, tangent, tangent),
                tangent
              );
              if (vertexFormat.bitangent) {
                bitangent = Cartesian3_default.normalize(
                  Cartesian3_default.cross(normal2, tangent, bitangent),
                  bitangent
                );
              }
            }
          }
          if (vertexFormat.normal) {
            if (options.wall) {
              normals[attrIndex + bottomOffset] = normal2.x;
              normals[attrIndex1 + bottomOffset] = normal2.y;
              normals[attrIndex2 + bottomOffset] = normal2.z;
            } else if (bottom) {
              normals[attrIndex + bottomOffset] = -normal2.x;
              normals[attrIndex1 + bottomOffset] = -normal2.y;
              normals[attrIndex2 + bottomOffset] = -normal2.z;
            }
            if (top && !perPositionHeight || wall) {
              normals[attrIndex] = normal2.x;
              normals[attrIndex1] = normal2.y;
              normals[attrIndex2] = normal2.z;
            }
          }
          if (shadowVolume) {
            if (wall) {
              normal2 = ellipsoid.geodeticSurfaceNormal(position, normal2);
            }
            extrudeNormals[attrIndex + bottomOffset] = -normal2.x;
            extrudeNormals[attrIndex1 + bottomOffset] = -normal2.y;
            extrudeNormals[attrIndex2 + bottomOffset] = -normal2.z;
          }
          if (vertexFormat.tangent) {
            if (options.wall) {
              tangents[attrIndex + bottomOffset] = tangent.x;
              tangents[attrIndex1 + bottomOffset] = tangent.y;
              tangents[attrIndex2 + bottomOffset] = tangent.z;
            } else if (bottom) {
              tangents[attrIndex + bottomOffset] = -tangent.x;
              tangents[attrIndex1 + bottomOffset] = -tangent.y;
              tangents[attrIndex2 + bottomOffset] = -tangent.z;
            }
            if (top) {
              if (perPositionHeight) {
                tangents[attrIndex] = scratchPerPosTangent.x;
                tangents[attrIndex1] = scratchPerPosTangent.y;
                tangents[attrIndex2] = scratchPerPosTangent.z;
              } else {
                tangents[attrIndex] = tangent.x;
                tangents[attrIndex1] = tangent.y;
                tangents[attrIndex2] = tangent.z;
              }
            }
          }
          if (vertexFormat.bitangent) {
            if (bottom) {
              bitangents[attrIndex + bottomOffset] = bitangent.x;
              bitangents[attrIndex1 + bottomOffset] = bitangent.y;
              bitangents[attrIndex2 + bottomOffset] = bitangent.z;
            }
            if (top) {
              if (perPositionHeight) {
                bitangents[attrIndex] = scratchPerPosBitangent.x;
                bitangents[attrIndex1] = scratchPerPosBitangent.y;
                bitangents[attrIndex2] = scratchPerPosBitangent.z;
              } else {
                bitangents[attrIndex] = bitangent.x;
                bitangents[attrIndex1] = bitangent.y;
                bitangents[attrIndex2] = bitangent.z;
              }
            }
          }
          attrIndex += 3;
        }
      }
      if (vertexFormat.st && !defined_default(flatTexcoords)) {
        geometry.attributes.st = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 2,
          values: textureCoordinates
        });
      }
      if (vertexFormat.normal) {
        geometry.attributes.normal = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 3,
          values: normals
        });
      }
      if (vertexFormat.tangent) {
        geometry.attributes.tangent = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 3,
          values: tangents
        });
      }
      if (vertexFormat.bitangent) {
        geometry.attributes.bitangent = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 3,
          values: bitangents
        });
      }
      if (shadowVolume) {
        geometry.attributes.extrudeDirection = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 3,
          values: extrudeNormals
        });
      }
    }
    if (options.extrude && defined_default(options.offsetAttribute)) {
      const size = flatPositions.length / 3;
      let offsetAttribute = new Uint8Array(size);
      if (options.offsetAttribute === GeometryOffsetAttribute_default.TOP) {
        if (top && bottom || wall) {
          offsetAttribute = offsetAttribute.fill(1, 0, size / 2);
        } else if (top) {
          offsetAttribute = offsetAttribute.fill(1);
        }
      } else {
        const offsetValue = options.offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
        offsetAttribute = offsetAttribute.fill(offsetValue);
      }
      geometry.attributes.applyOffset = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
        componentsPerAttribute: 1,
        values: offsetAttribute
      });
    }
    return geometry;
  }
  function createGeometryFromPositionsExtruded(ellipsoid, polygon2, textureCoordinates, granularity, hierarchy, perPositionHeight, closeTop, closeBottom, vertexFormat, arcType) {
    const geos = {
      walls: []
    };
    let i;
    if (closeTop || closeBottom) {
      const topGeo = PolygonGeometryLibrary_default.createGeometryFromPositions(
        ellipsoid,
        polygon2,
        textureCoordinates,
        granularity,
        perPositionHeight,
        vertexFormat,
        arcType
      );
      const edgePoints = topGeo.attributes.position.values;
      const indices = topGeo.indices;
      let numPositions;
      let newIndices;
      if (closeTop && closeBottom) {
        const topBottomPositions = edgePoints.concat(edgePoints);
        numPositions = topBottomPositions.length / 3;
        newIndices = IndexDatatype_default.createTypedArray(
          numPositions,
          indices.length * 2
        );
        newIndices.set(indices);
        const ilength = indices.length;
        const length = numPositions / 2;
        for (i = 0; i < ilength; i += 3) {
          const i0 = newIndices[i] + length;
          const i1 = newIndices[i + 1] + length;
          const i2 = newIndices[i + 2] + length;
          newIndices[i + ilength] = i2;
          newIndices[i + 1 + ilength] = i1;
          newIndices[i + 2 + ilength] = i0;
        }
        topGeo.attributes.position.values = topBottomPositions;
        if (perPositionHeight && vertexFormat.normal) {
          const normals = topGeo.attributes.normal.values;
          topGeo.attributes.normal.values = new Float32Array(
            topBottomPositions.length
          );
          topGeo.attributes.normal.values.set(normals);
        }
        if (vertexFormat.st && defined_default(textureCoordinates)) {
          const texcoords = topGeo.attributes.st.values;
          topGeo.attributes.st.values = new Float32Array(numPositions * 2);
          topGeo.attributes.st.values = texcoords.concat(texcoords);
        }
        topGeo.indices = newIndices;
      } else if (closeBottom) {
        numPositions = edgePoints.length / 3;
        newIndices = IndexDatatype_default.createTypedArray(numPositions, indices.length);
        for (i = 0; i < indices.length; i += 3) {
          newIndices[i] = indices[i + 2];
          newIndices[i + 1] = indices[i + 1];
          newIndices[i + 2] = indices[i];
        }
        topGeo.indices = newIndices;
      }
      geos.topAndBottom = new GeometryInstance_default({
        geometry: topGeo
      });
    }
    let outerRing = hierarchy.outerRing;
    const tangentPlane = EllipsoidTangentPlane_default.fromPoints(outerRing, ellipsoid);
    let positions2D = tangentPlane.projectPointsOntoPlane(
      outerRing,
      createGeometryFromPositionsExtrudedPositions
    );
    let windingOrder = PolygonPipeline_default.computeWindingOrder2D(positions2D);
    if (windingOrder === WindingOrder_default.CLOCKWISE) {
      outerRing = outerRing.slice().reverse();
    }
    let wallGeo = PolygonGeometryLibrary_default.computeWallGeometry(
      outerRing,
      textureCoordinates,
      ellipsoid,
      granularity,
      perPositionHeight,
      arcType
    );
    geos.walls.push(
      new GeometryInstance_default({
        geometry: wallGeo
      })
    );
    const holes = hierarchy.holes;
    for (i = 0; i < holes.length; i++) {
      let hole = holes[i];
      positions2D = tangentPlane.projectPointsOntoPlane(
        hole,
        createGeometryFromPositionsExtrudedPositions
      );
      windingOrder = PolygonPipeline_default.computeWindingOrder2D(positions2D);
      if (windingOrder === WindingOrder_default.COUNTER_CLOCKWISE) {
        hole = hole.slice().reverse();
      }
      wallGeo = PolygonGeometryLibrary_default.computeWallGeometry(
        hole,
        textureCoordinates,
        ellipsoid,
        granularity,
        perPositionHeight,
        arcType
      );
      geos.walls.push(
        new GeometryInstance_default({
          geometry: wallGeo
        })
      );
    }
    return geos;
  }
  function PolygonGeometry(options) {
    Check_default.typeOf.object("options", options);
    Check_default.typeOf.object("options.polygonHierarchy", options.polygonHierarchy);
    if (defined_default(options.perPositionHeight) && options.perPositionHeight && defined_default(options.height)) {
      throw new DeveloperError_default(
        "Cannot use both options.perPositionHeight and options.height"
      );
    }
    if (defined_default(options.arcType) && options.arcType !== ArcType_default.GEODESIC && options.arcType !== ArcType_default.RHUMB) {
      throw new DeveloperError_default(
        "Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB."
      );
    }
    const polygonHierarchy = options.polygonHierarchy;
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    const granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    const stRotation = defaultValue_default(options.stRotation, 0);
    const textureCoordinates = options.textureCoordinates;
    const perPositionHeight = defaultValue_default(options.perPositionHeight, false);
    const perPositionHeightExtrude = perPositionHeight && defined_default(options.extrudedHeight);
    let height = defaultValue_default(options.height, 0);
    let extrudedHeight = defaultValue_default(options.extrudedHeight, height);
    if (!perPositionHeightExtrude) {
      const h = Math.max(height, extrudedHeight);
      extrudedHeight = Math.min(height, extrudedHeight);
      height = h;
    }
    this._vertexFormat = VertexFormat_default.clone(vertexFormat);
    this._ellipsoid = Ellipsoid_default.clone(ellipsoid);
    this._granularity = granularity;
    this._stRotation = stRotation;
    this._height = height;
    this._extrudedHeight = extrudedHeight;
    this._closeTop = defaultValue_default(options.closeTop, true);
    this._closeBottom = defaultValue_default(options.closeBottom, true);
    this._polygonHierarchy = polygonHierarchy;
    this._perPositionHeight = perPositionHeight;
    this._perPositionHeightExtrude = perPositionHeightExtrude;
    this._shadowVolume = defaultValue_default(options.shadowVolume, false);
    this._workerName = "createPolygonGeometry";
    this._offsetAttribute = options.offsetAttribute;
    this._arcType = defaultValue_default(options.arcType, ArcType_default.GEODESIC);
    this._rectangle = void 0;
    this._textureCoordinateRotationPoints = void 0;
    this._textureCoordinates = textureCoordinates;
    this.packedLength = PolygonGeometryLibrary_default.computeHierarchyPackedLength(
      polygonHierarchy,
      Cartesian3_default
    ) + Ellipsoid_default.packedLength + VertexFormat_default.packedLength + (textureCoordinates ? PolygonGeometryLibrary_default.computeHierarchyPackedLength(
      textureCoordinates,
      Cartesian2_default
    ) : 1) + 12;
  }
  function expandRectangle(polar, lastPolar, ellipsoid, arcType, polygon2, result) {
    const longitude = polar.longitude;
    const lonAdjusted = longitude >= 0 ? longitude : longitude + Math_default.TWO_PI;
    polygon2.westOverIdl = Math.min(polygon2.westOverIdl, lonAdjusted);
    polygon2.eastOverIdl = Math.max(polygon2.eastOverIdl, lonAdjusted);
    result.west = Math.min(result.west, longitude);
    result.east = Math.max(result.east, longitude);
    const latitude = polar.getLatitude(ellipsoid);
    let segmentLatitude = latitude;
    result.south = Math.min(result.south, latitude);
    result.north = Math.max(result.north, latitude);
    if (arcType !== ArcType_default.RHUMB) {
      const segment = Cartesian2_default.subtract(
        lastPolar.position,
        polar.position,
        scratchCartesian02
      );
      const t = Cartesian2_default.dot(lastPolar.position, segment) / Cartesian2_default.dot(segment, segment);
      if (t > 0 && t < 1) {
        const projected = Cartesian2_default.add(
          lastPolar.position,
          Cartesian2_default.multiplyByScalar(segment, -t, segment),
          scratchCartesian18
        );
        const closestPolar = Stereographic_default.clone(lastPolar, scratchPolarClosest);
        closestPolar.position = projected;
        const adjustedLatitude = closestPolar.getLatitude(ellipsoid);
        result.south = Math.min(result.south, adjustedLatitude);
        result.north = Math.max(result.north, adjustedLatitude);
        if (Math.abs(latitude) > Math.abs(adjustedLatitude)) {
          segmentLatitude = adjustedLatitude;
        }
      }
    }
    const direction2 = lastPolar.x * polar.y - polar.x * lastPolar.y;
    let angle = Math.sign(direction2);
    if (angle !== 0) {
      angle *= Cartesian2_default.angleBetween(lastPolar.position, polar.position);
    }
    if (segmentLatitude >= 0) {
      polygon2.northAngle += angle;
    }
    if (segmentLatitude <= 0) {
      polygon2.southAngle += angle;
    }
  }
  function getTangentPlane(rectangle, positions, ellipsoid) {
    if (rectangle.height >= Math_default.PI || rectangle.width >= Math_default.PI) {
      const polar = Stereographic_default.fromCartesian(
        positions[0],
        scratchPolarForPlane
      );
      return polar.tangentPlane;
    }
    return EllipsoidTangentPlane_default.fromPoints(positions, ellipsoid);
  }
  function createProjectTo2d(rectangle, outerPositions, ellipsoid) {
    return (positions, results) => {
      if (rectangle.height >= Math_default.PI || rectangle.width >= Math_default.PI) {
        if (rectangle.south < 0 && rectangle.north > 0) {
          if (!defined_default(results)) {
            results = [];
          }
          for (let i = 0; i < positions.length; ++i) {
            const cartographic2 = ellipsoid.cartesianToCartographic(
              positions[i],
              scratchCartographicCyllindrical
            );
            results[i] = new Cartesian2_default(
              cartographic2.longitude / Math_default.PI,
              cartographic2.latitude / Math_default.PI_OVER_TWO
            );
          }
          results.length = positions.length;
          return results;
        }
        return Stereographic_default.fromCartesianArray(positions, results);
      }
      const tangentPlane = EllipsoidTangentPlane_default.fromPoints(
        outerPositions,
        ellipsoid
      );
      return tangentPlane.projectPointsOntoPlane(positions, results);
    };
  }
  function createProjectPositionTo2d(rectangle, outerRing, ellipsoid) {
    if (rectangle.height >= Math_default.PI || rectangle.width >= Math_default.PI) {
      return (position, result) => {
        if (rectangle.south < 0 && rectangle.north > 0) {
          const cartographic2 = ellipsoid.cartesianToCartographic(
            position,
            scratchCartographicCyllindrical
          );
          if (!defined_default(result)) {
            result = new Cartesian2_default();
          }
          result.x = cartographic2.longitude / Math_default.PI;
          result.y = cartographic2.latitude / Math_default.PI_OVER_TWO;
          return result;
        }
        return Stereographic_default.fromCartesian(position, result);
      };
    }
    const tangentPlane = EllipsoidTangentPlane_default.fromPoints(outerRing, ellipsoid);
    return (position, result) => {
      return tangentPlane.projectPointsOntoPlane(position, result);
    };
  }
  function createSplitPolygons(rectangle, ellipsoid, arcType, perPositionHeight) {
    return (polygons, results) => {
      if (!perPositionHeight && (rectangle.height >= Math_default.PI_OVER_TWO || rectangle.width >= 2 * Math_default.PI_OVER_THREE)) {
        return PolygonGeometryLibrary_default.splitPolygonsOnEquator(
          polygons,
          ellipsoid,
          arcType,
          results
        );
      }
      return polygons;
    };
  }
  function computeBoundingRectangle(outerRing, rectangle, ellipsoid, stRotation) {
    if (rectangle.height >= Math_default.PI || rectangle.width >= Math_default.PI) {
      return BoundingRectangle_default.fromRectangle(
        rectangle,
        void 0,
        scratchBoundingRectangle
      );
    }
    const outerPositions = outerRing;
    const tangentPlane = EllipsoidTangentPlane_default.fromPoints(
      outerPositions,
      ellipsoid
    );
    return PolygonGeometryLibrary_default.computeBoundingRectangle(
      tangentPlane.plane.normal,
      tangentPlane.projectPointOntoPlane.bind(tangentPlane),
      outerPositions,
      stRotation,
      scratchBoundingRectangle
    );
  }
  function textureCoordinateRotationPoints2(polygonGeometry) {
    const stRotation = -polygonGeometry._stRotation;
    if (stRotation === 0) {
      return [0, 0, 0, 1, 1, 0];
    }
    const ellipsoid = polygonGeometry._ellipsoid;
    const positions = polygonGeometry._polygonHierarchy.positions;
    const boundingRectangle = polygonGeometry.rectangle;
    return Geometry_default._textureCoordinateRotationPoints(
      positions,
      stRotation,
      ellipsoid,
      boundingRectangle
    );
  }
  var scratchCarto1, scratchCarto2, scratchBoundingRectangle, scratchPosition3, scratchNormal6, scratchTangent4, scratchBitangent4, p1Scratch3, p2Scratch3, scratchPerPosNormal, scratchPerPosTangent, scratchPerPosBitangent, appendTextureCoordinatesOrigin, appendTextureCoordinatesCartesian2, appendTextureCoordinatesCartesian3, appendTextureCoordinatesQuaternion, appendTextureCoordinatesMatrix3, tangentMatrixScratch2, createGeometryFromPositionsExtrudedPositions, scratchEllipsoid6, scratchVertexFormat9, dummyOptions, scratchCartesian02, scratchCartesian18, scratchPolarClosest, scratchPolar, scratchPolarPrevious, polygon, scratchPolarForPlane, scratchCartographicCyllindrical, PolygonGeometry_default;
  var init_PolygonGeometry = __esm({
    "packages/engine/Source/Core/PolygonGeometry.js"() {
      init_ArcType();
      init_BoundingRectangle();
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_EllipsoidTangentPlane();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryInstance();
      init_GeometryOffsetAttribute();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_Math();
      init_Matrix3();
      init_PolygonGeometryLibrary();
      init_PolygonPipeline();
      init_Quaternion();
      init_Rectangle();
      init_Stereographic();
      init_VertexFormat();
      init_WindingOrder();
      scratchCarto1 = new Cartographic_default();
      scratchCarto2 = new Cartographic_default();
      scratchBoundingRectangle = new BoundingRectangle_default();
      scratchPosition3 = new Cartesian3_default();
      scratchNormal6 = new Cartesian3_default();
      scratchTangent4 = new Cartesian3_default();
      scratchBitangent4 = new Cartesian3_default();
      p1Scratch3 = new Cartesian3_default();
      p2Scratch3 = new Cartesian3_default();
      scratchPerPosNormal = new Cartesian3_default();
      scratchPerPosTangent = new Cartesian3_default();
      scratchPerPosBitangent = new Cartesian3_default();
      appendTextureCoordinatesOrigin = new Cartesian2_default();
      appendTextureCoordinatesCartesian2 = new Cartesian2_default();
      appendTextureCoordinatesCartesian3 = new Cartesian3_default();
      appendTextureCoordinatesQuaternion = new Quaternion_default();
      appendTextureCoordinatesMatrix3 = new Matrix3_default();
      tangentMatrixScratch2 = new Matrix3_default();
      createGeometryFromPositionsExtrudedPositions = [];
      PolygonGeometry.fromPositions = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        Check_default.defined("options.positions", options.positions);
        const newOptions = {
          polygonHierarchy: {
            positions: options.positions
          },
          height: options.height,
          extrudedHeight: options.extrudedHeight,
          vertexFormat: options.vertexFormat,
          stRotation: options.stRotation,
          ellipsoid: options.ellipsoid,
          granularity: options.granularity,
          perPositionHeight: options.perPositionHeight,
          closeTop: options.closeTop,
          closeBottom: options.closeBottom,
          offsetAttribute: options.offsetAttribute,
          arcType: options.arcType,
          textureCoordinates: options.textureCoordinates
        };
        return new PolygonGeometry(newOptions);
      };
      PolygonGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        startingIndex = PolygonGeometryLibrary_default.packPolygonHierarchy(
          value._polygonHierarchy,
          array,
          startingIndex,
          Cartesian3_default
        );
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._height;
        array[startingIndex++] = value._extrudedHeight;
        array[startingIndex++] = value._granularity;
        array[startingIndex++] = value._stRotation;
        array[startingIndex++] = value._perPositionHeightExtrude ? 1 : 0;
        array[startingIndex++] = value._perPositionHeight ? 1 : 0;
        array[startingIndex++] = value._closeTop ? 1 : 0;
        array[startingIndex++] = value._closeBottom ? 1 : 0;
        array[startingIndex++] = value._shadowVolume ? 1 : 0;
        array[startingIndex++] = defaultValue_default(value._offsetAttribute, -1);
        array[startingIndex++] = value._arcType;
        if (defined_default(value._textureCoordinates)) {
          startingIndex = PolygonGeometryLibrary_default.packPolygonHierarchy(
            value._textureCoordinates,
            array,
            startingIndex,
            Cartesian2_default
          );
        } else {
          array[startingIndex++] = -1;
        }
        array[startingIndex++] = value.packedLength;
        return array;
      };
      scratchEllipsoid6 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchVertexFormat9 = new VertexFormat_default();
      dummyOptions = {
        polygonHierarchy: {}
      };
      PolygonGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const polygonHierarchy = PolygonGeometryLibrary_default.unpackPolygonHierarchy(
          array,
          startingIndex,
          Cartesian3_default
        );
        startingIndex = polygonHierarchy.startingIndex;
        delete polygonHierarchy.startingIndex;
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid6);
        startingIndex += Ellipsoid_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat9
        );
        startingIndex += VertexFormat_default.packedLength;
        const height = array[startingIndex++];
        const extrudedHeight = array[startingIndex++];
        const granularity = array[startingIndex++];
        const stRotation = array[startingIndex++];
        const perPositionHeightExtrude = array[startingIndex++] === 1;
        const perPositionHeight = array[startingIndex++] === 1;
        const closeTop = array[startingIndex++] === 1;
        const closeBottom = array[startingIndex++] === 1;
        const shadowVolume = array[startingIndex++] === 1;
        const offsetAttribute = array[startingIndex++];
        const arcType = array[startingIndex++];
        const textureCoordinates = array[startingIndex] === -1 ? void 0 : PolygonGeometryLibrary_default.unpackPolygonHierarchy(
          array,
          startingIndex,
          Cartesian2_default
        );
        if (defined_default(textureCoordinates)) {
          startingIndex = textureCoordinates.startingIndex;
          delete textureCoordinates.startingIndex;
        } else {
          startingIndex++;
        }
        const packedLength = array[startingIndex++];
        if (!defined_default(result)) {
          result = new PolygonGeometry(dummyOptions);
        }
        result._polygonHierarchy = polygonHierarchy;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._height = height;
        result._extrudedHeight = extrudedHeight;
        result._granularity = granularity;
        result._stRotation = stRotation;
        result._perPositionHeightExtrude = perPositionHeightExtrude;
        result._perPositionHeight = perPositionHeight;
        result._closeTop = closeTop;
        result._closeBottom = closeBottom;
        result._shadowVolume = shadowVolume;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        result._arcType = arcType;
        result._textureCoordinates = textureCoordinates;
        result.packedLength = packedLength;
        return result;
      };
      scratchCartesian02 = new Cartesian2_default();
      scratchCartesian18 = new Cartesian2_default();
      scratchPolarClosest = new Stereographic_default();
      scratchPolar = new Stereographic_default();
      scratchPolarPrevious = new Stereographic_default();
      polygon = {
        northAngle: 0,
        southAngle: 0,
        westOverIdl: 0,
        eastOverIdl: 0
      };
      PolygonGeometry.computeRectangleFromPositions = function(positions, ellipsoid, arcType, result) {
        Check_default.defined("positions", positions);
        if (!defined_default(result)) {
          result = new Rectangle_default();
        }
        if (positions.length < 3) {
          return result;
        }
        result.west = Number.POSITIVE_INFINITY;
        result.east = Number.NEGATIVE_INFINITY;
        result.south = Number.POSITIVE_INFINITY;
        result.north = Number.NEGATIVE_INFINITY;
        polygon.northAngle = 0;
        polygon.southAngle = 0;
        polygon.westOverIdl = Number.POSITIVE_INFINITY;
        polygon.eastOverIdl = Number.NEGATIVE_INFINITY;
        const positionsLength = positions.length;
        let lastPolarPosition = Stereographic_default.fromCartesian(
          positions[0],
          scratchPolarPrevious
        );
        for (let i = 1; i < positionsLength; i++) {
          const polarPosition = Stereographic_default.fromCartesian(
            positions[i],
            scratchPolar
          );
          expandRectangle(
            polarPosition,
            lastPolarPosition,
            ellipsoid,
            arcType,
            polygon,
            result
          );
          lastPolarPosition = Stereographic_default.clone(polarPosition, lastPolarPosition);
        }
        expandRectangle(
          Stereographic_default.fromCartesian(positions[0], scratchPolar),
          lastPolarPosition,
          ellipsoid,
          arcType,
          polygon,
          result
        );
        if (result.east - result.west > polygon.eastOverIdl - polygon.westOverIdl) {
          result.west = polygon.westOverIdl;
          result.east = polygon.eastOverIdl;
          if (result.east > Math_default.PI) {
            result.east = result.east - Math_default.TWO_PI;
          }
          if (result.west > Math_default.PI) {
            result.west = result.west - Math_default.TWO_PI;
          }
        }
        if (Math_default.equalsEpsilon(
          Math.abs(polygon.northAngle),
          Math_default.TWO_PI,
          Math_default.EPSILON10
        )) {
          result.north = Math_default.PI_OVER_TWO;
          result.east = Math_default.PI;
          result.west = -Math_default.PI;
        }
        if (Math_default.equalsEpsilon(
          Math.abs(polygon.southAngle),
          Math_default.TWO_PI,
          Math_default.EPSILON10
        )) {
          result.south = -Math_default.PI_OVER_TWO;
          result.east = Math_default.PI;
          result.west = -Math_default.PI;
        }
        return result;
      };
      scratchPolarForPlane = new Stereographic_default();
      scratchCartographicCyllindrical = new Cartographic_default();
      PolygonGeometry.createGeometry = function(polygonGeometry) {
        const vertexFormat = polygonGeometry._vertexFormat;
        const ellipsoid = polygonGeometry._ellipsoid;
        const granularity = polygonGeometry._granularity;
        const stRotation = polygonGeometry._stRotation;
        const polygonHierarchy = polygonGeometry._polygonHierarchy;
        const perPositionHeight = polygonGeometry._perPositionHeight;
        const closeTop = polygonGeometry._closeTop;
        const closeBottom = polygonGeometry._closeBottom;
        const arcType = polygonGeometry._arcType;
        const textureCoordinates = polygonGeometry._textureCoordinates;
        const hasTextureCoordinates = defined_default(textureCoordinates);
        const outerPositions = polygonHierarchy.positions;
        if (outerPositions.length < 3) {
          return;
        }
        const rectangle = polygonGeometry.rectangle;
        const results = PolygonGeometryLibrary_default.polygonsFromHierarchy(
          polygonHierarchy,
          hasTextureCoordinates,
          createProjectTo2d(rectangle, outerPositions, ellipsoid),
          !perPositionHeight,
          ellipsoid,
          createSplitPolygons(rectangle, ellipsoid, arcType, perPositionHeight)
        );
        const hierarchy = results.hierarchy;
        const polygons = results.polygons;
        const dummyFunction = function(identity) {
          return identity;
        };
        const textureCoordinatePolygons = hasTextureCoordinates ? PolygonGeometryLibrary_default.polygonsFromHierarchy(
          textureCoordinates,
          true,
          dummyFunction,
          false,
          ellipsoid
        ).polygons : void 0;
        if (hierarchy.length === 0) {
          return;
        }
        const outerRing = hierarchy[0].outerRing;
        const boundingRectangle = computeBoundingRectangle(
          outerRing,
          rectangle,
          ellipsoid,
          stRotation
        );
        const geometries = [];
        const height = polygonGeometry._height;
        const extrudedHeight = polygonGeometry._extrudedHeight;
        const extrude = polygonGeometry._perPositionHeightExtrude || !Math_default.equalsEpsilon(height, extrudedHeight, 0, Math_default.EPSILON2);
        const options = {
          perPositionHeight,
          vertexFormat,
          geometry: void 0,
          rotationAxis: getTangentPlane(rectangle, outerRing, ellipsoid).plane.normal,
          projectTo2d: createProjectPositionTo2d(rectangle, outerRing, ellipsoid),
          boundingRectangle,
          ellipsoid,
          stRotation,
          textureCoordinates: void 0,
          bottom: false,
          top: true,
          wall: false,
          extrude: false,
          arcType
        };
        let i;
        if (extrude) {
          options.extrude = true;
          options.top = closeTop;
          options.bottom = closeBottom;
          options.shadowVolume = polygonGeometry._shadowVolume;
          options.offsetAttribute = polygonGeometry._offsetAttribute;
          for (i = 0; i < polygons.length; i++) {
            const splitGeometry = createGeometryFromPositionsExtruded(
              ellipsoid,
              polygons[i],
              hasTextureCoordinates ? textureCoordinatePolygons[i] : void 0,
              granularity,
              hierarchy[i],
              perPositionHeight,
              closeTop,
              closeBottom,
              vertexFormat,
              arcType
            );
            let topAndBottom;
            if (closeTop && closeBottom) {
              topAndBottom = splitGeometry.topAndBottom;
              options.geometry = PolygonGeometryLibrary_default.scaleToGeodeticHeightExtruded(
                topAndBottom.geometry,
                height,
                extrudedHeight,
                ellipsoid,
                perPositionHeight
              );
            } else if (closeTop) {
              topAndBottom = splitGeometry.topAndBottom;
              topAndBottom.geometry.attributes.position.values = PolygonPipeline_default.scaleToGeodeticHeight(
                topAndBottom.geometry.attributes.position.values,
                height,
                ellipsoid,
                !perPositionHeight
              );
              options.geometry = topAndBottom.geometry;
            } else if (closeBottom) {
              topAndBottom = splitGeometry.topAndBottom;
              topAndBottom.geometry.attributes.position.values = PolygonPipeline_default.scaleToGeodeticHeight(
                topAndBottom.geometry.attributes.position.values,
                extrudedHeight,
                ellipsoid,
                true
              );
              options.geometry = topAndBottom.geometry;
            }
            if (closeTop || closeBottom) {
              options.wall = false;
              topAndBottom.geometry = computeAttributes(options);
              geometries.push(topAndBottom);
            }
            const walls = splitGeometry.walls;
            options.wall = true;
            for (let k = 0; k < walls.length; k++) {
              const wall = walls[k];
              options.geometry = PolygonGeometryLibrary_default.scaleToGeodeticHeightExtruded(
                wall.geometry,
                height,
                extrudedHeight,
                ellipsoid,
                perPositionHeight
              );
              wall.geometry = computeAttributes(options);
              geometries.push(wall);
            }
          }
        } else {
          for (i = 0; i < polygons.length; i++) {
            const geometryInstance = new GeometryInstance_default({
              geometry: PolygonGeometryLibrary_default.createGeometryFromPositions(
                ellipsoid,
                polygons[i],
                hasTextureCoordinates ? textureCoordinatePolygons[i] : void 0,
                granularity,
                perPositionHeight,
                vertexFormat,
                arcType
              )
            });
            geometryInstance.geometry.attributes.position.values = PolygonPipeline_default.scaleToGeodeticHeight(
              geometryInstance.geometry.attributes.position.values,
              height,
              ellipsoid,
              !perPositionHeight
            );
            options.geometry = geometryInstance.geometry;
            geometryInstance.geometry = computeAttributes(options);
            if (defined_default(polygonGeometry._offsetAttribute)) {
              const length = geometryInstance.geometry.attributes.position.values.length;
              const offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
              const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
              geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute_default(
                {
                  componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
                  componentsPerAttribute: 1,
                  values: applyOffset
                }
              );
            }
            geometries.push(geometryInstance);
          }
        }
        const geometry = GeometryPipeline_default.combineInstances(geometries)[0];
        geometry.attributes.position.values = new Float64Array(
          geometry.attributes.position.values
        );
        geometry.indices = IndexDatatype_default.createTypedArray(
          geometry.attributes.position.values.length / 3,
          geometry.indices
        );
        const attributes = geometry.attributes;
        const boundingSphere = BoundingSphere_default.fromVertices(
          attributes.position.values
        );
        if (!vertexFormat.position) {
          delete attributes.position;
        }
        return new Geometry_default({
          attributes,
          indices: geometry.indices,
          primitiveType: geometry.primitiveType,
          boundingSphere,
          offsetAttribute: polygonGeometry._offsetAttribute
        });
      };
      PolygonGeometry.createShadowVolume = function(polygonGeometry, minHeightFunc, maxHeightFunc) {
        const granularity = polygonGeometry._granularity;
        const ellipsoid = polygonGeometry._ellipsoid;
        const minHeight = minHeightFunc(granularity, ellipsoid);
        const maxHeight = maxHeightFunc(granularity, ellipsoid);
        return new PolygonGeometry({
          polygonHierarchy: polygonGeometry._polygonHierarchy,
          ellipsoid,
          stRotation: polygonGeometry._stRotation,
          granularity,
          perPositionHeight: false,
          extrudedHeight: minHeight,
          height: maxHeight,
          vertexFormat: VertexFormat_default.POSITION_ONLY,
          shadowVolume: true,
          arcType: polygonGeometry._arcType
        });
      };
      Object.defineProperties(PolygonGeometry.prototype, {
        /**
         * @private
         */
        rectangle: {
          get: function() {
            if (!defined_default(this._rectangle)) {
              const positions = this._polygonHierarchy.positions;
              this._rectangle = PolygonGeometry.computeRectangleFromPositions(
                positions,
                this._ellipsoid,
                this._arcType
              );
            }
            return this._rectangle;
          }
        },
        /**
         * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.
         * @private
         */
        textureCoordinateRotationPoints: {
          get: function() {
            if (!defined_default(this._textureCoordinateRotationPoints)) {
              this._textureCoordinateRotationPoints = textureCoordinateRotationPoints2(
                this
              );
            }
            return this._textureCoordinateRotationPoints;
          }
        }
      });
      PolygonGeometry_default = PolygonGeometry;
    }
  });

  // packages/engine/Source/Workers/createPolygonGeometry.js
  var createPolygonGeometry_exports = {};
  __export(createPolygonGeometry_exports, {
    default: () => createPolygonGeometry_default
  });
  function createPolygonGeometry(polygonGeometry, offset) {
    if (defined_default(offset)) {
      polygonGeometry = PolygonGeometry_default.unpack(polygonGeometry, offset);
    }
    polygonGeometry._ellipsoid = Ellipsoid_default.clone(polygonGeometry._ellipsoid);
    return PolygonGeometry_default.createGeometry(polygonGeometry);
  }
  var createPolygonGeometry_default;
  var init_createPolygonGeometry = __esm({
    "packages/engine/Source/Workers/createPolygonGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_PolygonGeometry();
      createPolygonGeometry_default = createPolygonGeometry;
    }
  });

  // packages/engine/Source/Core/PolygonOutlineGeometry.js
  function createGeometryFromPositions2(ellipsoid, positions, minDistance, perPositionHeight, arcType) {
    const tangentPlane = EllipsoidTangentPlane_default.fromPoints(positions, ellipsoid);
    const positions2D = tangentPlane.projectPointsOntoPlane(
      positions,
      createGeometryFromPositionsPositions
    );
    const originalWindingOrder = PolygonPipeline_default.computeWindingOrder2D(
      positions2D
    );
    if (originalWindingOrder === WindingOrder_default.CLOCKWISE) {
      positions2D.reverse();
      positions = positions.slice().reverse();
    }
    let subdividedPositions;
    let i;
    let length = positions.length;
    let index = 0;
    if (!perPositionHeight) {
      let numVertices = 0;
      if (arcType === ArcType_default.GEODESIC) {
        for (i = 0; i < length; i++) {
          numVertices += PolygonGeometryLibrary_default.subdivideLineCount(
            positions[i],
            positions[(i + 1) % length],
            minDistance
          );
        }
      } else if (arcType === ArcType_default.RHUMB) {
        for (i = 0; i < length; i++) {
          numVertices += PolygonGeometryLibrary_default.subdivideRhumbLineCount(
            ellipsoid,
            positions[i],
            positions[(i + 1) % length],
            minDistance
          );
        }
      }
      subdividedPositions = new Float64Array(numVertices * 3);
      for (i = 0; i < length; i++) {
        let tempPositions;
        if (arcType === ArcType_default.GEODESIC) {
          tempPositions = PolygonGeometryLibrary_default.subdivideLine(
            positions[i],
            positions[(i + 1) % length],
            minDistance,
            createGeometryFromPositionsSubdivided
          );
        } else if (arcType === ArcType_default.RHUMB) {
          tempPositions = PolygonGeometryLibrary_default.subdivideRhumbLine(
            ellipsoid,
            positions[i],
            positions[(i + 1) % length],
            minDistance,
            createGeometryFromPositionsSubdivided
          );
        }
        const tempPositionsLength = tempPositions.length;
        for (let j = 0; j < tempPositionsLength; ++j) {
          subdividedPositions[index++] = tempPositions[j];
        }
      }
    } else {
      subdividedPositions = new Float64Array(length * 2 * 3);
      for (i = 0; i < length; i++) {
        const p0 = positions[i];
        const p1 = positions[(i + 1) % length];
        subdividedPositions[index++] = p0.x;
        subdividedPositions[index++] = p0.y;
        subdividedPositions[index++] = p0.z;
        subdividedPositions[index++] = p1.x;
        subdividedPositions[index++] = p1.y;
        subdividedPositions[index++] = p1.z;
      }
    }
    length = subdividedPositions.length / 3;
    const indicesSize = length * 2;
    const indices = IndexDatatype_default.createTypedArray(length, indicesSize);
    index = 0;
    for (i = 0; i < length - 1; i++) {
      indices[index++] = i;
      indices[index++] = i + 1;
    }
    indices[index++] = length - 1;
    indices[index++] = 0;
    return new GeometryInstance_default({
      geometry: new Geometry_default({
        attributes: new GeometryAttributes_default({
          position: new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: subdividedPositions
          })
        }),
        indices,
        primitiveType: PrimitiveType_default.LINES
      })
    });
  }
  function createGeometryFromPositionsExtruded2(ellipsoid, positions, minDistance, perPositionHeight, arcType) {
    const tangentPlane = EllipsoidTangentPlane_default.fromPoints(positions, ellipsoid);
    const positions2D = tangentPlane.projectPointsOntoPlane(
      positions,
      createGeometryFromPositionsPositions
    );
    const originalWindingOrder = PolygonPipeline_default.computeWindingOrder2D(
      positions2D
    );
    if (originalWindingOrder === WindingOrder_default.CLOCKWISE) {
      positions2D.reverse();
      positions = positions.slice().reverse();
    }
    let subdividedPositions;
    let i;
    let length = positions.length;
    const corners = new Array(length);
    let index = 0;
    if (!perPositionHeight) {
      let numVertices = 0;
      if (arcType === ArcType_default.GEODESIC) {
        for (i = 0; i < length; i++) {
          numVertices += PolygonGeometryLibrary_default.subdivideLineCount(
            positions[i],
            positions[(i + 1) % length],
            minDistance
          );
        }
      } else if (arcType === ArcType_default.RHUMB) {
        for (i = 0; i < length; i++) {
          numVertices += PolygonGeometryLibrary_default.subdivideRhumbLineCount(
            ellipsoid,
            positions[i],
            positions[(i + 1) % length],
            minDistance
          );
        }
      }
      subdividedPositions = new Float64Array(numVertices * 3 * 2);
      for (i = 0; i < length; ++i) {
        corners[i] = index / 3;
        let tempPositions;
        if (arcType === ArcType_default.GEODESIC) {
          tempPositions = PolygonGeometryLibrary_default.subdivideLine(
            positions[i],
            positions[(i + 1) % length],
            minDistance,
            createGeometryFromPositionsSubdivided
          );
        } else if (arcType === ArcType_default.RHUMB) {
          tempPositions = PolygonGeometryLibrary_default.subdivideRhumbLine(
            ellipsoid,
            positions[i],
            positions[(i + 1) % length],
            minDistance,
            createGeometryFromPositionsSubdivided
          );
        }
        const tempPositionsLength = tempPositions.length;
        for (let j = 0; j < tempPositionsLength; ++j) {
          subdividedPositions[index++] = tempPositions[j];
        }
      }
    } else {
      subdividedPositions = new Float64Array(length * 2 * 3 * 2);
      for (i = 0; i < length; ++i) {
        corners[i] = index / 3;
        const p0 = positions[i];
        const p1 = positions[(i + 1) % length];
        subdividedPositions[index++] = p0.x;
        subdividedPositions[index++] = p0.y;
        subdividedPositions[index++] = p0.z;
        subdividedPositions[index++] = p1.x;
        subdividedPositions[index++] = p1.y;
        subdividedPositions[index++] = p1.z;
      }
    }
    length = subdividedPositions.length / (3 * 2);
    const cornersLength = corners.length;
    const indicesSize = (length * 2 + cornersLength) * 2;
    const indices = IndexDatatype_default.createTypedArray(
      length + cornersLength,
      indicesSize
    );
    index = 0;
    for (i = 0; i < length; ++i) {
      indices[index++] = i;
      indices[index++] = (i + 1) % length;
      indices[index++] = i + length;
      indices[index++] = (i + 1) % length + length;
    }
    for (i = 0; i < cornersLength; i++) {
      const corner = corners[i];
      indices[index++] = corner;
      indices[index++] = corner + length;
    }
    return new GeometryInstance_default({
      geometry: new Geometry_default({
        attributes: new GeometryAttributes_default({
          position: new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: subdividedPositions
          })
        }),
        indices,
        primitiveType: PrimitiveType_default.LINES
      })
    });
  }
  function PolygonOutlineGeometry(options) {
    Check_default.typeOf.object("options", options);
    Check_default.typeOf.object("options.polygonHierarchy", options.polygonHierarchy);
    if (options.perPositionHeight && defined_default(options.height)) {
      throw new DeveloperError_default(
        "Cannot use both options.perPositionHeight and options.height"
      );
    }
    if (defined_default(options.arcType) && options.arcType !== ArcType_default.GEODESIC && options.arcType !== ArcType_default.RHUMB) {
      throw new DeveloperError_default(
        "Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB."
      );
    }
    const polygonHierarchy = options.polygonHierarchy;
    const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    const granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    const perPositionHeight = defaultValue_default(options.perPositionHeight, false);
    const perPositionHeightExtrude = perPositionHeight && defined_default(options.extrudedHeight);
    const arcType = defaultValue_default(options.arcType, ArcType_default.GEODESIC);
    let height = defaultValue_default(options.height, 0);
    let extrudedHeight = defaultValue_default(options.extrudedHeight, height);
    if (!perPositionHeightExtrude) {
      const h = Math.max(height, extrudedHeight);
      extrudedHeight = Math.min(height, extrudedHeight);
      height = h;
    }
    this._ellipsoid = Ellipsoid_default.clone(ellipsoid);
    this._granularity = granularity;
    this._height = height;
    this._extrudedHeight = extrudedHeight;
    this._arcType = arcType;
    this._polygonHierarchy = polygonHierarchy;
    this._perPositionHeight = perPositionHeight;
    this._perPositionHeightExtrude = perPositionHeightExtrude;
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createPolygonOutlineGeometry";
    this.packedLength = PolygonGeometryLibrary_default.computeHierarchyPackedLength(
      polygonHierarchy,
      Cartesian3_default
    ) + Ellipsoid_default.packedLength + 8;
  }
  var createGeometryFromPositionsPositions, createGeometryFromPositionsSubdivided, scratchEllipsoid7, dummyOptions2, PolygonOutlineGeometry_default;
  var init_PolygonOutlineGeometry = __esm({
    "packages/engine/Source/Core/PolygonOutlineGeometry.js"() {
      init_ArcType();
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_EllipsoidTangentPlane();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryInstance();
      init_GeometryOffsetAttribute();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_Math();
      init_PolygonGeometryLibrary();
      init_PolygonPipeline();
      init_PrimitiveType();
      init_WindingOrder();
      createGeometryFromPositionsPositions = [];
      createGeometryFromPositionsSubdivided = [];
      PolygonOutlineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        startingIndex = PolygonGeometryLibrary_default.packPolygonHierarchy(
          value._polygonHierarchy,
          array,
          startingIndex,
          Cartesian3_default
        );
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        array[startingIndex++] = value._height;
        array[startingIndex++] = value._extrudedHeight;
        array[startingIndex++] = value._granularity;
        array[startingIndex++] = value._perPositionHeightExtrude ? 1 : 0;
        array[startingIndex++] = value._perPositionHeight ? 1 : 0;
        array[startingIndex++] = value._arcType;
        array[startingIndex++] = defaultValue_default(value._offsetAttribute, -1);
        array[startingIndex] = value.packedLength;
        return array;
      };
      scratchEllipsoid7 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      dummyOptions2 = {
        polygonHierarchy: {}
      };
      PolygonOutlineGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const polygonHierarchy = PolygonGeometryLibrary_default.unpackPolygonHierarchy(
          array,
          startingIndex,
          Cartesian3_default
        );
        startingIndex = polygonHierarchy.startingIndex;
        delete polygonHierarchy.startingIndex;
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid7);
        startingIndex += Ellipsoid_default.packedLength;
        const height = array[startingIndex++];
        const extrudedHeight = array[startingIndex++];
        const granularity = array[startingIndex++];
        const perPositionHeightExtrude = array[startingIndex++] === 1;
        const perPositionHeight = array[startingIndex++] === 1;
        const arcType = array[startingIndex++];
        const offsetAttribute = array[startingIndex++];
        const packedLength = array[startingIndex];
        if (!defined_default(result)) {
          result = new PolygonOutlineGeometry(dummyOptions2);
        }
        result._polygonHierarchy = polygonHierarchy;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._height = height;
        result._extrudedHeight = extrudedHeight;
        result._granularity = granularity;
        result._perPositionHeight = perPositionHeight;
        result._perPositionHeightExtrude = perPositionHeightExtrude;
        result._arcType = arcType;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        result.packedLength = packedLength;
        return result;
      };
      PolygonOutlineGeometry.fromPositions = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        Check_default.defined("options.positions", options.positions);
        const newOptions = {
          polygonHierarchy: {
            positions: options.positions
          },
          height: options.height,
          extrudedHeight: options.extrudedHeight,
          ellipsoid: options.ellipsoid,
          granularity: options.granularity,
          perPositionHeight: options.perPositionHeight,
          arcType: options.arcType,
          offsetAttribute: options.offsetAttribute
        };
        return new PolygonOutlineGeometry(newOptions);
      };
      PolygonOutlineGeometry.createGeometry = function(polygonGeometry) {
        const ellipsoid = polygonGeometry._ellipsoid;
        const granularity = polygonGeometry._granularity;
        const polygonHierarchy = polygonGeometry._polygonHierarchy;
        const perPositionHeight = polygonGeometry._perPositionHeight;
        const arcType = polygonGeometry._arcType;
        const polygons = PolygonGeometryLibrary_default.polygonOutlinesFromHierarchy(
          polygonHierarchy,
          !perPositionHeight,
          ellipsoid
        );
        if (polygons.length === 0) {
          return void 0;
        }
        let geometryInstance;
        const geometries = [];
        const minDistance = Math_default.chordLength(
          granularity,
          ellipsoid.maximumRadius
        );
        const height = polygonGeometry._height;
        const extrudedHeight = polygonGeometry._extrudedHeight;
        const extrude = polygonGeometry._perPositionHeightExtrude || !Math_default.equalsEpsilon(height, extrudedHeight, 0, Math_default.EPSILON2);
        let offsetValue;
        let i;
        if (extrude) {
          for (i = 0; i < polygons.length; i++) {
            geometryInstance = createGeometryFromPositionsExtruded2(
              ellipsoid,
              polygons[i],
              minDistance,
              perPositionHeight,
              arcType
            );
            geometryInstance.geometry = PolygonGeometryLibrary_default.scaleToGeodeticHeightExtruded(
              geometryInstance.geometry,
              height,
              extrudedHeight,
              ellipsoid,
              perPositionHeight
            );
            if (defined_default(polygonGeometry._offsetAttribute)) {
              const size = geometryInstance.geometry.attributes.position.values.length / 3;
              let offsetAttribute = new Uint8Array(size);
              if (polygonGeometry._offsetAttribute === GeometryOffsetAttribute_default.TOP) {
                offsetAttribute = offsetAttribute.fill(1, 0, size / 2);
              } else {
                offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
                offsetAttribute = offsetAttribute.fill(offsetValue);
              }
              geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute_default(
                {
                  componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
                  componentsPerAttribute: 1,
                  values: offsetAttribute
                }
              );
            }
            geometries.push(geometryInstance);
          }
        } else {
          for (i = 0; i < polygons.length; i++) {
            geometryInstance = createGeometryFromPositions2(
              ellipsoid,
              polygons[i],
              minDistance,
              perPositionHeight,
              arcType
            );
            geometryInstance.geometry.attributes.position.values = PolygonPipeline_default.scaleToGeodeticHeight(
              geometryInstance.geometry.attributes.position.values,
              height,
              ellipsoid,
              !perPositionHeight
            );
            if (defined_default(polygonGeometry._offsetAttribute)) {
              const length = geometryInstance.geometry.attributes.position.values.length;
              offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
              const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
              geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute_default(
                {
                  componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
                  componentsPerAttribute: 1,
                  values: applyOffset
                }
              );
            }
            geometries.push(geometryInstance);
          }
        }
        const geometry = GeometryPipeline_default.combineInstances(geometries)[0];
        const boundingSphere = BoundingSphere_default.fromVertices(
          geometry.attributes.position.values
        );
        return new Geometry_default({
          attributes: geometry.attributes,
          indices: geometry.indices,
          primitiveType: geometry.primitiveType,
          boundingSphere,
          offsetAttribute: polygonGeometry._offsetAttribute
        });
      };
      PolygonOutlineGeometry_default = PolygonOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createPolygonOutlineGeometry.js
  var createPolygonOutlineGeometry_exports = {};
  __export(createPolygonOutlineGeometry_exports, {
    default: () => createPolygonOutlineGeometry_default
  });
  function createPolygonOutlineGeometry(polygonGeometry, offset) {
    if (defined_default(offset)) {
      polygonGeometry = PolygonOutlineGeometry_default.unpack(polygonGeometry, offset);
    }
    polygonGeometry._ellipsoid = Ellipsoid_default.clone(polygonGeometry._ellipsoid);
    return PolygonOutlineGeometry_default.createGeometry(polygonGeometry);
  }
  var createPolygonOutlineGeometry_default;
  var init_createPolygonOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createPolygonOutlineGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_PolygonOutlineGeometry();
      createPolygonOutlineGeometry_default = createPolygonOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/Color.js
  function hue2rgb(m1, m2, h) {
    if (h < 0) {
      h += 1;
    }
    if (h > 1) {
      h -= 1;
    }
    if (h * 6 < 1) {
      return m1 + (m2 - m1) * 6 * h;
    }
    if (h * 2 < 1) {
      return m2;
    }
    if (h * 3 < 2) {
      return m1 + (m2 - m1) * (2 / 3 - h) * 6;
    }
    return m1;
  }
  function Color(red, green, blue, alpha) {
    this.red = defaultValue_default(red, 1);
    this.green = defaultValue_default(green, 1);
    this.blue = defaultValue_default(blue, 1);
    this.alpha = defaultValue_default(alpha, 1);
  }
  var scratchArrayBuffer, scratchUint32Array, scratchUint8Array, rgbaMatcher, rrggbbaaMatcher, rgbParenthesesMatcher, hslParenthesesMatcher, Color_default;
  var init_Color = __esm({
    "packages/engine/Source/Core/Color.js"() {
      init_Check();
      init_defaultValue();
      init_defined();
      init_FeatureDetection();
      init_Math();
      Color.fromCartesian4 = function(cartesian11, result) {
        Check_default.typeOf.object("cartesian", cartesian11);
        if (!defined_default(result)) {
          return new Color(cartesian11.x, cartesian11.y, cartesian11.z, cartesian11.w);
        }
        result.red = cartesian11.x;
        result.green = cartesian11.y;
        result.blue = cartesian11.z;
        result.alpha = cartesian11.w;
        return result;
      };
      Color.fromBytes = function(red, green, blue, alpha, result) {
        red = Color.byteToFloat(defaultValue_default(red, 255));
        green = Color.byteToFloat(defaultValue_default(green, 255));
        blue = Color.byteToFloat(defaultValue_default(blue, 255));
        alpha = Color.byteToFloat(defaultValue_default(alpha, 255));
        if (!defined_default(result)) {
          return new Color(red, green, blue, alpha);
        }
        result.red = red;
        result.green = green;
        result.blue = blue;
        result.alpha = alpha;
        return result;
      };
      Color.fromAlpha = function(color, alpha, result) {
        Check_default.typeOf.object("color", color);
        Check_default.typeOf.number("alpha", alpha);
        if (!defined_default(result)) {
          return new Color(color.red, color.green, color.blue, alpha);
        }
        result.red = color.red;
        result.green = color.green;
        result.blue = color.blue;
        result.alpha = alpha;
        return result;
      };
      if (FeatureDetection_default.supportsTypedArrays()) {
        scratchArrayBuffer = new ArrayBuffer(4);
        scratchUint32Array = new Uint32Array(scratchArrayBuffer);
        scratchUint8Array = new Uint8Array(scratchArrayBuffer);
      }
      Color.fromRgba = function(rgba, result) {
        scratchUint32Array[0] = rgba;
        return Color.fromBytes(
          scratchUint8Array[0],
          scratchUint8Array[1],
          scratchUint8Array[2],
          scratchUint8Array[3],
          result
        );
      };
      Color.fromHsl = function(hue, saturation, lightness, alpha, result) {
        hue = defaultValue_default(hue, 0) % 1;
        saturation = defaultValue_default(saturation, 0);
        lightness = defaultValue_default(lightness, 0);
        alpha = defaultValue_default(alpha, 1);
        let red = lightness;
        let green = lightness;
        let blue = lightness;
        if (saturation !== 0) {
          let m2;
          if (lightness < 0.5) {
            m2 = lightness * (1 + saturation);
          } else {
            m2 = lightness + saturation - lightness * saturation;
          }
          const m1 = 2 * lightness - m2;
          red = hue2rgb(m1, m2, hue + 1 / 3);
          green = hue2rgb(m1, m2, hue);
          blue = hue2rgb(m1, m2, hue - 1 / 3);
        }
        if (!defined_default(result)) {
          return new Color(red, green, blue, alpha);
        }
        result.red = red;
        result.green = green;
        result.blue = blue;
        result.alpha = alpha;
        return result;
      };
      Color.fromRandom = function(options, result) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        let red = options.red;
        if (!defined_default(red)) {
          const minimumRed = defaultValue_default(options.minimumRed, 0);
          const maximumRed = defaultValue_default(options.maximumRed, 1);
          Check_default.typeOf.number.lessThanOrEquals("minimumRed", minimumRed, maximumRed);
          red = minimumRed + Math_default.nextRandomNumber() * (maximumRed - minimumRed);
        }
        let green = options.green;
        if (!defined_default(green)) {
          const minimumGreen = defaultValue_default(options.minimumGreen, 0);
          const maximumGreen = defaultValue_default(options.maximumGreen, 1);
          Check_default.typeOf.number.lessThanOrEquals(
            "minimumGreen",
            minimumGreen,
            maximumGreen
          );
          green = minimumGreen + Math_default.nextRandomNumber() * (maximumGreen - minimumGreen);
        }
        let blue = options.blue;
        if (!defined_default(blue)) {
          const minimumBlue = defaultValue_default(options.minimumBlue, 0);
          const maximumBlue = defaultValue_default(options.maximumBlue, 1);
          Check_default.typeOf.number.lessThanOrEquals(
            "minimumBlue",
            minimumBlue,
            maximumBlue
          );
          blue = minimumBlue + Math_default.nextRandomNumber() * (maximumBlue - minimumBlue);
        }
        let alpha = options.alpha;
        if (!defined_default(alpha)) {
          const minimumAlpha = defaultValue_default(options.minimumAlpha, 0);
          const maximumAlpha = defaultValue_default(options.maximumAlpha, 1);
          Check_default.typeOf.number.lessThanOrEquals(
            "minumumAlpha",
            minimumAlpha,
            maximumAlpha
          );
          alpha = minimumAlpha + Math_default.nextRandomNumber() * (maximumAlpha - minimumAlpha);
        }
        if (!defined_default(result)) {
          return new Color(red, green, blue, alpha);
        }
        result.red = red;
        result.green = green;
        result.blue = blue;
        result.alpha = alpha;
        return result;
      };
      rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;
      rrggbbaaMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;
      rgbParenthesesMatcher = /^rgba?\s*\(\s*([0-9.]+%?)\s*[,\s]+\s*([0-9.]+%?)\s*[,\s]+\s*([0-9.]+%?)(?:\s*[,\s/]+\s*([0-9.]+))?\s*\)$/i;
      hslParenthesesMatcher = /^hsla?\s*\(\s*([0-9.]+)\s*[,\s]+\s*([0-9.]+%)\s*[,\s]+\s*([0-9.]+%)(?:\s*[,\s/]+\s*([0-9.]+))?\s*\)$/i;
      Color.fromCssColorString = function(color, result) {
        Check_default.typeOf.string("color", color);
        if (!defined_default(result)) {
          result = new Color();
        }
        color = color.trim();
        const namedColor = Color[color.toUpperCase()];
        if (defined_default(namedColor)) {
          Color.clone(namedColor, result);
          return result;
        }
        let matches = rgbaMatcher.exec(color);
        if (matches !== null) {
          result.red = parseInt(matches[1], 16) / 15;
          result.green = parseInt(matches[2], 16) / 15;
          result.blue = parseInt(matches[3], 16) / 15;
          result.alpha = parseInt(defaultValue_default(matches[4], "f"), 16) / 15;
          return result;
        }
        matches = rrggbbaaMatcher.exec(color);
        if (matches !== null) {
          result.red = parseInt(matches[1], 16) / 255;
          result.green = parseInt(matches[2], 16) / 255;
          result.blue = parseInt(matches[3], 16) / 255;
          result.alpha = parseInt(defaultValue_default(matches[4], "ff"), 16) / 255;
          return result;
        }
        matches = rgbParenthesesMatcher.exec(color);
        if (matches !== null) {
          result.red = parseFloat(matches[1]) / ("%" === matches[1].substr(-1) ? 100 : 255);
          result.green = parseFloat(matches[2]) / ("%" === matches[2].substr(-1) ? 100 : 255);
          result.blue = parseFloat(matches[3]) / ("%" === matches[3].substr(-1) ? 100 : 255);
          result.alpha = parseFloat(defaultValue_default(matches[4], "1.0"));
          return result;
        }
        matches = hslParenthesesMatcher.exec(color);
        if (matches !== null) {
          return Color.fromHsl(
            parseFloat(matches[1]) / 360,
            parseFloat(matches[2]) / 100,
            parseFloat(matches[3]) / 100,
            parseFloat(defaultValue_default(matches[4], "1.0")),
            result
          );
        }
        result = void 0;
        return result;
      };
      Color.packedLength = 4;
      Color.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        array[startingIndex++] = value.red;
        array[startingIndex++] = value.green;
        array[startingIndex++] = value.blue;
        array[startingIndex] = value.alpha;
        return array;
      };
      Color.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        if (!defined_default(result)) {
          result = new Color();
        }
        result.red = array[startingIndex++];
        result.green = array[startingIndex++];
        result.blue = array[startingIndex++];
        result.alpha = array[startingIndex];
        return result;
      };
      Color.byteToFloat = function(number) {
        return number / 255;
      };
      Color.floatToByte = function(number) {
        return number === 1 ? 255 : number * 256 | 0;
      };
      Color.clone = function(color, result) {
        if (!defined_default(color)) {
          return void 0;
        }
        if (!defined_default(result)) {
          return new Color(color.red, color.green, color.blue, color.alpha);
        }
        result.red = color.red;
        result.green = color.green;
        result.blue = color.blue;
        result.alpha = color.alpha;
        return result;
      };
      Color.equals = function(left, right) {
        return left === right || //
        defined_default(left) && //
        defined_default(right) && //
        left.red === right.red && //
        left.green === right.green && //
        left.blue === right.blue && //
        left.alpha === right.alpha;
      };
      Color.equalsArray = function(color, array, offset) {
        return color.red === array[offset] && color.green === array[offset + 1] && color.blue === array[offset + 2] && color.alpha === array[offset + 3];
      };
      Color.prototype.clone = function(result) {
        return Color.clone(this, result);
      };
      Color.prototype.equals = function(other) {
        return Color.equals(this, other);
      };
      Color.prototype.equalsEpsilon = function(other, epsilon) {
        return this === other || //
        defined_default(other) && //
        Math.abs(this.red - other.red) <= epsilon && //
        Math.abs(this.green - other.green) <= epsilon && //
        Math.abs(this.blue - other.blue) <= epsilon && //
        Math.abs(this.alpha - other.alpha) <= epsilon;
      };
      Color.prototype.toString = function() {
        return `(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;
      };
      Color.prototype.toCssColorString = function() {
        const red = Color.floatToByte(this.red);
        const green = Color.floatToByte(this.green);
        const blue = Color.floatToByte(this.blue);
        if (this.alpha === 1) {
          return `rgb(${red},${green},${blue})`;
        }
        return `rgba(${red},${green},${blue},${this.alpha})`;
      };
      Color.prototype.toCssHexString = function() {
        let r = Color.floatToByte(this.red).toString(16);
        if (r.length < 2) {
          r = `0${r}`;
        }
        let g = Color.floatToByte(this.green).toString(16);
        if (g.length < 2) {
          g = `0${g}`;
        }
        let b = Color.floatToByte(this.blue).toString(16);
        if (b.length < 2) {
          b = `0${b}`;
        }
        if (this.alpha < 1) {
          let hexAlpha = Color.floatToByte(this.alpha).toString(16);
          if (hexAlpha.length < 2) {
            hexAlpha = `0${hexAlpha}`;
          }
          return `#${r}${g}${b}${hexAlpha}`;
        }
        return `#${r}${g}${b}`;
      };
      Color.prototype.toBytes = function(result) {
        const red = Color.floatToByte(this.red);
        const green = Color.floatToByte(this.green);
        const blue = Color.floatToByte(this.blue);
        const alpha = Color.floatToByte(this.alpha);
        if (!defined_default(result)) {
          return [red, green, blue, alpha];
        }
        result[0] = red;
        result[1] = green;
        result[2] = blue;
        result[3] = alpha;
        return result;
      };
      Color.prototype.toRgba = function() {
        scratchUint8Array[0] = Color.floatToByte(this.red);
        scratchUint8Array[1] = Color.floatToByte(this.green);
        scratchUint8Array[2] = Color.floatToByte(this.blue);
        scratchUint8Array[3] = Color.floatToByte(this.alpha);
        return scratchUint32Array[0];
      };
      Color.prototype.brighten = function(magnitude, result) {
        Check_default.typeOf.number("magnitude", magnitude);
        Check_default.typeOf.number.greaterThanOrEquals("magnitude", magnitude, 0);
        Check_default.typeOf.object("result", result);
        magnitude = 1 - magnitude;
        result.red = 1 - (1 - this.red) * magnitude;
        result.green = 1 - (1 - this.green) * magnitude;
        result.blue = 1 - (1 - this.blue) * magnitude;
        result.alpha = this.alpha;
        return result;
      };
      Color.prototype.darken = function(magnitude, result) {
        Check_default.typeOf.number("magnitude", magnitude);
        Check_default.typeOf.number.greaterThanOrEquals("magnitude", magnitude, 0);
        Check_default.typeOf.object("result", result);
        magnitude = 1 - magnitude;
        result.red = this.red * magnitude;
        result.green = this.green * magnitude;
        result.blue = this.blue * magnitude;
        result.alpha = this.alpha;
        return result;
      };
      Color.prototype.withAlpha = function(alpha, result) {
        return Color.fromAlpha(this, alpha, result);
      };
      Color.add = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.red = left.red + right.red;
        result.green = left.green + right.green;
        result.blue = left.blue + right.blue;
        result.alpha = left.alpha + right.alpha;
        return result;
      };
      Color.subtract = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.red = left.red - right.red;
        result.green = left.green - right.green;
        result.blue = left.blue - right.blue;
        result.alpha = left.alpha - right.alpha;
        return result;
      };
      Color.multiply = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.red = left.red * right.red;
        result.green = left.green * right.green;
        result.blue = left.blue * right.blue;
        result.alpha = left.alpha * right.alpha;
        return result;
      };
      Color.divide = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.red = left.red / right.red;
        result.green = left.green / right.green;
        result.blue = left.blue / right.blue;
        result.alpha = left.alpha / right.alpha;
        return result;
      };
      Color.mod = function(left, right, result) {
        Check_default.typeOf.object("left", left);
        Check_default.typeOf.object("right", right);
        Check_default.typeOf.object("result", result);
        result.red = left.red % right.red;
        result.green = left.green % right.green;
        result.blue = left.blue % right.blue;
        result.alpha = left.alpha % right.alpha;
        return result;
      };
      Color.lerp = function(start, end, t, result) {
        Check_default.typeOf.object("start", start);
        Check_default.typeOf.object("end", end);
        Check_default.typeOf.number("t", t);
        Check_default.typeOf.object("result", result);
        result.red = Math_default.lerp(start.red, end.red, t);
        result.green = Math_default.lerp(start.green, end.green, t);
        result.blue = Math_default.lerp(start.blue, end.blue, t);
        result.alpha = Math_default.lerp(start.alpha, end.alpha, t);
        return result;
      };
      Color.multiplyByScalar = function(color, scalar, result) {
        Check_default.typeOf.object("color", color);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.red = color.red * scalar;
        result.green = color.green * scalar;
        result.blue = color.blue * scalar;
        result.alpha = color.alpha * scalar;
        return result;
      };
      Color.divideByScalar = function(color, scalar, result) {
        Check_default.typeOf.object("color", color);
        Check_default.typeOf.number("scalar", scalar);
        Check_default.typeOf.object("result", result);
        result.red = color.red / scalar;
        result.green = color.green / scalar;
        result.blue = color.blue / scalar;
        result.alpha = color.alpha / scalar;
        return result;
      };
      Color.ALICEBLUE = Object.freeze(Color.fromCssColorString("#F0F8FF"));
      Color.ANTIQUEWHITE = Object.freeze(Color.fromCssColorString("#FAEBD7"));
      Color.AQUA = Object.freeze(Color.fromCssColorString("#00FFFF"));
      Color.AQUAMARINE = Object.freeze(Color.fromCssColorString("#7FFFD4"));
      Color.AZURE = Object.freeze(Color.fromCssColorString("#F0FFFF"));
      Color.BEIGE = Object.freeze(Color.fromCssColorString("#F5F5DC"));
      Color.BISQUE = Object.freeze(Color.fromCssColorString("#FFE4C4"));
      Color.BLACK = Object.freeze(Color.fromCssColorString("#000000"));
      Color.BLANCHEDALMOND = Object.freeze(Color.fromCssColorString("#FFEBCD"));
      Color.BLUE = Object.freeze(Color.fromCssColorString("#0000FF"));
      Color.BLUEVIOLET = Object.freeze(Color.fromCssColorString("#8A2BE2"));
      Color.BROWN = Object.freeze(Color.fromCssColorString("#A52A2A"));
      Color.BURLYWOOD = Object.freeze(Color.fromCssColorString("#DEB887"));
      Color.CADETBLUE = Object.freeze(Color.fromCssColorString("#5F9EA0"));
      Color.CHARTREUSE = Object.freeze(Color.fromCssColorString("#7FFF00"));
      Color.CHOCOLATE = Object.freeze(Color.fromCssColorString("#D2691E"));
      Color.CORAL = Object.freeze(Color.fromCssColorString("#FF7F50"));
      Color.CORNFLOWERBLUE = Object.freeze(Color.fromCssColorString("#6495ED"));
      Color.CORNSILK = Object.freeze(Color.fromCssColorString("#FFF8DC"));
      Color.CRIMSON = Object.freeze(Color.fromCssColorString("#DC143C"));
      Color.CYAN = Object.freeze(Color.fromCssColorString("#00FFFF"));
      Color.DARKBLUE = Object.freeze(Color.fromCssColorString("#00008B"));
      Color.DARKCYAN = Object.freeze(Color.fromCssColorString("#008B8B"));
      Color.DARKGOLDENROD = Object.freeze(Color.fromCssColorString("#B8860B"));
      Color.DARKGRAY = Object.freeze(Color.fromCssColorString("#A9A9A9"));
      Color.DARKGREEN = Object.freeze(Color.fromCssColorString("#006400"));
      Color.DARKGREY = Color.DARKGRAY;
      Color.DARKKHAKI = Object.freeze(Color.fromCssColorString("#BDB76B"));
      Color.DARKMAGENTA = Object.freeze(Color.fromCssColorString("#8B008B"));
      Color.DARKOLIVEGREEN = Object.freeze(Color.fromCssColorString("#556B2F"));
      Color.DARKORANGE = Object.freeze(Color.fromCssColorString("#FF8C00"));
      Color.DARKORCHID = Object.freeze(Color.fromCssColorString("#9932CC"));
      Color.DARKRED = Object.freeze(Color.fromCssColorString("#8B0000"));
      Color.DARKSALMON = Object.freeze(Color.fromCssColorString("#E9967A"));
      Color.DARKSEAGREEN = Object.freeze(Color.fromCssColorString("#8FBC8F"));
      Color.DARKSLATEBLUE = Object.freeze(Color.fromCssColorString("#483D8B"));
      Color.DARKSLATEGRAY = Object.freeze(Color.fromCssColorString("#2F4F4F"));
      Color.DARKSLATEGREY = Color.DARKSLATEGRAY;
      Color.DARKTURQUOISE = Object.freeze(Color.fromCssColorString("#00CED1"));
      Color.DARKVIOLET = Object.freeze(Color.fromCssColorString("#9400D3"));
      Color.DEEPPINK = Object.freeze(Color.fromCssColorString("#FF1493"));
      Color.DEEPSKYBLUE = Object.freeze(Color.fromCssColorString("#00BFFF"));
      Color.DIMGRAY = Object.freeze(Color.fromCssColorString("#696969"));
      Color.DIMGREY = Color.DIMGRAY;
      Color.DODGERBLUE = Object.freeze(Color.fromCssColorString("#1E90FF"));
      Color.FIREBRICK = Object.freeze(Color.fromCssColorString("#B22222"));
      Color.FLORALWHITE = Object.freeze(Color.fromCssColorString("#FFFAF0"));
      Color.FORESTGREEN = Object.freeze(Color.fromCssColorString("#228B22"));
      Color.FUCHSIA = Object.freeze(Color.fromCssColorString("#FF00FF"));
      Color.GAINSBORO = Object.freeze(Color.fromCssColorString("#DCDCDC"));
      Color.GHOSTWHITE = Object.freeze(Color.fromCssColorString("#F8F8FF"));
      Color.GOLD = Object.freeze(Color.fromCssColorString("#FFD700"));
      Color.GOLDENROD = Object.freeze(Color.fromCssColorString("#DAA520"));
      Color.GRAY = Object.freeze(Color.fromCssColorString("#808080"));
      Color.GREEN = Object.freeze(Color.fromCssColorString("#008000"));
      Color.GREENYELLOW = Object.freeze(Color.fromCssColorString("#ADFF2F"));
      Color.GREY = Color.GRAY;
      Color.HONEYDEW = Object.freeze(Color.fromCssColorString("#F0FFF0"));
      Color.HOTPINK = Object.freeze(Color.fromCssColorString("#FF69B4"));
      Color.INDIANRED = Object.freeze(Color.fromCssColorString("#CD5C5C"));
      Color.INDIGO = Object.freeze(Color.fromCssColorString("#4B0082"));
      Color.IVORY = Object.freeze(Color.fromCssColorString("#FFFFF0"));
      Color.KHAKI = Object.freeze(Color.fromCssColorString("#F0E68C"));
      Color.LAVENDER = Object.freeze(Color.fromCssColorString("#E6E6FA"));
      Color.LAVENDAR_BLUSH = Object.freeze(Color.fromCssColorString("#FFF0F5"));
      Color.LAWNGREEN = Object.freeze(Color.fromCssColorString("#7CFC00"));
      Color.LEMONCHIFFON = Object.freeze(Color.fromCssColorString("#FFFACD"));
      Color.LIGHTBLUE = Object.freeze(Color.fromCssColorString("#ADD8E6"));
      Color.LIGHTCORAL = Object.freeze(Color.fromCssColorString("#F08080"));
      Color.LIGHTCYAN = Object.freeze(Color.fromCssColorString("#E0FFFF"));
      Color.LIGHTGOLDENRODYELLOW = Object.freeze(Color.fromCssColorString("#FAFAD2"));
      Color.LIGHTGRAY = Object.freeze(Color.fromCssColorString("#D3D3D3"));
      Color.LIGHTGREEN = Object.freeze(Color.fromCssColorString("#90EE90"));
      Color.LIGHTGREY = Color.LIGHTGRAY;
      Color.LIGHTPINK = Object.freeze(Color.fromCssColorString("#FFB6C1"));
      Color.LIGHTSEAGREEN = Object.freeze(Color.fromCssColorString("#20B2AA"));
      Color.LIGHTSKYBLUE = Object.freeze(Color.fromCssColorString("#87CEFA"));
      Color.LIGHTSLATEGRAY = Object.freeze(Color.fromCssColorString("#778899"));
      Color.LIGHTSLATEGREY = Color.LIGHTSLATEGRAY;
      Color.LIGHTSTEELBLUE = Object.freeze(Color.fromCssColorString("#B0C4DE"));
      Color.LIGHTYELLOW = Object.freeze(Color.fromCssColorString("#FFFFE0"));
      Color.LIME = Object.freeze(Color.fromCssColorString("#00FF00"));
      Color.LIMEGREEN = Object.freeze(Color.fromCssColorString("#32CD32"));
      Color.LINEN = Object.freeze(Color.fromCssColorString("#FAF0E6"));
      Color.MAGENTA = Object.freeze(Color.fromCssColorString("#FF00FF"));
      Color.MAROON = Object.freeze(Color.fromCssColorString("#800000"));
      Color.MEDIUMAQUAMARINE = Object.freeze(Color.fromCssColorString("#66CDAA"));
      Color.MEDIUMBLUE = Object.freeze(Color.fromCssColorString("#0000CD"));
      Color.MEDIUMORCHID = Object.freeze(Color.fromCssColorString("#BA55D3"));
      Color.MEDIUMPURPLE = Object.freeze(Color.fromCssColorString("#9370DB"));
      Color.MEDIUMSEAGREEN = Object.freeze(Color.fromCssColorString("#3CB371"));
      Color.MEDIUMSLATEBLUE = Object.freeze(Color.fromCssColorString("#7B68EE"));
      Color.MEDIUMSPRINGGREEN = Object.freeze(Color.fromCssColorString("#00FA9A"));
      Color.MEDIUMTURQUOISE = Object.freeze(Color.fromCssColorString("#48D1CC"));
      Color.MEDIUMVIOLETRED = Object.freeze(Color.fromCssColorString("#C71585"));
      Color.MIDNIGHTBLUE = Object.freeze(Color.fromCssColorString("#191970"));
      Color.MINTCREAM = Object.freeze(Color.fromCssColorString("#F5FFFA"));
      Color.MISTYROSE = Object.freeze(Color.fromCssColorString("#FFE4E1"));
      Color.MOCCASIN = Object.freeze(Color.fromCssColorString("#FFE4B5"));
      Color.NAVAJOWHITE = Object.freeze(Color.fromCssColorString("#FFDEAD"));
      Color.NAVY = Object.freeze(Color.fromCssColorString("#000080"));
      Color.OLDLACE = Object.freeze(Color.fromCssColorString("#FDF5E6"));
      Color.OLIVE = Object.freeze(Color.fromCssColorString("#808000"));
      Color.OLIVEDRAB = Object.freeze(Color.fromCssColorString("#6B8E23"));
      Color.ORANGE = Object.freeze(Color.fromCssColorString("#FFA500"));
      Color.ORANGERED = Object.freeze(Color.fromCssColorString("#FF4500"));
      Color.ORCHID = Object.freeze(Color.fromCssColorString("#DA70D6"));
      Color.PALEGOLDENROD = Object.freeze(Color.fromCssColorString("#EEE8AA"));
      Color.PALEGREEN = Object.freeze(Color.fromCssColorString("#98FB98"));
      Color.PALETURQUOISE = Object.freeze(Color.fromCssColorString("#AFEEEE"));
      Color.PALEVIOLETRED = Object.freeze(Color.fromCssColorString("#DB7093"));
      Color.PAPAYAWHIP = Object.freeze(Color.fromCssColorString("#FFEFD5"));
      Color.PEACHPUFF = Object.freeze(Color.fromCssColorString("#FFDAB9"));
      Color.PERU = Object.freeze(Color.fromCssColorString("#CD853F"));
      Color.PINK = Object.freeze(Color.fromCssColorString("#FFC0CB"));
      Color.PLUM = Object.freeze(Color.fromCssColorString("#DDA0DD"));
      Color.POWDERBLUE = Object.freeze(Color.fromCssColorString("#B0E0E6"));
      Color.PURPLE = Object.freeze(Color.fromCssColorString("#800080"));
      Color.RED = Object.freeze(Color.fromCssColorString("#FF0000"));
      Color.ROSYBROWN = Object.freeze(Color.fromCssColorString("#BC8F8F"));
      Color.ROYALBLUE = Object.freeze(Color.fromCssColorString("#4169E1"));
      Color.SADDLEBROWN = Object.freeze(Color.fromCssColorString("#8B4513"));
      Color.SALMON = Object.freeze(Color.fromCssColorString("#FA8072"));
      Color.SANDYBROWN = Object.freeze(Color.fromCssColorString("#F4A460"));
      Color.SEAGREEN = Object.freeze(Color.fromCssColorString("#2E8B57"));
      Color.SEASHELL = Object.freeze(Color.fromCssColorString("#FFF5EE"));
      Color.SIENNA = Object.freeze(Color.fromCssColorString("#A0522D"));
      Color.SILVER = Object.freeze(Color.fromCssColorString("#C0C0C0"));
      Color.SKYBLUE = Object.freeze(Color.fromCssColorString("#87CEEB"));
      Color.SLATEBLUE = Object.freeze(Color.fromCssColorString("#6A5ACD"));
      Color.SLATEGRAY = Object.freeze(Color.fromCssColorString("#708090"));
      Color.SLATEGREY = Color.SLATEGRAY;
      Color.SNOW = Object.freeze(Color.fromCssColorString("#FFFAFA"));
      Color.SPRINGGREEN = Object.freeze(Color.fromCssColorString("#00FF7F"));
      Color.STEELBLUE = Object.freeze(Color.fromCssColorString("#4682B4"));
      Color.TAN = Object.freeze(Color.fromCssColorString("#D2B48C"));
      Color.TEAL = Object.freeze(Color.fromCssColorString("#008080"));
      Color.THISTLE = Object.freeze(Color.fromCssColorString("#D8BFD8"));
      Color.TOMATO = Object.freeze(Color.fromCssColorString("#FF6347"));
      Color.TURQUOISE = Object.freeze(Color.fromCssColorString("#40E0D0"));
      Color.VIOLET = Object.freeze(Color.fromCssColorString("#EE82EE"));
      Color.WHEAT = Object.freeze(Color.fromCssColorString("#F5DEB3"));
      Color.WHITE = Object.freeze(Color.fromCssColorString("#FFFFFF"));
      Color.WHITESMOKE = Object.freeze(Color.fromCssColorString("#F5F5F5"));
      Color.YELLOW = Object.freeze(Color.fromCssColorString("#FFFF00"));
      Color.YELLOWGREEN = Object.freeze(Color.fromCssColorString("#9ACD32"));
      Color.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));
      Color_default = Color;
    }
  });

  // packages/engine/Source/Core/PolylineGeometry.js
  function interpolateColors(p0, p1, color0, color1, numPoints) {
    const colors = scratchInterpolateColorsArray;
    colors.length = numPoints;
    let i;
    const r0 = color0.red;
    const g0 = color0.green;
    const b0 = color0.blue;
    const a0 = color0.alpha;
    const r1 = color1.red;
    const g1 = color1.green;
    const b1 = color1.blue;
    const a1 = color1.alpha;
    if (Color_default.equals(color0, color1)) {
      for (i = 0; i < numPoints; i++) {
        colors[i] = Color_default.clone(color0);
      }
      return colors;
    }
    const redPerVertex = (r1 - r0) / numPoints;
    const greenPerVertex = (g1 - g0) / numPoints;
    const bluePerVertex = (b1 - b0) / numPoints;
    const alphaPerVertex = (a1 - a0) / numPoints;
    for (i = 0; i < numPoints; i++) {
      colors[i] = new Color_default(
        r0 + i * redPerVertex,
        g0 + i * greenPerVertex,
        b0 + i * bluePerVertex,
        a0 + i * alphaPerVertex
      );
    }
    return colors;
  }
  function PolylineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const positions = options.positions;
    const colors = options.colors;
    const width = defaultValue_default(options.width, 1);
    const colorsPerVertex = defaultValue_default(options.colorsPerVertex, false);
    if (!defined_default(positions) || positions.length < 2) {
      throw new DeveloperError_default("At least two positions are required.");
    }
    if (typeof width !== "number") {
      throw new DeveloperError_default("width must be a number");
    }
    if (defined_default(colors) && (colorsPerVertex && colors.length < positions.length || !colorsPerVertex && colors.length < positions.length - 1)) {
      throw new DeveloperError_default("colors has an invalid length.");
    }
    this._positions = positions;
    this._colors = colors;
    this._width = width;
    this._colorsPerVertex = colorsPerVertex;
    this._vertexFormat = VertexFormat_default.clone(
      defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT)
    );
    this._arcType = defaultValue_default(options.arcType, ArcType_default.GEODESIC);
    this._granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    this._ellipsoid = Ellipsoid_default.clone(
      defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84)
    );
    this._workerName = "createPolylineGeometry";
    let numComponents = 1 + positions.length * Cartesian3_default.packedLength;
    numComponents += defined_default(colors) ? 1 + colors.length * Color_default.packedLength : 1;
    this.packedLength = numComponents + Ellipsoid_default.packedLength + VertexFormat_default.packedLength + 4;
  }
  var scratchInterpolateColorsArray, scratchEllipsoid8, scratchVertexFormat10, scratchOptions16, scratchCartesian38, scratchPosition4, scratchPrevPosition, scratchNextPosition, PolylineGeometry_default;
  var init_PolylineGeometry = __esm({
    "packages/engine/Source/Core/PolylineGeometry.js"() {
      init_ArcType();
      init_arrayRemoveDuplicates();
      init_BoundingSphere();
      init_Cartesian3();
      init_Color();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryType();
      init_IndexDatatype();
      init_Math();
      init_PolylinePipeline();
      init_PrimitiveType();
      init_VertexFormat();
      scratchInterpolateColorsArray = [];
      PolylineGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        const positions = value._positions;
        let length = positions.length;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          Cartesian3_default.pack(positions[i], array, startingIndex);
        }
        const colors = value._colors;
        length = defined_default(colors) ? colors.length : 0;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Color_default.packedLength) {
          Color_default.pack(colors[i], array, startingIndex);
        }
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._width;
        array[startingIndex++] = value._colorsPerVertex ? 1 : 0;
        array[startingIndex++] = value._arcType;
        array[startingIndex] = value._granularity;
        return array;
      };
      scratchEllipsoid8 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchVertexFormat10 = new VertexFormat_default();
      scratchOptions16 = {
        positions: void 0,
        colors: void 0,
        ellipsoid: scratchEllipsoid8,
        vertexFormat: scratchVertexFormat10,
        width: void 0,
        colorsPerVertex: void 0,
        arcType: void 0,
        granularity: void 0
      };
      PolylineGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        let length = array[startingIndex++];
        const positions = new Array(length);
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          positions[i] = Cartesian3_default.unpack(array, startingIndex);
        }
        length = array[startingIndex++];
        const colors = length > 0 ? new Array(length) : void 0;
        for (i = 0; i < length; ++i, startingIndex += Color_default.packedLength) {
          colors[i] = Color_default.unpack(array, startingIndex);
        }
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid8);
        startingIndex += Ellipsoid_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat10
        );
        startingIndex += VertexFormat_default.packedLength;
        const width = array[startingIndex++];
        const colorsPerVertex = array[startingIndex++] === 1;
        const arcType = array[startingIndex++];
        const granularity = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions16.positions = positions;
          scratchOptions16.colors = colors;
          scratchOptions16.width = width;
          scratchOptions16.colorsPerVertex = colorsPerVertex;
          scratchOptions16.arcType = arcType;
          scratchOptions16.granularity = granularity;
          return new PolylineGeometry(scratchOptions16);
        }
        result._positions = positions;
        result._colors = colors;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._width = width;
        result._colorsPerVertex = colorsPerVertex;
        result._arcType = arcType;
        result._granularity = granularity;
        return result;
      };
      scratchCartesian38 = new Cartesian3_default();
      scratchPosition4 = new Cartesian3_default();
      scratchPrevPosition = new Cartesian3_default();
      scratchNextPosition = new Cartesian3_default();
      PolylineGeometry.createGeometry = function(polylineGeometry) {
        const width = polylineGeometry._width;
        const vertexFormat = polylineGeometry._vertexFormat;
        let colors = polylineGeometry._colors;
        const colorsPerVertex = polylineGeometry._colorsPerVertex;
        const arcType = polylineGeometry._arcType;
        const granularity = polylineGeometry._granularity;
        const ellipsoid = polylineGeometry._ellipsoid;
        let i;
        let j;
        let k;
        const removedIndices = [];
        let positions = arrayRemoveDuplicates_default(
          polylineGeometry._positions,
          Cartesian3_default.equalsEpsilon,
          false,
          removedIndices
        );
        if (defined_default(colors) && removedIndices.length > 0) {
          let removedArrayIndex = 0;
          let nextRemovedIndex = removedIndices[0];
          colors = colors.filter(function(color, index2) {
            let remove = false;
            if (colorsPerVertex) {
              remove = index2 === nextRemovedIndex || index2 === 0 && nextRemovedIndex === 1;
            } else {
              remove = index2 + 1 === nextRemovedIndex;
            }
            if (remove) {
              removedArrayIndex++;
              nextRemovedIndex = removedIndices[removedArrayIndex];
              return false;
            }
            return true;
          });
        }
        let positionsLength = positions.length;
        if (positionsLength < 2 || width <= 0) {
          return void 0;
        }
        if (arcType === ArcType_default.GEODESIC || arcType === ArcType_default.RHUMB) {
          let subdivisionSize;
          let numberOfPointsFunction;
          if (arcType === ArcType_default.GEODESIC) {
            subdivisionSize = Math_default.chordLength(
              granularity,
              ellipsoid.maximumRadius
            );
            numberOfPointsFunction = PolylinePipeline_default.numberOfPoints;
          } else {
            subdivisionSize = granularity;
            numberOfPointsFunction = PolylinePipeline_default.numberOfPointsRhumbLine;
          }
          const heights = PolylinePipeline_default.extractHeights(positions, ellipsoid);
          if (defined_default(colors)) {
            let colorLength = 1;
            for (i = 0; i < positionsLength - 1; ++i) {
              colorLength += numberOfPointsFunction(
                positions[i],
                positions[i + 1],
                subdivisionSize
              );
            }
            const newColors = new Array(colorLength);
            let newColorIndex = 0;
            for (i = 0; i < positionsLength - 1; ++i) {
              const p0 = positions[i];
              const p1 = positions[i + 1];
              const c0 = colors[i];
              const numColors = numberOfPointsFunction(p0, p1, subdivisionSize);
              if (colorsPerVertex && i < colorLength) {
                const c1 = colors[i + 1];
                const interpolatedColors = interpolateColors(
                  p0,
                  p1,
                  c0,
                  c1,
                  numColors
                );
                const interpolatedColorsLength = interpolatedColors.length;
                for (j = 0; j < interpolatedColorsLength; ++j) {
                  newColors[newColorIndex++] = interpolatedColors[j];
                }
              } else {
                for (j = 0; j < numColors; ++j) {
                  newColors[newColorIndex++] = Color_default.clone(c0);
                }
              }
            }
            newColors[newColorIndex] = Color_default.clone(colors[colors.length - 1]);
            colors = newColors;
            scratchInterpolateColorsArray.length = 0;
          }
          if (arcType === ArcType_default.GEODESIC) {
            positions = PolylinePipeline_default.generateCartesianArc({
              positions,
              minDistance: subdivisionSize,
              ellipsoid,
              height: heights
            });
          } else {
            positions = PolylinePipeline_default.generateCartesianRhumbArc({
              positions,
              granularity: subdivisionSize,
              ellipsoid,
              height: heights
            });
          }
        }
        positionsLength = positions.length;
        const size = positionsLength * 4 - 4;
        const finalPositions = new Float64Array(size * 3);
        const prevPositions = new Float64Array(size * 3);
        const nextPositions = new Float64Array(size * 3);
        const expandAndWidth = new Float32Array(size * 2);
        const st = vertexFormat.st ? new Float32Array(size * 2) : void 0;
        const finalColors = defined_default(colors) ? new Uint8Array(size * 4) : void 0;
        let positionIndex = 0;
        let expandAndWidthIndex = 0;
        let stIndex = 0;
        let colorIndex = 0;
        let position;
        for (j = 0; j < positionsLength; ++j) {
          if (j === 0) {
            position = scratchCartesian38;
            Cartesian3_default.subtract(positions[0], positions[1], position);
            Cartesian3_default.add(positions[0], position, position);
          } else {
            position = positions[j - 1];
          }
          Cartesian3_default.clone(position, scratchPrevPosition);
          Cartesian3_default.clone(positions[j], scratchPosition4);
          if (j === positionsLength - 1) {
            position = scratchCartesian38;
            Cartesian3_default.subtract(
              positions[positionsLength - 1],
              positions[positionsLength - 2],
              position
            );
            Cartesian3_default.add(positions[positionsLength - 1], position, position);
          } else {
            position = positions[j + 1];
          }
          Cartesian3_default.clone(position, scratchNextPosition);
          let color0, color1;
          if (defined_default(finalColors)) {
            if (j !== 0 && !colorsPerVertex) {
              color0 = colors[j - 1];
            } else {
              color0 = colors[j];
            }
            if (j !== positionsLength - 1) {
              color1 = colors[j];
            }
          }
          const startK = j === 0 ? 2 : 0;
          const endK = j === positionsLength - 1 ? 2 : 4;
          for (k = startK; k < endK; ++k) {
            Cartesian3_default.pack(scratchPosition4, finalPositions, positionIndex);
            Cartesian3_default.pack(scratchPrevPosition, prevPositions, positionIndex);
            Cartesian3_default.pack(scratchNextPosition, nextPositions, positionIndex);
            positionIndex += 3;
            const direction2 = k - 2 < 0 ? -1 : 1;
            expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;
            expandAndWidth[expandAndWidthIndex++] = direction2 * width;
            if (vertexFormat.st) {
              st[stIndex++] = j / (positionsLength - 1);
              st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0);
            }
            if (defined_default(finalColors)) {
              const color = k < 2 ? color0 : color1;
              finalColors[colorIndex++] = Color_default.floatToByte(color.red);
              finalColors[colorIndex++] = Color_default.floatToByte(color.green);
              finalColors[colorIndex++] = Color_default.floatToByte(color.blue);
              finalColors[colorIndex++] = Color_default.floatToByte(color.alpha);
            }
          }
        }
        const attributes = new GeometryAttributes_default();
        attributes.position = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.DOUBLE,
          componentsPerAttribute: 3,
          values: finalPositions
        });
        attributes.prevPosition = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.DOUBLE,
          componentsPerAttribute: 3,
          values: prevPositions
        });
        attributes.nextPosition = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.DOUBLE,
          componentsPerAttribute: 3,
          values: nextPositions
        });
        attributes.expandAndWidth = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.FLOAT,
          componentsPerAttribute: 2,
          values: expandAndWidth
        });
        if (vertexFormat.st) {
          attributes.st = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 2,
            values: st
          });
        }
        if (defined_default(finalColors)) {
          attributes.color = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
            componentsPerAttribute: 4,
            values: finalColors,
            normalize: true
          });
        }
        const indices = IndexDatatype_default.createTypedArray(size, positionsLength * 6 - 6);
        let index = 0;
        let indicesIndex = 0;
        const length = positionsLength - 1;
        for (j = 0; j < length; ++j) {
          indices[indicesIndex++] = index;
          indices[indicesIndex++] = index + 2;
          indices[indicesIndex++] = index + 1;
          indices[indicesIndex++] = index + 1;
          indices[indicesIndex++] = index + 2;
          indices[indicesIndex++] = index + 3;
          index += 4;
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere: BoundingSphere_default.fromPoints(positions),
          geometryType: GeometryType_default.POLYLINES
        });
      };
      PolylineGeometry_default = PolylineGeometry;
    }
  });

  // packages/engine/Source/Workers/createPolylineGeometry.js
  var createPolylineGeometry_exports = {};
  __export(createPolylineGeometry_exports, {
    default: () => createPolylineGeometry_default
  });
  function createPolylineGeometry(polylineGeometry, offset) {
    if (defined_default(offset)) {
      polylineGeometry = PolylineGeometry_default.unpack(polylineGeometry, offset);
    }
    polylineGeometry._ellipsoid = Ellipsoid_default.clone(polylineGeometry._ellipsoid);
    return PolylineGeometry_default.createGeometry(polylineGeometry);
  }
  var createPolylineGeometry_default;
  var init_createPolylineGeometry = __esm({
    "packages/engine/Source/Workers/createPolylineGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_PolylineGeometry();
      createPolylineGeometry_default = createPolylineGeometry;
    }
  });

  // packages/engine/Source/Core/PolylineVolumeGeometry.js
  function computeAttributes2(combinedPositions, shape, boundingRectangle, vertexFormat) {
    const attributes = new GeometryAttributes_default();
    if (vertexFormat.position) {
      attributes.position = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.DOUBLE,
        componentsPerAttribute: 3,
        values: combinedPositions
      });
    }
    const shapeLength = shape.length;
    const vertexCount = combinedPositions.length / 3;
    const length = (vertexCount - shapeLength * 2) / (shapeLength * 2);
    const firstEndIndices = PolygonPipeline_default.triangulate(shape);
    const indicesCount = (length - 1) * shapeLength * 6 + firstEndIndices.length * 2;
    const indices = IndexDatatype_default.createTypedArray(vertexCount, indicesCount);
    let i, j;
    let ll, ul, ur, lr;
    const offset = shapeLength * 2;
    let index = 0;
    for (i = 0; i < length - 1; i++) {
      for (j = 0; j < shapeLength - 1; j++) {
        ll = j * 2 + i * shapeLength * 2;
        lr = ll + offset;
        ul = ll + 1;
        ur = ul + offset;
        indices[index++] = ul;
        indices[index++] = ll;
        indices[index++] = ur;
        indices[index++] = ur;
        indices[index++] = ll;
        indices[index++] = lr;
      }
      ll = shapeLength * 2 - 2 + i * shapeLength * 2;
      ul = ll + 1;
      ur = ul + offset;
      lr = ll + offset;
      indices[index++] = ul;
      indices[index++] = ll;
      indices[index++] = ur;
      indices[index++] = ur;
      indices[index++] = ll;
      indices[index++] = lr;
    }
    if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) {
      const st = new Float32Array(vertexCount * 2);
      const lengthSt = 1 / (length - 1);
      const heightSt = 1 / boundingRectangle.height;
      const heightOffset = boundingRectangle.height / 2;
      let s, t;
      let stindex = 0;
      for (i = 0; i < length; i++) {
        s = i * lengthSt;
        t = heightSt * (shape[0].y + heightOffset);
        st[stindex++] = s;
        st[stindex++] = t;
        for (j = 1; j < shapeLength; j++) {
          t = heightSt * (shape[j].y + heightOffset);
          st[stindex++] = s;
          st[stindex++] = t;
          st[stindex++] = s;
          st[stindex++] = t;
        }
        t = heightSt * (shape[0].y + heightOffset);
        st[stindex++] = s;
        st[stindex++] = t;
      }
      for (j = 0; j < shapeLength; j++) {
        s = 0;
        t = heightSt * (shape[j].y + heightOffset);
        st[stindex++] = s;
        st[stindex++] = t;
      }
      for (j = 0; j < shapeLength; j++) {
        s = (length - 1) * lengthSt;
        t = heightSt * (shape[j].y + heightOffset);
        st[stindex++] = s;
        st[stindex++] = t;
      }
      attributes.st = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 2,
        values: new Float32Array(st)
      });
    }
    const endOffset = vertexCount - shapeLength * 2;
    for (i = 0; i < firstEndIndices.length; i += 3) {
      const v02 = firstEndIndices[i] + endOffset;
      const v12 = firstEndIndices[i + 1] + endOffset;
      const v22 = firstEndIndices[i + 2] + endOffset;
      indices[index++] = v02;
      indices[index++] = v12;
      indices[index++] = v22;
      indices[index++] = v22 + shapeLength;
      indices[index++] = v12 + shapeLength;
      indices[index++] = v02 + shapeLength;
    }
    let geometry = new Geometry_default({
      attributes,
      indices,
      boundingSphere: BoundingSphere_default.fromVertices(combinedPositions),
      primitiveType: PrimitiveType_default.TRIANGLES
    });
    if (vertexFormat.normal) {
      geometry = GeometryPipeline_default.computeNormal(geometry);
    }
    if (vertexFormat.tangent || vertexFormat.bitangent) {
      try {
        geometry = GeometryPipeline_default.computeTangentAndBitangent(geometry);
      } catch (e) {
        oneTimeWarning_default(
          "polyline-volume-tangent-bitangent",
          "Unable to compute tangents and bitangents for polyline volume geometry"
        );
      }
      if (!vertexFormat.tangent) {
        geometry.attributes.tangent = void 0;
      }
      if (!vertexFormat.bitangent) {
        geometry.attributes.bitangent = void 0;
      }
      if (!vertexFormat.st) {
        geometry.attributes.st = void 0;
      }
    }
    return geometry;
  }
  function PolylineVolumeGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const positions = options.polylinePositions;
    const shape = options.shapePositions;
    if (!defined_default(positions)) {
      throw new DeveloperError_default("options.polylinePositions is required.");
    }
    if (!defined_default(shape)) {
      throw new DeveloperError_default("options.shapePositions is required.");
    }
    this._positions = positions;
    this._shape = shape;
    this._ellipsoid = Ellipsoid_default.clone(
      defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84)
    );
    this._cornerType = defaultValue_default(options.cornerType, CornerType_default.ROUNDED);
    this._vertexFormat = VertexFormat_default.clone(
      defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT)
    );
    this._granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    this._workerName = "createPolylineVolumeGeometry";
    let numComponents = 1 + positions.length * Cartesian3_default.packedLength;
    numComponents += 1 + shape.length * Cartesian2_default.packedLength;
    this.packedLength = numComponents + Ellipsoid_default.packedLength + VertexFormat_default.packedLength + 2;
  }
  var scratchEllipsoid9, scratchVertexFormat11, scratchOptions17, brScratch, PolylineVolumeGeometry_default;
  var init_PolylineVolumeGeometry = __esm({
    "packages/engine/Source/Core/PolylineVolumeGeometry.js"() {
      init_arrayRemoveDuplicates();
      init_BoundingRectangle();
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_ComponentDatatype();
      init_CornerType();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_Math();
      init_oneTimeWarning();
      init_PolygonPipeline();
      init_PolylineVolumeGeometryLibrary();
      init_PrimitiveType();
      init_VertexFormat();
      init_WindingOrder();
      PolylineVolumeGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        const positions = value._positions;
        let length = positions.length;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          Cartesian3_default.pack(positions[i], array, startingIndex);
        }
        const shape = value._shape;
        length = shape.length;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Cartesian2_default.packedLength) {
          Cartesian2_default.pack(shape[i], array, startingIndex);
        }
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._cornerType;
        array[startingIndex] = value._granularity;
        return array;
      };
      scratchEllipsoid9 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchVertexFormat11 = new VertexFormat_default();
      scratchOptions17 = {
        polylinePositions: void 0,
        shapePositions: void 0,
        ellipsoid: scratchEllipsoid9,
        vertexFormat: scratchVertexFormat11,
        cornerType: void 0,
        granularity: void 0
      };
      PolylineVolumeGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        let length = array[startingIndex++];
        const positions = new Array(length);
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          positions[i] = Cartesian3_default.unpack(array, startingIndex);
        }
        length = array[startingIndex++];
        const shape = new Array(length);
        for (i = 0; i < length; ++i, startingIndex += Cartesian2_default.packedLength) {
          shape[i] = Cartesian2_default.unpack(array, startingIndex);
        }
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid9);
        startingIndex += Ellipsoid_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat11
        );
        startingIndex += VertexFormat_default.packedLength;
        const cornerType = array[startingIndex++];
        const granularity = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions17.polylinePositions = positions;
          scratchOptions17.shapePositions = shape;
          scratchOptions17.cornerType = cornerType;
          scratchOptions17.granularity = granularity;
          return new PolylineVolumeGeometry(scratchOptions17);
        }
        result._positions = positions;
        result._shape = shape;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._cornerType = cornerType;
        result._granularity = granularity;
        return result;
      };
      brScratch = new BoundingRectangle_default();
      PolylineVolumeGeometry.createGeometry = function(polylineVolumeGeometry) {
        const positions = polylineVolumeGeometry._positions;
        const cleanPositions = arrayRemoveDuplicates_default(
          positions,
          Cartesian3_default.equalsEpsilon
        );
        let shape2D = polylineVolumeGeometry._shape;
        shape2D = PolylineVolumeGeometryLibrary_default.removeDuplicatesFromShape(shape2D);
        if (cleanPositions.length < 2 || shape2D.length < 3) {
          return void 0;
        }
        if (PolygonPipeline_default.computeWindingOrder2D(shape2D) === WindingOrder_default.CLOCKWISE) {
          shape2D.reverse();
        }
        const boundingRectangle = BoundingRectangle_default.fromPoints(shape2D, brScratch);
        const computedPositions = PolylineVolumeGeometryLibrary_default.computePositions(
          cleanPositions,
          shape2D,
          boundingRectangle,
          polylineVolumeGeometry,
          true
        );
        return computeAttributes2(
          computedPositions,
          shape2D,
          boundingRectangle,
          polylineVolumeGeometry._vertexFormat
        );
      };
      PolylineVolumeGeometry_default = PolylineVolumeGeometry;
    }
  });

  // packages/engine/Source/Workers/createPolylineVolumeGeometry.js
  var createPolylineVolumeGeometry_exports = {};
  __export(createPolylineVolumeGeometry_exports, {
    default: () => createPolylineVolumeGeometry_default
  });
  function createPolylineVolumeGeometry(polylineVolumeGeometry, offset) {
    if (defined_default(offset)) {
      polylineVolumeGeometry = PolylineVolumeGeometry_default.unpack(
        polylineVolumeGeometry,
        offset
      );
    }
    polylineVolumeGeometry._ellipsoid = Ellipsoid_default.clone(
      polylineVolumeGeometry._ellipsoid
    );
    return PolylineVolumeGeometry_default.createGeometry(polylineVolumeGeometry);
  }
  var createPolylineVolumeGeometry_default;
  var init_createPolylineVolumeGeometry = __esm({
    "packages/engine/Source/Workers/createPolylineVolumeGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_PolylineVolumeGeometry();
      createPolylineVolumeGeometry_default = createPolylineVolumeGeometry;
    }
  });

  // packages/engine/Source/Core/PolylineVolumeOutlineGeometry.js
  function computeAttributes3(positions, shape) {
    const attributes = new GeometryAttributes_default();
    attributes.position = new GeometryAttribute_default({
      componentDatatype: ComponentDatatype_default.DOUBLE,
      componentsPerAttribute: 3,
      values: positions
    });
    const shapeLength = shape.length;
    const vertexCount = attributes.position.values.length / 3;
    const positionLength = positions.length / 3;
    const shapeCount = positionLength / shapeLength;
    const indices = IndexDatatype_default.createTypedArray(
      vertexCount,
      2 * shapeLength * (shapeCount + 1)
    );
    let i, j;
    let index = 0;
    i = 0;
    let offset = i * shapeLength;
    for (j = 0; j < shapeLength - 1; j++) {
      indices[index++] = j + offset;
      indices[index++] = j + offset + 1;
    }
    indices[index++] = shapeLength - 1 + offset;
    indices[index++] = offset;
    i = shapeCount - 1;
    offset = i * shapeLength;
    for (j = 0; j < shapeLength - 1; j++) {
      indices[index++] = j + offset;
      indices[index++] = j + offset + 1;
    }
    indices[index++] = shapeLength - 1 + offset;
    indices[index++] = offset;
    for (i = 0; i < shapeCount - 1; i++) {
      const firstOffset = shapeLength * i;
      const secondOffset = firstOffset + shapeLength;
      for (j = 0; j < shapeLength; j++) {
        indices[index++] = j + firstOffset;
        indices[index++] = j + secondOffset;
      }
    }
    const geometry = new Geometry_default({
      attributes,
      indices: IndexDatatype_default.createTypedArray(vertexCount, indices),
      boundingSphere: BoundingSphere_default.fromVertices(positions),
      primitiveType: PrimitiveType_default.LINES
    });
    return geometry;
  }
  function PolylineVolumeOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const positions = options.polylinePositions;
    const shape = options.shapePositions;
    if (!defined_default(positions)) {
      throw new DeveloperError_default("options.polylinePositions is required.");
    }
    if (!defined_default(shape)) {
      throw new DeveloperError_default("options.shapePositions is required.");
    }
    this._positions = positions;
    this._shape = shape;
    this._ellipsoid = Ellipsoid_default.clone(
      defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84)
    );
    this._cornerType = defaultValue_default(options.cornerType, CornerType_default.ROUNDED);
    this._granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    this._workerName = "createPolylineVolumeOutlineGeometry";
    let numComponents = 1 + positions.length * Cartesian3_default.packedLength;
    numComponents += 1 + shape.length * Cartesian2_default.packedLength;
    this.packedLength = numComponents + Ellipsoid_default.packedLength + 2;
  }
  var scratchEllipsoid10, scratchOptions18, brScratch2, PolylineVolumeOutlineGeometry_default;
  var init_PolylineVolumeOutlineGeometry = __esm({
    "packages/engine/Source/Core/PolylineVolumeOutlineGeometry.js"() {
      init_arrayRemoveDuplicates();
      init_BoundingRectangle();
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_ComponentDatatype();
      init_CornerType();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_IndexDatatype();
      init_Math();
      init_PolygonPipeline();
      init_PolylineVolumeGeometryLibrary();
      init_PrimitiveType();
      init_WindingOrder();
      PolylineVolumeOutlineGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        const positions = value._positions;
        let length = positions.length;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          Cartesian3_default.pack(positions[i], array, startingIndex);
        }
        const shape = value._shape;
        length = shape.length;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Cartesian2_default.packedLength) {
          Cartesian2_default.pack(shape[i], array, startingIndex);
        }
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        array[startingIndex++] = value._cornerType;
        array[startingIndex] = value._granularity;
        return array;
      };
      scratchEllipsoid10 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchOptions18 = {
        polylinePositions: void 0,
        shapePositions: void 0,
        ellipsoid: scratchEllipsoid10,
        height: void 0,
        cornerType: void 0,
        granularity: void 0
      };
      PolylineVolumeOutlineGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        let length = array[startingIndex++];
        const positions = new Array(length);
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          positions[i] = Cartesian3_default.unpack(array, startingIndex);
        }
        length = array[startingIndex++];
        const shape = new Array(length);
        for (i = 0; i < length; ++i, startingIndex += Cartesian2_default.packedLength) {
          shape[i] = Cartesian2_default.unpack(array, startingIndex);
        }
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid10);
        startingIndex += Ellipsoid_default.packedLength;
        const cornerType = array[startingIndex++];
        const granularity = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions18.polylinePositions = positions;
          scratchOptions18.shapePositions = shape;
          scratchOptions18.cornerType = cornerType;
          scratchOptions18.granularity = granularity;
          return new PolylineVolumeOutlineGeometry(scratchOptions18);
        }
        result._positions = positions;
        result._shape = shape;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._cornerType = cornerType;
        result._granularity = granularity;
        return result;
      };
      brScratch2 = new BoundingRectangle_default();
      PolylineVolumeOutlineGeometry.createGeometry = function(polylineVolumeOutlineGeometry) {
        const positions = polylineVolumeOutlineGeometry._positions;
        const cleanPositions = arrayRemoveDuplicates_default(
          positions,
          Cartesian3_default.equalsEpsilon
        );
        let shape2D = polylineVolumeOutlineGeometry._shape;
        shape2D = PolylineVolumeGeometryLibrary_default.removeDuplicatesFromShape(shape2D);
        if (cleanPositions.length < 2 || shape2D.length < 3) {
          return void 0;
        }
        if (PolygonPipeline_default.computeWindingOrder2D(shape2D) === WindingOrder_default.CLOCKWISE) {
          shape2D.reverse();
        }
        const boundingRectangle = BoundingRectangle_default.fromPoints(shape2D, brScratch2);
        const computedPositions = PolylineVolumeGeometryLibrary_default.computePositions(
          cleanPositions,
          shape2D,
          boundingRectangle,
          polylineVolumeOutlineGeometry,
          false
        );
        return computeAttributes3(computedPositions, shape2D);
      };
      PolylineVolumeOutlineGeometry_default = PolylineVolumeOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createPolylineVolumeOutlineGeometry.js
  var createPolylineVolumeOutlineGeometry_exports = {};
  __export(createPolylineVolumeOutlineGeometry_exports, {
    default: () => createPolylineVolumeOutlineGeometry_default
  });
  function createPolylineVolumeOutlineGeometry(polylineVolumeOutlineGeometry, offset) {
    if (defined_default(offset)) {
      polylineVolumeOutlineGeometry = PolylineVolumeOutlineGeometry_default.unpack(
        polylineVolumeOutlineGeometry,
        offset
      );
    }
    polylineVolumeOutlineGeometry._ellipsoid = Ellipsoid_default.clone(
      polylineVolumeOutlineGeometry._ellipsoid
    );
    return PolylineVolumeOutlineGeometry_default.createGeometry(
      polylineVolumeOutlineGeometry
    );
  }
  var createPolylineVolumeOutlineGeometry_default;
  var init_createPolylineVolumeOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createPolylineVolumeOutlineGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_PolylineVolumeOutlineGeometry();
      createPolylineVolumeOutlineGeometry_default = createPolylineVolumeOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/RectangleGeometryLibrary.js
  function getRotationOptions(nwCorner, rotation, granularityX, granularityY, center, width, height) {
    const cosRotation = Math.cos(rotation);
    const granYCos = granularityY * cosRotation;
    const granXCos = granularityX * cosRotation;
    const sinRotation = Math.sin(rotation);
    const granYSin = granularityY * sinRotation;
    const granXSin = granularityX * sinRotation;
    nwCartesian = proj.project(nwCorner, nwCartesian);
    nwCartesian = Cartesian3_default.subtract(nwCartesian, centerCartesian, nwCartesian);
    const rotationMatrix = Matrix2_default.fromRotation(rotation, rotationMatrixScratch);
    nwCartesian = Matrix2_default.multiplyByVector(
      rotationMatrix,
      nwCartesian,
      nwCartesian
    );
    nwCartesian = Cartesian3_default.add(nwCartesian, centerCartesian, nwCartesian);
    nwCorner = proj.unproject(nwCartesian, nwCorner);
    width -= 1;
    height -= 1;
    const latitude = nwCorner.latitude;
    const latitude0 = latitude + width * granXSin;
    const latitude1 = latitude - granYCos * height;
    const latitude2 = latitude - granYCos * height + width * granXSin;
    const north = Math.max(latitude, latitude0, latitude1, latitude2);
    const south = Math.min(latitude, latitude0, latitude1, latitude2);
    const longitude = nwCorner.longitude;
    const longitude0 = longitude + width * granXCos;
    const longitude1 = longitude + height * granYSin;
    const longitude2 = longitude + height * granYSin + width * granXCos;
    const east = Math.max(longitude, longitude0, longitude1, longitude2);
    const west = Math.min(longitude, longitude0, longitude1, longitude2);
    return {
      north,
      south,
      east,
      west,
      granYCos,
      granYSin,
      granXCos,
      granXSin,
      nwCorner
    };
  }
  var cos3, sin3, sqrt, RectangleGeometryLibrary, rotationMatrixScratch, nwCartesian, centerScratch3, centerCartesian, proj, RectangleGeometryLibrary_default;
  var init_RectangleGeometryLibrary = __esm({
    "packages/engine/Source/Core/RectangleGeometryLibrary.js"() {
      init_Cartesian3();
      init_Cartographic();
      init_defined();
      init_DeveloperError();
      init_GeographicProjection();
      init_Math();
      init_Matrix2();
      init_Rectangle();
      cos3 = Math.cos;
      sin3 = Math.sin;
      sqrt = Math.sqrt;
      RectangleGeometryLibrary = {};
      RectangleGeometryLibrary.computePosition = function(computedOptions, ellipsoid, computeST, row, col, position, st) {
        const radiiSquared = ellipsoid.radiiSquared;
        const nwCorner = computedOptions.nwCorner;
        const rectangle = computedOptions.boundingRectangle;
        let stLatitude = nwCorner.latitude - computedOptions.granYCos * row + col * computedOptions.granXSin;
        const cosLatitude = cos3(stLatitude);
        const nZ = sin3(stLatitude);
        const kZ = radiiSquared.z * nZ;
        let stLongitude = nwCorner.longitude + row * computedOptions.granYSin + col * computedOptions.granXCos;
        const nX = cosLatitude * cos3(stLongitude);
        const nY = cosLatitude * sin3(stLongitude);
        const kX = radiiSquared.x * nX;
        const kY = radiiSquared.y * nY;
        const gamma = sqrt(kX * nX + kY * nY + kZ * nZ);
        position.x = kX / gamma;
        position.y = kY / gamma;
        position.z = kZ / gamma;
        if (computeST) {
          const stNwCorner = computedOptions.stNwCorner;
          if (defined_default(stNwCorner)) {
            stLatitude = stNwCorner.latitude - computedOptions.stGranYCos * row + col * computedOptions.stGranXSin;
            stLongitude = stNwCorner.longitude + row * computedOptions.stGranYSin + col * computedOptions.stGranXCos;
            st.x = (stLongitude - computedOptions.stWest) * computedOptions.lonScalar;
            st.y = (stLatitude - computedOptions.stSouth) * computedOptions.latScalar;
          } else {
            st.x = (stLongitude - rectangle.west) * computedOptions.lonScalar;
            st.y = (stLatitude - rectangle.south) * computedOptions.latScalar;
          }
        }
      };
      rotationMatrixScratch = new Matrix2_default();
      nwCartesian = new Cartesian3_default();
      centerScratch3 = new Cartographic_default();
      centerCartesian = new Cartesian3_default();
      proj = new GeographicProjection_default();
      RectangleGeometryLibrary.computeOptions = function(rectangle, granularity, rotation, stRotation, boundingRectangleScratch, nwCornerResult, stNwCornerResult) {
        let east = rectangle.east;
        let west = rectangle.west;
        let north = rectangle.north;
        let south = rectangle.south;
        let northCap = false;
        let southCap = false;
        if (north === Math_default.PI_OVER_TWO) {
          northCap = true;
        }
        if (south === -Math_default.PI_OVER_TWO) {
          southCap = true;
        }
        let dx;
        const dy = north - south;
        if (west > east) {
          dx = Math_default.TWO_PI - west + east;
        } else {
          dx = east - west;
        }
        const width = Math.ceil(dx / granularity) + 1;
        const height = Math.ceil(dy / granularity) + 1;
        const granularityX = dx / (width - 1);
        const granularityY = dy / (height - 1);
        const nwCorner = Rectangle_default.northwest(rectangle, nwCornerResult);
        const center = Rectangle_default.center(rectangle, centerScratch3);
        if (rotation !== 0 || stRotation !== 0) {
          if (center.longitude < nwCorner.longitude) {
            center.longitude += Math_default.TWO_PI;
          }
          centerCartesian = proj.project(center, centerCartesian);
        }
        const granYCos = granularityY;
        const granXCos = granularityX;
        const granYSin = 0;
        const granXSin = 0;
        const boundingRectangle = Rectangle_default.clone(
          rectangle,
          boundingRectangleScratch
        );
        const computedOptions = {
          granYCos,
          granYSin,
          granXCos,
          granXSin,
          nwCorner,
          boundingRectangle,
          width,
          height,
          northCap,
          southCap
        };
        if (rotation !== 0) {
          const rotationOptions = getRotationOptions(
            nwCorner,
            rotation,
            granularityX,
            granularityY,
            center,
            width,
            height
          );
          north = rotationOptions.north;
          south = rotationOptions.south;
          east = rotationOptions.east;
          west = rotationOptions.west;
          if (north < -Math_default.PI_OVER_TWO || north > Math_default.PI_OVER_TWO || south < -Math_default.PI_OVER_TWO || south > Math_default.PI_OVER_TWO) {
            throw new DeveloperError_default(
              "Rotated rectangle is invalid.  It crosses over either the north or south pole."
            );
          }
          computedOptions.granYCos = rotationOptions.granYCos;
          computedOptions.granYSin = rotationOptions.granYSin;
          computedOptions.granXCos = rotationOptions.granXCos;
          computedOptions.granXSin = rotationOptions.granXSin;
          boundingRectangle.north = north;
          boundingRectangle.south = south;
          boundingRectangle.east = east;
          boundingRectangle.west = west;
        }
        if (stRotation !== 0) {
          rotation = rotation - stRotation;
          const stNwCorner = Rectangle_default.northwest(boundingRectangle, stNwCornerResult);
          const stRotationOptions = getRotationOptions(
            stNwCorner,
            rotation,
            granularityX,
            granularityY,
            center,
            width,
            height
          );
          computedOptions.stGranYCos = stRotationOptions.granYCos;
          computedOptions.stGranXCos = stRotationOptions.granXCos;
          computedOptions.stGranYSin = stRotationOptions.granYSin;
          computedOptions.stGranXSin = stRotationOptions.granXSin;
          computedOptions.stNwCorner = stNwCorner;
          computedOptions.stWest = stRotationOptions.west;
          computedOptions.stSouth = stRotationOptions.south;
        }
        return computedOptions;
      };
      RectangleGeometryLibrary_default = RectangleGeometryLibrary;
    }
  });

  // packages/engine/Source/Core/RectangleGeometry.js
  function createAttributes(vertexFormat, attributes) {
    const geo = new Geometry_default({
      attributes: new GeometryAttributes_default(),
      primitiveType: PrimitiveType_default.TRIANGLES
    });
    geo.attributes.position = new GeometryAttribute_default({
      componentDatatype: ComponentDatatype_default.DOUBLE,
      componentsPerAttribute: 3,
      values: attributes.positions
    });
    if (vertexFormat.normal) {
      geo.attributes.normal = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: attributes.normals
      });
    }
    if (vertexFormat.tangent) {
      geo.attributes.tangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: attributes.tangents
      });
    }
    if (vertexFormat.bitangent) {
      geo.attributes.bitangent = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: attributes.bitangents
      });
    }
    return geo;
  }
  function calculateAttributes(positions, vertexFormat, ellipsoid, tangentRotationMatrix) {
    const length = positions.length;
    const normals = vertexFormat.normal ? new Float32Array(length) : void 0;
    const tangents = vertexFormat.tangent ? new Float32Array(length) : void 0;
    const bitangents = vertexFormat.bitangent ? new Float32Array(length) : void 0;
    let attrIndex = 0;
    const bitangent = bitangentScratch2;
    const tangent = tangentScratch2;
    let normal2 = normalScratch4;
    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {
      for (let i = 0; i < length; i += 3) {
        const p = Cartesian3_default.fromArray(positions, i, positionScratch2);
        const attrIndex1 = attrIndex + 1;
        const attrIndex2 = attrIndex + 2;
        normal2 = ellipsoid.geodeticSurfaceNormal(p, normal2);
        if (vertexFormat.tangent || vertexFormat.bitangent) {
          Cartesian3_default.cross(Cartesian3_default.UNIT_Z, normal2, tangent);
          Matrix3_default.multiplyByVector(tangentRotationMatrix, tangent, tangent);
          Cartesian3_default.normalize(tangent, tangent);
          if (vertexFormat.bitangent) {
            Cartesian3_default.normalize(
              Cartesian3_default.cross(normal2, tangent, bitangent),
              bitangent
            );
          }
        }
        if (vertexFormat.normal) {
          normals[attrIndex] = normal2.x;
          normals[attrIndex1] = normal2.y;
          normals[attrIndex2] = normal2.z;
        }
        if (vertexFormat.tangent) {
          tangents[attrIndex] = tangent.x;
          tangents[attrIndex1] = tangent.y;
          tangents[attrIndex2] = tangent.z;
        }
        if (vertexFormat.bitangent) {
          bitangents[attrIndex] = bitangent.x;
          bitangents[attrIndex1] = bitangent.y;
          bitangents[attrIndex2] = bitangent.z;
        }
        attrIndex += 3;
      }
    }
    return createAttributes(vertexFormat, {
      positions,
      normals,
      tangents,
      bitangents
    });
  }
  function calculateAttributesWall(positions, vertexFormat, ellipsoid) {
    const length = positions.length;
    const normals = vertexFormat.normal ? new Float32Array(length) : void 0;
    const tangents = vertexFormat.tangent ? new Float32Array(length) : void 0;
    const bitangents = vertexFormat.bitangent ? new Float32Array(length) : void 0;
    let normalIndex = 0;
    let tangentIndex = 0;
    let bitangentIndex = 0;
    let recomputeNormal = true;
    let bitangent = bitangentScratch2;
    let tangent = tangentScratch2;
    let normal2 = normalScratch4;
    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {
      for (let i = 0; i < length; i += 6) {
        const p = Cartesian3_default.fromArray(positions, i, positionScratch2);
        const p1 = Cartesian3_default.fromArray(positions, (i + 6) % length, v1Scratch);
        if (recomputeNormal) {
          const p2 = Cartesian3_default.fromArray(positions, (i + 3) % length, v2Scratch);
          Cartesian3_default.subtract(p1, p, p1);
          Cartesian3_default.subtract(p2, p, p2);
          normal2 = Cartesian3_default.normalize(Cartesian3_default.cross(p2, p1, normal2), normal2);
          recomputeNormal = false;
        }
        if (Cartesian3_default.equalsEpsilon(p1, p, Math_default.EPSILON10)) {
          recomputeNormal = true;
        }
        if (vertexFormat.tangent || vertexFormat.bitangent) {
          bitangent = ellipsoid.geodeticSurfaceNormal(p, bitangent);
          if (vertexFormat.tangent) {
            tangent = Cartesian3_default.normalize(
              Cartesian3_default.cross(bitangent, normal2, tangent),
              tangent
            );
          }
        }
        if (vertexFormat.normal) {
          normals[normalIndex++] = normal2.x;
          normals[normalIndex++] = normal2.y;
          normals[normalIndex++] = normal2.z;
          normals[normalIndex++] = normal2.x;
          normals[normalIndex++] = normal2.y;
          normals[normalIndex++] = normal2.z;
        }
        if (vertexFormat.tangent) {
          tangents[tangentIndex++] = tangent.x;
          tangents[tangentIndex++] = tangent.y;
          tangents[tangentIndex++] = tangent.z;
          tangents[tangentIndex++] = tangent.x;
          tangents[tangentIndex++] = tangent.y;
          tangents[tangentIndex++] = tangent.z;
        }
        if (vertexFormat.bitangent) {
          bitangents[bitangentIndex++] = bitangent.x;
          bitangents[bitangentIndex++] = bitangent.y;
          bitangents[bitangentIndex++] = bitangent.z;
          bitangents[bitangentIndex++] = bitangent.x;
          bitangents[bitangentIndex++] = bitangent.y;
          bitangents[bitangentIndex++] = bitangent.z;
        }
      }
    }
    return createAttributes(vertexFormat, {
      positions,
      normals,
      tangents,
      bitangents
    });
  }
  function constructRectangle(rectangleGeometry, computedOptions) {
    const vertexFormat = rectangleGeometry._vertexFormat;
    const ellipsoid = rectangleGeometry._ellipsoid;
    const height = computedOptions.height;
    const width = computedOptions.width;
    const northCap = computedOptions.northCap;
    const southCap = computedOptions.southCap;
    let rowStart = 0;
    let rowEnd = height;
    let rowHeight = height;
    let size = 0;
    if (northCap) {
      rowStart = 1;
      rowHeight -= 1;
      size += 1;
    }
    if (southCap) {
      rowEnd -= 1;
      rowHeight -= 1;
      size += 1;
    }
    size += width * rowHeight;
    const positions = vertexFormat.position ? new Float64Array(size * 3) : void 0;
    const textureCoordinates = vertexFormat.st ? new Float32Array(size * 2) : void 0;
    let posIndex = 0;
    let stIndex = 0;
    const position = positionScratch2;
    const st = stScratch2;
    let minX = Number.MAX_VALUE;
    let minY = Number.MAX_VALUE;
    let maxX = -Number.MAX_VALUE;
    let maxY = -Number.MAX_VALUE;
    for (let row = rowStart; row < rowEnd; ++row) {
      for (let col = 0; col < width; ++col) {
        RectangleGeometryLibrary_default.computePosition(
          computedOptions,
          ellipsoid,
          vertexFormat.st,
          row,
          col,
          position,
          st
        );
        positions[posIndex++] = position.x;
        positions[posIndex++] = position.y;
        positions[posIndex++] = position.z;
        if (vertexFormat.st) {
          textureCoordinates[stIndex++] = st.x;
          textureCoordinates[stIndex++] = st.y;
          minX = Math.min(minX, st.x);
          minY = Math.min(minY, st.y);
          maxX = Math.max(maxX, st.x);
          maxY = Math.max(maxY, st.y);
        }
      }
    }
    if (northCap) {
      RectangleGeometryLibrary_default.computePosition(
        computedOptions,
        ellipsoid,
        vertexFormat.st,
        0,
        0,
        position,
        st
      );
      positions[posIndex++] = position.x;
      positions[posIndex++] = position.y;
      positions[posIndex++] = position.z;
      if (vertexFormat.st) {
        textureCoordinates[stIndex++] = st.x;
        textureCoordinates[stIndex++] = st.y;
        minX = st.x;
        minY = st.y;
        maxX = st.x;
        maxY = st.y;
      }
    }
    if (southCap) {
      RectangleGeometryLibrary_default.computePosition(
        computedOptions,
        ellipsoid,
        vertexFormat.st,
        height - 1,
        0,
        position,
        st
      );
      positions[posIndex++] = position.x;
      positions[posIndex++] = position.y;
      positions[posIndex] = position.z;
      if (vertexFormat.st) {
        textureCoordinates[stIndex++] = st.x;
        textureCoordinates[stIndex] = st.y;
        minX = Math.min(minX, st.x);
        minY = Math.min(minY, st.y);
        maxX = Math.max(maxX, st.x);
        maxY = Math.max(maxY, st.y);
      }
    }
    if (vertexFormat.st && (minX < 0 || minY < 0 || maxX > 1 || maxY > 1)) {
      for (let k = 0; k < textureCoordinates.length; k += 2) {
        textureCoordinates[k] = (textureCoordinates[k] - minX) / (maxX - minX);
        textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minY) / (maxY - minY);
      }
    }
    const geo = calculateAttributes(
      positions,
      vertexFormat,
      ellipsoid,
      computedOptions.tangentRotationMatrix
    );
    let indicesSize = 6 * (width - 1) * (rowHeight - 1);
    if (northCap) {
      indicesSize += 3 * (width - 1);
    }
    if (southCap) {
      indicesSize += 3 * (width - 1);
    }
    const indices = IndexDatatype_default.createTypedArray(size, indicesSize);
    let index = 0;
    let indicesIndex = 0;
    let i;
    for (i = 0; i < rowHeight - 1; ++i) {
      for (let j = 0; j < width - 1; ++j) {
        const upperLeft = index;
        const lowerLeft = upperLeft + width;
        const lowerRight = lowerLeft + 1;
        const upperRight = upperLeft + 1;
        indices[indicesIndex++] = upperLeft;
        indices[indicesIndex++] = lowerLeft;
        indices[indicesIndex++] = upperRight;
        indices[indicesIndex++] = upperRight;
        indices[indicesIndex++] = lowerLeft;
        indices[indicesIndex++] = lowerRight;
        ++index;
      }
      ++index;
    }
    if (northCap || southCap) {
      let northIndex = size - 1;
      const southIndex = size - 1;
      if (northCap && southCap) {
        northIndex = size - 2;
      }
      let p1;
      let p2;
      index = 0;
      if (northCap) {
        for (i = 0; i < width - 1; i++) {
          p1 = index;
          p2 = p1 + 1;
          indices[indicesIndex++] = northIndex;
          indices[indicesIndex++] = p1;
          indices[indicesIndex++] = p2;
          ++index;
        }
      }
      if (southCap) {
        index = (rowHeight - 1) * width;
        for (i = 0; i < width - 1; i++) {
          p1 = index;
          p2 = p1 + 1;
          indices[indicesIndex++] = p1;
          indices[indicesIndex++] = southIndex;
          indices[indicesIndex++] = p2;
          ++index;
        }
      }
    }
    geo.indices = indices;
    if (vertexFormat.st) {
      geo.attributes.st = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 2,
        values: textureCoordinates
      });
    }
    return geo;
  }
  function addWallPositions2(wallPositions, posIndex, i, topPositions, bottomPositions) {
    wallPositions[posIndex++] = topPositions[i];
    wallPositions[posIndex++] = topPositions[i + 1];
    wallPositions[posIndex++] = topPositions[i + 2];
    wallPositions[posIndex++] = bottomPositions[i];
    wallPositions[posIndex++] = bottomPositions[i + 1];
    wallPositions[posIndex] = bottomPositions[i + 2];
    return wallPositions;
  }
  function addWallTextureCoordinates(wallTextures, stIndex, i, st) {
    wallTextures[stIndex++] = st[i];
    wallTextures[stIndex++] = st[i + 1];
    wallTextures[stIndex++] = st[i];
    wallTextures[stIndex] = st[i + 1];
    return wallTextures;
  }
  function constructExtrudedRectangle(rectangleGeometry, computedOptions) {
    const shadowVolume = rectangleGeometry._shadowVolume;
    const offsetAttributeValue = rectangleGeometry._offsetAttribute;
    const vertexFormat = rectangleGeometry._vertexFormat;
    const minHeight = rectangleGeometry._extrudedHeight;
    const maxHeight = rectangleGeometry._surfaceHeight;
    const ellipsoid = rectangleGeometry._ellipsoid;
    const height = computedOptions.height;
    const width = computedOptions.width;
    let i;
    if (shadowVolume) {
      const newVertexFormat = VertexFormat_default.clone(
        vertexFormat,
        scratchVertexFormat12
      );
      newVertexFormat.normal = true;
      rectangleGeometry._vertexFormat = newVertexFormat;
    }
    const topBottomGeo = constructRectangle(rectangleGeometry, computedOptions);
    if (shadowVolume) {
      rectangleGeometry._vertexFormat = vertexFormat;
    }
    let topPositions = PolygonPipeline_default.scaleToGeodeticHeight(
      topBottomGeo.attributes.position.values,
      maxHeight,
      ellipsoid,
      false
    );
    topPositions = new Float64Array(topPositions);
    let length = topPositions.length;
    const newLength = length * 2;
    const positions = new Float64Array(newLength);
    positions.set(topPositions);
    const bottomPositions = PolygonPipeline_default.scaleToGeodeticHeight(
      topBottomGeo.attributes.position.values,
      minHeight,
      ellipsoid
    );
    positions.set(bottomPositions, length);
    topBottomGeo.attributes.position.values = positions;
    const normals = vertexFormat.normal ? new Float32Array(newLength) : void 0;
    const tangents = vertexFormat.tangent ? new Float32Array(newLength) : void 0;
    const bitangents = vertexFormat.bitangent ? new Float32Array(newLength) : void 0;
    const textures = vertexFormat.st ? new Float32Array(newLength / 3 * 2) : void 0;
    let topSt;
    let topNormals;
    if (vertexFormat.normal) {
      topNormals = topBottomGeo.attributes.normal.values;
      normals.set(topNormals);
      for (i = 0; i < length; i++) {
        topNormals[i] = -topNormals[i];
      }
      normals.set(topNormals, length);
      topBottomGeo.attributes.normal.values = normals;
    }
    if (shadowVolume) {
      topNormals = topBottomGeo.attributes.normal.values;
      if (!vertexFormat.normal) {
        topBottomGeo.attributes.normal = void 0;
      }
      const extrudeNormals = new Float32Array(newLength);
      for (i = 0; i < length; i++) {
        topNormals[i] = -topNormals[i];
      }
      extrudeNormals.set(topNormals, length);
      topBottomGeo.attributes.extrudeDirection = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: extrudeNormals
      });
    }
    let offsetValue;
    const hasOffsets = defined_default(offsetAttributeValue);
    if (hasOffsets) {
      const size = length / 3 * 2;
      let offsetAttribute = new Uint8Array(size);
      if (offsetAttributeValue === GeometryOffsetAttribute_default.TOP) {
        offsetAttribute = offsetAttribute.fill(1, 0, size / 2);
      } else {
        offsetValue = offsetAttributeValue === GeometryOffsetAttribute_default.NONE ? 0 : 1;
        offsetAttribute = offsetAttribute.fill(offsetValue);
      }
      topBottomGeo.attributes.applyOffset = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
        componentsPerAttribute: 1,
        values: offsetAttribute
      });
    }
    if (vertexFormat.tangent) {
      const topTangents = topBottomGeo.attributes.tangent.values;
      tangents.set(topTangents);
      for (i = 0; i < length; i++) {
        topTangents[i] = -topTangents[i];
      }
      tangents.set(topTangents, length);
      topBottomGeo.attributes.tangent.values = tangents;
    }
    if (vertexFormat.bitangent) {
      const topBitangents = topBottomGeo.attributes.bitangent.values;
      bitangents.set(topBitangents);
      bitangents.set(topBitangents, length);
      topBottomGeo.attributes.bitangent.values = bitangents;
    }
    if (vertexFormat.st) {
      topSt = topBottomGeo.attributes.st.values;
      textures.set(topSt);
      textures.set(topSt, length / 3 * 2);
      topBottomGeo.attributes.st.values = textures;
    }
    const indices = topBottomGeo.indices;
    const indicesLength = indices.length;
    const posLength = length / 3;
    const newIndices = IndexDatatype_default.createTypedArray(
      newLength / 3,
      indicesLength * 2
    );
    newIndices.set(indices);
    for (i = 0; i < indicesLength; i += 3) {
      newIndices[i + indicesLength] = indices[i + 2] + posLength;
      newIndices[i + 1 + indicesLength] = indices[i + 1] + posLength;
      newIndices[i + 2 + indicesLength] = indices[i] + posLength;
    }
    topBottomGeo.indices = newIndices;
    const northCap = computedOptions.northCap;
    const southCap = computedOptions.southCap;
    let rowHeight = height;
    let widthMultiplier = 2;
    let perimeterPositions = 0;
    let corners = 4;
    let dupliateCorners = 4;
    if (northCap) {
      widthMultiplier -= 1;
      rowHeight -= 1;
      perimeterPositions += 1;
      corners -= 2;
      dupliateCorners -= 1;
    }
    if (southCap) {
      widthMultiplier -= 1;
      rowHeight -= 1;
      perimeterPositions += 1;
      corners -= 2;
      dupliateCorners -= 1;
    }
    perimeterPositions += widthMultiplier * width + 2 * rowHeight - corners;
    const wallCount = (perimeterPositions + dupliateCorners) * 2;
    let wallPositions = new Float64Array(wallCount * 3);
    const wallExtrudeNormals = shadowVolume ? new Float32Array(wallCount * 3) : void 0;
    let wallOffsetAttribute = hasOffsets ? new Uint8Array(wallCount) : void 0;
    let wallTextures = vertexFormat.st ? new Float32Array(wallCount * 2) : void 0;
    const computeTopOffsets = offsetAttributeValue === GeometryOffsetAttribute_default.TOP;
    if (hasOffsets && !computeTopOffsets) {
      offsetValue = offsetAttributeValue === GeometryOffsetAttribute_default.ALL ? 1 : 0;
      wallOffsetAttribute = wallOffsetAttribute.fill(offsetValue);
    }
    let posIndex = 0;
    let stIndex = 0;
    let extrudeNormalIndex = 0;
    let wallOffsetIndex = 0;
    const area = width * rowHeight;
    let threeI;
    for (i = 0; i < area; i += width) {
      threeI = i * 3;
      wallPositions = addWallPositions2(
        wallPositions,
        posIndex,
        threeI,
        topPositions,
        bottomPositions
      );
      posIndex += 6;
      if (vertexFormat.st) {
        wallTextures = addWallTextureCoordinates(
          wallTextures,
          stIndex,
          i * 2,
          topSt
        );
        stIndex += 4;
      }
      if (shadowVolume) {
        extrudeNormalIndex += 3;
        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];
        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];
        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];
      }
      if (computeTopOffsets) {
        wallOffsetAttribute[wallOffsetIndex++] = 1;
        wallOffsetIndex += 1;
      }
    }
    if (!southCap) {
      for (i = area - width; i < area; i++) {
        threeI = i * 3;
        wallPositions = addWallPositions2(
          wallPositions,
          posIndex,
          threeI,
          topPositions,
          bottomPositions
        );
        posIndex += 6;
        if (vertexFormat.st) {
          wallTextures = addWallTextureCoordinates(
            wallTextures,
            stIndex,
            i * 2,
            topSt
          );
          stIndex += 4;
        }
        if (shadowVolume) {
          extrudeNormalIndex += 3;
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];
        }
        if (computeTopOffsets) {
          wallOffsetAttribute[wallOffsetIndex++] = 1;
          wallOffsetIndex += 1;
        }
      }
    } else {
      const southIndex = northCap ? area + 1 : area;
      threeI = southIndex * 3;
      for (i = 0; i < 2; i++) {
        wallPositions = addWallPositions2(
          wallPositions,
          posIndex,
          threeI,
          topPositions,
          bottomPositions
        );
        posIndex += 6;
        if (vertexFormat.st) {
          wallTextures = addWallTextureCoordinates(
            wallTextures,
            stIndex,
            southIndex * 2,
            topSt
          );
          stIndex += 4;
        }
        if (shadowVolume) {
          extrudeNormalIndex += 3;
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];
        }
        if (computeTopOffsets) {
          wallOffsetAttribute[wallOffsetIndex++] = 1;
          wallOffsetIndex += 1;
        }
      }
    }
    for (i = area - 1; i > 0; i -= width) {
      threeI = i * 3;
      wallPositions = addWallPositions2(
        wallPositions,
        posIndex,
        threeI,
        topPositions,
        bottomPositions
      );
      posIndex += 6;
      if (vertexFormat.st) {
        wallTextures = addWallTextureCoordinates(
          wallTextures,
          stIndex,
          i * 2,
          topSt
        );
        stIndex += 4;
      }
      if (shadowVolume) {
        extrudeNormalIndex += 3;
        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];
        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];
        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];
      }
      if (computeTopOffsets) {
        wallOffsetAttribute[wallOffsetIndex++] = 1;
        wallOffsetIndex += 1;
      }
    }
    if (!northCap) {
      for (i = width - 1; i >= 0; i--) {
        threeI = i * 3;
        wallPositions = addWallPositions2(
          wallPositions,
          posIndex,
          threeI,
          topPositions,
          bottomPositions
        );
        posIndex += 6;
        if (vertexFormat.st) {
          wallTextures = addWallTextureCoordinates(
            wallTextures,
            stIndex,
            i * 2,
            topSt
          );
          stIndex += 4;
        }
        if (shadowVolume) {
          extrudeNormalIndex += 3;
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];
        }
        if (computeTopOffsets) {
          wallOffsetAttribute[wallOffsetIndex++] = 1;
          wallOffsetIndex += 1;
        }
      }
    } else {
      const northIndex = area;
      threeI = northIndex * 3;
      for (i = 0; i < 2; i++) {
        wallPositions = addWallPositions2(
          wallPositions,
          posIndex,
          threeI,
          topPositions,
          bottomPositions
        );
        posIndex += 6;
        if (vertexFormat.st) {
          wallTextures = addWallTextureCoordinates(
            wallTextures,
            stIndex,
            northIndex * 2,
            topSt
          );
          stIndex += 4;
        }
        if (shadowVolume) {
          extrudeNormalIndex += 3;
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];
          wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];
        }
        if (computeTopOffsets) {
          wallOffsetAttribute[wallOffsetIndex++] = 1;
          wallOffsetIndex += 1;
        }
      }
    }
    let geo = calculateAttributesWall(wallPositions, vertexFormat, ellipsoid);
    if (vertexFormat.st) {
      geo.attributes.st = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 2,
        values: wallTextures
      });
    }
    if (shadowVolume) {
      geo.attributes.extrudeDirection = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.FLOAT,
        componentsPerAttribute: 3,
        values: wallExtrudeNormals
      });
    }
    if (hasOffsets) {
      geo.attributes.applyOffset = new GeometryAttribute_default({
        componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
        componentsPerAttribute: 1,
        values: wallOffsetAttribute
      });
    }
    const wallIndices = IndexDatatype_default.createTypedArray(
      wallCount,
      perimeterPositions * 6
    );
    let upperLeft;
    let lowerLeft;
    let lowerRight;
    let upperRight;
    length = wallPositions.length / 3;
    let index = 0;
    for (i = 0; i < length - 1; i += 2) {
      upperLeft = i;
      upperRight = (upperLeft + 2) % length;
      const p1 = Cartesian3_default.fromArray(wallPositions, upperLeft * 3, v1Scratch);
      const p2 = Cartesian3_default.fromArray(wallPositions, upperRight * 3, v2Scratch);
      if (Cartesian3_default.equalsEpsilon(p1, p2, Math_default.EPSILON10)) {
        continue;
      }
      lowerLeft = (upperLeft + 1) % length;
      lowerRight = (lowerLeft + 2) % length;
      wallIndices[index++] = upperLeft;
      wallIndices[index++] = lowerLeft;
      wallIndices[index++] = upperRight;
      wallIndices[index++] = upperRight;
      wallIndices[index++] = lowerLeft;
      wallIndices[index++] = lowerRight;
    }
    geo.indices = wallIndices;
    geo = GeometryPipeline_default.combineInstances([
      new GeometryInstance_default({
        geometry: topBottomGeo
      }),
      new GeometryInstance_default({
        geometry: geo
      })
    ]);
    return geo[0];
  }
  function computeRectangle3(rectangle, granularity, rotation, ellipsoid, result) {
    if (rotation === 0) {
      return Rectangle_default.clone(rectangle, result);
    }
    const computedOptions = RectangleGeometryLibrary_default.computeOptions(
      rectangle,
      granularity,
      rotation,
      0,
      rectangleScratch,
      nwScratch
    );
    const height = computedOptions.height;
    const width = computedOptions.width;
    const positions = scratchRectanglePoints;
    RectangleGeometryLibrary_default.computePosition(
      computedOptions,
      ellipsoid,
      false,
      0,
      0,
      positions[0]
    );
    RectangleGeometryLibrary_default.computePosition(
      computedOptions,
      ellipsoid,
      false,
      0,
      width - 1,
      positions[1]
    );
    RectangleGeometryLibrary_default.computePosition(
      computedOptions,
      ellipsoid,
      false,
      height - 1,
      0,
      positions[2]
    );
    RectangleGeometryLibrary_default.computePosition(
      computedOptions,
      ellipsoid,
      false,
      height - 1,
      width - 1,
      positions[3]
    );
    return Rectangle_default.fromCartesianArray(positions, ellipsoid, result);
  }
  function RectangleGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const rectangle = options.rectangle;
    Check_default.typeOf.object("rectangle", rectangle);
    Rectangle_default.validate(rectangle);
    if (rectangle.north < rectangle.south) {
      throw new DeveloperError_default(
        "options.rectangle.north must be greater than or equal to options.rectangle.south"
      );
    }
    const height = defaultValue_default(options.height, 0);
    const extrudedHeight = defaultValue_default(options.extrudedHeight, height);
    this._rectangle = Rectangle_default.clone(rectangle);
    this._granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    this._ellipsoid = Ellipsoid_default.clone(
      defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84)
    );
    this._surfaceHeight = Math.max(height, extrudedHeight);
    this._rotation = defaultValue_default(options.rotation, 0);
    this._stRotation = defaultValue_default(options.stRotation, 0);
    this._vertexFormat = VertexFormat_default.clone(
      defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT)
    );
    this._extrudedHeight = Math.min(height, extrudedHeight);
    this._shadowVolume = defaultValue_default(options.shadowVolume, false);
    this._workerName = "createRectangleGeometry";
    this._offsetAttribute = options.offsetAttribute;
    this._rotatedRectangle = void 0;
    this._textureCoordinateRotationPoints = void 0;
  }
  function textureCoordinateRotationPoints3(rectangleGeometry) {
    if (rectangleGeometry._stRotation === 0) {
      return [0, 0, 0, 1, 1, 0];
    }
    const rectangle = Rectangle_default.clone(
      rectangleGeometry._rectangle,
      unrotatedTextureRectangleScratch
    );
    const granularity = rectangleGeometry._granularity;
    const ellipsoid = rectangleGeometry._ellipsoid;
    const rotation = rectangleGeometry._rotation - rectangleGeometry._stRotation;
    const unrotatedTextureRectangle = computeRectangle3(
      rectangle,
      granularity,
      rotation,
      ellipsoid,
      unrotatedTextureRectangleScratch
    );
    const points2D = points2DScratch2;
    points2D[0].x = unrotatedTextureRectangle.west;
    points2D[0].y = unrotatedTextureRectangle.south;
    points2D[1].x = unrotatedTextureRectangle.west;
    points2D[1].y = unrotatedTextureRectangle.north;
    points2D[2].x = unrotatedTextureRectangle.east;
    points2D[2].y = unrotatedTextureRectangle.south;
    const boundingRectangle = rectangleGeometry.rectangle;
    const toDesiredInComputed = Matrix2_default.fromRotation(
      rectangleGeometry._stRotation,
      rotation2DScratch2
    );
    const boundingRectangleCenter = Rectangle_default.center(
      boundingRectangle,
      rectangleCenterScratch2
    );
    for (let i = 0; i < 3; ++i) {
      const point2D = points2D[i];
      point2D.x -= boundingRectangleCenter.longitude;
      point2D.y -= boundingRectangleCenter.latitude;
      Matrix2_default.multiplyByVector(toDesiredInComputed, point2D, point2D);
      point2D.x += boundingRectangleCenter.longitude;
      point2D.y += boundingRectangleCenter.latitude;
      point2D.x = (point2D.x - boundingRectangle.west) / boundingRectangle.width;
      point2D.y = (point2D.y - boundingRectangle.south) / boundingRectangle.height;
    }
    const minXYCorner = points2D[0];
    const maxYCorner = points2D[1];
    const maxXCorner = points2D[2];
    const result = new Array(6);
    Cartesian2_default.pack(minXYCorner, result);
    Cartesian2_default.pack(maxYCorner, result, 2);
    Cartesian2_default.pack(maxXCorner, result, 4);
    return result;
  }
  var positionScratch2, normalScratch4, tangentScratch2, bitangentScratch2, rectangleScratch, stScratch2, bottomBoundingSphere3, topBoundingSphere3, v1Scratch, v2Scratch, scratchVertexFormat12, scratchRectanglePoints, nwScratch, stNwScratch, scratchRectangle, scratchEllipsoid11, scratchOptions19, tangentRotationMatrixScratch, quaternionScratch4, centerScratch4, unrotatedTextureRectangleScratch, points2DScratch2, rotation2DScratch2, rectangleCenterScratch2, RectangleGeometry_default;
  var init_RectangleGeometry = __esm({
    "packages/engine/Source/Core/RectangleGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_Check();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryInstance();
      init_GeometryOffsetAttribute();
      init_GeometryPipeline();
      init_IndexDatatype();
      init_Math();
      init_Matrix2();
      init_Matrix3();
      init_PolygonPipeline();
      init_PrimitiveType();
      init_Quaternion();
      init_Rectangle();
      init_RectangleGeometryLibrary();
      init_VertexFormat();
      positionScratch2 = new Cartesian3_default();
      normalScratch4 = new Cartesian3_default();
      tangentScratch2 = new Cartesian3_default();
      bitangentScratch2 = new Cartesian3_default();
      rectangleScratch = new Rectangle_default();
      stScratch2 = new Cartesian2_default();
      bottomBoundingSphere3 = new BoundingSphere_default();
      topBoundingSphere3 = new BoundingSphere_default();
      v1Scratch = new Cartesian3_default();
      v2Scratch = new Cartesian3_default();
      scratchVertexFormat12 = new VertexFormat_default();
      scratchRectanglePoints = [
        new Cartesian3_default(),
        new Cartesian3_default(),
        new Cartesian3_default(),
        new Cartesian3_default()
      ];
      nwScratch = new Cartographic_default();
      stNwScratch = new Cartographic_default();
      RectangleGeometry.packedLength = Rectangle_default.packedLength + Ellipsoid_default.packedLength + VertexFormat_default.packedLength + 7;
      RectangleGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        Rectangle_default.pack(value._rectangle, array, startingIndex);
        startingIndex += Rectangle_default.packedLength;
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex++] = value._granularity;
        array[startingIndex++] = value._surfaceHeight;
        array[startingIndex++] = value._rotation;
        array[startingIndex++] = value._stRotation;
        array[startingIndex++] = value._extrudedHeight;
        array[startingIndex++] = value._shadowVolume ? 1 : 0;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchRectangle = new Rectangle_default();
      scratchEllipsoid11 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchOptions19 = {
        rectangle: scratchRectangle,
        ellipsoid: scratchEllipsoid11,
        vertexFormat: scratchVertexFormat12,
        granularity: void 0,
        height: void 0,
        rotation: void 0,
        stRotation: void 0,
        extrudedHeight: void 0,
        shadowVolume: void 0,
        offsetAttribute: void 0
      };
      RectangleGeometry.unpack = function(array, startingIndex, result) {
        Check_default.defined("array", array);
        startingIndex = defaultValue_default(startingIndex, 0);
        const rectangle = Rectangle_default.unpack(array, startingIndex, scratchRectangle);
        startingIndex += Rectangle_default.packedLength;
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid11);
        startingIndex += Ellipsoid_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat12
        );
        startingIndex += VertexFormat_default.packedLength;
        const granularity = array[startingIndex++];
        const surfaceHeight = array[startingIndex++];
        const rotation = array[startingIndex++];
        const stRotation = array[startingIndex++];
        const extrudedHeight = array[startingIndex++];
        const shadowVolume = array[startingIndex++] === 1;
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions19.granularity = granularity;
          scratchOptions19.height = surfaceHeight;
          scratchOptions19.rotation = rotation;
          scratchOptions19.stRotation = stRotation;
          scratchOptions19.extrudedHeight = extrudedHeight;
          scratchOptions19.shadowVolume = shadowVolume;
          scratchOptions19.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new RectangleGeometry(scratchOptions19);
        }
        result._rectangle = Rectangle_default.clone(rectangle, result._rectangle);
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._granularity = granularity;
        result._surfaceHeight = surfaceHeight;
        result._rotation = rotation;
        result._stRotation = stRotation;
        result._extrudedHeight = extrudedHeight;
        result._shadowVolume = shadowVolume;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      RectangleGeometry.computeRectangle = function(options, result) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const rectangle = options.rectangle;
        Check_default.typeOf.object("rectangle", rectangle);
        Rectangle_default.validate(rectangle);
        if (rectangle.north < rectangle.south) {
          throw new DeveloperError_default(
            "options.rectangle.north must be greater than or equal to options.rectangle.south"
          );
        }
        const granularity = defaultValue_default(
          options.granularity,
          Math_default.RADIANS_PER_DEGREE
        );
        const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
        const rotation = defaultValue_default(options.rotation, 0);
        return computeRectangle3(rectangle, granularity, rotation, ellipsoid, result);
      };
      tangentRotationMatrixScratch = new Matrix3_default();
      quaternionScratch4 = new Quaternion_default();
      centerScratch4 = new Cartographic_default();
      RectangleGeometry.createGeometry = function(rectangleGeometry) {
        if (Math_default.equalsEpsilon(
          rectangleGeometry._rectangle.north,
          rectangleGeometry._rectangle.south,
          Math_default.EPSILON10
        ) || Math_default.equalsEpsilon(
          rectangleGeometry._rectangle.east,
          rectangleGeometry._rectangle.west,
          Math_default.EPSILON10
        )) {
          return void 0;
        }
        let rectangle = rectangleGeometry._rectangle;
        const ellipsoid = rectangleGeometry._ellipsoid;
        const rotation = rectangleGeometry._rotation;
        const stRotation = rectangleGeometry._stRotation;
        const vertexFormat = rectangleGeometry._vertexFormat;
        const computedOptions = RectangleGeometryLibrary_default.computeOptions(
          rectangle,
          rectangleGeometry._granularity,
          rotation,
          stRotation,
          rectangleScratch,
          nwScratch,
          stNwScratch
        );
        const tangentRotationMatrix = tangentRotationMatrixScratch;
        if (stRotation !== 0 || rotation !== 0) {
          const center = Rectangle_default.center(rectangle, centerScratch4);
          const axis = ellipsoid.geodeticSurfaceNormalCartographic(center, v1Scratch);
          Quaternion_default.fromAxisAngle(axis, -stRotation, quaternionScratch4);
          Matrix3_default.fromQuaternion(quaternionScratch4, tangentRotationMatrix);
        } else {
          Matrix3_default.clone(Matrix3_default.IDENTITY, tangentRotationMatrix);
        }
        const surfaceHeight = rectangleGeometry._surfaceHeight;
        const extrudedHeight = rectangleGeometry._extrudedHeight;
        const extrude = !Math_default.equalsEpsilon(
          surfaceHeight,
          extrudedHeight,
          0,
          Math_default.EPSILON2
        );
        computedOptions.lonScalar = 1 / rectangleGeometry._rectangle.width;
        computedOptions.latScalar = 1 / rectangleGeometry._rectangle.height;
        computedOptions.tangentRotationMatrix = tangentRotationMatrix;
        let geometry;
        let boundingSphere;
        rectangle = rectangleGeometry._rectangle;
        if (extrude) {
          geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);
          const topBS = BoundingSphere_default.fromRectangle3D(
            rectangle,
            ellipsoid,
            surfaceHeight,
            topBoundingSphere3
          );
          const bottomBS = BoundingSphere_default.fromRectangle3D(
            rectangle,
            ellipsoid,
            extrudedHeight,
            bottomBoundingSphere3
          );
          boundingSphere = BoundingSphere_default.union(topBS, bottomBS);
        } else {
          geometry = constructRectangle(rectangleGeometry, computedOptions);
          geometry.attributes.position.values = PolygonPipeline_default.scaleToGeodeticHeight(
            geometry.attributes.position.values,
            surfaceHeight,
            ellipsoid,
            false
          );
          if (defined_default(rectangleGeometry._offsetAttribute)) {
            const length = geometry.attributes.position.values.length;
            const offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
            const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
            geometry.attributes.applyOffset = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
              componentsPerAttribute: 1,
              values: applyOffset
            });
          }
          boundingSphere = BoundingSphere_default.fromRectangle3D(
            rectangle,
            ellipsoid,
            surfaceHeight
          );
        }
        if (!vertexFormat.position) {
          delete geometry.attributes.position;
        }
        return new Geometry_default({
          attributes: geometry.attributes,
          indices: geometry.indices,
          primitiveType: geometry.primitiveType,
          boundingSphere,
          offsetAttribute: rectangleGeometry._offsetAttribute
        });
      };
      RectangleGeometry.createShadowVolume = function(rectangleGeometry, minHeightFunc, maxHeightFunc) {
        const granularity = rectangleGeometry._granularity;
        const ellipsoid = rectangleGeometry._ellipsoid;
        const minHeight = minHeightFunc(granularity, ellipsoid);
        const maxHeight = maxHeightFunc(granularity, ellipsoid);
        return new RectangleGeometry({
          rectangle: rectangleGeometry._rectangle,
          rotation: rectangleGeometry._rotation,
          ellipsoid,
          stRotation: rectangleGeometry._stRotation,
          granularity,
          extrudedHeight: maxHeight,
          height: minHeight,
          vertexFormat: VertexFormat_default.POSITION_ONLY,
          shadowVolume: true
        });
      };
      unrotatedTextureRectangleScratch = new Rectangle_default();
      points2DScratch2 = [new Cartesian2_default(), new Cartesian2_default(), new Cartesian2_default()];
      rotation2DScratch2 = new Matrix2_default();
      rectangleCenterScratch2 = new Cartographic_default();
      Object.defineProperties(RectangleGeometry.prototype, {
        /**
         * @private
         */
        rectangle: {
          get: function() {
            if (!defined_default(this._rotatedRectangle)) {
              this._rotatedRectangle = computeRectangle3(
                this._rectangle,
                this._granularity,
                this._rotation,
                this._ellipsoid
              );
            }
            return this._rotatedRectangle;
          }
        },
        /**
         * For remapping texture coordinates when rendering RectangleGeometries as GroundPrimitives.
         * This version permits skew in textures by computing offsets directly in cartographic space and
         * more accurately approximates rendering RectangleGeometries with height as standard Primitives.
         * @see Geometry#_textureCoordinateRotationPoints
         * @private
         */
        textureCoordinateRotationPoints: {
          get: function() {
            if (!defined_default(this._textureCoordinateRotationPoints)) {
              this._textureCoordinateRotationPoints = textureCoordinateRotationPoints3(
                this
              );
            }
            return this._textureCoordinateRotationPoints;
          }
        }
      });
      RectangleGeometry_default = RectangleGeometry;
    }
  });

  // packages/engine/Source/Workers/createRectangleGeometry.js
  var createRectangleGeometry_exports = {};
  __export(createRectangleGeometry_exports, {
    default: () => createRectangleGeometry_default
  });
  function createRectangleGeometry(rectangleGeometry, offset) {
    if (defined_default(offset)) {
      rectangleGeometry = RectangleGeometry_default.unpack(rectangleGeometry, offset);
    }
    rectangleGeometry._ellipsoid = Ellipsoid_default.clone(rectangleGeometry._ellipsoid);
    rectangleGeometry._rectangle = Rectangle_default.clone(rectangleGeometry._rectangle);
    return RectangleGeometry_default.createGeometry(rectangleGeometry);
  }
  var createRectangleGeometry_default;
  var init_createRectangleGeometry = __esm({
    "packages/engine/Source/Workers/createRectangleGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_Rectangle();
      init_RectangleGeometry();
      createRectangleGeometry_default = createRectangleGeometry;
    }
  });

  // packages/engine/Source/Core/RectangleOutlineGeometry.js
  function constructRectangle2(geometry, computedOptions) {
    const ellipsoid = geometry._ellipsoid;
    const height = computedOptions.height;
    const width = computedOptions.width;
    const northCap = computedOptions.northCap;
    const southCap = computedOptions.southCap;
    let rowHeight = height;
    let widthMultiplier = 2;
    let size = 0;
    let corners = 4;
    if (northCap) {
      widthMultiplier -= 1;
      rowHeight -= 1;
      size += 1;
      corners -= 2;
    }
    if (southCap) {
      widthMultiplier -= 1;
      rowHeight -= 1;
      size += 1;
      corners -= 2;
    }
    size += widthMultiplier * width + 2 * rowHeight - corners;
    const positions = new Float64Array(size * 3);
    let posIndex = 0;
    let row = 0;
    let col;
    const position = positionScratch3;
    if (northCap) {
      RectangleGeometryLibrary_default.computePosition(
        computedOptions,
        ellipsoid,
        false,
        row,
        0,
        position
      );
      positions[posIndex++] = position.x;
      positions[posIndex++] = position.y;
      positions[posIndex++] = position.z;
    } else {
      for (col = 0; col < width; col++) {
        RectangleGeometryLibrary_default.computePosition(
          computedOptions,
          ellipsoid,
          false,
          row,
          col,
          position
        );
        positions[posIndex++] = position.x;
        positions[posIndex++] = position.y;
        positions[posIndex++] = position.z;
      }
    }
    col = width - 1;
    for (row = 1; row < height; row++) {
      RectangleGeometryLibrary_default.computePosition(
        computedOptions,
        ellipsoid,
        false,
        row,
        col,
        position
      );
      positions[posIndex++] = position.x;
      positions[posIndex++] = position.y;
      positions[posIndex++] = position.z;
    }
    row = height - 1;
    if (!southCap) {
      for (col = width - 2; col >= 0; col--) {
        RectangleGeometryLibrary_default.computePosition(
          computedOptions,
          ellipsoid,
          false,
          row,
          col,
          position
        );
        positions[posIndex++] = position.x;
        positions[posIndex++] = position.y;
        positions[posIndex++] = position.z;
      }
    }
    col = 0;
    for (row = height - 2; row > 0; row--) {
      RectangleGeometryLibrary_default.computePosition(
        computedOptions,
        ellipsoid,
        false,
        row,
        col,
        position
      );
      positions[posIndex++] = position.x;
      positions[posIndex++] = position.y;
      positions[posIndex++] = position.z;
    }
    const indicesSize = positions.length / 3 * 2;
    const indices = IndexDatatype_default.createTypedArray(
      positions.length / 3,
      indicesSize
    );
    let index = 0;
    for (let i = 0; i < positions.length / 3 - 1; i++) {
      indices[index++] = i;
      indices[index++] = i + 1;
    }
    indices[index++] = positions.length / 3 - 1;
    indices[index++] = 0;
    const geo = new Geometry_default({
      attributes: new GeometryAttributes_default(),
      primitiveType: PrimitiveType_default.LINES
    });
    geo.attributes.position = new GeometryAttribute_default({
      componentDatatype: ComponentDatatype_default.DOUBLE,
      componentsPerAttribute: 3,
      values: positions
    });
    geo.indices = indices;
    return geo;
  }
  function constructExtrudedRectangle2(rectangleGeometry, computedOptions) {
    const maxHeight = rectangleGeometry._surfaceHeight;
    const minHeight = rectangleGeometry._extrudedHeight;
    const ellipsoid = rectangleGeometry._ellipsoid;
    const geo = constructRectangle2(rectangleGeometry, computedOptions);
    const height = computedOptions.height;
    const width = computedOptions.width;
    const topPositions = PolygonPipeline_default.scaleToGeodeticHeight(
      geo.attributes.position.values,
      maxHeight,
      ellipsoid,
      false
    );
    let length = topPositions.length;
    const positions = new Float64Array(length * 2);
    positions.set(topPositions);
    const bottomPositions = PolygonPipeline_default.scaleToGeodeticHeight(
      geo.attributes.position.values,
      minHeight,
      ellipsoid
    );
    positions.set(bottomPositions, length);
    geo.attributes.position.values = positions;
    const northCap = computedOptions.northCap;
    const southCap = computedOptions.southCap;
    let corners = 4;
    if (northCap) {
      corners -= 1;
    }
    if (southCap) {
      corners -= 1;
    }
    const indicesSize = (positions.length / 3 + corners) * 2;
    const indices = IndexDatatype_default.createTypedArray(
      positions.length / 3,
      indicesSize
    );
    length = positions.length / 6;
    let index = 0;
    for (let i = 0; i < length - 1; i++) {
      indices[index++] = i;
      indices[index++] = i + 1;
      indices[index++] = i + length;
      indices[index++] = i + length + 1;
    }
    indices[index++] = length - 1;
    indices[index++] = 0;
    indices[index++] = length + length - 1;
    indices[index++] = length;
    indices[index++] = 0;
    indices[index++] = length;
    let bottomCorner;
    if (northCap) {
      bottomCorner = height - 1;
    } else {
      const topRightCorner = width - 1;
      indices[index++] = topRightCorner;
      indices[index++] = topRightCorner + length;
      bottomCorner = width + height - 2;
    }
    indices[index++] = bottomCorner;
    indices[index++] = bottomCorner + length;
    if (!southCap) {
      const bottomLeftCorner = width + bottomCorner - 1;
      indices[index++] = bottomLeftCorner;
      indices[index] = bottomLeftCorner + length;
    }
    geo.indices = indices;
    return geo;
  }
  function RectangleOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const rectangle = options.rectangle;
    const granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    const rotation = defaultValue_default(options.rotation, 0);
    if (!defined_default(rectangle)) {
      throw new DeveloperError_default("rectangle is required.");
    }
    Rectangle_default.validate(rectangle);
    if (rectangle.north < rectangle.south) {
      throw new DeveloperError_default(
        "options.rectangle.north must be greater than options.rectangle.south"
      );
    }
    const height = defaultValue_default(options.height, 0);
    const extrudedHeight = defaultValue_default(options.extrudedHeight, height);
    this._rectangle = Rectangle_default.clone(rectangle);
    this._granularity = granularity;
    this._ellipsoid = ellipsoid;
    this._surfaceHeight = Math.max(height, extrudedHeight);
    this._rotation = rotation;
    this._extrudedHeight = Math.min(height, extrudedHeight);
    this._offsetAttribute = options.offsetAttribute;
    this._workerName = "createRectangleOutlineGeometry";
  }
  var bottomBoundingSphere4, topBoundingSphere4, positionScratch3, rectangleScratch2, scratchRectangle2, scratchEllipsoid12, scratchOptions20, nwScratch2, RectangleOutlineGeometry_default;
  var init_RectangleOutlineGeometry = __esm({
    "packages/engine/Source/Core/RectangleOutlineGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_Cartographic();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_GeometryOffsetAttribute();
      init_IndexDatatype();
      init_Math();
      init_PolygonPipeline();
      init_PrimitiveType();
      init_Rectangle();
      init_RectangleGeometryLibrary();
      bottomBoundingSphere4 = new BoundingSphere_default();
      topBoundingSphere4 = new BoundingSphere_default();
      positionScratch3 = new Cartesian3_default();
      rectangleScratch2 = new Rectangle_default();
      RectangleOutlineGeometry.packedLength = Rectangle_default.packedLength + Ellipsoid_default.packedLength + 5;
      RectangleOutlineGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        Rectangle_default.pack(value._rectangle, array, startingIndex);
        startingIndex += Rectangle_default.packedLength;
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        array[startingIndex++] = value._granularity;
        array[startingIndex++] = value._surfaceHeight;
        array[startingIndex++] = value._rotation;
        array[startingIndex++] = value._extrudedHeight;
        array[startingIndex] = defaultValue_default(value._offsetAttribute, -1);
        return array;
      };
      scratchRectangle2 = new Rectangle_default();
      scratchEllipsoid12 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchOptions20 = {
        rectangle: scratchRectangle2,
        ellipsoid: scratchEllipsoid12,
        granularity: void 0,
        height: void 0,
        rotation: void 0,
        extrudedHeight: void 0,
        offsetAttribute: void 0
      };
      RectangleOutlineGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        const rectangle = Rectangle_default.unpack(array, startingIndex, scratchRectangle2);
        startingIndex += Rectangle_default.packedLength;
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid12);
        startingIndex += Ellipsoid_default.packedLength;
        const granularity = array[startingIndex++];
        const height = array[startingIndex++];
        const rotation = array[startingIndex++];
        const extrudedHeight = array[startingIndex++];
        const offsetAttribute = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions20.granularity = granularity;
          scratchOptions20.height = height;
          scratchOptions20.rotation = rotation;
          scratchOptions20.extrudedHeight = extrudedHeight;
          scratchOptions20.offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
          return new RectangleOutlineGeometry(scratchOptions20);
        }
        result._rectangle = Rectangle_default.clone(rectangle, result._rectangle);
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._surfaceHeight = height;
        result._rotation = rotation;
        result._extrudedHeight = extrudedHeight;
        result._offsetAttribute = offsetAttribute === -1 ? void 0 : offsetAttribute;
        return result;
      };
      nwScratch2 = new Cartographic_default();
      RectangleOutlineGeometry.createGeometry = function(rectangleGeometry) {
        const rectangle = rectangleGeometry._rectangle;
        const ellipsoid = rectangleGeometry._ellipsoid;
        const computedOptions = RectangleGeometryLibrary_default.computeOptions(
          rectangle,
          rectangleGeometry._granularity,
          rectangleGeometry._rotation,
          0,
          rectangleScratch2,
          nwScratch2
        );
        let geometry;
        let boundingSphere;
        if (Math_default.equalsEpsilon(
          rectangle.north,
          rectangle.south,
          Math_default.EPSILON10
        ) || Math_default.equalsEpsilon(
          rectangle.east,
          rectangle.west,
          Math_default.EPSILON10
        )) {
          return void 0;
        }
        const surfaceHeight = rectangleGeometry._surfaceHeight;
        const extrudedHeight = rectangleGeometry._extrudedHeight;
        const extrude = !Math_default.equalsEpsilon(
          surfaceHeight,
          extrudedHeight,
          0,
          Math_default.EPSILON2
        );
        let offsetValue;
        if (extrude) {
          geometry = constructExtrudedRectangle2(rectangleGeometry, computedOptions);
          if (defined_default(rectangleGeometry._offsetAttribute)) {
            const size = geometry.attributes.position.values.length / 3;
            let offsetAttribute = new Uint8Array(size);
            if (rectangleGeometry._offsetAttribute === GeometryOffsetAttribute_default.TOP) {
              offsetAttribute = offsetAttribute.fill(1, 0, size / 2);
            } else {
              offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
              offsetAttribute = offsetAttribute.fill(offsetValue);
            }
            geometry.attributes.applyOffset = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
              componentsPerAttribute: 1,
              values: offsetAttribute
            });
          }
          const topBS = BoundingSphere_default.fromRectangle3D(
            rectangle,
            ellipsoid,
            surfaceHeight,
            topBoundingSphere4
          );
          const bottomBS = BoundingSphere_default.fromRectangle3D(
            rectangle,
            ellipsoid,
            extrudedHeight,
            bottomBoundingSphere4
          );
          boundingSphere = BoundingSphere_default.union(topBS, bottomBS);
        } else {
          geometry = constructRectangle2(rectangleGeometry, computedOptions);
          geometry.attributes.position.values = PolygonPipeline_default.scaleToGeodeticHeight(
            geometry.attributes.position.values,
            surfaceHeight,
            ellipsoid,
            false
          );
          if (defined_default(rectangleGeometry._offsetAttribute)) {
            const length = geometry.attributes.position.values.length;
            offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute_default.NONE ? 0 : 1;
            const applyOffset = new Uint8Array(length / 3).fill(offsetValue);
            geometry.attributes.applyOffset = new GeometryAttribute_default({
              componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
              componentsPerAttribute: 1,
              values: applyOffset
            });
          }
          boundingSphere = BoundingSphere_default.fromRectangle3D(
            rectangle,
            ellipsoid,
            surfaceHeight
          );
        }
        return new Geometry_default({
          attributes: geometry.attributes,
          indices: geometry.indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere,
          offsetAttribute: rectangleGeometry._offsetAttribute
        });
      };
      RectangleOutlineGeometry_default = RectangleOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createRectangleOutlineGeometry.js
  var createRectangleOutlineGeometry_exports = {};
  __export(createRectangleOutlineGeometry_exports, {
    default: () => createRectangleOutlineGeometry_default
  });
  function createRectangleOutlineGeometry(rectangleGeometry, offset) {
    if (defined_default(offset)) {
      rectangleGeometry = RectangleOutlineGeometry_default.unpack(
        rectangleGeometry,
        offset
      );
    }
    rectangleGeometry._ellipsoid = Ellipsoid_default.clone(rectangleGeometry._ellipsoid);
    rectangleGeometry._rectangle = Rectangle_default.clone(rectangleGeometry._rectangle);
    return RectangleOutlineGeometry_default.createGeometry(rectangleGeometry);
  }
  var createRectangleOutlineGeometry_default;
  var init_createRectangleOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createRectangleOutlineGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_Rectangle();
      init_RectangleOutlineGeometry();
      createRectangleOutlineGeometry_default = createRectangleOutlineGeometry;
    }
  });

  // packages/engine/Source/Core/SimplePolylineGeometry.js
  function interpolateColors2(p0, p1, color0, color1, minDistance, array, offset) {
    const numPoints = PolylinePipeline_default.numberOfPoints(p0, p1, minDistance);
    let i;
    const r0 = color0.red;
    const g0 = color0.green;
    const b0 = color0.blue;
    const a0 = color0.alpha;
    const r1 = color1.red;
    const g1 = color1.green;
    const b1 = color1.blue;
    const a1 = color1.alpha;
    if (Color_default.equals(color0, color1)) {
      for (i = 0; i < numPoints; i++) {
        array[offset++] = Color_default.floatToByte(r0);
        array[offset++] = Color_default.floatToByte(g0);
        array[offset++] = Color_default.floatToByte(b0);
        array[offset++] = Color_default.floatToByte(a0);
      }
      return offset;
    }
    const redPerVertex = (r1 - r0) / numPoints;
    const greenPerVertex = (g1 - g0) / numPoints;
    const bluePerVertex = (b1 - b0) / numPoints;
    const alphaPerVertex = (a1 - a0) / numPoints;
    let index = offset;
    for (i = 0; i < numPoints; i++) {
      array[index++] = Color_default.floatToByte(r0 + i * redPerVertex);
      array[index++] = Color_default.floatToByte(g0 + i * greenPerVertex);
      array[index++] = Color_default.floatToByte(b0 + i * bluePerVertex);
      array[index++] = Color_default.floatToByte(a0 + i * alphaPerVertex);
    }
    return index;
  }
  function SimplePolylineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const positions = options.positions;
    const colors = options.colors;
    const colorsPerVertex = defaultValue_default(options.colorsPerVertex, false);
    if (!defined_default(positions) || positions.length < 2) {
      throw new DeveloperError_default("At least two positions are required.");
    }
    if (defined_default(colors) && (colorsPerVertex && colors.length < positions.length || !colorsPerVertex && colors.length < positions.length - 1)) {
      throw new DeveloperError_default("colors has an invalid length.");
    }
    this._positions = positions;
    this._colors = colors;
    this._colorsPerVertex = colorsPerVertex;
    this._arcType = defaultValue_default(options.arcType, ArcType_default.GEODESIC);
    this._granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    this._ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    this._workerName = "createSimplePolylineGeometry";
    let numComponents = 1 + positions.length * Cartesian3_default.packedLength;
    numComponents += defined_default(colors) ? 1 + colors.length * Color_default.packedLength : 1;
    this.packedLength = numComponents + Ellipsoid_default.packedLength + 3;
  }
  var scratchArray1, scratchArray2, generateArcOptionsScratch, SimplePolylineGeometry_default;
  var init_SimplePolylineGeometry = __esm({
    "packages/engine/Source/Core/SimplePolylineGeometry.js"() {
      init_ArcType();
      init_BoundingSphere();
      init_Cartesian3();
      init_Color();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_IndexDatatype();
      init_Math();
      init_PolylinePipeline();
      init_PrimitiveType();
      SimplePolylineGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        const positions = value._positions;
        let length = positions.length;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          Cartesian3_default.pack(positions[i], array, startingIndex);
        }
        const colors = value._colors;
        length = defined_default(colors) ? colors.length : 0;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Color_default.packedLength) {
          Color_default.pack(colors[i], array, startingIndex);
        }
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        array[startingIndex++] = value._colorsPerVertex ? 1 : 0;
        array[startingIndex++] = value._arcType;
        array[startingIndex] = value._granularity;
        return array;
      };
      SimplePolylineGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        let length = array[startingIndex++];
        const positions = new Array(length);
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          positions[i] = Cartesian3_default.unpack(array, startingIndex);
        }
        length = array[startingIndex++];
        const colors = length > 0 ? new Array(length) : void 0;
        for (i = 0; i < length; ++i, startingIndex += Color_default.packedLength) {
          colors[i] = Color_default.unpack(array, startingIndex);
        }
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        const colorsPerVertex = array[startingIndex++] === 1;
        const arcType = array[startingIndex++];
        const granularity = array[startingIndex];
        if (!defined_default(result)) {
          return new SimplePolylineGeometry({
            positions,
            colors,
            ellipsoid,
            colorsPerVertex,
            arcType,
            granularity
          });
        }
        result._positions = positions;
        result._colors = colors;
        result._ellipsoid = ellipsoid;
        result._colorsPerVertex = colorsPerVertex;
        result._arcType = arcType;
        result._granularity = granularity;
        return result;
      };
      scratchArray1 = new Array(2);
      scratchArray2 = new Array(2);
      generateArcOptionsScratch = {
        positions: scratchArray1,
        height: scratchArray2,
        ellipsoid: void 0,
        minDistance: void 0,
        granularity: void 0
      };
      SimplePolylineGeometry.createGeometry = function(simplePolylineGeometry) {
        const positions = simplePolylineGeometry._positions;
        const colors = simplePolylineGeometry._colors;
        const colorsPerVertex = simplePolylineGeometry._colorsPerVertex;
        const arcType = simplePolylineGeometry._arcType;
        const granularity = simplePolylineGeometry._granularity;
        const ellipsoid = simplePolylineGeometry._ellipsoid;
        const minDistance = Math_default.chordLength(
          granularity,
          ellipsoid.maximumRadius
        );
        const perSegmentColors = defined_default(colors) && !colorsPerVertex;
        let i;
        const length = positions.length;
        let positionValues;
        let numberOfPositions;
        let colorValues;
        let color;
        let offset = 0;
        if (arcType === ArcType_default.GEODESIC || arcType === ArcType_default.RHUMB) {
          let subdivisionSize;
          let numberOfPointsFunction;
          let generateArcFunction;
          if (arcType === ArcType_default.GEODESIC) {
            subdivisionSize = Math_default.chordLength(
              granularity,
              ellipsoid.maximumRadius
            );
            numberOfPointsFunction = PolylinePipeline_default.numberOfPoints;
            generateArcFunction = PolylinePipeline_default.generateArc;
          } else {
            subdivisionSize = granularity;
            numberOfPointsFunction = PolylinePipeline_default.numberOfPointsRhumbLine;
            generateArcFunction = PolylinePipeline_default.generateRhumbArc;
          }
          const heights = PolylinePipeline_default.extractHeights(positions, ellipsoid);
          const generateArcOptions = generateArcOptionsScratch;
          if (arcType === ArcType_default.GEODESIC) {
            generateArcOptions.minDistance = minDistance;
          } else {
            generateArcOptions.granularity = granularity;
          }
          generateArcOptions.ellipsoid = ellipsoid;
          if (perSegmentColors) {
            let positionCount = 0;
            for (i = 0; i < length - 1; i++) {
              positionCount += numberOfPointsFunction(
                positions[i],
                positions[i + 1],
                subdivisionSize
              ) + 1;
            }
            positionValues = new Float64Array(positionCount * 3);
            colorValues = new Uint8Array(positionCount * 4);
            generateArcOptions.positions = scratchArray1;
            generateArcOptions.height = scratchArray2;
            let ci = 0;
            for (i = 0; i < length - 1; ++i) {
              scratchArray1[0] = positions[i];
              scratchArray1[1] = positions[i + 1];
              scratchArray2[0] = heights[i];
              scratchArray2[1] = heights[i + 1];
              const pos = generateArcFunction(generateArcOptions);
              if (defined_default(colors)) {
                const segLen = pos.length / 3;
                color = colors[i];
                for (let k = 0; k < segLen; ++k) {
                  colorValues[ci++] = Color_default.floatToByte(color.red);
                  colorValues[ci++] = Color_default.floatToByte(color.green);
                  colorValues[ci++] = Color_default.floatToByte(color.blue);
                  colorValues[ci++] = Color_default.floatToByte(color.alpha);
                }
              }
              positionValues.set(pos, offset);
              offset += pos.length;
            }
          } else {
            generateArcOptions.positions = positions;
            generateArcOptions.height = heights;
            positionValues = new Float64Array(
              generateArcFunction(generateArcOptions)
            );
            if (defined_default(colors)) {
              colorValues = new Uint8Array(positionValues.length / 3 * 4);
              for (i = 0; i < length - 1; ++i) {
                const p0 = positions[i];
                const p1 = positions[i + 1];
                const c0 = colors[i];
                const c1 = colors[i + 1];
                offset = interpolateColors2(
                  p0,
                  p1,
                  c0,
                  c1,
                  minDistance,
                  colorValues,
                  offset
                );
              }
              const lastColor = colors[length - 1];
              colorValues[offset++] = Color_default.floatToByte(lastColor.red);
              colorValues[offset++] = Color_default.floatToByte(lastColor.green);
              colorValues[offset++] = Color_default.floatToByte(lastColor.blue);
              colorValues[offset++] = Color_default.floatToByte(lastColor.alpha);
            }
          }
        } else {
          numberOfPositions = perSegmentColors ? length * 2 - 2 : length;
          positionValues = new Float64Array(numberOfPositions * 3);
          colorValues = defined_default(colors) ? new Uint8Array(numberOfPositions * 4) : void 0;
          let positionIndex = 0;
          let colorIndex = 0;
          for (i = 0; i < length; ++i) {
            const p = positions[i];
            if (perSegmentColors && i > 0) {
              Cartesian3_default.pack(p, positionValues, positionIndex);
              positionIndex += 3;
              color = colors[i - 1];
              colorValues[colorIndex++] = Color_default.floatToByte(color.red);
              colorValues[colorIndex++] = Color_default.floatToByte(color.green);
              colorValues[colorIndex++] = Color_default.floatToByte(color.blue);
              colorValues[colorIndex++] = Color_default.floatToByte(color.alpha);
            }
            if (perSegmentColors && i === length - 1) {
              break;
            }
            Cartesian3_default.pack(p, positionValues, positionIndex);
            positionIndex += 3;
            if (defined_default(colors)) {
              color = colors[i];
              colorValues[colorIndex++] = Color_default.floatToByte(color.red);
              colorValues[colorIndex++] = Color_default.floatToByte(color.green);
              colorValues[colorIndex++] = Color_default.floatToByte(color.blue);
              colorValues[colorIndex++] = Color_default.floatToByte(color.alpha);
            }
          }
        }
        const attributes = new GeometryAttributes_default();
        attributes.position = new GeometryAttribute_default({
          componentDatatype: ComponentDatatype_default.DOUBLE,
          componentsPerAttribute: 3,
          values: positionValues
        });
        if (defined_default(colors)) {
          attributes.color = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.UNSIGNED_BYTE,
            componentsPerAttribute: 4,
            values: colorValues,
            normalize: true
          });
        }
        numberOfPositions = positionValues.length / 3;
        const numberOfIndices = (numberOfPositions - 1) * 2;
        const indices = IndexDatatype_default.createTypedArray(
          numberOfPositions,
          numberOfIndices
        );
        let index = 0;
        for (i = 0; i < numberOfPositions - 1; ++i) {
          indices[index++] = i;
          indices[index++] = i + 1;
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere: BoundingSphere_default.fromPoints(positions)
        });
      };
      SimplePolylineGeometry_default = SimplePolylineGeometry;
    }
  });

  // packages/engine/Source/Workers/createSimplePolylineGeometry.js
  var createSimplePolylineGeometry_exports = {};
  __export(createSimplePolylineGeometry_exports, {
    default: () => createSimplePolylineGeometry_default
  });
  function createSimplePolylineGeometry(simplePolylineGeometry, offset) {
    if (defined_default(offset)) {
      simplePolylineGeometry = SimplePolylineGeometry_default.unpack(
        simplePolylineGeometry,
        offset
      );
    }
    simplePolylineGeometry._ellipsoid = Ellipsoid_default.clone(
      simplePolylineGeometry._ellipsoid
    );
    return SimplePolylineGeometry_default.createGeometry(simplePolylineGeometry);
  }
  var createSimplePolylineGeometry_default;
  var init_createSimplePolylineGeometry = __esm({
    "packages/engine/Source/Workers/createSimplePolylineGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_SimplePolylineGeometry();
      createSimplePolylineGeometry_default = createSimplePolylineGeometry;
    }
  });

  // packages/engine/Source/Core/SphereGeometry.js
  function SphereGeometry(options) {
    const radius = defaultValue_default(options.radius, 1);
    const radii = new Cartesian3_default(radius, radius, radius);
    const ellipsoidOptions = {
      radii,
      stackPartitions: options.stackPartitions,
      slicePartitions: options.slicePartitions,
      vertexFormat: options.vertexFormat
    };
    this._ellipsoidGeometry = new EllipsoidGeometry_default(ellipsoidOptions);
    this._workerName = "createSphereGeometry";
  }
  var scratchEllipsoidGeometry, scratchOptions21, SphereGeometry_default;
  var init_SphereGeometry = __esm({
    "packages/engine/Source/Core/SphereGeometry.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_EllipsoidGeometry();
      init_VertexFormat();
      SphereGeometry.packedLength = EllipsoidGeometry_default.packedLength;
      SphereGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        return EllipsoidGeometry_default.pack(value._ellipsoidGeometry, array, startingIndex);
      };
      scratchEllipsoidGeometry = new EllipsoidGeometry_default();
      scratchOptions21 = {
        radius: void 0,
        radii: new Cartesian3_default(),
        vertexFormat: new VertexFormat_default(),
        stackPartitions: void 0,
        slicePartitions: void 0
      };
      SphereGeometry.unpack = function(array, startingIndex, result) {
        const ellipsoidGeometry = EllipsoidGeometry_default.unpack(
          array,
          startingIndex,
          scratchEllipsoidGeometry
        );
        scratchOptions21.vertexFormat = VertexFormat_default.clone(
          ellipsoidGeometry._vertexFormat,
          scratchOptions21.vertexFormat
        );
        scratchOptions21.stackPartitions = ellipsoidGeometry._stackPartitions;
        scratchOptions21.slicePartitions = ellipsoidGeometry._slicePartitions;
        if (!defined_default(result)) {
          scratchOptions21.radius = ellipsoidGeometry._radii.x;
          return new SphereGeometry(scratchOptions21);
        }
        Cartesian3_default.clone(ellipsoidGeometry._radii, scratchOptions21.radii);
        result._ellipsoidGeometry = new EllipsoidGeometry_default(scratchOptions21);
        return result;
      };
      SphereGeometry.createGeometry = function(sphereGeometry) {
        return EllipsoidGeometry_default.createGeometry(sphereGeometry._ellipsoidGeometry);
      };
      SphereGeometry_default = SphereGeometry;
    }
  });

  // packages/engine/Source/Workers/createSphereGeometry.js
  var createSphereGeometry_exports = {};
  __export(createSphereGeometry_exports, {
    default: () => createSphereGeometry_default
  });
  function createSphereGeometry(sphereGeometry, offset) {
    if (defined_default(offset)) {
      sphereGeometry = SphereGeometry_default.unpack(sphereGeometry, offset);
    }
    return SphereGeometry_default.createGeometry(sphereGeometry);
  }
  var createSphereGeometry_default;
  var init_createSphereGeometry = __esm({
    "packages/engine/Source/Workers/createSphereGeometry.js"() {
      init_defined();
      init_SphereGeometry();
      createSphereGeometry_default = createSphereGeometry;
    }
  });

  // packages/engine/Source/Core/SphereOutlineGeometry.js
  function SphereOutlineGeometry(options) {
    const radius = defaultValue_default(options.radius, 1);
    const radii = new Cartesian3_default(radius, radius, radius);
    const ellipsoidOptions = {
      radii,
      stackPartitions: options.stackPartitions,
      slicePartitions: options.slicePartitions,
      subdivisions: options.subdivisions
    };
    this._ellipsoidGeometry = new EllipsoidOutlineGeometry_default(ellipsoidOptions);
    this._workerName = "createSphereOutlineGeometry";
  }
  var scratchEllipsoidGeometry2, scratchOptions22, SphereOutlineGeometry_default;
  var init_SphereOutlineGeometry = __esm({
    "packages/engine/Source/Core/SphereOutlineGeometry.js"() {
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_EllipsoidOutlineGeometry();
      SphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry_default.packedLength;
      SphereOutlineGeometry.pack = function(value, array, startingIndex) {
        Check_default.typeOf.object("value", value);
        return EllipsoidOutlineGeometry_default.pack(
          value._ellipsoidGeometry,
          array,
          startingIndex
        );
      };
      scratchEllipsoidGeometry2 = new EllipsoidOutlineGeometry_default();
      scratchOptions22 = {
        radius: void 0,
        radii: new Cartesian3_default(),
        stackPartitions: void 0,
        slicePartitions: void 0,
        subdivisions: void 0
      };
      SphereOutlineGeometry.unpack = function(array, startingIndex, result) {
        const ellipsoidGeometry = EllipsoidOutlineGeometry_default.unpack(
          array,
          startingIndex,
          scratchEllipsoidGeometry2
        );
        scratchOptions22.stackPartitions = ellipsoidGeometry._stackPartitions;
        scratchOptions22.slicePartitions = ellipsoidGeometry._slicePartitions;
        scratchOptions22.subdivisions = ellipsoidGeometry._subdivisions;
        if (!defined_default(result)) {
          scratchOptions22.radius = ellipsoidGeometry._radii.x;
          return new SphereOutlineGeometry(scratchOptions22);
        }
        Cartesian3_default.clone(ellipsoidGeometry._radii, scratchOptions22.radii);
        result._ellipsoidGeometry = new EllipsoidOutlineGeometry_default(scratchOptions22);
        return result;
      };
      SphereOutlineGeometry.createGeometry = function(sphereGeometry) {
        return EllipsoidOutlineGeometry_default.createGeometry(
          sphereGeometry._ellipsoidGeometry
        );
      };
      SphereOutlineGeometry_default = SphereOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createSphereOutlineGeometry.js
  var createSphereOutlineGeometry_exports = {};
  __export(createSphereOutlineGeometry_exports, {
    default: () => createSphereOutlineGeometry_default
  });
  function createSphereOutlineGeometry(sphereGeometry, offset) {
    if (defined_default(offset)) {
      sphereGeometry = SphereOutlineGeometry_default.unpack(sphereGeometry, offset);
    }
    return SphereOutlineGeometry_default.createGeometry(sphereGeometry);
  }
  var createSphereOutlineGeometry_default;
  var init_createSphereOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createSphereOutlineGeometry.js"() {
      init_defined();
      init_SphereOutlineGeometry();
      createSphereOutlineGeometry_default = createSphereOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createVectorTileClampedPolylines.js
  var createVectorTileClampedPolylines_exports = {};
  __export(createVectorTileClampedPolylines_exports, {
    default: () => createVectorTileClampedPolylines_default
  });
  function decodePositions(uBuffer, vBuffer, heightBuffer, rectangle, minimumHeight, maximumHeight, ellipsoid) {
    const positionsLength = uBuffer.length;
    const decodedPositions = new Float64Array(positionsLength * 3);
    for (let i = 0; i < positionsLength; ++i) {
      const u3 = uBuffer[i];
      const v3 = vBuffer[i];
      const h = heightBuffer[i];
      const lon = Math_default.lerp(rectangle.west, rectangle.east, u3 / MAX_SHORT);
      const lat = Math_default.lerp(
        rectangle.south,
        rectangle.north,
        v3 / MAX_SHORT
      );
      const alt = Math_default.lerp(minimumHeight, maximumHeight, h / MAX_SHORT);
      const cartographic2 = Cartographic_default.fromRadians(
        lon,
        lat,
        alt,
        scratchBVCartographic
      );
      const decodedPosition = ellipsoid.cartographicToCartesian(
        cartographic2,
        scratchEncodedPosition
      );
      Cartesian3_default.pack(decodedPosition, decodedPositions, i * 3);
    }
    return decodedPositions;
  }
  function getPositionOffsets(counts) {
    const countsLength = counts.length;
    const positionOffsets = new Uint32Array(countsLength + 1);
    let offset = 0;
    for (let i = 0; i < countsLength; ++i) {
      positionOffsets[i] = offset;
      offset += counts[i];
    }
    positionOffsets[countsLength] = offset;
    return positionOffsets;
  }
  function removeDuplicates(uBuffer, vBuffer, heightBuffer, counts) {
    const countsLength = counts.length;
    const positionsLength = uBuffer.length;
    const markRemoval = new Uint8Array(positionsLength);
    const previous = previousCompressedCartographicScratch;
    const current = currentCompressedCartographicScratch;
    let offset = 0;
    for (let i = 0; i < countsLength; i++) {
      const count = counts[i];
      let updatedCount = count;
      for (let j = 1; j < count; j++) {
        const index = offset + j;
        const previousIndex = index - 1;
        current.longitude = uBuffer[index];
        current.latitude = vBuffer[index];
        previous.longitude = uBuffer[previousIndex];
        previous.latitude = vBuffer[previousIndex];
        if (Cartographic_default.equals(current, previous)) {
          updatedCount--;
          markRemoval[previousIndex] = 1;
        }
      }
      counts[i] = updatedCount;
      offset += count;
    }
    let nextAvailableIndex = 0;
    for (let k = 0; k < positionsLength; k++) {
      if (markRemoval[k] !== 1) {
        uBuffer[nextAvailableIndex] = uBuffer[k];
        vBuffer[nextAvailableIndex] = vBuffer[k];
        heightBuffer[nextAvailableIndex] = heightBuffer[k];
        nextAvailableIndex++;
      }
    }
  }
  function VertexAttributesAndIndices(volumesCount) {
    const vertexCount = volumesCount * 8;
    const vec3Floats = vertexCount * 3;
    const vec4Floats = vertexCount * 4;
    this.startEllipsoidNormals = new Float32Array(vec3Floats);
    this.endEllipsoidNormals = new Float32Array(vec3Floats);
    this.startPositionAndHeights = new Float32Array(vec4Floats);
    this.startFaceNormalAndVertexCornerIds = new Float32Array(vec4Floats);
    this.endPositionAndHeights = new Float32Array(vec4Floats);
    this.endFaceNormalAndHalfWidths = new Float32Array(vec4Floats);
    this.vertexBatchIds = new Uint16Array(vertexCount);
    this.indices = IndexDatatype_default.createTypedArray(vertexCount, 36 * volumesCount);
    this.vec3Offset = 0;
    this.vec4Offset = 0;
    this.batchIdOffset = 0;
    this.indexOffset = 0;
    this.volumeStartIndex = 0;
  }
  function computeMiteredNormal(previousPosition, position, nextPosition, ellipsoidSurfaceNormal, result) {
    const towardNext = Cartesian3_default.subtract(
      nextPosition,
      position,
      towardNextScratch
    );
    let towardCurr = Cartesian3_default.subtract(
      position,
      previousPosition,
      towardCurrScratch
    );
    Cartesian3_default.normalize(towardNext, towardNext);
    Cartesian3_default.normalize(towardCurr, towardCurr);
    if (Cartesian3_default.dot(towardNext, towardCurr) < MITER_BREAK) {
      towardCurr = Cartesian3_default.multiplyByScalar(
        towardCurr,
        -1,
        towardCurrScratch
      );
    }
    Cartesian3_default.add(towardNext, towardCurr, result);
    if (Cartesian3_default.equals(result, Cartesian3_default.ZERO)) {
      result = Cartesian3_default.subtract(previousPosition, position);
    }
    Cartesian3_default.cross(result, ellipsoidSurfaceNormal, result);
    Cartesian3_default.cross(ellipsoidSurfaceNormal, result, result);
    Cartesian3_default.normalize(result, result);
    return result;
  }
  function createVectorTileClampedPolylines(parameters, transferableObjects) {
    const encodedPositions = new Uint16Array(parameters.positions);
    const widths = new Uint16Array(parameters.widths);
    const counts = new Uint32Array(parameters.counts);
    const batchIds = new Uint16Array(parameters.batchIds);
    const rectangle = scratchRectangle3;
    const ellipsoid = scratchEllipsoid13;
    const center = scratchCenter4;
    const packedBuffer = new Float64Array(parameters.packedBuffer);
    let offset = 0;
    const minimumHeight = packedBuffer[offset++];
    const maximumHeight = packedBuffer[offset++];
    Rectangle_default.unpack(packedBuffer, offset, rectangle);
    offset += Rectangle_default.packedLength;
    Ellipsoid_default.unpack(packedBuffer, offset, ellipsoid);
    offset += Ellipsoid_default.packedLength;
    Cartesian3_default.unpack(packedBuffer, offset, center);
    let i;
    let positionsLength = encodedPositions.length / 3;
    const uBuffer = encodedPositions.subarray(0, positionsLength);
    const vBuffer = encodedPositions.subarray(
      positionsLength,
      2 * positionsLength
    );
    const heightBuffer = encodedPositions.subarray(
      2 * positionsLength,
      3 * positionsLength
    );
    AttributeCompression_default.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);
    removeDuplicates(uBuffer, vBuffer, heightBuffer, counts);
    const countsLength = counts.length;
    let volumesCount = 0;
    for (i = 0; i < countsLength; i++) {
      const polylinePositionCount = counts[i];
      volumesCount += polylinePositionCount - 1;
    }
    const attribsAndIndices = new VertexAttributesAndIndices(volumesCount);
    const positions = decodePositions(
      uBuffer,
      vBuffer,
      heightBuffer,
      rectangle,
      minimumHeight,
      maximumHeight,
      ellipsoid,
      center
    );
    positionsLength = uBuffer.length;
    const positionsRTC = new Float32Array(positionsLength * 3);
    for (i = 0; i < positionsLength; ++i) {
      positionsRTC[i * 3] = positions[i * 3] - center.x;
      positionsRTC[i * 3 + 1] = positions[i * 3 + 1] - center.y;
      positionsRTC[i * 3 + 2] = positions[i * 3 + 2] - center.z;
    }
    let currentPositionIndex = 0;
    let currentHeightIndex = 0;
    for (i = 0; i < countsLength; i++) {
      const polylineVolumeCount = counts[i] - 1;
      const halfWidth = widths[i] * 0.5;
      const batchId = batchIds[i];
      const volumeFirstPositionIndex = currentPositionIndex;
      for (let j = 0; j < polylineVolumeCount; j++) {
        const volumeStart = Cartesian3_default.unpack(
          positionsRTC,
          currentPositionIndex,
          scratchP0
        );
        const volumeEnd = Cartesian3_default.unpack(
          positionsRTC,
          currentPositionIndex + 3,
          scratchP1
        );
        let startHeight = heightBuffer[currentHeightIndex];
        let endHeight = heightBuffer[currentHeightIndex + 1];
        startHeight = Math_default.lerp(
          minimumHeight,
          maximumHeight,
          startHeight / MAX_SHORT
        );
        endHeight = Math_default.lerp(
          minimumHeight,
          maximumHeight,
          endHeight / MAX_SHORT
        );
        currentHeightIndex++;
        let preStart = scratchPrev;
        let postEnd = scratchNext;
        if (j === 0) {
          const finalPositionIndex = volumeFirstPositionIndex + polylineVolumeCount * 3;
          const finalPosition = Cartesian3_default.unpack(
            positionsRTC,
            finalPositionIndex,
            scratchPrev
          );
          if (Cartesian3_default.equals(finalPosition, volumeStart)) {
            Cartesian3_default.unpack(positionsRTC, finalPositionIndex - 3, preStart);
          } else {
            const offsetPastStart = Cartesian3_default.subtract(
              volumeStart,
              volumeEnd,
              scratchPrev
            );
            preStart = Cartesian3_default.add(offsetPastStart, volumeStart, scratchPrev);
          }
        } else {
          Cartesian3_default.unpack(positionsRTC, currentPositionIndex - 3, preStart);
        }
        if (j === polylineVolumeCount - 1) {
          const firstPosition = Cartesian3_default.unpack(
            positionsRTC,
            volumeFirstPositionIndex,
            scratchNext
          );
          if (Cartesian3_default.equals(firstPosition, volumeEnd)) {
            Cartesian3_default.unpack(
              positionsRTC,
              volumeFirstPositionIndex + 3,
              postEnd
            );
          } else {
            const offsetPastEnd = Cartesian3_default.subtract(
              volumeEnd,
              volumeStart,
              scratchNext
            );
            postEnd = Cartesian3_default.add(offsetPastEnd, volumeEnd, scratchNext);
          }
        } else {
          Cartesian3_default.unpack(positionsRTC, currentPositionIndex + 6, postEnd);
        }
        attribsAndIndices.addVolume(
          preStart,
          volumeStart,
          volumeEnd,
          postEnd,
          startHeight,
          endHeight,
          halfWidth,
          batchId,
          center,
          ellipsoid
        );
        currentPositionIndex += 3;
      }
      currentPositionIndex += 3;
      currentHeightIndex++;
    }
    const indices = attribsAndIndices.indices;
    transferableObjects.push(attribsAndIndices.startEllipsoidNormals.buffer);
    transferableObjects.push(attribsAndIndices.endEllipsoidNormals.buffer);
    transferableObjects.push(attribsAndIndices.startPositionAndHeights.buffer);
    transferableObjects.push(
      attribsAndIndices.startFaceNormalAndVertexCornerIds.buffer
    );
    transferableObjects.push(attribsAndIndices.endPositionAndHeights.buffer);
    transferableObjects.push(attribsAndIndices.endFaceNormalAndHalfWidths.buffer);
    transferableObjects.push(attribsAndIndices.vertexBatchIds.buffer);
    transferableObjects.push(indices.buffer);
    let results = {
      indexDatatype: indices.BYTES_PER_ELEMENT === 2 ? IndexDatatype_default.UNSIGNED_SHORT : IndexDatatype_default.UNSIGNED_INT,
      startEllipsoidNormals: attribsAndIndices.startEllipsoidNormals.buffer,
      endEllipsoidNormals: attribsAndIndices.endEllipsoidNormals.buffer,
      startPositionAndHeights: attribsAndIndices.startPositionAndHeights.buffer,
      startFaceNormalAndVertexCornerIds: attribsAndIndices.startFaceNormalAndVertexCornerIds.buffer,
      endPositionAndHeights: attribsAndIndices.endPositionAndHeights.buffer,
      endFaceNormalAndHalfWidths: attribsAndIndices.endFaceNormalAndHalfWidths.buffer,
      vertexBatchIds: attribsAndIndices.vertexBatchIds.buffer,
      indices: indices.buffer
    };
    if (parameters.keepDecodedPositions) {
      const positionOffsets = getPositionOffsets(counts);
      transferableObjects.push(positions.buffer, positionOffsets.buffer);
      results = combine_default(results, {
        decodedPositions: positions.buffer,
        decodedPositionOffsets: positionOffsets.buffer
      });
    }
    return results;
  }
  var MAX_SHORT, MITER_BREAK, scratchBVCartographic, scratchEncodedPosition, previousCompressedCartographicScratch, currentCompressedCartographicScratch, towardCurrScratch, towardNextScratch, REFERENCE_INDICES2, REFERENCE_INDICES_LENGTH2, positionScratch4, scratchStartEllipsoidNormal, scratchStartFaceNormal, scratchEndEllipsoidNormal, scratchEndFaceNormal, scratchRectangle3, scratchEllipsoid13, scratchCenter4, scratchPrev, scratchP0, scratchP1, scratchNext, createVectorTileClampedPolylines_default;
  var init_createVectorTileClampedPolylines = __esm({
    "packages/engine/Source/Workers/createVectorTileClampedPolylines.js"() {
      init_AttributeCompression();
      init_Cartesian3();
      init_Cartographic();
      init_combine();
      init_Ellipsoid();
      init_IndexDatatype();
      init_Math();
      init_Rectangle();
      init_createTaskProcessorWorker();
      MAX_SHORT = 32767;
      MITER_BREAK = Math.cos(Math_default.toRadians(150));
      scratchBVCartographic = new Cartographic_default();
      scratchEncodedPosition = new Cartesian3_default();
      previousCompressedCartographicScratch = new Cartographic_default();
      currentCompressedCartographicScratch = new Cartographic_default();
      towardCurrScratch = new Cartesian3_default();
      towardNextScratch = new Cartesian3_default();
      REFERENCE_INDICES2 = [
        0,
        2,
        6,
        0,
        6,
        4,
        // right
        0,
        1,
        3,
        0,
        3,
        2,
        // start face
        0,
        4,
        5,
        0,
        5,
        1,
        // bottom
        5,
        3,
        1,
        5,
        7,
        3,
        // left
        7,
        5,
        4,
        7,
        4,
        6,
        // end face
        7,
        6,
        2,
        7,
        2,
        3
        // top
      ];
      REFERENCE_INDICES_LENGTH2 = REFERENCE_INDICES2.length;
      positionScratch4 = new Cartesian3_default();
      scratchStartEllipsoidNormal = new Cartesian3_default();
      scratchStartFaceNormal = new Cartesian3_default();
      scratchEndEllipsoidNormal = new Cartesian3_default();
      scratchEndFaceNormal = new Cartesian3_default();
      VertexAttributesAndIndices.prototype.addVolume = function(preStartRTC, startRTC, endRTC, postEndRTC, startHeight, endHeight, halfWidth, batchId, center, ellipsoid) {
        let position = Cartesian3_default.add(startRTC, center, positionScratch4);
        const startEllipsoidNormal = ellipsoid.geodeticSurfaceNormal(
          position,
          scratchStartEllipsoidNormal
        );
        position = Cartesian3_default.add(endRTC, center, positionScratch4);
        const endEllipsoidNormal = ellipsoid.geodeticSurfaceNormal(
          position,
          scratchEndEllipsoidNormal
        );
        const startFaceNormal = computeMiteredNormal(
          preStartRTC,
          startRTC,
          endRTC,
          startEllipsoidNormal,
          scratchStartFaceNormal
        );
        const endFaceNormal = computeMiteredNormal(
          postEndRTC,
          endRTC,
          startRTC,
          endEllipsoidNormal,
          scratchEndFaceNormal
        );
        const startEllipsoidNormals = this.startEllipsoidNormals;
        const endEllipsoidNormals = this.endEllipsoidNormals;
        const startPositionAndHeights = this.startPositionAndHeights;
        const startFaceNormalAndVertexCornerIds = this.startFaceNormalAndVertexCornerIds;
        const endPositionAndHeights = this.endPositionAndHeights;
        const endFaceNormalAndHalfWidths = this.endFaceNormalAndHalfWidths;
        const vertexBatchIds = this.vertexBatchIds;
        let batchIdOffset = this.batchIdOffset;
        let vec3Offset = this.vec3Offset;
        let vec4Offset = this.vec4Offset;
        let i;
        for (i = 0; i < 8; i++) {
          Cartesian3_default.pack(startEllipsoidNormal, startEllipsoidNormals, vec3Offset);
          Cartesian3_default.pack(endEllipsoidNormal, endEllipsoidNormals, vec3Offset);
          Cartesian3_default.pack(startRTC, startPositionAndHeights, vec4Offset);
          startPositionAndHeights[vec4Offset + 3] = startHeight;
          Cartesian3_default.pack(endRTC, endPositionAndHeights, vec4Offset);
          endPositionAndHeights[vec4Offset + 3] = endHeight;
          Cartesian3_default.pack(
            startFaceNormal,
            startFaceNormalAndVertexCornerIds,
            vec4Offset
          );
          startFaceNormalAndVertexCornerIds[vec4Offset + 3] = i;
          Cartesian3_default.pack(endFaceNormal, endFaceNormalAndHalfWidths, vec4Offset);
          endFaceNormalAndHalfWidths[vec4Offset + 3] = halfWidth;
          vertexBatchIds[batchIdOffset++] = batchId;
          vec3Offset += 3;
          vec4Offset += 4;
        }
        this.batchIdOffset = batchIdOffset;
        this.vec3Offset = vec3Offset;
        this.vec4Offset = vec4Offset;
        const indices = this.indices;
        const volumeStartIndex = this.volumeStartIndex;
        const indexOffset = this.indexOffset;
        for (i = 0; i < REFERENCE_INDICES_LENGTH2; i++) {
          indices[indexOffset + i] = REFERENCE_INDICES2[i] + volumeStartIndex;
        }
        this.volumeStartIndex += 8;
        this.indexOffset += REFERENCE_INDICES_LENGTH2;
      };
      scratchRectangle3 = new Rectangle_default();
      scratchEllipsoid13 = new Ellipsoid_default();
      scratchCenter4 = new Cartesian3_default();
      scratchPrev = new Cartesian3_default();
      scratchP0 = new Cartesian3_default();
      scratchP1 = new Cartesian3_default();
      scratchNext = new Cartesian3_default();
      createVectorTileClampedPolylines_default = createTaskProcessorWorker_default(createVectorTileClampedPolylines);
    }
  });

  // packages/engine/Source/Scene/Vector3DTileBatch.js
  function Vector3DTileBatch(options) {
    this.offset = options.offset;
    this.count = options.count;
    this.color = options.color;
    this.batchIds = options.batchIds;
  }
  var Vector3DTileBatch_default;
  var init_Vector3DTileBatch = __esm({
    "packages/engine/Source/Scene/Vector3DTileBatch.js"() {
      Vector3DTileBatch_default = Vector3DTileBatch;
    }
  });

  // packages/engine/Source/Workers/createVectorTileGeometries.js
  var createVectorTileGeometries_exports = {};
  __export(createVectorTileGeometries_exports, {
    default: () => createVectorTileGeometries_default
  });
  function boxModelMatrixAndBoundingVolume(boxes, index) {
    let boxIndex = index * packedBoxLength;
    const dimensions = Cartesian3_default.unpack(boxes, boxIndex, scratchCartesian11);
    boxIndex += Cartesian3_default.packedLength;
    const boxModelMatrix = Matrix4_default.unpack(
      boxes,
      boxIndex,
      scratchModelMatrixAndBV.modelMatrix
    );
    Matrix4_default.multiplyByScale(boxModelMatrix, dimensions, boxModelMatrix);
    const boundingVolume = scratchModelMatrixAndBV.boundingVolume;
    Cartesian3_default.clone(Cartesian3_default.ZERO, boundingVolume.center);
    boundingVolume.radius = Math.sqrt(3);
    return scratchModelMatrixAndBV;
  }
  function cylinderModelMatrixAndBoundingVolume(cylinders, index) {
    let cylinderIndex = index * packedCylinderLength;
    const cylinderRadius = cylinders[cylinderIndex++];
    const length = cylinders[cylinderIndex++];
    const scale = Cartesian3_default.fromElements(
      cylinderRadius,
      cylinderRadius,
      length,
      scratchCartesian11
    );
    const cylinderModelMatrix = Matrix4_default.unpack(
      cylinders,
      cylinderIndex,
      scratchModelMatrixAndBV.modelMatrix
    );
    Matrix4_default.multiplyByScale(cylinderModelMatrix, scale, cylinderModelMatrix);
    const boundingVolume = scratchModelMatrixAndBV.boundingVolume;
    Cartesian3_default.clone(Cartesian3_default.ZERO, boundingVolume.center);
    boundingVolume.radius = Math.sqrt(2);
    return scratchModelMatrixAndBV;
  }
  function ellipsoidModelMatrixAndBoundingVolume(ellipsoids, index) {
    let ellipsoidIndex = index * packedEllipsoidLength;
    const radii = Cartesian3_default.unpack(ellipsoids, ellipsoidIndex, scratchCartesian11);
    ellipsoidIndex += Cartesian3_default.packedLength;
    const ellipsoidModelMatrix = Matrix4_default.unpack(
      ellipsoids,
      ellipsoidIndex,
      scratchModelMatrixAndBV.modelMatrix
    );
    Matrix4_default.multiplyByScale(ellipsoidModelMatrix, radii, ellipsoidModelMatrix);
    const boundingVolume = scratchModelMatrixAndBV.boundingVolume;
    Cartesian3_default.clone(Cartesian3_default.ZERO, boundingVolume.center);
    boundingVolume.radius = 1;
    return scratchModelMatrixAndBV;
  }
  function sphereModelMatrixAndBoundingVolume(spheres, index) {
    let sphereIndex = index * packedSphereLength;
    const sphereRadius = spheres[sphereIndex++];
    const sphereTranslation = Cartesian3_default.unpack(
      spheres,
      sphereIndex,
      scratchCartesian11
    );
    const sphereModelMatrix = Matrix4_default.fromTranslation(
      sphereTranslation,
      scratchModelMatrixAndBV.modelMatrix
    );
    Matrix4_default.multiplyByUniformScale(
      sphereModelMatrix,
      sphereRadius,
      sphereModelMatrix
    );
    const boundingVolume = scratchModelMatrixAndBV.boundingVolume;
    Cartesian3_default.clone(Cartesian3_default.ZERO, boundingVolume.center);
    boundingVolume.radius = 1;
    return scratchModelMatrixAndBV;
  }
  function createPrimitive(options, primitive, primitiveBatchIds, geometry, getModelMatrixAndBoundingVolume) {
    if (!defined_default(primitive)) {
      return;
    }
    const numberOfPrimitives = primitiveBatchIds.length;
    const geometryPositions = geometry.attributes.position.values;
    const geometryIndices = geometry.indices;
    const positions = options.positions;
    const vertexBatchIds = options.vertexBatchIds;
    const indices = options.indices;
    const batchIds = options.batchIds;
    const batchTableColors = options.batchTableColors;
    const batchedIndices = options.batchedIndices;
    const indexOffsets = options.indexOffsets;
    const indexCounts = options.indexCounts;
    const boundingVolumes = options.boundingVolumes;
    const modelMatrix = options.modelMatrix;
    const center = options.center;
    let positionOffset = options.positionOffset;
    let batchIdIndex = options.batchIdIndex;
    let indexOffset = options.indexOffset;
    const batchedIndicesOffset = options.batchedIndicesOffset;
    for (let i = 0; i < numberOfPrimitives; ++i) {
      const primitiveModelMatrixAndBV = getModelMatrixAndBoundingVolume(
        primitive,
        i
      );
      const primitiveModelMatrix = primitiveModelMatrixAndBV.modelMatrix;
      Matrix4_default.multiply(modelMatrix, primitiveModelMatrix, primitiveModelMatrix);
      const batchId = primitiveBatchIds[i];
      const positionsLength = geometryPositions.length;
      for (let j = 0; j < positionsLength; j += 3) {
        const position = Cartesian3_default.unpack(geometryPositions, j, scratchPosition5);
        Matrix4_default.multiplyByPoint(primitiveModelMatrix, position, position);
        Cartesian3_default.subtract(position, center, position);
        Cartesian3_default.pack(position, positions, positionOffset * 3 + j);
        vertexBatchIds[batchIdIndex++] = batchId;
      }
      const indicesLength = geometryIndices.length;
      for (let k = 0; k < indicesLength; ++k) {
        indices[indexOffset + k] = geometryIndices[k] + positionOffset;
      }
      const offset = i + batchedIndicesOffset;
      batchedIndices[offset] = new Vector3DTileBatch_default({
        offset: indexOffset,
        count: indicesLength,
        color: Color_default.fromRgba(batchTableColors[batchId]),
        batchIds: [batchId]
      });
      batchIds[offset] = batchId;
      indexOffsets[offset] = indexOffset;
      indexCounts[offset] = indicesLength;
      boundingVolumes[offset] = BoundingSphere_default.transform(
        primitiveModelMatrixAndBV.boundingVolume,
        primitiveModelMatrix
      );
      positionOffset += positionsLength / 3;
      indexOffset += indicesLength;
    }
    options.positionOffset = positionOffset;
    options.batchIdIndex = batchIdIndex;
    options.indexOffset = indexOffset;
    options.batchedIndicesOffset += numberOfPrimitives;
  }
  function unpackBuffer(buffer) {
    const packedBuffer = new Float64Array(buffer);
    let offset = 0;
    Cartesian3_default.unpack(packedBuffer, offset, scratchCenter5);
    offset += Cartesian3_default.packedLength;
    Matrix4_default.unpack(packedBuffer, offset, scratchMatrix4);
  }
  function packedBatchedIndicesLength(batchedIndices) {
    const length = batchedIndices.length;
    let count = 0;
    for (let i = 0; i < length; ++i) {
      count += Color_default.packedLength + 3 + batchedIndices[i].batchIds.length;
    }
    return count;
  }
  function packBuffer(indicesBytesPerElement, batchedIndices, boundingVolumes) {
    const numBVs = boundingVolumes.length;
    const length = 1 + 1 + numBVs * BoundingSphere_default.packedLength + 1 + packedBatchedIndicesLength(batchedIndices);
    const packedBuffer = new Float64Array(length);
    let offset = 0;
    packedBuffer[offset++] = indicesBytesPerElement;
    packedBuffer[offset++] = numBVs;
    for (let i = 0; i < numBVs; ++i) {
      BoundingSphere_default.pack(boundingVolumes[i], packedBuffer, offset);
      offset += BoundingSphere_default.packedLength;
    }
    const indicesLength = batchedIndices.length;
    packedBuffer[offset++] = indicesLength;
    for (let j = 0; j < indicesLength; ++j) {
      const batchedIndex = batchedIndices[j];
      Color_default.pack(batchedIndex.color, packedBuffer, offset);
      offset += Color_default.packedLength;
      packedBuffer[offset++] = batchedIndex.offset;
      packedBuffer[offset++] = batchedIndex.count;
      const batchIds = batchedIndex.batchIds;
      const batchIdsLength = batchIds.length;
      packedBuffer[offset++] = batchIdsLength;
      for (let k = 0; k < batchIdsLength; ++k) {
        packedBuffer[offset++] = batchIds[k];
      }
    }
    return packedBuffer;
  }
  function createVectorTileGeometries(parameters, transferableObjects) {
    const boxes = defined_default(parameters.boxes) ? new Float32Array(parameters.boxes) : void 0;
    const boxBatchIds = defined_default(parameters.boxBatchIds) ? new Uint16Array(parameters.boxBatchIds) : void 0;
    const cylinders = defined_default(parameters.cylinders) ? new Float32Array(parameters.cylinders) : void 0;
    const cylinderBatchIds = defined_default(parameters.cylinderBatchIds) ? new Uint16Array(parameters.cylinderBatchIds) : void 0;
    const ellipsoids = defined_default(parameters.ellipsoids) ? new Float32Array(parameters.ellipsoids) : void 0;
    const ellipsoidBatchIds = defined_default(parameters.ellipsoidBatchIds) ? new Uint16Array(parameters.ellipsoidBatchIds) : void 0;
    const spheres = defined_default(parameters.spheres) ? new Float32Array(parameters.spheres) : void 0;
    const sphereBatchIds = defined_default(parameters.sphereBatchIds) ? new Uint16Array(parameters.sphereBatchIds) : void 0;
    const numberOfBoxes = defined_default(boxes) ? boxBatchIds.length : 0;
    const numberOfCylinders = defined_default(cylinders) ? cylinderBatchIds.length : 0;
    const numberOfEllipsoids = defined_default(ellipsoids) ? ellipsoidBatchIds.length : 0;
    const numberOfSpheres = defined_default(spheres) ? sphereBatchIds.length : 0;
    const boxGeometry = BoxGeometry_default.getUnitBox();
    const cylinderGeometry = CylinderGeometry_default.getUnitCylinder();
    const ellipsoidGeometry = EllipsoidGeometry_default.getUnitEllipsoid();
    const boxPositions = boxGeometry.attributes.position.values;
    const cylinderPositions = cylinderGeometry.attributes.position.values;
    const ellipsoidPositions = ellipsoidGeometry.attributes.position.values;
    let numberOfPositions = boxPositions.length * numberOfBoxes;
    numberOfPositions += cylinderPositions.length * numberOfCylinders;
    numberOfPositions += ellipsoidPositions.length * (numberOfEllipsoids + numberOfSpheres);
    const boxIndices = boxGeometry.indices;
    const cylinderIndices = cylinderGeometry.indices;
    const ellipsoidIndices = ellipsoidGeometry.indices;
    let numberOfIndices = boxIndices.length * numberOfBoxes;
    numberOfIndices += cylinderIndices.length * numberOfCylinders;
    numberOfIndices += ellipsoidIndices.length * (numberOfEllipsoids + numberOfSpheres);
    const positions = new Float32Array(numberOfPositions);
    const vertexBatchIds = new Uint16Array(numberOfPositions / 3);
    const indices = IndexDatatype_default.createTypedArray(
      numberOfPositions / 3,
      numberOfIndices
    );
    const numberOfGeometries = numberOfBoxes + numberOfCylinders + numberOfEllipsoids + numberOfSpheres;
    const batchIds = new Uint16Array(numberOfGeometries);
    const batchedIndices = new Array(numberOfGeometries);
    const indexOffsets = new Uint32Array(numberOfGeometries);
    const indexCounts = new Uint32Array(numberOfGeometries);
    const boundingVolumes = new Array(numberOfGeometries);
    unpackBuffer(parameters.packedBuffer);
    const options = {
      batchTableColors: new Uint32Array(parameters.batchTableColors),
      positions,
      vertexBatchIds,
      indices,
      batchIds,
      batchedIndices,
      indexOffsets,
      indexCounts,
      boundingVolumes,
      positionOffset: 0,
      batchIdIndex: 0,
      indexOffset: 0,
      batchedIndicesOffset: 0,
      modelMatrix: scratchMatrix4,
      center: scratchCenter5
    };
    createPrimitive(
      options,
      boxes,
      boxBatchIds,
      boxGeometry,
      boxModelMatrixAndBoundingVolume
    );
    createPrimitive(
      options,
      cylinders,
      cylinderBatchIds,
      cylinderGeometry,
      cylinderModelMatrixAndBoundingVolume
    );
    createPrimitive(
      options,
      ellipsoids,
      ellipsoidBatchIds,
      ellipsoidGeometry,
      ellipsoidModelMatrixAndBoundingVolume
    );
    createPrimitive(
      options,
      spheres,
      sphereBatchIds,
      ellipsoidGeometry,
      sphereModelMatrixAndBoundingVolume
    );
    const packedBuffer = packBuffer(
      indices.BYTES_PER_ELEMENT,
      batchedIndices,
      boundingVolumes
    );
    transferableObjects.push(
      positions.buffer,
      vertexBatchIds.buffer,
      indices.buffer
    );
    transferableObjects.push(
      batchIds.buffer,
      indexOffsets.buffer,
      indexCounts.buffer
    );
    transferableObjects.push(packedBuffer.buffer);
    return {
      positions: positions.buffer,
      vertexBatchIds: vertexBatchIds.buffer,
      indices: indices.buffer,
      indexOffsets: indexOffsets.buffer,
      indexCounts: indexCounts.buffer,
      batchIds: batchIds.buffer,
      packedBuffer: packedBuffer.buffer
    };
  }
  var scratchCartesian11, packedBoxLength, packedCylinderLength, packedEllipsoidLength, packedSphereLength, scratchModelMatrixAndBV, scratchPosition5, scratchCenter5, scratchMatrix4, createVectorTileGeometries_default;
  var init_createVectorTileGeometries = __esm({
    "packages/engine/Source/Workers/createVectorTileGeometries.js"() {
      init_BoundingSphere();
      init_BoxGeometry();
      init_Cartesian3();
      init_Color();
      init_CylinderGeometry();
      init_defined();
      init_EllipsoidGeometry();
      init_IndexDatatype();
      init_Matrix4();
      init_Vector3DTileBatch();
      init_createTaskProcessorWorker();
      scratchCartesian11 = new Cartesian3_default();
      packedBoxLength = Matrix4_default.packedLength + Cartesian3_default.packedLength;
      packedCylinderLength = Matrix4_default.packedLength + 2;
      packedEllipsoidLength = Matrix4_default.packedLength + Cartesian3_default.packedLength;
      packedSphereLength = Cartesian3_default.packedLength + 1;
      scratchModelMatrixAndBV = {
        modelMatrix: new Matrix4_default(),
        boundingVolume: new BoundingSphere_default()
      };
      scratchPosition5 = new Cartesian3_default();
      scratchCenter5 = new Cartesian3_default();
      scratchMatrix4 = new Matrix4_default();
      createVectorTileGeometries_default = createTaskProcessorWorker_default(createVectorTileGeometries);
    }
  });

  // packages/engine/Source/Workers/createVectorTilePoints.js
  var createVectorTilePoints_exports = {};
  __export(createVectorTilePoints_exports, {
    default: () => createVectorTilePoints_default
  });
  function unpackBuffer2(packedBuffer) {
    packedBuffer = new Float64Array(packedBuffer);
    let offset = 0;
    scratchMinMaxHeights.min = packedBuffer[offset++];
    scratchMinMaxHeights.max = packedBuffer[offset++];
    Rectangle_default.unpack(packedBuffer, offset, scratchRectangle4);
    offset += Rectangle_default.packedLength;
    Ellipsoid_default.unpack(packedBuffer, offset, scratchEllipsoid14);
  }
  function createVectorTilePoints(parameters, transferableObjects) {
    const positions = new Uint16Array(parameters.positions);
    unpackBuffer2(parameters.packedBuffer);
    const rectangle = scratchRectangle4;
    const ellipsoid = scratchEllipsoid14;
    const minimumHeight = scratchMinMaxHeights.min;
    const maximumHeight = scratchMinMaxHeights.max;
    const positionsLength = positions.length / 3;
    const uBuffer = positions.subarray(0, positionsLength);
    const vBuffer = positions.subarray(positionsLength, 2 * positionsLength);
    const heightBuffer = positions.subarray(
      2 * positionsLength,
      3 * positionsLength
    );
    AttributeCompression_default.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);
    const decoded = new Float64Array(positions.length);
    for (let i = 0; i < positionsLength; ++i) {
      const u3 = uBuffer[i];
      const v3 = vBuffer[i];
      const h = heightBuffer[i];
      const lon = Math_default.lerp(rectangle.west, rectangle.east, u3 / maxShort);
      const lat = Math_default.lerp(rectangle.south, rectangle.north, v3 / maxShort);
      const alt = Math_default.lerp(minimumHeight, maximumHeight, h / maxShort);
      const cartographic2 = Cartographic_default.fromRadians(
        lon,
        lat,
        alt,
        scratchBVCartographic2
      );
      const decodedPosition = ellipsoid.cartographicToCartesian(
        cartographic2,
        scratchEncodedPosition2
      );
      Cartesian3_default.pack(decodedPosition, decoded, i * 3);
    }
    transferableObjects.push(decoded.buffer);
    return {
      positions: decoded.buffer
    };
  }
  var maxShort, scratchBVCartographic2, scratchEncodedPosition2, scratchRectangle4, scratchEllipsoid14, scratchMinMaxHeights, createVectorTilePoints_default;
  var init_createVectorTilePoints = __esm({
    "packages/engine/Source/Workers/createVectorTilePoints.js"() {
      init_AttributeCompression();
      init_Cartesian3();
      init_Cartographic();
      init_Ellipsoid();
      init_Math();
      init_Rectangle();
      init_createTaskProcessorWorker();
      maxShort = 32767;
      scratchBVCartographic2 = new Cartographic_default();
      scratchEncodedPosition2 = new Cartesian3_default();
      scratchRectangle4 = new Rectangle_default();
      scratchEllipsoid14 = new Ellipsoid_default();
      scratchMinMaxHeights = {
        min: void 0,
        max: void 0
      };
      createVectorTilePoints_default = createTaskProcessorWorker_default(createVectorTilePoints);
    }
  });

  // packages/engine/Source/Workers/createVectorTilePolygons.js
  var createVectorTilePolygons_exports = {};
  __export(createVectorTilePolygons_exports, {
    default: () => createVectorTilePolygons_default
  });
  function unpackBuffer3(buffer) {
    const packedBuffer = new Float64Array(buffer);
    let offset = 0;
    scratchScalars.indexBytesPerElement = packedBuffer[offset++];
    scratchScalars.min = packedBuffer[offset++];
    scratchScalars.max = packedBuffer[offset++];
    Cartesian3_default.unpack(packedBuffer, offset, scratchCenter6);
    offset += Cartesian3_default.packedLength;
    Ellipsoid_default.unpack(packedBuffer, offset, scratchEllipsoid15);
    offset += Ellipsoid_default.packedLength;
    Rectangle_default.unpack(packedBuffer, offset, scratchRectangle5);
  }
  function packedBatchedIndicesLength2(batchedIndices) {
    const length = batchedIndices.length;
    let count = 0;
    for (let i = 0; i < length; ++i) {
      count += Color_default.packedLength + 3 + batchedIndices[i].batchIds.length;
    }
    return count;
  }
  function packBuffer2(indexDatatype, boundingVolumes, batchedIndices) {
    const numBVs = boundingVolumes.length;
    const length = 1 + 1 + numBVs * OrientedBoundingBox_default.packedLength + 1 + packedBatchedIndicesLength2(batchedIndices);
    const packedBuffer = new Float64Array(length);
    let offset = 0;
    packedBuffer[offset++] = indexDatatype;
    packedBuffer[offset++] = numBVs;
    for (let i = 0; i < numBVs; ++i) {
      OrientedBoundingBox_default.pack(boundingVolumes[i], packedBuffer, offset);
      offset += OrientedBoundingBox_default.packedLength;
    }
    const indicesLength = batchedIndices.length;
    packedBuffer[offset++] = indicesLength;
    for (let j = 0; j < indicesLength; ++j) {
      const batchedIndex = batchedIndices[j];
      Color_default.pack(batchedIndex.color, packedBuffer, offset);
      offset += Color_default.packedLength;
      packedBuffer[offset++] = batchedIndex.offset;
      packedBuffer[offset++] = batchedIndex.count;
      const batchIds = batchedIndex.batchIds;
      const batchIdsLength = batchIds.length;
      packedBuffer[offset++] = batchIdsLength;
      for (let k = 0; k < batchIdsLength; ++k) {
        packedBuffer[offset++] = batchIds[k];
      }
    }
    return packedBuffer;
  }
  function createVectorTilePolygons(parameters, transferableObjects) {
    unpackBuffer3(parameters.packedBuffer);
    let indices;
    const indexBytesPerElement = scratchScalars.indexBytesPerElement;
    if (indexBytesPerElement === 2) {
      indices = new Uint16Array(parameters.indices);
    } else {
      indices = new Uint32Array(parameters.indices);
    }
    const positions = new Uint16Array(parameters.positions);
    const counts = new Uint32Array(parameters.counts);
    const indexCounts = new Uint32Array(parameters.indexCounts);
    const batchIds = new Uint32Array(parameters.batchIds);
    const batchTableColors = new Uint32Array(parameters.batchTableColors);
    const boundingVolumes = new Array(counts.length);
    const center = scratchCenter6;
    const ellipsoid = scratchEllipsoid15;
    let rectangle = scratchRectangle5;
    const minHeight = scratchScalars.min;
    const maxHeight = scratchScalars.max;
    let minimumHeights = parameters.minimumHeights;
    let maximumHeights = parameters.maximumHeights;
    if (defined_default(minimumHeights) && defined_default(maximumHeights)) {
      minimumHeights = new Float32Array(minimumHeights);
      maximumHeights = new Float32Array(maximumHeights);
    }
    let i;
    let j;
    let rgba;
    const positionsLength = positions.length / 2;
    const uBuffer = positions.subarray(0, positionsLength);
    const vBuffer = positions.subarray(positionsLength, 2 * positionsLength);
    AttributeCompression_default.zigZagDeltaDecode(uBuffer, vBuffer);
    const decodedPositions = new Float64Array(positionsLength * 3);
    for (i = 0; i < positionsLength; ++i) {
      const u3 = uBuffer[i];
      const v3 = vBuffer[i];
      const x = Math_default.lerp(rectangle.west, rectangle.east, u3 / maxShort2);
      const y = Math_default.lerp(rectangle.south, rectangle.north, v3 / maxShort2);
      const cart = Cartographic_default.fromRadians(x, y, 0, scratchBVCartographic3);
      const decodedPosition = ellipsoid.cartographicToCartesian(
        cart,
        scratchEncodedPosition3
      );
      Cartesian3_default.pack(decodedPosition, decodedPositions, i * 3);
    }
    const countsLength = counts.length;
    const offsets = new Array(countsLength);
    const indexOffsets = new Array(countsLength);
    let currentOffset = 0;
    let currentIndexOffset = 0;
    for (i = 0; i < countsLength; ++i) {
      offsets[i] = currentOffset;
      indexOffsets[i] = currentIndexOffset;
      currentOffset += counts[i];
      currentIndexOffset += indexCounts[i];
    }
    const batchedPositions = new Float32Array(positionsLength * 3 * 2);
    const batchedIds = new Uint16Array(positionsLength * 2);
    const batchedIndexOffsets = new Uint32Array(indexOffsets.length);
    const batchedIndexCounts = new Uint32Array(indexCounts.length);
    let batchedIndices = [];
    const colorToBuffers = {};
    for (i = 0; i < countsLength; ++i) {
      rgba = batchTableColors[i];
      if (!defined_default(colorToBuffers[rgba])) {
        colorToBuffers[rgba] = {
          positionLength: counts[i],
          indexLength: indexCounts[i],
          offset: 0,
          indexOffset: 0,
          batchIds: [i]
        };
      } else {
        colorToBuffers[rgba].positionLength += counts[i];
        colorToBuffers[rgba].indexLength += indexCounts[i];
        colorToBuffers[rgba].batchIds.push(i);
      }
    }
    let buffer;
    let byColorPositionOffset = 0;
    let byColorIndexOffset = 0;
    for (rgba in colorToBuffers) {
      if (colorToBuffers.hasOwnProperty(rgba)) {
        buffer = colorToBuffers[rgba];
        buffer.offset = byColorPositionOffset;
        buffer.indexOffset = byColorIndexOffset;
        const positionLength = buffer.positionLength * 2;
        const indexLength = buffer.indexLength * 2 + buffer.positionLength * 6;
        byColorPositionOffset += positionLength;
        byColorIndexOffset += indexLength;
        buffer.indexLength = indexLength;
      }
    }
    const batchedDrawCalls = [];
    for (rgba in colorToBuffers) {
      if (colorToBuffers.hasOwnProperty(rgba)) {
        buffer = colorToBuffers[rgba];
        batchedDrawCalls.push({
          color: Color_default.fromRgba(parseInt(rgba)),
          offset: buffer.indexOffset,
          count: buffer.indexLength,
          batchIds: buffer.batchIds
        });
      }
    }
    for (i = 0; i < countsLength; ++i) {
      rgba = batchTableColors[i];
      buffer = colorToBuffers[rgba];
      const positionOffset = buffer.offset;
      let positionIndex = positionOffset * 3;
      let batchIdIndex = positionOffset;
      const polygonOffset = offsets[i];
      const polygonCount = counts[i];
      const batchId = batchIds[i];
      let polygonMinimumHeight = minHeight;
      let polygonMaximumHeight = maxHeight;
      if (defined_default(minimumHeights) && defined_default(maximumHeights)) {
        polygonMinimumHeight = minimumHeights[i];
        polygonMaximumHeight = maximumHeights[i];
      }
      let minLat = Number.POSITIVE_INFINITY;
      let maxLat = Number.NEGATIVE_INFINITY;
      let minLon = Number.POSITIVE_INFINITY;
      let maxLon = Number.NEGATIVE_INFINITY;
      for (j = 0; j < polygonCount; ++j) {
        const position = Cartesian3_default.unpack(
          decodedPositions,
          polygonOffset * 3 + j * 3,
          scratchEncodedPosition3
        );
        ellipsoid.scaleToGeodeticSurface(position, position);
        const carto = ellipsoid.cartesianToCartographic(
          position,
          scratchBVCartographic3
        );
        const lat = carto.latitude;
        const lon = carto.longitude;
        minLat = Math.min(lat, minLat);
        maxLat = Math.max(lat, maxLat);
        minLon = Math.min(lon, minLon);
        maxLon = Math.max(lon, maxLon);
        const normal2 = ellipsoid.geodeticSurfaceNormal(position, scratchNormal7);
        let scaledNormal = Cartesian3_default.multiplyByScalar(
          normal2,
          polygonMinimumHeight,
          scratchScaledNormal
        );
        const minHeightPosition = Cartesian3_default.add(
          position,
          scaledNormal,
          scratchMinHeightPosition
        );
        scaledNormal = Cartesian3_default.multiplyByScalar(
          normal2,
          polygonMaximumHeight,
          scaledNormal
        );
        const maxHeightPosition = Cartesian3_default.add(
          position,
          scaledNormal,
          scratchMaxHeightPosition
        );
        Cartesian3_default.subtract(maxHeightPosition, center, maxHeightPosition);
        Cartesian3_default.subtract(minHeightPosition, center, minHeightPosition);
        Cartesian3_default.pack(maxHeightPosition, batchedPositions, positionIndex);
        Cartesian3_default.pack(minHeightPosition, batchedPositions, positionIndex + 3);
        batchedIds[batchIdIndex] = batchId;
        batchedIds[batchIdIndex + 1] = batchId;
        positionIndex += 6;
        batchIdIndex += 2;
      }
      rectangle = scratchBVRectangle;
      rectangle.west = minLon;
      rectangle.east = maxLon;
      rectangle.south = minLat;
      rectangle.north = maxLat;
      boundingVolumes[i] = OrientedBoundingBox_default.fromRectangle(
        rectangle,
        minHeight,
        maxHeight,
        ellipsoid
      );
      let indicesIndex = buffer.indexOffset;
      const indexOffset = indexOffsets[i];
      const indexCount = indexCounts[i];
      batchedIndexOffsets[i] = indicesIndex;
      for (j = 0; j < indexCount; j += 3) {
        const i0 = indices[indexOffset + j] - polygonOffset;
        const i1 = indices[indexOffset + j + 1] - polygonOffset;
        const i2 = indices[indexOffset + j + 2] - polygonOffset;
        batchedIndices[indicesIndex++] = i0 * 2 + positionOffset;
        batchedIndices[indicesIndex++] = i1 * 2 + positionOffset;
        batchedIndices[indicesIndex++] = i2 * 2 + positionOffset;
        batchedIndices[indicesIndex++] = i2 * 2 + 1 + positionOffset;
        batchedIndices[indicesIndex++] = i1 * 2 + 1 + positionOffset;
        batchedIndices[indicesIndex++] = i0 * 2 + 1 + positionOffset;
      }
      for (j = 0; j < polygonCount; ++j) {
        const v02 = j;
        const v12 = (j + 1) % polygonCount;
        batchedIndices[indicesIndex++] = v02 * 2 + 1 + positionOffset;
        batchedIndices[indicesIndex++] = v12 * 2 + positionOffset;
        batchedIndices[indicesIndex++] = v02 * 2 + positionOffset;
        batchedIndices[indicesIndex++] = v02 * 2 + 1 + positionOffset;
        batchedIndices[indicesIndex++] = v12 * 2 + 1 + positionOffset;
        batchedIndices[indicesIndex++] = v12 * 2 + positionOffset;
      }
      buffer.offset += polygonCount * 2;
      buffer.indexOffset = indicesIndex;
      batchedIndexCounts[i] = indicesIndex - batchedIndexOffsets[i];
    }
    batchedIndices = IndexDatatype_default.createTypedArray(
      batchedPositions.length / 3,
      batchedIndices
    );
    const batchedIndicesLength = batchedDrawCalls.length;
    for (let m = 0; m < batchedIndicesLength; ++m) {
      const tempIds = batchedDrawCalls[m].batchIds;
      let count = 0;
      const tempIdsLength = tempIds.length;
      for (let n = 0; n < tempIdsLength; ++n) {
        count += batchedIndexCounts[tempIds[n]];
      }
      batchedDrawCalls[m].count = count;
    }
    const indexDatatype = batchedIndices.BYTES_PER_ELEMENT === 2 ? IndexDatatype_default.UNSIGNED_SHORT : IndexDatatype_default.UNSIGNED_INT;
    const packedBuffer = packBuffer2(
      indexDatatype,
      boundingVolumes,
      batchedDrawCalls
    );
    transferableObjects.push(
      batchedPositions.buffer,
      batchedIndices.buffer,
      batchedIndexOffsets.buffer,
      batchedIndexCounts.buffer,
      batchedIds.buffer,
      packedBuffer.buffer
    );
    return {
      positions: batchedPositions.buffer,
      indices: batchedIndices.buffer,
      indexOffsets: batchedIndexOffsets.buffer,
      indexCounts: batchedIndexCounts.buffer,
      batchIds: batchedIds.buffer,
      packedBuffer: packedBuffer.buffer
    };
  }
  var scratchCenter6, scratchEllipsoid15, scratchRectangle5, scratchScalars, maxShort2, scratchEncodedPosition3, scratchNormal7, scratchScaledNormal, scratchMinHeightPosition, scratchMaxHeightPosition, scratchBVCartographic3, scratchBVRectangle, createVectorTilePolygons_default;
  var init_createVectorTilePolygons = __esm({
    "packages/engine/Source/Workers/createVectorTilePolygons.js"() {
      init_AttributeCompression();
      init_Cartesian3();
      init_Cartographic();
      init_Color();
      init_defined();
      init_Ellipsoid();
      init_IndexDatatype();
      init_Math();
      init_OrientedBoundingBox();
      init_Rectangle();
      init_createTaskProcessorWorker();
      scratchCenter6 = new Cartesian3_default();
      scratchEllipsoid15 = new Ellipsoid_default();
      scratchRectangle5 = new Rectangle_default();
      scratchScalars = {
        min: void 0,
        max: void 0,
        indexBytesPerElement: void 0
      };
      maxShort2 = 32767;
      scratchEncodedPosition3 = new Cartesian3_default();
      scratchNormal7 = new Cartesian3_default();
      scratchScaledNormal = new Cartesian3_default();
      scratchMinHeightPosition = new Cartesian3_default();
      scratchMaxHeightPosition = new Cartesian3_default();
      scratchBVCartographic3 = new Cartographic_default();
      scratchBVRectangle = new Rectangle_default();
      createVectorTilePolygons_default = createTaskProcessorWorker_default(createVectorTilePolygons);
    }
  });

  // packages/engine/Source/Core/decodeVectorPolylinePositions.js
  function decodeVectorPolylinePositions(positions, rectangle, minimumHeight, maximumHeight, ellipsoid) {
    const positionsLength = positions.length / 3;
    const uBuffer = positions.subarray(0, positionsLength);
    const vBuffer = positions.subarray(positionsLength, 2 * positionsLength);
    const heightBuffer = positions.subarray(
      2 * positionsLength,
      3 * positionsLength
    );
    AttributeCompression_default.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);
    const decoded = new Float64Array(positions.length);
    for (let i = 0; i < positionsLength; ++i) {
      const u3 = uBuffer[i];
      const v3 = vBuffer[i];
      const h = heightBuffer[i];
      const lon = Math_default.lerp(rectangle.west, rectangle.east, u3 / maxShort3);
      const lat = Math_default.lerp(rectangle.south, rectangle.north, v3 / maxShort3);
      const alt = Math_default.lerp(minimumHeight, maximumHeight, h / maxShort3);
      const cartographic2 = Cartographic_default.fromRadians(
        lon,
        lat,
        alt,
        scratchBVCartographic4
      );
      const decodedPosition = ellipsoid.cartographicToCartesian(
        cartographic2,
        scratchEncodedPosition4
      );
      Cartesian3_default.pack(decodedPosition, decoded, i * 3);
    }
    return decoded;
  }
  var maxShort3, scratchBVCartographic4, scratchEncodedPosition4, decodeVectorPolylinePositions_default;
  var init_decodeVectorPolylinePositions = __esm({
    "packages/engine/Source/Core/decodeVectorPolylinePositions.js"() {
      init_AttributeCompression();
      init_Cartesian3();
      init_Cartographic();
      init_Math();
      maxShort3 = 32767;
      scratchBVCartographic4 = new Cartographic_default();
      scratchEncodedPosition4 = new Cartesian3_default();
      decodeVectorPolylinePositions_default = decodeVectorPolylinePositions;
    }
  });

  // packages/engine/Source/Workers/createVectorTilePolylines.js
  var createVectorTilePolylines_exports = {};
  __export(createVectorTilePolylines_exports, {
    default: () => createVectorTilePolylines_default
  });
  function unpackBuffer4(packedBuffer) {
    packedBuffer = new Float64Array(packedBuffer);
    let offset = 0;
    scratchMinMaxHeights2.min = packedBuffer[offset++];
    scratchMinMaxHeights2.max = packedBuffer[offset++];
    Rectangle_default.unpack(packedBuffer, offset, scratchRectangle6);
    offset += Rectangle_default.packedLength;
    Ellipsoid_default.unpack(packedBuffer, offset, scratchEllipsoid16);
    offset += Ellipsoid_default.packedLength;
    Cartesian3_default.unpack(packedBuffer, offset, scratchCenter7);
  }
  function getPositionOffsets2(counts) {
    const countsLength = counts.length;
    const positionOffsets = new Uint32Array(countsLength + 1);
    let offset = 0;
    for (let i = 0; i < countsLength; ++i) {
      positionOffsets[i] = offset;
      offset += counts[i];
    }
    positionOffsets[countsLength] = offset;
    return positionOffsets;
  }
  function createVectorTilePolylines(parameters, transferableObjects) {
    const encodedPositions = new Uint16Array(parameters.positions);
    const widths = new Uint16Array(parameters.widths);
    const counts = new Uint32Array(parameters.counts);
    const batchIds = new Uint16Array(parameters.batchIds);
    unpackBuffer4(parameters.packedBuffer);
    const rectangle = scratchRectangle6;
    const ellipsoid = scratchEllipsoid16;
    const center = scratchCenter7;
    const minimumHeight = scratchMinMaxHeights2.min;
    const maximumHeight = scratchMinMaxHeights2.max;
    const positions = decodeVectorPolylinePositions_default(
      encodedPositions,
      rectangle,
      minimumHeight,
      maximumHeight,
      ellipsoid
    );
    const positionsLength = positions.length / 3;
    const size = positionsLength * 4 - 4;
    const curPositions = new Float32Array(size * 3);
    const prevPositions = new Float32Array(size * 3);
    const nextPositions = new Float32Array(size * 3);
    const expandAndWidth = new Float32Array(size * 2);
    const vertexBatchIds = new Uint16Array(size);
    let positionIndex = 0;
    let expandAndWidthIndex = 0;
    let batchIdIndex = 0;
    let i;
    let offset = 0;
    let length = counts.length;
    for (i = 0; i < length; ++i) {
      const count = counts[i];
      const width = widths[i];
      const batchId = batchIds[i];
      for (let j = 0; j < count; ++j) {
        let previous;
        if (j === 0) {
          const p0 = Cartesian3_default.unpack(positions, offset * 3, scratchP02);
          const p1 = Cartesian3_default.unpack(positions, (offset + 1) * 3, scratchP12);
          previous = Cartesian3_default.subtract(p0, p1, scratchPrev2);
          Cartesian3_default.add(p0, previous, previous);
        } else {
          previous = Cartesian3_default.unpack(
            positions,
            (offset + j - 1) * 3,
            scratchPrev2
          );
        }
        const current = Cartesian3_default.unpack(
          positions,
          (offset + j) * 3,
          scratchCur
        );
        let next;
        if (j === count - 1) {
          const p2 = Cartesian3_default.unpack(
            positions,
            (offset + count - 1) * 3,
            scratchP02
          );
          const p3 = Cartesian3_default.unpack(
            positions,
            (offset + count - 2) * 3,
            scratchP12
          );
          next = Cartesian3_default.subtract(p2, p3, scratchNext2);
          Cartesian3_default.add(p2, next, next);
        } else {
          next = Cartesian3_default.unpack(positions, (offset + j + 1) * 3, scratchNext2);
        }
        Cartesian3_default.subtract(previous, center, previous);
        Cartesian3_default.subtract(current, center, current);
        Cartesian3_default.subtract(next, center, next);
        const startK = j === 0 ? 2 : 0;
        const endK = j === count - 1 ? 2 : 4;
        for (let k = startK; k < endK; ++k) {
          Cartesian3_default.pack(current, curPositions, positionIndex);
          Cartesian3_default.pack(previous, prevPositions, positionIndex);
          Cartesian3_default.pack(next, nextPositions, positionIndex);
          positionIndex += 3;
          const direction2 = k - 2 < 0 ? -1 : 1;
          expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;
          expandAndWidth[expandAndWidthIndex++] = direction2 * width;
          vertexBatchIds[batchIdIndex++] = batchId;
        }
      }
      offset += count;
    }
    const indices = IndexDatatype_default.createTypedArray(size, positionsLength * 6 - 6);
    let index = 0;
    let indicesIndex = 0;
    length = positionsLength - 1;
    for (i = 0; i < length; ++i) {
      indices[indicesIndex++] = index;
      indices[indicesIndex++] = index + 2;
      indices[indicesIndex++] = index + 1;
      indices[indicesIndex++] = index + 1;
      indices[indicesIndex++] = index + 2;
      indices[indicesIndex++] = index + 3;
      index += 4;
    }
    transferableObjects.push(
      curPositions.buffer,
      prevPositions.buffer,
      nextPositions.buffer
    );
    transferableObjects.push(
      expandAndWidth.buffer,
      vertexBatchIds.buffer,
      indices.buffer
    );
    let results = {
      indexDatatype: indices.BYTES_PER_ELEMENT === 2 ? IndexDatatype_default.UNSIGNED_SHORT : IndexDatatype_default.UNSIGNED_INT,
      currentPositions: curPositions.buffer,
      previousPositions: prevPositions.buffer,
      nextPositions: nextPositions.buffer,
      expandAndWidth: expandAndWidth.buffer,
      batchIds: vertexBatchIds.buffer,
      indices: indices.buffer
    };
    if (parameters.keepDecodedPositions) {
      const positionOffsets = getPositionOffsets2(counts);
      transferableObjects.push(positions.buffer, positionOffsets.buffer);
      results = combine_default(results, {
        decodedPositions: positions.buffer,
        decodedPositionOffsets: positionOffsets.buffer
      });
    }
    return results;
  }
  var scratchRectangle6, scratchEllipsoid16, scratchCenter7, scratchMinMaxHeights2, scratchP02, scratchP12, scratchPrev2, scratchCur, scratchNext2, createVectorTilePolylines_default;
  var init_createVectorTilePolylines = __esm({
    "packages/engine/Source/Workers/createVectorTilePolylines.js"() {
      init_Cartesian3();
      init_combine();
      init_decodeVectorPolylinePositions();
      init_Ellipsoid();
      init_IndexDatatype();
      init_Rectangle();
      init_createTaskProcessorWorker();
      scratchRectangle6 = new Rectangle_default();
      scratchEllipsoid16 = new Ellipsoid_default();
      scratchCenter7 = new Cartesian3_default();
      scratchMinMaxHeights2 = {
        min: void 0,
        max: void 0
      };
      scratchP02 = new Cartesian3_default();
      scratchP12 = new Cartesian3_default();
      scratchPrev2 = new Cartesian3_default();
      scratchCur = new Cartesian3_default();
      scratchNext2 = new Cartesian3_default();
      createVectorTilePolylines_default = createTaskProcessorWorker_default(createVectorTilePolylines);
    }
  });

  // packages/engine/Source/Core/EllipsoidalOccluder.js
  function EllipsoidalOccluder(ellipsoid, cameraPosition) {
    Check_default.typeOf.object("ellipsoid", ellipsoid);
    this._ellipsoid = ellipsoid;
    this._cameraPosition = new Cartesian3_default();
    this._cameraPositionInScaledSpace = new Cartesian3_default();
    this._distanceToLimbInScaledSpaceSquared = 0;
    if (defined_default(cameraPosition)) {
      this.cameraPosition = cameraPosition;
    }
  }
  function getPossiblyShrunkEllipsoid(ellipsoid, minimumHeight, result) {
    if (defined_default(minimumHeight) && minimumHeight < 0 && ellipsoid.minimumRadius > -minimumHeight) {
      const ellipsoidShrunkRadii = Cartesian3_default.fromElements(
        ellipsoid.radii.x + minimumHeight,
        ellipsoid.radii.y + minimumHeight,
        ellipsoid.radii.z + minimumHeight,
        scratchEllipsoidShrunkRadii
      );
      ellipsoid = Ellipsoid_default.fromCartesian3(ellipsoidShrunkRadii, result);
    }
    return ellipsoid;
  }
  function computeHorizonCullingPointFromPositions(ellipsoid, directionToPoint, positions, result) {
    Check_default.typeOf.object("directionToPoint", directionToPoint);
    Check_default.defined("positions", positions);
    if (!defined_default(result)) {
      result = new Cartesian3_default();
    }
    const scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(
      ellipsoid,
      directionToPoint
    );
    let resultMagnitude = 0;
    for (let i = 0, len = positions.length; i < len; ++i) {
      const position = positions[i];
      const candidateMagnitude = computeMagnitude(
        ellipsoid,
        position,
        scaledSpaceDirectionToPoint
      );
      if (candidateMagnitude < 0) {
        return void 0;
      }
      resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);
    }
    return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);
  }
  function computeHorizonCullingPointFromVertices(ellipsoid, directionToPoint, vertices, stride, center, result) {
    Check_default.typeOf.object("directionToPoint", directionToPoint);
    Check_default.defined("vertices", vertices);
    Check_default.typeOf.number("stride", stride);
    if (!defined_default(result)) {
      result = new Cartesian3_default();
    }
    stride = defaultValue_default(stride, 3);
    center = defaultValue_default(center, Cartesian3_default.ZERO);
    const scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(
      ellipsoid,
      directionToPoint
    );
    let resultMagnitude = 0;
    for (let i = 0, len = vertices.length; i < len; i += stride) {
      positionScratch5.x = vertices[i] + center.x;
      positionScratch5.y = vertices[i + 1] + center.y;
      positionScratch5.z = vertices[i + 2] + center.z;
      const candidateMagnitude = computeMagnitude(
        ellipsoid,
        positionScratch5,
        scaledSpaceDirectionToPoint
      );
      if (candidateMagnitude < 0) {
        return void 0;
      }
      resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);
    }
    return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);
  }
  function isScaledSpacePointVisible(occludeeScaledSpacePosition, cameraPositionInScaledSpace, distanceToLimbInScaledSpaceSquared) {
    const cv = cameraPositionInScaledSpace;
    const vhMagnitudeSquared = distanceToLimbInScaledSpaceSquared;
    const vt = Cartesian3_default.subtract(
      occludeeScaledSpacePosition,
      cv,
      scratchCartesian19
    );
    const vtDotVc = -Cartesian3_default.dot(vt, cv);
    const isOccluded = vhMagnitudeSquared < 0 ? vtDotVc > 0 : vtDotVc > vhMagnitudeSquared && vtDotVc * vtDotVc / Cartesian3_default.magnitudeSquared(vt) > vhMagnitudeSquared;
    return !isOccluded;
  }
  function computeMagnitude(ellipsoid, position, scaledSpaceDirectionToPoint) {
    const scaledSpacePosition = ellipsoid.transformPositionToScaledSpace(
      position,
      scaledSpaceScratch
    );
    let magnitudeSquared = Cartesian3_default.magnitudeSquared(scaledSpacePosition);
    let magnitude = Math.sqrt(magnitudeSquared);
    const direction2 = Cartesian3_default.divideByScalar(
      scaledSpacePosition,
      magnitude,
      directionScratch
    );
    magnitudeSquared = Math.max(1, magnitudeSquared);
    magnitude = Math.max(1, magnitude);
    const cosAlpha = Cartesian3_default.dot(direction2, scaledSpaceDirectionToPoint);
    const sinAlpha = Cartesian3_default.magnitude(
      Cartesian3_default.cross(direction2, scaledSpaceDirectionToPoint, direction2)
    );
    const cosBeta = 1 / magnitude;
    const sinBeta = Math.sqrt(magnitudeSquared - 1) * cosBeta;
    return 1 / (cosAlpha * cosBeta - sinAlpha * sinBeta);
  }
  function magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result) {
    if (resultMagnitude <= 0 || resultMagnitude === 1 / 0 || resultMagnitude !== resultMagnitude) {
      return void 0;
    }
    return Cartesian3_default.multiplyByScalar(
      scaledSpaceDirectionToPoint,
      resultMagnitude,
      result
    );
  }
  function computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint) {
    if (Cartesian3_default.equals(directionToPoint, Cartesian3_default.ZERO)) {
      return directionToPoint;
    }
    ellipsoid.transformPositionToScaledSpace(
      directionToPoint,
      directionToPointScratch
    );
    return Cartesian3_default.normalize(directionToPointScratch, directionToPointScratch);
  }
  var scratchCartesian19, scratchCameraPositionInScaledSpaceShrunk, scratchEllipsoidShrunk, subsampleScratch, scratchEllipsoidShrunkRadii, positionScratch5, scaledSpaceScratch, directionScratch, directionToPointScratch, EllipsoidalOccluder_default;
  var init_EllipsoidalOccluder = __esm({
    "packages/engine/Source/Core/EllipsoidalOccluder.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_Check();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_Rectangle();
      Object.defineProperties(EllipsoidalOccluder.prototype, {
        /**
         * Gets the occluding ellipsoid.
         * @memberof EllipsoidalOccluder.prototype
         * @type {Ellipsoid}
         */
        ellipsoid: {
          get: function() {
            return this._ellipsoid;
          }
        },
        /**
         * Gets or sets the position of the camera.
         * @memberof EllipsoidalOccluder.prototype
         * @type {Cartesian3}
         */
        cameraPosition: {
          get: function() {
            return this._cameraPosition;
          },
          set: function(cameraPosition) {
            const ellipsoid = this._ellipsoid;
            const cv = ellipsoid.transformPositionToScaledSpace(
              cameraPosition,
              this._cameraPositionInScaledSpace
            );
            const vhMagnitudeSquared = Cartesian3_default.magnitudeSquared(cv) - 1;
            Cartesian3_default.clone(cameraPosition, this._cameraPosition);
            this._cameraPositionInScaledSpace = cv;
            this._distanceToLimbInScaledSpaceSquared = vhMagnitudeSquared;
          }
        }
      });
      scratchCartesian19 = new Cartesian3_default();
      EllipsoidalOccluder.prototype.isPointVisible = function(occludee) {
        const ellipsoid = this._ellipsoid;
        const occludeeScaledSpacePosition = ellipsoid.transformPositionToScaledSpace(
          occludee,
          scratchCartesian19
        );
        return isScaledSpacePointVisible(
          occludeeScaledSpacePosition,
          this._cameraPositionInScaledSpace,
          this._distanceToLimbInScaledSpaceSquared
        );
      };
      EllipsoidalOccluder.prototype.isScaledSpacePointVisible = function(occludeeScaledSpacePosition) {
        return isScaledSpacePointVisible(
          occludeeScaledSpacePosition,
          this._cameraPositionInScaledSpace,
          this._distanceToLimbInScaledSpaceSquared
        );
      };
      scratchCameraPositionInScaledSpaceShrunk = new Cartesian3_default();
      EllipsoidalOccluder.prototype.isScaledSpacePointVisiblePossiblyUnderEllipsoid = function(occludeeScaledSpacePosition, minimumHeight) {
        const ellipsoid = this._ellipsoid;
        let vhMagnitudeSquared;
        let cv;
        if (defined_default(minimumHeight) && minimumHeight < 0 && ellipsoid.minimumRadius > -minimumHeight) {
          cv = scratchCameraPositionInScaledSpaceShrunk;
          cv.x = this._cameraPosition.x / (ellipsoid.radii.x + minimumHeight);
          cv.y = this._cameraPosition.y / (ellipsoid.radii.y + minimumHeight);
          cv.z = this._cameraPosition.z / (ellipsoid.radii.z + minimumHeight);
          vhMagnitudeSquared = cv.x * cv.x + cv.y * cv.y + cv.z * cv.z - 1;
        } else {
          cv = this._cameraPositionInScaledSpace;
          vhMagnitudeSquared = this._distanceToLimbInScaledSpaceSquared;
        }
        return isScaledSpacePointVisible(
          occludeeScaledSpacePosition,
          cv,
          vhMagnitudeSquared
        );
      };
      EllipsoidalOccluder.prototype.computeHorizonCullingPoint = function(directionToPoint, positions, result) {
        return computeHorizonCullingPointFromPositions(
          this._ellipsoid,
          directionToPoint,
          positions,
          result
        );
      };
      scratchEllipsoidShrunk = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      EllipsoidalOccluder.prototype.computeHorizonCullingPointPossiblyUnderEllipsoid = function(directionToPoint, positions, minimumHeight, result) {
        const possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(
          this._ellipsoid,
          minimumHeight,
          scratchEllipsoidShrunk
        );
        return computeHorizonCullingPointFromPositions(
          possiblyShrunkEllipsoid,
          directionToPoint,
          positions,
          result
        );
      };
      EllipsoidalOccluder.prototype.computeHorizonCullingPointFromVertices = function(directionToPoint, vertices, stride, center, result) {
        return computeHorizonCullingPointFromVertices(
          this._ellipsoid,
          directionToPoint,
          vertices,
          stride,
          center,
          result
        );
      };
      EllipsoidalOccluder.prototype.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid = function(directionToPoint, vertices, stride, center, minimumHeight, result) {
        const possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(
          this._ellipsoid,
          minimumHeight,
          scratchEllipsoidShrunk
        );
        return computeHorizonCullingPointFromVertices(
          possiblyShrunkEllipsoid,
          directionToPoint,
          vertices,
          stride,
          center,
          result
        );
      };
      subsampleScratch = [];
      EllipsoidalOccluder.prototype.computeHorizonCullingPointFromRectangle = function(rectangle, ellipsoid, result) {
        Check_default.typeOf.object("rectangle", rectangle);
        const positions = Rectangle_default.subsample(
          rectangle,
          ellipsoid,
          0,
          subsampleScratch
        );
        const bs = BoundingSphere_default.fromPoints(positions);
        if (Cartesian3_default.magnitude(bs.center) < 0.1 * ellipsoid.minimumRadius) {
          return void 0;
        }
        return this.computeHorizonCullingPoint(bs.center, positions, result);
      };
      scratchEllipsoidShrunkRadii = new Cartesian3_default();
      positionScratch5 = new Cartesian3_default();
      scaledSpaceScratch = new Cartesian3_default();
      directionScratch = new Cartesian3_default();
      directionToPointScratch = new Cartesian3_default();
      EllipsoidalOccluder_default = EllipsoidalOccluder;
    }
  });

  // packages/engine/Source/Core/VerticalExaggeration.js
  var VerticalExaggeration, scratchCartographic6, VerticalExaggeration_default;
  var init_VerticalExaggeration = __esm({
    "packages/engine/Source/Core/VerticalExaggeration.js"() {
      init_Cartesian3();
      init_DeveloperError();
      init_defined();
      VerticalExaggeration = {};
      VerticalExaggeration.getHeight = function(height, scale, relativeHeight) {
        if (!Number.isFinite(scale)) {
          throw new DeveloperError_default("scale must be a finite number.");
        }
        if (!Number.isFinite(relativeHeight)) {
          throw new DeveloperError_default("relativeHeight must be a finite number.");
        }
        return (height - relativeHeight) * scale + relativeHeight;
      };
      scratchCartographic6 = new Cartesian3_default();
      VerticalExaggeration.getPosition = function(position, ellipsoid, verticalExaggeration, verticalExaggerationRelativeHeight, result) {
        const cartographic2 = ellipsoid.cartesianToCartographic(
          position,
          scratchCartographic6
        );
        if (!defined_default(cartographic2)) {
          return Cartesian3_default.clone(position, result);
        }
        const newHeight = VerticalExaggeration.getHeight(
          cartographic2.height,
          verticalExaggeration,
          verticalExaggerationRelativeHeight
        );
        return Cartesian3_default.fromRadians(
          cartographic2.longitude,
          cartographic2.latitude,
          newHeight,
          ellipsoid,
          result
        );
      };
      VerticalExaggeration_default = VerticalExaggeration;
    }
  });

  // packages/engine/Source/Core/TerrainQuantization.js
  var TerrainQuantization, TerrainQuantization_default;
  var init_TerrainQuantization = __esm({
    "packages/engine/Source/Core/TerrainQuantization.js"() {
      TerrainQuantization = {
        /**
         * The vertices are not compressed.
         *
         * @type {number}
         * @constant
         */
        NONE: 0,
        /**
         * The vertices are compressed to 12 bits.
         *
         * @type {number}
         * @constant
         */
        BITS12: 1
      };
      TerrainQuantization_default = Object.freeze(TerrainQuantization);
    }
  });

  // packages/engine/Source/Core/TerrainEncoding.js
  function TerrainEncoding(center, axisAlignedBoundingBox, minimumHeight, maximumHeight, fromENU, hasVertexNormals, hasWebMercatorT, hasGeodeticSurfaceNormals, exaggeration, exaggerationRelativeHeight) {
    let quantization = TerrainQuantization_default.NONE;
    let toENU;
    let matrix;
    if (defined_default(axisAlignedBoundingBox) && defined_default(minimumHeight) && defined_default(maximumHeight) && defined_default(fromENU)) {
      const minimum = axisAlignedBoundingBox.minimum;
      const maximum = axisAlignedBoundingBox.maximum;
      const dimensions = Cartesian3_default.subtract(
        maximum,
        minimum,
        cartesian3DimScratch
      );
      const hDim = maximumHeight - minimumHeight;
      const maxDim = Math.max(Cartesian3_default.maximumComponent(dimensions), hDim);
      if (maxDim < SHIFT_LEFT_12 - 1) {
        quantization = TerrainQuantization_default.BITS12;
      } else {
        quantization = TerrainQuantization_default.NONE;
      }
      toENU = Matrix4_default.inverseTransformation(fromENU, new Matrix4_default());
      const translation2 = Cartesian3_default.negate(minimum, cartesian3Scratch);
      Matrix4_default.multiply(
        Matrix4_default.fromTranslation(translation2, matrix4Scratch),
        toENU,
        toENU
      );
      const scale = cartesian3Scratch;
      scale.x = 1 / dimensions.x;
      scale.y = 1 / dimensions.y;
      scale.z = 1 / dimensions.z;
      Matrix4_default.multiply(Matrix4_default.fromScale(scale, matrix4Scratch), toENU, toENU);
      matrix = Matrix4_default.clone(fromENU);
      Matrix4_default.setTranslation(matrix, Cartesian3_default.ZERO, matrix);
      fromENU = Matrix4_default.clone(fromENU, new Matrix4_default());
      const translationMatrix = Matrix4_default.fromTranslation(minimum, matrix4Scratch);
      const scaleMatrix2 = Matrix4_default.fromScale(dimensions, matrix4Scratch2);
      const st = Matrix4_default.multiply(translationMatrix, scaleMatrix2, matrix4Scratch);
      Matrix4_default.multiply(fromENU, st, fromENU);
      Matrix4_default.multiply(matrix, st, matrix);
    }
    this.quantization = quantization;
    this.minimumHeight = minimumHeight;
    this.maximumHeight = maximumHeight;
    this.center = Cartesian3_default.clone(center);
    this.toScaledENU = toENU;
    this.fromScaledENU = fromENU;
    this.matrix = matrix;
    this.hasVertexNormals = hasVertexNormals;
    this.hasWebMercatorT = defaultValue_default(hasWebMercatorT, false);
    this.hasGeodeticSurfaceNormals = defaultValue_default(
      hasGeodeticSurfaceNormals,
      false
    );
    this.exaggeration = defaultValue_default(exaggeration, 1);
    this.exaggerationRelativeHeight = defaultValue_default(
      exaggerationRelativeHeight,
      0
    );
    this.stride = 0;
    this._offsetGeodeticSurfaceNormal = 0;
    this._offsetVertexNormal = 0;
    this._calculateStrideAndOffsets();
  }
  var cartesian3Scratch, cartesian3DimScratch, cartesian2Scratch, matrix4Scratch, matrix4Scratch2, SHIFT_LEFT_12, scratchPosition6, scratchGeodeticSurfaceNormal, attributesIndicesNone, attributesIndicesBits12, TerrainEncoding_default;
  var init_TerrainEncoding = __esm({
    "packages/engine/Source/Core/TerrainEncoding.js"() {
      init_AttributeCompression();
      init_Cartesian2();
      init_Cartesian3();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_Math();
      init_Matrix4();
      init_VerticalExaggeration();
      init_TerrainQuantization();
      cartesian3Scratch = new Cartesian3_default();
      cartesian3DimScratch = new Cartesian3_default();
      cartesian2Scratch = new Cartesian2_default();
      matrix4Scratch = new Matrix4_default();
      matrix4Scratch2 = new Matrix4_default();
      SHIFT_LEFT_12 = Math.pow(2, 12);
      TerrainEncoding.prototype.encode = function(vertexBuffer, bufferIndex, position, uv, height, normalToPack, webMercatorT, geodeticSurfaceNormal) {
        const u3 = uv.x;
        const v3 = uv.y;
        if (this.quantization === TerrainQuantization_default.BITS12) {
          position = Matrix4_default.multiplyByPoint(
            this.toScaledENU,
            position,
            cartesian3Scratch
          );
          position.x = Math_default.clamp(position.x, 0, 1);
          position.y = Math_default.clamp(position.y, 0, 1);
          position.z = Math_default.clamp(position.z, 0, 1);
          const hDim = this.maximumHeight - this.minimumHeight;
          const h = Math_default.clamp((height - this.minimumHeight) / hDim, 0, 1);
          Cartesian2_default.fromElements(position.x, position.y, cartesian2Scratch);
          const compressed0 = AttributeCompression_default.compressTextureCoordinates(
            cartesian2Scratch
          );
          Cartesian2_default.fromElements(position.z, h, cartesian2Scratch);
          const compressed1 = AttributeCompression_default.compressTextureCoordinates(
            cartesian2Scratch
          );
          Cartesian2_default.fromElements(u3, v3, cartesian2Scratch);
          const compressed2 = AttributeCompression_default.compressTextureCoordinates(
            cartesian2Scratch
          );
          vertexBuffer[bufferIndex++] = compressed0;
          vertexBuffer[bufferIndex++] = compressed1;
          vertexBuffer[bufferIndex++] = compressed2;
          if (this.hasWebMercatorT) {
            Cartesian2_default.fromElements(webMercatorT, 0, cartesian2Scratch);
            const compressed3 = AttributeCompression_default.compressTextureCoordinates(
              cartesian2Scratch
            );
            vertexBuffer[bufferIndex++] = compressed3;
          }
        } else {
          Cartesian3_default.subtract(position, this.center, cartesian3Scratch);
          vertexBuffer[bufferIndex++] = cartesian3Scratch.x;
          vertexBuffer[bufferIndex++] = cartesian3Scratch.y;
          vertexBuffer[bufferIndex++] = cartesian3Scratch.z;
          vertexBuffer[bufferIndex++] = height;
          vertexBuffer[bufferIndex++] = u3;
          vertexBuffer[bufferIndex++] = v3;
          if (this.hasWebMercatorT) {
            vertexBuffer[bufferIndex++] = webMercatorT;
          }
        }
        if (this.hasVertexNormals) {
          vertexBuffer[bufferIndex++] = AttributeCompression_default.octPackFloat(
            normalToPack
          );
        }
        if (this.hasGeodeticSurfaceNormals) {
          vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.x;
          vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.y;
          vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.z;
        }
        return bufferIndex;
      };
      scratchPosition6 = new Cartesian3_default();
      scratchGeodeticSurfaceNormal = new Cartesian3_default();
      TerrainEncoding.prototype.addGeodeticSurfaceNormals = function(oldBuffer, newBuffer, ellipsoid) {
        if (this.hasGeodeticSurfaceNormals) {
          return;
        }
        const oldStride = this.stride;
        const vertexCount = oldBuffer.length / oldStride;
        this.hasGeodeticSurfaceNormals = true;
        this._calculateStrideAndOffsets();
        const newStride = this.stride;
        for (let index = 0; index < vertexCount; index++) {
          for (let offset = 0; offset < oldStride; offset++) {
            const oldIndex = index * oldStride + offset;
            const newIndex = index * newStride + offset;
            newBuffer[newIndex] = oldBuffer[oldIndex];
          }
          const position = this.decodePosition(newBuffer, index, scratchPosition6);
          const geodeticSurfaceNormal = ellipsoid.geodeticSurfaceNormal(
            position,
            scratchGeodeticSurfaceNormal
          );
          const bufferIndex = index * newStride + this._offsetGeodeticSurfaceNormal;
          newBuffer[bufferIndex] = geodeticSurfaceNormal.x;
          newBuffer[bufferIndex + 1] = geodeticSurfaceNormal.y;
          newBuffer[bufferIndex + 2] = geodeticSurfaceNormal.z;
        }
      };
      TerrainEncoding.prototype.removeGeodeticSurfaceNormals = function(oldBuffer, newBuffer) {
        if (!this.hasGeodeticSurfaceNormals) {
          return;
        }
        const oldStride = this.stride;
        const vertexCount = oldBuffer.length / oldStride;
        this.hasGeodeticSurfaceNormals = false;
        this._calculateStrideAndOffsets();
        const newStride = this.stride;
        for (let index = 0; index < vertexCount; index++) {
          for (let offset = 0; offset < newStride; offset++) {
            const oldIndex = index * oldStride + offset;
            const newIndex = index * newStride + offset;
            newBuffer[newIndex] = oldBuffer[oldIndex];
          }
        }
      };
      TerrainEncoding.prototype.decodePosition = function(buffer, index, result) {
        if (!defined_default(result)) {
          result = new Cartesian3_default();
        }
        index *= this.stride;
        if (this.quantization === TerrainQuantization_default.BITS12) {
          const xy = AttributeCompression_default.decompressTextureCoordinates(
            buffer[index],
            cartesian2Scratch
          );
          result.x = xy.x;
          result.y = xy.y;
          const zh = AttributeCompression_default.decompressTextureCoordinates(
            buffer[index + 1],
            cartesian2Scratch
          );
          result.z = zh.x;
          return Matrix4_default.multiplyByPoint(this.fromScaledENU, result, result);
        }
        result.x = buffer[index];
        result.y = buffer[index + 1];
        result.z = buffer[index + 2];
        return Cartesian3_default.add(result, this.center, result);
      };
      TerrainEncoding.prototype.getExaggeratedPosition = function(buffer, index, result) {
        result = this.decodePosition(buffer, index, result);
        const exaggeration = this.exaggeration;
        const exaggerationRelativeHeight = this.exaggerationRelativeHeight;
        const hasExaggeration = exaggeration !== 1;
        if (hasExaggeration && this.hasGeodeticSurfaceNormals) {
          const geodeticSurfaceNormal = this.decodeGeodeticSurfaceNormal(
            buffer,
            index,
            scratchGeodeticSurfaceNormal
          );
          const rawHeight = this.decodeHeight(buffer, index);
          const heightDifference = VerticalExaggeration_default.getHeight(
            rawHeight,
            exaggeration,
            exaggerationRelativeHeight
          ) - rawHeight;
          result.x += geodeticSurfaceNormal.x * heightDifference;
          result.y += geodeticSurfaceNormal.y * heightDifference;
          result.z += geodeticSurfaceNormal.z * heightDifference;
        }
        return result;
      };
      TerrainEncoding.prototype.decodeTextureCoordinates = function(buffer, index, result) {
        if (!defined_default(result)) {
          result = new Cartesian2_default();
        }
        index *= this.stride;
        if (this.quantization === TerrainQuantization_default.BITS12) {
          return AttributeCompression_default.decompressTextureCoordinates(
            buffer[index + 2],
            result
          );
        }
        return Cartesian2_default.fromElements(buffer[index + 4], buffer[index + 5], result);
      };
      TerrainEncoding.prototype.decodeHeight = function(buffer, index) {
        index *= this.stride;
        if (this.quantization === TerrainQuantization_default.BITS12) {
          const zh = AttributeCompression_default.decompressTextureCoordinates(
            buffer[index + 1],
            cartesian2Scratch
          );
          return zh.y * (this.maximumHeight - this.minimumHeight) + this.minimumHeight;
        }
        return buffer[index + 3];
      };
      TerrainEncoding.prototype.decodeWebMercatorT = function(buffer, index) {
        index *= this.stride;
        if (this.quantization === TerrainQuantization_default.BITS12) {
          return AttributeCompression_default.decompressTextureCoordinates(
            buffer[index + 3],
            cartesian2Scratch
          ).x;
        }
        return buffer[index + 6];
      };
      TerrainEncoding.prototype.getOctEncodedNormal = function(buffer, index, result) {
        index = index * this.stride + this._offsetVertexNormal;
        const temp = buffer[index] / 256;
        const x = Math.floor(temp);
        const y = (temp - x) * 256;
        return Cartesian2_default.fromElements(x, y, result);
      };
      TerrainEncoding.prototype.decodeGeodeticSurfaceNormal = function(buffer, index, result) {
        index = index * this.stride + this._offsetGeodeticSurfaceNormal;
        result.x = buffer[index];
        result.y = buffer[index + 1];
        result.z = buffer[index + 2];
        return result;
      };
      TerrainEncoding.prototype._calculateStrideAndOffsets = function() {
        let vertexStride = 0;
        switch (this.quantization) {
          case TerrainQuantization_default.BITS12:
            vertexStride += 3;
            break;
          default:
            vertexStride += 6;
        }
        if (this.hasWebMercatorT) {
          vertexStride += 1;
        }
        if (this.hasVertexNormals) {
          this._offsetVertexNormal = vertexStride;
          vertexStride += 1;
        }
        if (this.hasGeodeticSurfaceNormals) {
          this._offsetGeodeticSurfaceNormal = vertexStride;
          vertexStride += 3;
        }
        this.stride = vertexStride;
      };
      attributesIndicesNone = {
        position3DAndHeight: 0,
        textureCoordAndEncodedNormals: 1,
        geodeticSurfaceNormal: 2
      };
      attributesIndicesBits12 = {
        compressed0: 0,
        compressed1: 1,
        geodeticSurfaceNormal: 2
      };
      TerrainEncoding.prototype.getAttributes = function(buffer) {
        const datatype = ComponentDatatype_default.FLOAT;
        const sizeInBytes = ComponentDatatype_default.getSizeInBytes(datatype);
        const strideInBytes = this.stride * sizeInBytes;
        let offsetInBytes = 0;
        const attributes = [];
        function addAttribute(index, componentsPerAttribute) {
          attributes.push({
            index,
            vertexBuffer: buffer,
            componentDatatype: datatype,
            componentsPerAttribute,
            offsetInBytes,
            strideInBytes
          });
          offsetInBytes += componentsPerAttribute * sizeInBytes;
        }
        if (this.quantization === TerrainQuantization_default.NONE) {
          addAttribute(attributesIndicesNone.position3DAndHeight, 4);
          let componentsTexCoordAndNormals = 2;
          componentsTexCoordAndNormals += this.hasWebMercatorT ? 1 : 0;
          componentsTexCoordAndNormals += this.hasVertexNormals ? 1 : 0;
          addAttribute(
            attributesIndicesNone.textureCoordAndEncodedNormals,
            componentsTexCoordAndNormals
          );
          if (this.hasGeodeticSurfaceNormals) {
            addAttribute(attributesIndicesNone.geodeticSurfaceNormal, 3);
          }
        } else {
          const usingAttribute0Component4 = this.hasWebMercatorT || this.hasVertexNormals;
          const usingAttribute1Component1 = this.hasWebMercatorT && this.hasVertexNormals;
          addAttribute(
            attributesIndicesBits12.compressed0,
            usingAttribute0Component4 ? 4 : 3
          );
          if (usingAttribute1Component1) {
            addAttribute(attributesIndicesBits12.compressed1, 1);
          }
          if (this.hasGeodeticSurfaceNormals) {
            addAttribute(attributesIndicesBits12.geodeticSurfaceNormal, 3);
          }
        }
        return attributes;
      };
      TerrainEncoding.prototype.getAttributeLocations = function() {
        if (this.quantization === TerrainQuantization_default.NONE) {
          return attributesIndicesNone;
        }
        return attributesIndicesBits12;
      };
      TerrainEncoding.clone = function(encoding, result) {
        if (!defined_default(encoding)) {
          return void 0;
        }
        if (!defined_default(result)) {
          result = new TerrainEncoding();
        }
        result.quantization = encoding.quantization;
        result.minimumHeight = encoding.minimumHeight;
        result.maximumHeight = encoding.maximumHeight;
        result.center = Cartesian3_default.clone(encoding.center);
        result.toScaledENU = Matrix4_default.clone(encoding.toScaledENU);
        result.fromScaledENU = Matrix4_default.clone(encoding.fromScaledENU);
        result.matrix = Matrix4_default.clone(encoding.matrix);
        result.hasVertexNormals = encoding.hasVertexNormals;
        result.hasWebMercatorT = encoding.hasWebMercatorT;
        result.hasGeodeticSurfaceNormals = encoding.hasGeodeticSurfaceNormals;
        result.exaggeration = encoding.exaggeration;
        result.exaggerationRelativeHeight = encoding.exaggerationRelativeHeight;
        result._calculateStrideAndOffsets();
        return result;
      };
      TerrainEncoding_default = TerrainEncoding;
    }
  });

  // packages/engine/Source/Workers/createVerticesFromGoogleEarthEnterpriseBuffer.js
  var createVerticesFromGoogleEarthEnterpriseBuffer_exports = {};
  __export(createVerticesFromGoogleEarthEnterpriseBuffer_exports, {
    default: () => createVerticesFromGoogleEarthEnterpriseBuffer_default
  });
  function indexOfEpsilon(arr, elem, elemType) {
    elemType = defaultValue_default(elemType, Math_default);
    const count = arr.length;
    for (let i = 0; i < count; ++i) {
      if (elemType.equalsEpsilon(arr[i], elem, Math_default.EPSILON12)) {
        return i;
      }
    }
    return -1;
  }
  function createVerticesFromGoogleEarthEnterpriseBuffer(parameters, transferableObjects) {
    parameters.ellipsoid = Ellipsoid_default.clone(parameters.ellipsoid);
    parameters.rectangle = Rectangle_default.clone(parameters.rectangle);
    const statistics2 = processBuffer(
      parameters.buffer,
      parameters.relativeToCenter,
      parameters.ellipsoid,
      parameters.rectangle,
      parameters.nativeRectangle,
      parameters.exaggeration,
      parameters.exaggerationRelativeHeight,
      parameters.skirtHeight,
      parameters.includeWebMercatorT,
      parameters.negativeAltitudeExponentBias,
      parameters.negativeElevationThreshold
    );
    const vertices = statistics2.vertices;
    transferableObjects.push(vertices.buffer);
    const indices = statistics2.indices;
    transferableObjects.push(indices.buffer);
    return {
      vertices: vertices.buffer,
      indices: indices.buffer,
      numberOfAttributes: statistics2.encoding.stride,
      minimumHeight: statistics2.minimumHeight,
      maximumHeight: statistics2.maximumHeight,
      boundingSphere3D: statistics2.boundingSphere3D,
      orientedBoundingBox: statistics2.orientedBoundingBox,
      occludeePointInScaledSpace: statistics2.occludeePointInScaledSpace,
      encoding: statistics2.encoding,
      vertexCountWithoutSkirts: statistics2.vertexCountWithoutSkirts,
      indexCountWithoutSkirts: statistics2.indexCountWithoutSkirts,
      westIndicesSouthToNorth: statistics2.westIndicesSouthToNorth,
      southIndicesEastToWest: statistics2.southIndicesEastToWest,
      eastIndicesNorthToSouth: statistics2.eastIndicesNorthToSouth,
      northIndicesWestToEast: statistics2.northIndicesWestToEast
    };
  }
  function processBuffer(buffer, relativeToCenter, ellipsoid, rectangle, nativeRectangle, exaggeration, exaggerationRelativeHeight, skirtHeight, includeWebMercatorT, negativeAltitudeExponentBias, negativeElevationThreshold) {
    let geographicWest;
    let geographicSouth;
    let geographicEast;
    let geographicNorth;
    let rectangleWidth, rectangleHeight;
    if (!defined_default(rectangle)) {
      geographicWest = Math_default.toRadians(nativeRectangle.west);
      geographicSouth = Math_default.toRadians(nativeRectangle.south);
      geographicEast = Math_default.toRadians(nativeRectangle.east);
      geographicNorth = Math_default.toRadians(nativeRectangle.north);
      rectangleWidth = Math_default.toRadians(rectangle.width);
      rectangleHeight = Math_default.toRadians(rectangle.height);
    } else {
      geographicWest = rectangle.west;
      geographicSouth = rectangle.south;
      geographicEast = rectangle.east;
      geographicNorth = rectangle.north;
      rectangleWidth = rectangle.width;
      rectangleHeight = rectangle.height;
    }
    const quadBorderLatitudes = [geographicSouth, geographicNorth];
    const quadBorderLongitudes = [geographicWest, geographicEast];
    const fromENU = Transforms_default.eastNorthUpToFixedFrame(
      relativeToCenter,
      ellipsoid
    );
    const toENU = Matrix4_default.inverseTransformation(fromENU, matrix4Scratch3);
    let southMercatorY;
    let oneOverMercatorHeight;
    if (includeWebMercatorT) {
      southMercatorY = WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(
        geographicSouth
      );
      oneOverMercatorHeight = 1 / (WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(geographicNorth) - southMercatorY);
    }
    const hasExaggeration = exaggeration !== 1;
    const includeGeodeticSurfaceNormals = hasExaggeration;
    const dv = new DataView(buffer);
    let minHeight = Number.POSITIVE_INFINITY;
    let maxHeight = Number.NEGATIVE_INFINITY;
    const minimum = minimumScratch;
    minimum.x = Number.POSITIVE_INFINITY;
    minimum.y = Number.POSITIVE_INFINITY;
    minimum.z = Number.POSITIVE_INFINITY;
    const maximum = maximumScratch;
    maximum.x = Number.NEGATIVE_INFINITY;
    maximum.y = Number.NEGATIVE_INFINITY;
    maximum.z = Number.NEGATIVE_INFINITY;
    let offset = 0;
    let size = 0;
    let indicesSize = 0;
    let quadSize;
    let quad;
    for (quad = 0; quad < 4; ++quad) {
      let o = offset;
      quadSize = dv.getUint32(o, true);
      o += sizeOfUint32;
      const x = Math_default.toRadians(dv.getFloat64(o, true) * 180);
      o += sizeOfDouble;
      if (indexOfEpsilon(quadBorderLongitudes, x) === -1) {
        quadBorderLongitudes.push(x);
      }
      const y = Math_default.toRadians(dv.getFloat64(o, true) * 180);
      o += sizeOfDouble;
      if (indexOfEpsilon(quadBorderLatitudes, y) === -1) {
        quadBorderLatitudes.push(y);
      }
      o += 2 * sizeOfDouble;
      let c = dv.getInt32(o, true);
      o += sizeOfInt32;
      size += c;
      c = dv.getInt32(o, true);
      indicesSize += c * 3;
      offset += quadSize + sizeOfUint32;
    }
    const quadBorderPoints = [];
    const quadBorderIndices = [];
    const positions = new Array(size);
    const uvs = new Array(size);
    const heights = new Array(size);
    const webMercatorTs = includeWebMercatorT ? new Array(size) : [];
    const geodeticSurfaceNormals = includeGeodeticSurfaceNormals ? new Array(size) : [];
    const indices = new Array(indicesSize);
    const westBorder = [];
    const southBorder = [];
    const eastBorder = [];
    const northBorder = [];
    let pointOffset = 0;
    let indicesOffset = 0;
    offset = 0;
    for (quad = 0; quad < 4; ++quad) {
      quadSize = dv.getUint32(offset, true);
      offset += sizeOfUint32;
      const startQuad = offset;
      const originX = Math_default.toRadians(dv.getFloat64(offset, true) * 180);
      offset += sizeOfDouble;
      const originY = Math_default.toRadians(dv.getFloat64(offset, true) * 180);
      offset += sizeOfDouble;
      const stepX = Math_default.toRadians(dv.getFloat64(offset, true) * 180);
      const halfStepX = stepX * 0.5;
      offset += sizeOfDouble;
      const stepY = Math_default.toRadians(dv.getFloat64(offset, true) * 180);
      const halfStepY = stepY * 0.5;
      offset += sizeOfDouble;
      const numPoints = dv.getInt32(offset, true);
      offset += sizeOfInt32;
      const numFaces = dv.getInt32(offset, true);
      offset += sizeOfInt32;
      offset += sizeOfInt32;
      const indicesMapping = new Array(numPoints);
      for (let i = 0; i < numPoints; ++i) {
        const longitude = originX + dv.getUint8(offset++) * stepX;
        scratchCartographic7.longitude = longitude;
        const latitude = originY + dv.getUint8(offset++) * stepY;
        scratchCartographic7.latitude = latitude;
        let height = dv.getFloat32(offset, true);
        offset += sizeOfFloat;
        if (height !== 0 && height < negativeElevationThreshold) {
          height *= -Math.pow(2, negativeAltitudeExponentBias);
        }
        height *= 6371010;
        scratchCartographic7.height = height;
        if (indexOfEpsilon(quadBorderLongitudes, longitude) !== -1 || indexOfEpsilon(quadBorderLatitudes, latitude) !== -1) {
          const index = indexOfEpsilon(
            quadBorderPoints,
            scratchCartographic7,
            Cartographic_default
          );
          if (index === -1) {
            quadBorderPoints.push(Cartographic_default.clone(scratchCartographic7));
            quadBorderIndices.push(pointOffset);
          } else {
            indicesMapping[i] = quadBorderIndices[index];
            continue;
          }
        }
        indicesMapping[i] = pointOffset;
        if (Math.abs(longitude - geographicWest) < halfStepX) {
          westBorder.push({
            index: pointOffset,
            cartographic: Cartographic_default.clone(scratchCartographic7)
          });
        } else if (Math.abs(longitude - geographicEast) < halfStepX) {
          eastBorder.push({
            index: pointOffset,
            cartographic: Cartographic_default.clone(scratchCartographic7)
          });
        } else if (Math.abs(latitude - geographicSouth) < halfStepY) {
          southBorder.push({
            index: pointOffset,
            cartographic: Cartographic_default.clone(scratchCartographic7)
          });
        } else if (Math.abs(latitude - geographicNorth) < halfStepY) {
          northBorder.push({
            index: pointOffset,
            cartographic: Cartographic_default.clone(scratchCartographic7)
          });
        }
        minHeight = Math.min(height, minHeight);
        maxHeight = Math.max(height, maxHeight);
        heights[pointOffset] = height;
        const pos = ellipsoid.cartographicToCartesian(scratchCartographic7);
        positions[pointOffset] = pos;
        if (includeWebMercatorT) {
          webMercatorTs[pointOffset] = (WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;
        }
        if (includeGeodeticSurfaceNormals) {
          const normal2 = ellipsoid.geodeticSurfaceNormal(pos);
          geodeticSurfaceNormals[pointOffset] = normal2;
        }
        Matrix4_default.multiplyByPoint(toENU, pos, scratchCartesian20);
        Cartesian3_default.minimumByComponent(scratchCartesian20, minimum, minimum);
        Cartesian3_default.maximumByComponent(scratchCartesian20, maximum, maximum);
        let u3 = (longitude - geographicWest) / (geographicEast - geographicWest);
        u3 = Math_default.clamp(u3, 0, 1);
        let v3 = (latitude - geographicSouth) / (geographicNorth - geographicSouth);
        v3 = Math_default.clamp(v3, 0, 1);
        uvs[pointOffset] = new Cartesian2_default(u3, v3);
        ++pointOffset;
      }
      const facesElementCount = numFaces * 3;
      for (let j = 0; j < facesElementCount; ++j, ++indicesOffset) {
        indices[indicesOffset] = indicesMapping[dv.getUint16(offset, true)];
        offset += sizeOfUint16;
      }
      if (quadSize !== offset - startQuad) {
        throw new RuntimeError_default("Invalid terrain tile.");
      }
    }
    positions.length = pointOffset;
    uvs.length = pointOffset;
    heights.length = pointOffset;
    if (includeWebMercatorT) {
      webMercatorTs.length = pointOffset;
    }
    if (includeGeodeticSurfaceNormals) {
      geodeticSurfaceNormals.length = pointOffset;
    }
    const vertexCountWithoutSkirts = pointOffset;
    const indexCountWithoutSkirts = indicesOffset;
    const skirtOptions = {
      hMin: minHeight,
      lastBorderPoint: void 0,
      skirtHeight,
      toENU,
      ellipsoid,
      minimum,
      maximum
    };
    westBorder.sort(function(a3, b) {
      return b.cartographic.latitude - a3.cartographic.latitude;
    });
    southBorder.sort(function(a3, b) {
      return a3.cartographic.longitude - b.cartographic.longitude;
    });
    eastBorder.sort(function(a3, b) {
      return a3.cartographic.latitude - b.cartographic.latitude;
    });
    northBorder.sort(function(a3, b) {
      return b.cartographic.longitude - a3.cartographic.longitude;
    });
    const percentage = 1e-5;
    addSkirt(
      positions,
      heights,
      uvs,
      webMercatorTs,
      geodeticSurfaceNormals,
      indices,
      skirtOptions,
      westBorder,
      -percentage * rectangleWidth,
      true,
      -percentage * rectangleHeight
    );
    addSkirt(
      positions,
      heights,
      uvs,
      webMercatorTs,
      geodeticSurfaceNormals,
      indices,
      skirtOptions,
      southBorder,
      -percentage * rectangleHeight,
      false
    );
    addSkirt(
      positions,
      heights,
      uvs,
      webMercatorTs,
      geodeticSurfaceNormals,
      indices,
      skirtOptions,
      eastBorder,
      percentage * rectangleWidth,
      true,
      percentage * rectangleHeight
    );
    addSkirt(
      positions,
      heights,
      uvs,
      webMercatorTs,
      geodeticSurfaceNormals,
      indices,
      skirtOptions,
      northBorder,
      percentage * rectangleHeight,
      false
    );
    if (westBorder.length > 0 && northBorder.length > 0) {
      const firstBorderIndex = westBorder[0].index;
      const firstSkirtIndex = vertexCountWithoutSkirts;
      const lastBorderIndex = northBorder[northBorder.length - 1].index;
      const lastSkirtIndex = positions.length - 1;
      indices.push(
        lastBorderIndex,
        lastSkirtIndex,
        firstSkirtIndex,
        firstSkirtIndex,
        firstBorderIndex,
        lastBorderIndex
      );
    }
    size = positions.length;
    const boundingSphere3D = BoundingSphere_default.fromPoints(positions);
    let orientedBoundingBox;
    if (defined_default(rectangle)) {
      orientedBoundingBox = OrientedBoundingBox_default.fromRectangle(
        rectangle,
        minHeight,
        maxHeight,
        ellipsoid
      );
    }
    const occluder = new EllipsoidalOccluder_default(ellipsoid);
    const occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(
      relativeToCenter,
      positions,
      minHeight
    );
    const aaBox = new AxisAlignedBoundingBox_default(minimum, maximum, relativeToCenter);
    const encoding = new TerrainEncoding_default(
      relativeToCenter,
      aaBox,
      skirtOptions.hMin,
      maxHeight,
      fromENU,
      false,
      includeWebMercatorT,
      includeGeodeticSurfaceNormals,
      exaggeration,
      exaggerationRelativeHeight
    );
    const vertices = new Float32Array(size * encoding.stride);
    let bufferIndex = 0;
    for (let k = 0; k < size; ++k) {
      bufferIndex = encoding.encode(
        vertices,
        bufferIndex,
        positions[k],
        uvs[k],
        heights[k],
        void 0,
        webMercatorTs[k],
        geodeticSurfaceNormals[k]
      );
    }
    const westIndicesSouthToNorth = westBorder.map(function(vertex) {
      return vertex.index;
    }).reverse();
    const southIndicesEastToWest = southBorder.map(function(vertex) {
      return vertex.index;
    }).reverse();
    const eastIndicesNorthToSouth = eastBorder.map(function(vertex) {
      return vertex.index;
    }).reverse();
    const northIndicesWestToEast = northBorder.map(function(vertex) {
      return vertex.index;
    }).reverse();
    southIndicesEastToWest.unshift(
      eastIndicesNorthToSouth[eastIndicesNorthToSouth.length - 1]
    );
    southIndicesEastToWest.push(westIndicesSouthToNorth[0]);
    northIndicesWestToEast.unshift(
      westIndicesSouthToNorth[westIndicesSouthToNorth.length - 1]
    );
    northIndicesWestToEast.push(eastIndicesNorthToSouth[0]);
    return {
      vertices,
      indices: new Uint16Array(indices),
      maximumHeight: maxHeight,
      minimumHeight: minHeight,
      encoding,
      boundingSphere3D,
      orientedBoundingBox,
      occludeePointInScaledSpace,
      vertexCountWithoutSkirts,
      indexCountWithoutSkirts,
      westIndicesSouthToNorth,
      southIndicesEastToWest,
      eastIndicesNorthToSouth,
      northIndicesWestToEast
    };
  }
  function addSkirt(positions, heights, uvs, webMercatorTs, geodeticSurfaceNormals, indices, skirtOptions, borderPoints, fudgeFactor, eastOrWest, cornerFudge) {
    const count = borderPoints.length;
    for (let j = 0; j < count; ++j) {
      const borderPoint = borderPoints[j];
      const borderCartographic = borderPoint.cartographic;
      const borderIndex = borderPoint.index;
      const currentIndex = positions.length;
      const longitude = borderCartographic.longitude;
      let latitude = borderCartographic.latitude;
      latitude = Math_default.clamp(
        latitude,
        -Math_default.PI_OVER_TWO,
        Math_default.PI_OVER_TWO
      );
      const height = borderCartographic.height - skirtOptions.skirtHeight;
      skirtOptions.hMin = Math.min(skirtOptions.hMin, height);
      Cartographic_default.fromRadians(longitude, latitude, height, scratchCartographic7);
      if (eastOrWest) {
        scratchCartographic7.longitude += fudgeFactor;
      }
      if (!eastOrWest) {
        scratchCartographic7.latitude += fudgeFactor;
      } else if (j === count - 1) {
        scratchCartographic7.latitude += cornerFudge;
      } else if (j === 0) {
        scratchCartographic7.latitude -= cornerFudge;
      }
      const pos = skirtOptions.ellipsoid.cartographicToCartesian(
        scratchCartographic7
      );
      positions.push(pos);
      heights.push(height);
      uvs.push(Cartesian2_default.clone(uvs[borderIndex]));
      if (webMercatorTs.length > 0) {
        webMercatorTs.push(webMercatorTs[borderIndex]);
      }
      if (geodeticSurfaceNormals.length > 0) {
        geodeticSurfaceNormals.push(geodeticSurfaceNormals[borderIndex]);
      }
      Matrix4_default.multiplyByPoint(skirtOptions.toENU, pos, scratchCartesian20);
      const minimum = skirtOptions.minimum;
      const maximum = skirtOptions.maximum;
      Cartesian3_default.minimumByComponent(scratchCartesian20, minimum, minimum);
      Cartesian3_default.maximumByComponent(scratchCartesian20, maximum, maximum);
      const lastBorderPoint = skirtOptions.lastBorderPoint;
      if (defined_default(lastBorderPoint)) {
        const lastBorderIndex = lastBorderPoint.index;
        indices.push(
          lastBorderIndex,
          currentIndex - 1,
          currentIndex,
          currentIndex,
          borderIndex,
          lastBorderIndex
        );
      }
      skirtOptions.lastBorderPoint = borderPoint;
    }
  }
  var sizeOfUint16, sizeOfInt32, sizeOfUint32, sizeOfFloat, sizeOfDouble, scratchCartographic7, scratchCartesian20, minimumScratch, maximumScratch, matrix4Scratch3, createVerticesFromGoogleEarthEnterpriseBuffer_default;
  var init_createVerticesFromGoogleEarthEnterpriseBuffer = __esm({
    "packages/engine/Source/Workers/createVerticesFromGoogleEarthEnterpriseBuffer.js"() {
      init_AxisAlignedBoundingBox();
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_defaultValue();
      init_defined();
      init_Ellipsoid();
      init_EllipsoidalOccluder();
      init_Math();
      init_Matrix4();
      init_OrientedBoundingBox();
      init_Rectangle();
      init_RuntimeError();
      init_TerrainEncoding();
      init_Transforms();
      init_WebMercatorProjection();
      init_createTaskProcessorWorker();
      sizeOfUint16 = Uint16Array.BYTES_PER_ELEMENT;
      sizeOfInt32 = Int32Array.BYTES_PER_ELEMENT;
      sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;
      sizeOfFloat = Float32Array.BYTES_PER_ELEMENT;
      sizeOfDouble = Float64Array.BYTES_PER_ELEMENT;
      scratchCartographic7 = new Cartographic_default();
      scratchCartesian20 = new Cartesian3_default();
      minimumScratch = new Cartesian3_default();
      maximumScratch = new Cartesian3_default();
      matrix4Scratch3 = new Matrix4_default();
      createVerticesFromGoogleEarthEnterpriseBuffer_default = createTaskProcessorWorker_default(
        createVerticesFromGoogleEarthEnterpriseBuffer
      );
    }
  });

  // packages/engine/Source/Core/HeightmapEncoding.js
  var HeightmapEncoding, HeightmapEncoding_default;
  var init_HeightmapEncoding = __esm({
    "packages/engine/Source/Core/HeightmapEncoding.js"() {
      HeightmapEncoding = {
        /**
         * No encoding
         *
         * @type {number}
         * @constant
         */
        NONE: 0,
        /**
         * LERC encoding
         *
         * @type {number}
         * @constant
         *
         * @see {@link https://github.com/Esri/lerc|The LERC specification}
         */
        LERC: 1
      };
      HeightmapEncoding_default = Object.freeze(HeightmapEncoding);
    }
  });

  // packages/engine/Source/Core/HeightmapTessellator.js
  var HeightmapTessellator, cartesian3Scratch7, matrix4Scratch4, minimumScratch2, maximumScratch2, HeightmapTessellator_default;
  var init_HeightmapTessellator = __esm({
    "packages/engine/Source/Core/HeightmapTessellator.js"() {
      init_AxisAlignedBoundingBox();
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_EllipsoidalOccluder();
      init_Math();
      init_Matrix4();
      init_OrientedBoundingBox();
      init_Rectangle();
      init_TerrainEncoding();
      init_Transforms();
      init_WebMercatorProjection();
      HeightmapTessellator = {};
      HeightmapTessellator.DEFAULT_STRUCTURE = Object.freeze({
        heightScale: 1,
        heightOffset: 0,
        elementsPerHeight: 1,
        stride: 1,
        elementMultiplier: 256,
        isBigEndian: false
      });
      cartesian3Scratch7 = new Cartesian3_default();
      matrix4Scratch4 = new Matrix4_default();
      minimumScratch2 = new Cartesian3_default();
      maximumScratch2 = new Cartesian3_default();
      HeightmapTessellator.computeVertices = function(options) {
        if (!defined_default(options) || !defined_default(options.heightmap)) {
          throw new DeveloperError_default("options.heightmap is required.");
        }
        if (!defined_default(options.width) || !defined_default(options.height)) {
          throw new DeveloperError_default("options.width and options.height are required.");
        }
        if (!defined_default(options.nativeRectangle)) {
          throw new DeveloperError_default("options.nativeRectangle is required.");
        }
        if (!defined_default(options.skirtHeight)) {
          throw new DeveloperError_default("options.skirtHeight is required.");
        }
        const cos4 = Math.cos;
        const sin4 = Math.sin;
        const sqrt2 = Math.sqrt;
        const atan = Math.atan;
        const exp = Math.exp;
        const piOverTwo = Math_default.PI_OVER_TWO;
        const toRadians = Math_default.toRadians;
        const heightmap = options.heightmap;
        const width = options.width;
        const height = options.height;
        const skirtHeight = options.skirtHeight;
        const hasSkirts = skirtHeight > 0;
        const isGeographic = defaultValue_default(options.isGeographic, true);
        const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
        const oneOverGlobeSemimajorAxis = 1 / ellipsoid.maximumRadius;
        const nativeRectangle = Rectangle_default.clone(options.nativeRectangle);
        const rectangle = Rectangle_default.clone(options.rectangle);
        let geographicWest;
        let geographicSouth;
        let geographicEast;
        let geographicNorth;
        if (!defined_default(rectangle)) {
          if (isGeographic) {
            geographicWest = toRadians(nativeRectangle.west);
            geographicSouth = toRadians(nativeRectangle.south);
            geographicEast = toRadians(nativeRectangle.east);
            geographicNorth = toRadians(nativeRectangle.north);
          } else {
            geographicWest = nativeRectangle.west * oneOverGlobeSemimajorAxis;
            geographicSouth = piOverTwo - 2 * atan(exp(-nativeRectangle.south * oneOverGlobeSemimajorAxis));
            geographicEast = nativeRectangle.east * oneOverGlobeSemimajorAxis;
            geographicNorth = piOverTwo - 2 * atan(exp(-nativeRectangle.north * oneOverGlobeSemimajorAxis));
          }
        } else {
          geographicWest = rectangle.west;
          geographicSouth = rectangle.south;
          geographicEast = rectangle.east;
          geographicNorth = rectangle.north;
        }
        let relativeToCenter = options.relativeToCenter;
        const hasRelativeToCenter = defined_default(relativeToCenter);
        relativeToCenter = hasRelativeToCenter ? relativeToCenter : Cartesian3_default.ZERO;
        const includeWebMercatorT = defaultValue_default(options.includeWebMercatorT, false);
        const exaggeration = defaultValue_default(options.exaggeration, 1);
        const exaggerationRelativeHeight = defaultValue_default(
          options.exaggerationRelativeHeight,
          0
        );
        const hasExaggeration = exaggeration !== 1;
        const includeGeodeticSurfaceNormals = hasExaggeration;
        const structure = defaultValue_default(
          options.structure,
          HeightmapTessellator.DEFAULT_STRUCTURE
        );
        const heightScale = defaultValue_default(
          structure.heightScale,
          HeightmapTessellator.DEFAULT_STRUCTURE.heightScale
        );
        const heightOffset = defaultValue_default(
          structure.heightOffset,
          HeightmapTessellator.DEFAULT_STRUCTURE.heightOffset
        );
        const elementsPerHeight = defaultValue_default(
          structure.elementsPerHeight,
          HeightmapTessellator.DEFAULT_STRUCTURE.elementsPerHeight
        );
        const stride = defaultValue_default(
          structure.stride,
          HeightmapTessellator.DEFAULT_STRUCTURE.stride
        );
        const elementMultiplier = defaultValue_default(
          structure.elementMultiplier,
          HeightmapTessellator.DEFAULT_STRUCTURE.elementMultiplier
        );
        const isBigEndian = defaultValue_default(
          structure.isBigEndian,
          HeightmapTessellator.DEFAULT_STRUCTURE.isBigEndian
        );
        let rectangleWidth = Rectangle_default.computeWidth(nativeRectangle);
        let rectangleHeight = Rectangle_default.computeHeight(nativeRectangle);
        const granularityX = rectangleWidth / (width - 1);
        const granularityY = rectangleHeight / (height - 1);
        if (!isGeographic) {
          rectangleWidth *= oneOverGlobeSemimajorAxis;
          rectangleHeight *= oneOverGlobeSemimajorAxis;
        }
        const radiiSquared = ellipsoid.radiiSquared;
        const radiiSquaredX = radiiSquared.x;
        const radiiSquaredY = radiiSquared.y;
        const radiiSquaredZ = radiiSquared.z;
        let minimumHeight = 65536;
        let maximumHeight = -65536;
        const fromENU = Transforms_default.eastNorthUpToFixedFrame(
          relativeToCenter,
          ellipsoid
        );
        const toENU = Matrix4_default.inverseTransformation(fromENU, matrix4Scratch4);
        let southMercatorY;
        let oneOverMercatorHeight;
        if (includeWebMercatorT) {
          southMercatorY = WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(
            geographicSouth
          );
          oneOverMercatorHeight = 1 / (WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(geographicNorth) - southMercatorY);
        }
        const minimum = minimumScratch2;
        minimum.x = Number.POSITIVE_INFINITY;
        minimum.y = Number.POSITIVE_INFINITY;
        minimum.z = Number.POSITIVE_INFINITY;
        const maximum = maximumScratch2;
        maximum.x = Number.NEGATIVE_INFINITY;
        maximum.y = Number.NEGATIVE_INFINITY;
        maximum.z = Number.NEGATIVE_INFINITY;
        let hMin = Number.POSITIVE_INFINITY;
        const gridVertexCount = width * height;
        const edgeVertexCount = skirtHeight > 0 ? width * 2 + height * 2 : 0;
        const vertexCount = gridVertexCount + edgeVertexCount;
        const positions = new Array(vertexCount);
        const heights = new Array(vertexCount);
        const uvs = new Array(vertexCount);
        const webMercatorTs = includeWebMercatorT ? new Array(vertexCount) : [];
        const geodeticSurfaceNormals = includeGeodeticSurfaceNormals ? new Array(vertexCount) : [];
        let startRow = 0;
        let endRow = height;
        let startCol = 0;
        let endCol = width;
        if (hasSkirts) {
          --startRow;
          ++endRow;
          --startCol;
          ++endCol;
        }
        const skirtOffsetPercentage = 1e-5;
        for (let rowIndex = startRow; rowIndex < endRow; ++rowIndex) {
          let row = rowIndex;
          if (row < 0) {
            row = 0;
          }
          if (row >= height) {
            row = height - 1;
          }
          let latitude = nativeRectangle.north - granularityY * row;
          if (!isGeographic) {
            latitude = piOverTwo - 2 * atan(exp(-latitude * oneOverGlobeSemimajorAxis));
          } else {
            latitude = toRadians(latitude);
          }
          let v3 = (latitude - geographicSouth) / (geographicNorth - geographicSouth);
          v3 = Math_default.clamp(v3, 0, 1);
          const isNorthEdge = rowIndex === startRow;
          const isSouthEdge = rowIndex === endRow - 1;
          if (skirtHeight > 0) {
            if (isNorthEdge) {
              latitude += skirtOffsetPercentage * rectangleHeight;
            } else if (isSouthEdge) {
              latitude -= skirtOffsetPercentage * rectangleHeight;
            }
          }
          const cosLatitude = cos4(latitude);
          const nZ = sin4(latitude);
          const kZ = radiiSquaredZ * nZ;
          let webMercatorT;
          if (includeWebMercatorT) {
            webMercatorT = (WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;
          }
          for (let colIndex = startCol; colIndex < endCol; ++colIndex) {
            let col = colIndex;
            if (col < 0) {
              col = 0;
            }
            if (col >= width) {
              col = width - 1;
            }
            const terrainOffset = row * (width * stride) + col * stride;
            let heightSample;
            if (elementsPerHeight === 1) {
              heightSample = heightmap[terrainOffset];
            } else {
              heightSample = 0;
              let elementOffset;
              if (isBigEndian) {
                for (elementOffset = 0; elementOffset < elementsPerHeight; ++elementOffset) {
                  heightSample = heightSample * elementMultiplier + heightmap[terrainOffset + elementOffset];
                }
              } else {
                for (elementOffset = elementsPerHeight - 1; elementOffset >= 0; --elementOffset) {
                  heightSample = heightSample * elementMultiplier + heightmap[terrainOffset + elementOffset];
                }
              }
            }
            heightSample = heightSample * heightScale + heightOffset;
            maximumHeight = Math.max(maximumHeight, heightSample);
            minimumHeight = Math.min(minimumHeight, heightSample);
            let longitude = nativeRectangle.west + granularityX * col;
            if (!isGeographic) {
              longitude = longitude * oneOverGlobeSemimajorAxis;
            } else {
              longitude = toRadians(longitude);
            }
            let u3 = (longitude - geographicWest) / (geographicEast - geographicWest);
            u3 = Math_default.clamp(u3, 0, 1);
            let index = row * width + col;
            if (skirtHeight > 0) {
              const isWestEdge = colIndex === startCol;
              const isEastEdge = colIndex === endCol - 1;
              const isEdge2 = isNorthEdge || isSouthEdge || isWestEdge || isEastEdge;
              const isCorner = (isNorthEdge || isSouthEdge) && (isWestEdge || isEastEdge);
              if (isCorner) {
                continue;
              } else if (isEdge2) {
                heightSample -= skirtHeight;
                if (isWestEdge) {
                  index = gridVertexCount + (height - row - 1);
                  longitude -= skirtOffsetPercentage * rectangleWidth;
                } else if (isSouthEdge) {
                  index = gridVertexCount + height + (width - col - 1);
                } else if (isEastEdge) {
                  index = gridVertexCount + height + width + row;
                  longitude += skirtOffsetPercentage * rectangleWidth;
                } else if (isNorthEdge) {
                  index = gridVertexCount + height + width + height + col;
                }
              }
            }
            const nX = cosLatitude * cos4(longitude);
            const nY = cosLatitude * sin4(longitude);
            const kX = radiiSquaredX * nX;
            const kY = radiiSquaredY * nY;
            const gamma = sqrt2(kX * nX + kY * nY + kZ * nZ);
            const oneOverGamma = 1 / gamma;
            const rSurfaceX = kX * oneOverGamma;
            const rSurfaceY = kY * oneOverGamma;
            const rSurfaceZ = kZ * oneOverGamma;
            const position = new Cartesian3_default();
            position.x = rSurfaceX + nX * heightSample;
            position.y = rSurfaceY + nY * heightSample;
            position.z = rSurfaceZ + nZ * heightSample;
            Matrix4_default.multiplyByPoint(toENU, position, cartesian3Scratch7);
            Cartesian3_default.minimumByComponent(cartesian3Scratch7, minimum, minimum);
            Cartesian3_default.maximumByComponent(cartesian3Scratch7, maximum, maximum);
            hMin = Math.min(hMin, heightSample);
            positions[index] = position;
            uvs[index] = new Cartesian2_default(u3, v3);
            heights[index] = heightSample;
            if (includeWebMercatorT) {
              webMercatorTs[index] = webMercatorT;
            }
            if (includeGeodeticSurfaceNormals) {
              geodeticSurfaceNormals[index] = ellipsoid.geodeticSurfaceNormal(
                position
              );
            }
          }
        }
        const boundingSphere3D = BoundingSphere_default.fromPoints(positions);
        let orientedBoundingBox;
        if (defined_default(rectangle)) {
          orientedBoundingBox = OrientedBoundingBox_default.fromRectangle(
            rectangle,
            minimumHeight,
            maximumHeight,
            ellipsoid
          );
        }
        let occludeePointInScaledSpace;
        if (hasRelativeToCenter) {
          const occluder = new EllipsoidalOccluder_default(ellipsoid);
          occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(
            relativeToCenter,
            positions,
            minimumHeight
          );
        }
        const aaBox = new AxisAlignedBoundingBox_default(minimum, maximum, relativeToCenter);
        const encoding = new TerrainEncoding_default(
          relativeToCenter,
          aaBox,
          hMin,
          maximumHeight,
          fromENU,
          false,
          includeWebMercatorT,
          includeGeodeticSurfaceNormals,
          exaggeration,
          exaggerationRelativeHeight
        );
        const vertices = new Float32Array(vertexCount * encoding.stride);
        let bufferIndex = 0;
        for (let j = 0; j < vertexCount; ++j) {
          bufferIndex = encoding.encode(
            vertices,
            bufferIndex,
            positions[j],
            uvs[j],
            heights[j],
            void 0,
            webMercatorTs[j],
            geodeticSurfaceNormals[j]
          );
        }
        return {
          vertices,
          maximumHeight,
          minimumHeight,
          encoding,
          boundingSphere3D,
          orientedBoundingBox,
          occludeePointInScaledSpace
        };
      };
      HeightmapTessellator_default = HeightmapTessellator;
    }
  });

  // node_modules/lerc/LercDecode.js
  var require_LercDecode = __commonJS({
    "node_modules/lerc/LercDecode.js"(exports2, module) {
      /* Copyright 2015-2018 Esri. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */
      (function() {
        var LercDecode = function() {
          var CntZImage = {};
          CntZImage.defaultNoDataValue = -34027999387901484e22;
          CntZImage.decode = function(input, options) {
            options = options || {};
            var skipMask = options.encodedMaskData || options.encodedMaskData === null;
            var parsedData = parse(input, options.inputOffset || 0, skipMask);
            var noDataValue = options.noDataValue !== null ? options.noDataValue : CntZImage.defaultNoDataValue;
            var uncompressedData = uncompressPixelValues(
              parsedData,
              options.pixelType || Float32Array,
              options.encodedMaskData,
              noDataValue,
              options.returnMask
            );
            var result = {
              width: parsedData.width,
              height: parsedData.height,
              pixelData: uncompressedData.resultPixels,
              minValue: uncompressedData.minValue,
              maxValue: parsedData.pixels.maxValue,
              noDataValue
            };
            if (uncompressedData.resultMask) {
              result.maskData = uncompressedData.resultMask;
            }
            if (options.returnEncodedMask && parsedData.mask) {
              result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;
            }
            if (options.returnFileInfo) {
              result.fileInfo = formatFileInfo(parsedData);
              if (options.computeUsedBitDepths) {
                result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);
              }
            }
            return result;
          };
          var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {
            var blockIdx = 0;
            var numX = data.pixels.numBlocksX;
            var numY = data.pixels.numBlocksY;
            var blockWidth = Math.floor(data.width / numX);
            var blockHeight = Math.floor(data.height / numY);
            var scale = 2 * data.maxZError;
            var minValue = Number.MAX_VALUE, currentValue;
            maskBitset = maskBitset || (data.mask ? data.mask.bitset : null);
            var resultPixels, resultMask;
            resultPixels = new TypedArrayClass(data.width * data.height);
            if (storeDecodedMask && maskBitset) {
              resultMask = new Uint8Array(data.width * data.height);
            }
            var blockDataBuffer = new Float32Array(blockWidth * blockHeight);
            var xx, yy;
            for (var y = 0; y <= numY; y++) {
              var thisBlockHeight = y !== numY ? blockHeight : data.height % numY;
              if (thisBlockHeight === 0) {
                continue;
              }
              for (var x = 0; x <= numX; x++) {
                var thisBlockWidth = x !== numX ? blockWidth : data.width % numX;
                if (thisBlockWidth === 0) {
                  continue;
                }
                var outPtr = y * data.width * blockHeight + x * blockWidth;
                var outStride = data.width - thisBlockWidth;
                var block = data.pixels.blocks[blockIdx];
                var blockData, blockPtr, constValue;
                if (block.encoding < 2) {
                  if (block.encoding === 0) {
                    blockData = block.rawData;
                  } else {
                    unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);
                    blockData = blockDataBuffer;
                  }
                  blockPtr = 0;
                } else if (block.encoding === 2) {
                  constValue = 0;
                } else {
                  constValue = block.offset;
                }
                var maskByte;
                if (maskBitset) {
                  for (yy = 0; yy < thisBlockHeight; yy++) {
                    if (outPtr & 7) {
                      maskByte = maskBitset[outPtr >> 3];
                      maskByte <<= outPtr & 7;
                    }
                    for (xx = 0; xx < thisBlockWidth; xx++) {
                      if (!(outPtr & 7)) {
                        maskByte = maskBitset[outPtr >> 3];
                      }
                      if (maskByte & 128) {
                        if (resultMask) {
                          resultMask[outPtr] = 1;
                        }
                        currentValue = block.encoding < 2 ? blockData[blockPtr++] : constValue;
                        minValue = minValue > currentValue ? currentValue : minValue;
                        resultPixels[outPtr++] = currentValue;
                      } else {
                        if (resultMask) {
                          resultMask[outPtr] = 0;
                        }
                        resultPixels[outPtr++] = noDataValue;
                      }
                      maskByte <<= 1;
                    }
                    outPtr += outStride;
                  }
                } else {
                  if (block.encoding < 2) {
                    for (yy = 0; yy < thisBlockHeight; yy++) {
                      for (xx = 0; xx < thisBlockWidth; xx++) {
                        currentValue = blockData[blockPtr++];
                        minValue = minValue > currentValue ? currentValue : minValue;
                        resultPixels[outPtr++] = currentValue;
                      }
                      outPtr += outStride;
                    }
                  } else {
                    minValue = minValue > constValue ? constValue : minValue;
                    for (yy = 0; yy < thisBlockHeight; yy++) {
                      for (xx = 0; xx < thisBlockWidth; xx++) {
                        resultPixels[outPtr++] = constValue;
                      }
                      outPtr += outStride;
                    }
                  }
                }
                if (block.encoding === 1 && blockPtr !== block.numValidPixels) {
                  throw "Block and Mask do not match";
                }
                blockIdx++;
              }
            }
            return {
              resultPixels,
              resultMask,
              minValue
            };
          };
          var formatFileInfo = function(data) {
            return {
              "fileIdentifierString": data.fileIdentifierString,
              "fileVersion": data.fileVersion,
              "imageType": data.imageType,
              "height": data.height,
              "width": data.width,
              "maxZError": data.maxZError,
              "eofOffset": data.eofOffset,
              "mask": data.mask ? {
                "numBlocksX": data.mask.numBlocksX,
                "numBlocksY": data.mask.numBlocksY,
                "numBytes": data.mask.numBytes,
                "maxValue": data.mask.maxValue
              } : null,
              "pixels": {
                "numBlocksX": data.pixels.numBlocksX,
                "numBlocksY": data.pixels.numBlocksY,
                "numBytes": data.pixels.numBytes,
                "maxValue": data.pixels.maxValue,
                "noDataValue": data.noDataValue
              }
            };
          };
          var computeUsedBitDepths = function(data) {
            var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;
            var bitDepths = {};
            for (var i = 0; i < numBlocks; i++) {
              var block = data.pixels.blocks[i];
              if (block.encoding === 0) {
                bitDepths.float32 = true;
              } else if (block.encoding === 1) {
                bitDepths[block.bitsPerPixel] = true;
              } else {
                bitDepths[0] = true;
              }
            }
            return Object.keys(bitDepths);
          };
          var parse = function(input, fp, skipMask) {
            var data = {};
            var fileIdView = new Uint8Array(input, fp, 10);
            data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);
            if (data.fileIdentifierString.trim() !== "CntZImage") {
              throw "Unexpected file identifier string: " + data.fileIdentifierString;
            }
            fp += 10;
            var view = new DataView(input, fp, 24);
            data.fileVersion = view.getInt32(0, true);
            data.imageType = view.getInt32(4, true);
            data.height = view.getUint32(8, true);
            data.width = view.getUint32(12, true);
            data.maxZError = view.getFloat64(16, true);
            fp += 24;
            if (!skipMask) {
              view = new DataView(input, fp, 16);
              data.mask = {};
              data.mask.numBlocksY = view.getUint32(0, true);
              data.mask.numBlocksX = view.getUint32(4, true);
              data.mask.numBytes = view.getUint32(8, true);
              data.mask.maxValue = view.getFloat32(12, true);
              fp += 16;
              if (data.mask.numBytes > 0) {
                var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));
                view = new DataView(input, fp, data.mask.numBytes);
                var cnt = view.getInt16(0, true);
                var ip = 2, op = 0;
                do {
                  if (cnt > 0) {
                    while (cnt--) {
                      bitset[op++] = view.getUint8(ip++);
                    }
                  } else {
                    var val = view.getUint8(ip++);
                    cnt = -cnt;
                    while (cnt--) {
                      bitset[op++] = val;
                    }
                  }
                  cnt = view.getInt16(ip, true);
                  ip += 2;
                } while (ip < data.mask.numBytes);
                if (cnt !== -32768 || op < bitset.length) {
                  throw "Unexpected end of mask RLE encoding";
                }
                data.mask.bitset = bitset;
                fp += data.mask.numBytes;
              } else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {
                data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));
              }
            }
            view = new DataView(input, fp, 16);
            data.pixels = {};
            data.pixels.numBlocksY = view.getUint32(0, true);
            data.pixels.numBlocksX = view.getUint32(4, true);
            data.pixels.numBytes = view.getUint32(8, true);
            data.pixels.maxValue = view.getFloat32(12, true);
            fp += 16;
            var numBlocksX = data.pixels.numBlocksX;
            var numBlocksY = data.pixels.numBlocksY;
            var actualNumBlocksX = numBlocksX + (data.width % numBlocksX > 0 ? 1 : 0);
            var actualNumBlocksY = numBlocksY + (data.height % numBlocksY > 0 ? 1 : 0);
            data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);
            var blockI = 0;
            for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {
              for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {
                var size = 0;
                var bytesLeft = input.byteLength - fp;
                view = new DataView(input, fp, Math.min(10, bytesLeft));
                var block = {};
                data.pixels.blocks[blockI++] = block;
                var headerByte = view.getUint8(0);
                size++;
                block.encoding = headerByte & 63;
                if (block.encoding > 3) {
                  throw "Invalid block encoding (" + block.encoding + ")";
                }
                if (block.encoding === 2) {
                  fp++;
                  continue;
                }
                if (headerByte !== 0 && headerByte !== 2) {
                  headerByte >>= 6;
                  block.offsetType = headerByte;
                  if (headerByte === 2) {
                    block.offset = view.getInt8(1);
                    size++;
                  } else if (headerByte === 1) {
                    block.offset = view.getInt16(1, true);
                    size += 2;
                  } else if (headerByte === 0) {
                    block.offset = view.getFloat32(1, true);
                    size += 4;
                  } else {
                    throw "Invalid block offset type";
                  }
                  if (block.encoding === 1) {
                    headerByte = view.getUint8(size);
                    size++;
                    block.bitsPerPixel = headerByte & 63;
                    headerByte >>= 6;
                    block.numValidPixelsType = headerByte;
                    if (headerByte === 2) {
                      block.numValidPixels = view.getUint8(size);
                      size++;
                    } else if (headerByte === 1) {
                      block.numValidPixels = view.getUint16(size, true);
                      size += 2;
                    } else if (headerByte === 0) {
                      block.numValidPixels = view.getUint32(size, true);
                      size += 4;
                    } else {
                      throw "Invalid valid pixel count type";
                    }
                  }
                }
                fp += size;
                if (block.encoding === 3) {
                  continue;
                }
                var arrayBuf, store8;
                if (block.encoding === 0) {
                  var numPixels = (data.pixels.numBytes - 1) / 4;
                  if (numPixels !== Math.floor(numPixels)) {
                    throw "uncompressed block has invalid length";
                  }
                  arrayBuf = new ArrayBuffer(numPixels * 4);
                  store8 = new Uint8Array(arrayBuf);
                  store8.set(new Uint8Array(input, fp, numPixels * 4));
                  var rawData = new Float32Array(arrayBuf);
                  block.rawData = rawData;
                  fp += numPixels * 4;
                } else if (block.encoding === 1) {
                  var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);
                  var dataWords = Math.ceil(dataBytes / 4);
                  arrayBuf = new ArrayBuffer(dataWords * 4);
                  store8 = new Uint8Array(arrayBuf);
                  store8.set(new Uint8Array(input, fp, dataBytes));
                  block.stuffedData = new Uint32Array(arrayBuf);
                  fp += dataBytes;
                }
              }
            }
            data.eofOffset = fp;
            return data;
          };
          var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {
            var bitMask = (1 << bitsPerPixel) - 1;
            var i = 0, o;
            var bitsLeft = 0;
            var n, buffer;
            var nmax = Math.ceil((maxValue - offset) / scale);
            var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);
            src[src.length - 1] <<= 8 * numInvalidTailBytes;
            for (o = 0; o < numPixels; o++) {
              if (bitsLeft === 0) {
                buffer = src[i++];
                bitsLeft = 32;
              }
              if (bitsLeft >= bitsPerPixel) {
                n = buffer >>> bitsLeft - bitsPerPixel & bitMask;
                bitsLeft -= bitsPerPixel;
              } else {
                var missingBits = bitsPerPixel - bitsLeft;
                n = (buffer & bitMask) << missingBits & bitMask;
                buffer = src[i++];
                bitsLeft = 32 - missingBits;
                n += buffer >>> bitsLeft;
              }
              dest[o] = n < nmax ? offset + n * scale : maxValue;
            }
            return dest;
          };
          return CntZImage;
        }();
        var Lerc2Decode = function() {
          "use strict";
          var BitStuffer = {
            //methods ending with 2 are for the new byte order used by Lerc2.3 and above.
            //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.
            unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {
              var bitMask = (1 << bitsPerPixel) - 1;
              var i = 0, o;
              var bitsLeft = 0;
              var n, buffer, missingBits, nmax;
              var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);
              src[src.length - 1] <<= 8 * numInvalidTailBytes;
              if (lutArr) {
                for (o = 0; o < numPixels; o++) {
                  if (bitsLeft === 0) {
                    buffer = src[i++];
                    bitsLeft = 32;
                  }
                  if (bitsLeft >= bitsPerPixel) {
                    n = buffer >>> bitsLeft - bitsPerPixel & bitMask;
                    bitsLeft -= bitsPerPixel;
                  } else {
                    missingBits = bitsPerPixel - bitsLeft;
                    n = (buffer & bitMask) << missingBits & bitMask;
                    buffer = src[i++];
                    bitsLeft = 32 - missingBits;
                    n += buffer >>> bitsLeft;
                  }
                  dest[o] = lutArr[n];
                }
              } else {
                nmax = Math.ceil((maxValue - offset) / scale);
                for (o = 0; o < numPixels; o++) {
                  if (bitsLeft === 0) {
                    buffer = src[i++];
                    bitsLeft = 32;
                  }
                  if (bitsLeft >= bitsPerPixel) {
                    n = buffer >>> bitsLeft - bitsPerPixel & bitMask;
                    bitsLeft -= bitsPerPixel;
                  } else {
                    missingBits = bitsPerPixel - bitsLeft;
                    n = (buffer & bitMask) << missingBits & bitMask;
                    buffer = src[i++];
                    bitsLeft = 32 - missingBits;
                    n += buffer >>> bitsLeft;
                  }
                  dest[o] = n < nmax ? offset + n * scale : maxValue;
                }
              }
            },
            unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {
              var bitMask = (1 << bitsPerPixel) - 1;
              var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;
              var buffer;
              var dest = [];
              var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);
              src[src.length - 1] <<= 8 * numInvalidTailBytes;
              var nmax = Math.ceil((maxValue - offset) / scale);
              for (o = 0; o < numPixels; o++) {
                if (bitsLeft === 0) {
                  buffer = src[i++];
                  bitsLeft = 32;
                }
                if (bitsLeft >= bitsPerPixel) {
                  n = buffer >>> bitsLeft - bitsPerPixel & bitMask;
                  bitsLeft -= bitsPerPixel;
                } else {
                  missingBits = bitsPerPixel - bitsLeft;
                  n = (buffer & bitMask) << missingBits & bitMask;
                  buffer = src[i++];
                  bitsLeft = 32 - missingBits;
                  n += buffer >>> bitsLeft;
                }
                dest[o] = n < nmax ? offset + n * scale : maxValue;
              }
              dest.unshift(offset);
              return dest;
            },
            unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {
              var bitMask = (1 << bitsPerPixel) - 1;
              var i = 0, o;
              var bitsLeft = 0, bitPos = 0;
              var n, buffer, missingBits;
              if (lutArr) {
                for (o = 0; o < numPixels; o++) {
                  if (bitsLeft === 0) {
                    buffer = src[i++];
                    bitsLeft = 32;
                    bitPos = 0;
                  }
                  if (bitsLeft >= bitsPerPixel) {
                    n = buffer >>> bitPos & bitMask;
                    bitsLeft -= bitsPerPixel;
                    bitPos += bitsPerPixel;
                  } else {
                    missingBits = bitsPerPixel - bitsLeft;
                    n = buffer >>> bitPos & bitMask;
                    buffer = src[i++];
                    bitsLeft = 32 - missingBits;
                    n |= (buffer & (1 << missingBits) - 1) << bitsPerPixel - missingBits;
                    bitPos = missingBits;
                  }
                  dest[o] = lutArr[n];
                }
              } else {
                var nmax = Math.ceil((maxValue - offset) / scale);
                for (o = 0; o < numPixels; o++) {
                  if (bitsLeft === 0) {
                    buffer = src[i++];
                    bitsLeft = 32;
                    bitPos = 0;
                  }
                  if (bitsLeft >= bitsPerPixel) {
                    n = buffer >>> bitPos & bitMask;
                    bitsLeft -= bitsPerPixel;
                    bitPos += bitsPerPixel;
                  } else {
                    missingBits = bitsPerPixel - bitsLeft;
                    n = buffer >>> bitPos & bitMask;
                    buffer = src[i++];
                    bitsLeft = 32 - missingBits;
                    n |= (buffer & (1 << missingBits) - 1) << bitsPerPixel - missingBits;
                    bitPos = missingBits;
                  }
                  dest[o] = n < nmax ? offset + n * scale : maxValue;
                }
              }
              return dest;
            },
            unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {
              var bitMask = (1 << bitsPerPixel) - 1;
              var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;
              var buffer;
              var dest = [];
              var nmax = Math.ceil((maxValue - offset) / scale);
              for (o = 0; o < numPixels; o++) {
                if (bitsLeft === 0) {
                  buffer = src[i++];
                  bitsLeft = 32;
                  bitPos = 0;
                }
                if (bitsLeft >= bitsPerPixel) {
                  n = buffer >>> bitPos & bitMask;
                  bitsLeft -= bitsPerPixel;
                  bitPos += bitsPerPixel;
                } else {
                  missingBits = bitsPerPixel - bitsLeft;
                  n = buffer >>> bitPos & bitMask;
                  buffer = src[i++];
                  bitsLeft = 32 - missingBits;
                  n |= (buffer & (1 << missingBits) - 1) << bitsPerPixel - missingBits;
                  bitPos = missingBits;
                }
                dest[o] = n < nmax ? offset + n * scale : maxValue;
              }
              dest.unshift(offset);
              return dest;
            },
            originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {
              var bitMask = (1 << bitsPerPixel) - 1;
              var i = 0, o;
              var bitsLeft = 0;
              var n, buffer, missingBits;
              var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);
              src[src.length - 1] <<= 8 * numInvalidTailBytes;
              for (o = 0; o < numPixels; o++) {
                if (bitsLeft === 0) {
                  buffer = src[i++];
                  bitsLeft = 32;
                }
                if (bitsLeft >= bitsPerPixel) {
                  n = buffer >>> bitsLeft - bitsPerPixel & bitMask;
                  bitsLeft -= bitsPerPixel;
                } else {
                  missingBits = bitsPerPixel - bitsLeft;
                  n = (buffer & bitMask) << missingBits & bitMask;
                  buffer = src[i++];
                  bitsLeft = 32 - missingBits;
                  n += buffer >>> bitsLeft;
                }
                dest[o] = n;
              }
              return dest;
            },
            originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {
              var bitMask = (1 << bitsPerPixel) - 1;
              var i = 0, o;
              var bitsLeft = 0, bitPos = 0;
              var n, buffer, missingBits;
              for (o = 0; o < numPixels; o++) {
                if (bitsLeft === 0) {
                  buffer = src[i++];
                  bitsLeft = 32;
                  bitPos = 0;
                }
                if (bitsLeft >= bitsPerPixel) {
                  n = buffer >>> bitPos & bitMask;
                  bitsLeft -= bitsPerPixel;
                  bitPos += bitsPerPixel;
                } else {
                  missingBits = bitsPerPixel - bitsLeft;
                  n = buffer >>> bitPos & bitMask;
                  buffer = src[i++];
                  bitsLeft = 32 - missingBits;
                  n |= (buffer & (1 << missingBits) - 1) << bitsPerPixel - missingBits;
                  bitPos = missingBits;
                }
                dest[o] = n;
              }
              return dest;
            }
          };
          var Lerc2Helpers = {
            HUFFMAN_LUT_BITS_MAX: 12,
            //use 2^12 lut, treat it like constant
            computeChecksumFletcher32: function(input) {
              var sum1 = 65535, sum2 = 65535;
              var len = input.length;
              var words = Math.floor(len / 2);
              var i = 0;
              while (words) {
                var tlen = words >= 359 ? 359 : words;
                words -= tlen;
                do {
                  sum1 += input[i++] << 8;
                  sum2 += sum1 += input[i++];
                } while (--tlen);
                sum1 = (sum1 & 65535) + (sum1 >>> 16);
                sum2 = (sum2 & 65535) + (sum2 >>> 16);
              }
              if (len & 1) {
                sum2 += sum1 += input[i] << 8;
              }
              sum1 = (sum1 & 65535) + (sum1 >>> 16);
              sum2 = (sum2 & 65535) + (sum2 >>> 16);
              return (sum2 << 16 | sum1) >>> 0;
            },
            readHeaderInfo: function(input, data) {
              var ptr = data.ptr;
              var fileIdView = new Uint8Array(input, ptr, 6);
              var headerInfo = {};
              headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);
              if (headerInfo.fileIdentifierString.lastIndexOf("Lerc2", 0) !== 0) {
                throw "Unexpected file identifier string (expect Lerc2 ): " + headerInfo.fileIdentifierString;
              }
              ptr += 6;
              var view = new DataView(input, ptr, 8);
              var fileVersion = view.getInt32(0, true);
              headerInfo.fileVersion = fileVersion;
              ptr += 4;
              if (fileVersion >= 3) {
                headerInfo.checksum = view.getUint32(4, true);
                ptr += 4;
              }
              view = new DataView(input, ptr, 12);
              headerInfo.height = view.getUint32(0, true);
              headerInfo.width = view.getUint32(4, true);
              ptr += 8;
              if (fileVersion >= 4) {
                headerInfo.numDims = view.getUint32(8, true);
                ptr += 4;
              } else {
                headerInfo.numDims = 1;
              }
              view = new DataView(input, ptr, 40);
              headerInfo.numValidPixel = view.getUint32(0, true);
              headerInfo.microBlockSize = view.getInt32(4, true);
              headerInfo.blobSize = view.getInt32(8, true);
              headerInfo.imageType = view.getInt32(12, true);
              headerInfo.maxZError = view.getFloat64(16, true);
              headerInfo.zMin = view.getFloat64(24, true);
              headerInfo.zMax = view.getFloat64(32, true);
              ptr += 40;
              data.headerInfo = headerInfo;
              data.ptr = ptr;
              var checksum, keyLength;
              if (fileVersion >= 3) {
                keyLength = fileVersion >= 4 ? 52 : 48;
                checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));
                if (checksum !== headerInfo.checksum) {
                  throw "Checksum failed.";
                }
              }
              return true;
            },
            checkMinMaxRanges: function(input, data) {
              var headerInfo = data.headerInfo;
              var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);
              var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);
              var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);
              var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);
              data.ptr += 2 * rangeBytes;
              var i, equal = true;
              for (i = 0; i < headerInfo.numDims; i++) {
                if (minValues[i] !== maxValues[i]) {
                  equal = false;
                  break;
                }
              }
              headerInfo.minValues = minValues;
              headerInfo.maxValues = maxValues;
              return equal;
            },
            readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {
              var rawData;
              if (OutPixelTypeArray === Uint8Array) {
                rawData = new Uint8Array(input, ptr, numBytes);
              } else {
                var arrayBuf = new ArrayBuffer(numBytes);
                var store8 = new Uint8Array(arrayBuf);
                store8.set(new Uint8Array(input, ptr, numBytes));
                rawData = new OutPixelTypeArray(arrayBuf);
              }
              return rawData;
            },
            readMask: function(input, data) {
              var ptr = data.ptr;
              var headerInfo = data.headerInfo;
              var numPixels = headerInfo.width * headerInfo.height;
              var numValidPixel = headerInfo.numValidPixel;
              var view = new DataView(input, ptr, 4);
              var mask = {};
              mask.numBytes = view.getUint32(0, true);
              ptr += 4;
              if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {
                throw "invalid mask";
              }
              var bitset, resultMask;
              if (numValidPixel === 0) {
                bitset = new Uint8Array(Math.ceil(numPixels / 8));
                mask.bitset = bitset;
                resultMask = new Uint8Array(numPixels);
                data.pixels.resultMask = resultMask;
                ptr += mask.numBytes;
              } else if (mask.numBytes > 0) {
                bitset = new Uint8Array(Math.ceil(numPixels / 8));
                view = new DataView(input, ptr, mask.numBytes);
                var cnt = view.getInt16(0, true);
                var ip = 2, op = 0, val = 0;
                do {
                  if (cnt > 0) {
                    while (cnt--) {
                      bitset[op++] = view.getUint8(ip++);
                    }
                  } else {
                    val = view.getUint8(ip++);
                    cnt = -cnt;
                    while (cnt--) {
                      bitset[op++] = val;
                    }
                  }
                  cnt = view.getInt16(ip, true);
                  ip += 2;
                } while (ip < mask.numBytes);
                if (cnt !== -32768 || op < bitset.length) {
                  throw "Unexpected end of mask RLE encoding";
                }
                resultMask = new Uint8Array(numPixels);
                var mb = 0, k = 0;
                for (k = 0; k < numPixels; k++) {
                  if (k & 7) {
                    mb = bitset[k >> 3];
                    mb <<= k & 7;
                  } else {
                    mb = bitset[k >> 3];
                  }
                  if (mb & 128) {
                    resultMask[k] = 1;
                  }
                }
                data.pixels.resultMask = resultMask;
                mask.bitset = bitset;
                ptr += mask.numBytes;
              }
              data.ptr = ptr;
              data.mask = mask;
              return true;
            },
            readDataOneSweep: function(input, data, OutPixelTypeArray) {
              var ptr = data.ptr;
              var headerInfo = data.headerInfo;
              var numDims = headerInfo.numDims;
              var numPixels = headerInfo.width * headerInfo.height;
              var imageType = headerInfo.imageType;
              var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;
              var rawData;
              var mask = data.pixels.resultMask;
              if (OutPixelTypeArray === Uint8Array) {
                rawData = new Uint8Array(input, ptr, numBytes);
              } else {
                var arrayBuf = new ArrayBuffer(numBytes);
                var store8 = new Uint8Array(arrayBuf);
                store8.set(new Uint8Array(input, ptr, numBytes));
                rawData = new OutPixelTypeArray(arrayBuf);
              }
              if (rawData.length === numPixels * numDims) {
                data.pixels.resultPixels = rawData;
              } else {
                data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);
                var z = 0, k = 0, i = 0, nStart = 0;
                if (numDims > 1) {
                  for (i = 0; i < numDims; i++) {
                    nStart = i * numPixels;
                    for (k = 0; k < numPixels; k++) {
                      if (mask[k]) {
                        data.pixels.resultPixels[nStart + k] = rawData[z++];
                      }
                    }
                  }
                } else {
                  for (k = 0; k < numPixels; k++) {
                    if (mask[k]) {
                      data.pixels.resultPixels[k] = rawData[z++];
                    }
                  }
                }
              }
              ptr += numBytes;
              data.ptr = ptr;
              return true;
            },
            readHuffmanTree: function(input, data) {
              var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX;
              var view = new DataView(input, data.ptr, 16);
              data.ptr += 16;
              var version = view.getInt32(0, true);
              if (version < 2) {
                throw "unsupported Huffman version";
              }
              var size = view.getInt32(4, true);
              var i0 = view.getInt32(8, true);
              var i1 = view.getInt32(12, true);
              if (i0 >= i1) {
                return false;
              }
              var blockDataBuffer = new Uint32Array(i1 - i0);
              Lerc2Helpers.decodeBits(input, data, blockDataBuffer);
              var codeTable = [];
              var i, j, k, len;
              for (i = i0; i < i1; i++) {
                j = i - (i < size ? 0 : size);
                codeTable[j] = { first: blockDataBuffer[i - i0], second: null };
              }
              var dataBytes = input.byteLength - data.ptr;
              var dataWords = Math.ceil(dataBytes / 4);
              var arrayBuf = new ArrayBuffer(dataWords * 4);
              var store8 = new Uint8Array(arrayBuf);
              store8.set(new Uint8Array(input, data.ptr, dataBytes));
              var stuffedData = new Uint32Array(arrayBuf);
              var bitPos = 0, word, srcPtr = 0;
              word = stuffedData[0];
              for (i = i0; i < i1; i++) {
                j = i - (i < size ? 0 : size);
                len = codeTable[j].first;
                if (len > 0) {
                  codeTable[j].second = word << bitPos >>> 32 - len;
                  if (32 - bitPos >= len) {
                    bitPos += len;
                    if (bitPos === 32) {
                      bitPos = 0;
                      srcPtr++;
                      word = stuffedData[srcPtr];
                    }
                  } else {
                    bitPos += len - 32;
                    srcPtr++;
                    word = stuffedData[srcPtr];
                    codeTable[j].second |= word >>> 32 - bitPos;
                  }
                }
              }
              var numBitsLUT = 0, numBitsLUTQick = 0;
              var tree = new TreeNode();
              for (i = 0; i < codeTable.length; i++) {
                if (codeTable[i] !== void 0) {
                  numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);
                }
              }
              if (numBitsLUT >= BITS_MAX) {
                numBitsLUTQick = BITS_MAX;
              } else {
                numBitsLUTQick = numBitsLUT;
              }
              if (numBitsLUT >= 30) {
                console.log("WARning, large NUM LUT BITS IS " + numBitsLUT);
              }
              var decodeLut = [], entry, code, numEntries, jj, currentBit, node;
              for (i = i0; i < i1; i++) {
                j = i - (i < size ? 0 : size);
                len = codeTable[j].first;
                if (len > 0) {
                  entry = [len, j];
                  if (len <= numBitsLUTQick) {
                    code = codeTable[j].second << numBitsLUTQick - len;
                    numEntries = 1 << numBitsLUTQick - len;
                    for (k = 0; k < numEntries; k++) {
                      decodeLut[code | k] = entry;
                    }
                  } else {
                    code = codeTable[j].second;
                    node = tree;
                    for (jj = len - 1; jj >= 0; jj--) {
                      currentBit = code >>> jj & 1;
                      if (currentBit) {
                        if (!node.right) {
                          node.right = new TreeNode();
                        }
                        node = node.right;
                      } else {
                        if (!node.left) {
                          node.left = new TreeNode();
                        }
                        node = node.left;
                      }
                      if (jj === 0 && !node.val) {
                        node.val = entry[1];
                      }
                    }
                  }
                }
              }
              return {
                decodeLut,
                numBitsLUTQick,
                numBitsLUT,
                tree,
                stuffedData,
                srcPtr,
                bitPos
              };
            },
            readHuffman: function(input, data, OutPixelTypeArray) {
              var headerInfo = data.headerInfo;
              var numDims = headerInfo.numDims;
              var height = data.headerInfo.height;
              var width = data.headerInfo.width;
              var numPixels = width * height;
              var huffmanInfo = this.readHuffmanTree(input, data);
              var decodeLut = huffmanInfo.decodeLut;
              var tree = huffmanInfo.tree;
              var stuffedData = huffmanInfo.stuffedData;
              var srcPtr = huffmanInfo.srcPtr;
              var bitPos = huffmanInfo.bitPos;
              var numBitsLUTQick = huffmanInfo.numBitsLUTQick;
              var numBitsLUT = huffmanInfo.numBitsLUT;
              var offset = data.headerInfo.imageType === 0 ? 128 : 0;
              var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;
              var i, j, k, ii;
              var prevVal = 0;
              if (bitPos > 0) {
                srcPtr++;
                bitPos = 0;
              }
              var word = stuffedData[srcPtr];
              var deltaEncode = data.encodeMode === 1;
              var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);
              var resultPixels = resultPixelsAllDim;
              var iDim;
              for (iDim = 0; iDim < headerInfo.numDims; iDim++) {
                if (numDims > 1) {
                  resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);
                  prevVal = 0;
                }
                if (data.headerInfo.numValidPixel === width * height) {
                  for (k = 0, i = 0; i < height; i++) {
                    for (j = 0; j < width; j++, k++) {
                      val = 0;
                      valTmp = word << bitPos >>> 32 - numBitsLUTQick;
                      valTmpQuick = valTmp;
                      if (32 - bitPos < numBitsLUTQick) {
                        valTmp |= stuffedData[srcPtr + 1] >>> 64 - bitPos - numBitsLUTQick;
                        valTmpQuick = valTmp;
                      }
                      if (decodeLut[valTmpQuick]) {
                        val = decodeLut[valTmpQuick][1];
                        bitPos += decodeLut[valTmpQuick][0];
                      } else {
                        valTmp = word << bitPos >>> 32 - numBitsLUT;
                        valTmpQuick = valTmp;
                        if (32 - bitPos < numBitsLUT) {
                          valTmp |= stuffedData[srcPtr + 1] >>> 64 - bitPos - numBitsLUT;
                          valTmpQuick = valTmp;
                        }
                        node = tree;
                        for (ii = 0; ii < numBitsLUT; ii++) {
                          currentBit = valTmp >>> numBitsLUT - ii - 1 & 1;
                          node = currentBit ? node.right : node.left;
                          if (!(node.left || node.right)) {
                            val = node.val;
                            bitPos = bitPos + ii + 1;
                            break;
                          }
                        }
                      }
                      if (bitPos >= 32) {
                        bitPos -= 32;
                        srcPtr++;
                        word = stuffedData[srcPtr];
                      }
                      delta = val - offset;
                      if (deltaEncode) {
                        if (j > 0) {
                          delta += prevVal;
                        } else if (i > 0) {
                          delta += resultPixels[k - width];
                        } else {
                          delta += prevVal;
                        }
                        delta &= 255;
                        resultPixels[k] = delta;
                        prevVal = delta;
                      } else {
                        resultPixels[k] = delta;
                      }
                    }
                  }
                } else {
                  for (k = 0, i = 0; i < height; i++) {
                    for (j = 0; j < width; j++, k++) {
                      if (mask[k]) {
                        val = 0;
                        valTmp = word << bitPos >>> 32 - numBitsLUTQick;
                        valTmpQuick = valTmp;
                        if (32 - bitPos < numBitsLUTQick) {
                          valTmp |= stuffedData[srcPtr + 1] >>> 64 - bitPos - numBitsLUTQick;
                          valTmpQuick = valTmp;
                        }
                        if (decodeLut[valTmpQuick]) {
                          val = decodeLut[valTmpQuick][1];
                          bitPos += decodeLut[valTmpQuick][0];
                        } else {
                          valTmp = word << bitPos >>> 32 - numBitsLUT;
                          valTmpQuick = valTmp;
                          if (32 - bitPos < numBitsLUT) {
                            valTmp |= stuffedData[srcPtr + 1] >>> 64 - bitPos - numBitsLUT;
                            valTmpQuick = valTmp;
                          }
                          node = tree;
                          for (ii = 0; ii < numBitsLUT; ii++) {
                            currentBit = valTmp >>> numBitsLUT - ii - 1 & 1;
                            node = currentBit ? node.right : node.left;
                            if (!(node.left || node.right)) {
                              val = node.val;
                              bitPos = bitPos + ii + 1;
                              break;
                            }
                          }
                        }
                        if (bitPos >= 32) {
                          bitPos -= 32;
                          srcPtr++;
                          word = stuffedData[srcPtr];
                        }
                        delta = val - offset;
                        if (deltaEncode) {
                          if (j > 0 && mask[k - 1]) {
                            delta += prevVal;
                          } else if (i > 0 && mask[k - width]) {
                            delta += resultPixels[k - width];
                          } else {
                            delta += prevVal;
                          }
                          delta &= 255;
                          resultPixels[k] = delta;
                          prevVal = delta;
                        } else {
                          resultPixels[k] = delta;
                        }
                      }
                    }
                  }
                }
                data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);
              }
              data.pixels.resultPixels = resultPixelsAllDim;
            },
            decodeBits: function(input, data, blockDataBuffer, offset, iDim) {
              {
                var headerInfo = data.headerInfo;
                var fileVersion = headerInfo.fileVersion;
                var blockPtr = 0;
                var view = new DataView(input, data.ptr, 5);
                var headerByte = view.getUint8(0);
                blockPtr++;
                var bits67 = headerByte >> 6;
                var n = bits67 === 0 ? 4 : 3 - bits67;
                var doLut = (headerByte & 32) > 0 ? true : false;
                var numBits = headerByte & 31;
                var numElements = 0;
                if (n === 1) {
                  numElements = view.getUint8(blockPtr);
                  blockPtr++;
                } else if (n === 2) {
                  numElements = view.getUint16(blockPtr, true);
                  blockPtr += 2;
                } else if (n === 4) {
                  numElements = view.getUint32(blockPtr, true);
                  blockPtr += 4;
                } else {
                  throw "Invalid valid pixel count type";
                }
                var scale = 2 * headerInfo.maxZError;
                var stuffedData, arrayBuf, store8, dataBytes, dataWords;
                var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;
                var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;
                if (doLut) {
                  data.counter.lut++;
                  lutBytes = view.getUint8(blockPtr);
                  lutBitsPerElement = numBits;
                  blockPtr++;
                  dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);
                  dataWords = Math.ceil(dataBytes / 4);
                  arrayBuf = new ArrayBuffer(dataWords * 4);
                  store8 = new Uint8Array(arrayBuf);
                  data.ptr += blockPtr;
                  store8.set(new Uint8Array(input, data.ptr, dataBytes));
                  lutData = new Uint32Array(arrayBuf);
                  data.ptr += dataBytes;
                  bitsPerPixel = 0;
                  while (lutBytes - 1 >>> bitsPerPixel) {
                    bitsPerPixel++;
                  }
                  dataBytes = Math.ceil(numElements * bitsPerPixel / 8);
                  dataWords = Math.ceil(dataBytes / 4);
                  arrayBuf = new ArrayBuffer(dataWords * 4);
                  store8 = new Uint8Array(arrayBuf);
                  store8.set(new Uint8Array(input, data.ptr, dataBytes));
                  stuffedData = new Uint32Array(arrayBuf);
                  data.ptr += dataBytes;
                  if (fileVersion >= 3) {
                    lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);
                  } else {
                    lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);
                  }
                  if (fileVersion >= 3) {
                    BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);
                  } else {
                    BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);
                  }
                } else {
                  data.counter.bitstuffer++;
                  bitsPerPixel = numBits;
                  data.ptr += blockPtr;
                  if (bitsPerPixel > 0) {
                    dataBytes = Math.ceil(numElements * bitsPerPixel / 8);
                    dataWords = Math.ceil(dataBytes / 4);
                    arrayBuf = new ArrayBuffer(dataWords * 4);
                    store8 = new Uint8Array(arrayBuf);
                    store8.set(new Uint8Array(input, data.ptr, dataBytes));
                    stuffedData = new Uint32Array(arrayBuf);
                    data.ptr += dataBytes;
                    if (fileVersion >= 3) {
                      if (offset == null) {
                        BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);
                      } else {
                        BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);
                      }
                    } else {
                      if (offset == null) {
                        BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);
                      } else {
                        BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);
                      }
                    }
                  }
                }
              }
            },
            readTiles: function(input, data, OutPixelTypeArray) {
              var headerInfo = data.headerInfo;
              var width = headerInfo.width;
              var height = headerInfo.height;
              var microBlockSize = headerInfo.microBlockSize;
              var imageType = headerInfo.imageType;
              var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);
              var numBlocksX = Math.ceil(width / microBlockSize);
              var numBlocksY = Math.ceil(height / microBlockSize);
              data.pixels.numBlocksY = numBlocksY;
              data.pixels.numBlocksX = numBlocksX;
              data.pixels.ptr = 0;
              var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;
              var view, block, arrayBuf, store8, rawData;
              var blockEncoding;
              var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);
              var lastBlockHeight = height % microBlockSize || microBlockSize;
              var lastBlockWidth = width % microBlockSize || microBlockSize;
              var offsetType, offset;
              var numDims = headerInfo.numDims, iDim;
              var mask = data.pixels.resultMask;
              var resultPixels = data.pixels.resultPixels;
              for (blockY = 0; blockY < numBlocksY; blockY++) {
                thisBlockHeight = blockY !== numBlocksY - 1 ? microBlockSize : lastBlockHeight;
                for (blockX = 0; blockX < numBlocksX; blockX++) {
                  thisBlockWidth = blockX !== numBlocksX - 1 ? microBlockSize : lastBlockWidth;
                  outPtr = blockY * width * microBlockSize + blockX * microBlockSize;
                  outStride = width - thisBlockWidth;
                  for (iDim = 0; iDim < numDims; iDim++) {
                    if (numDims > 1) {
                      resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, width * height * iDim * dataTypeSize, width * height);
                    }
                    bytesLeft = input.byteLength - data.ptr;
                    view = new DataView(input, data.ptr, Math.min(10, bytesLeft));
                    block = {};
                    blockPtr = 0;
                    headerByte = view.getUint8(0);
                    blockPtr++;
                    bits67 = headerByte >> 6 & 255;
                    testCode = headerByte >> 2 & 15;
                    if (testCode !== (blockX * microBlockSize >> 3 & 15)) {
                      throw "integrity issue";
                    }
                    blockEncoding = headerByte & 3;
                    if (blockEncoding > 3) {
                      data.ptr += blockPtr;
                      throw "Invalid block encoding (" + blockEncoding + ")";
                    } else if (blockEncoding === 2) {
                      data.counter.constant++;
                      data.ptr += blockPtr;
                      continue;
                    } else if (blockEncoding === 0) {
                      data.counter.uncompressed++;
                      data.ptr += blockPtr;
                      numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;
                      bytesleft = input.byteLength - data.ptr;
                      numBytes = numBytes < bytesleft ? numBytes : bytesleft;
                      arrayBuf = new ArrayBuffer(numBytes % dataTypeSize === 0 ? numBytes : numBytes + dataTypeSize - numBytes % dataTypeSize);
                      store8 = new Uint8Array(arrayBuf);
                      store8.set(new Uint8Array(input, data.ptr, numBytes));
                      rawData = new OutPixelTypeArray(arrayBuf);
                      z = 0;
                      if (mask) {
                        for (row = 0; row < thisBlockHeight; row++) {
                          for (col = 0; col < thisBlockWidth; col++) {
                            if (mask[outPtr]) {
                              resultPixels[outPtr] = rawData[z++];
                            }
                            outPtr++;
                          }
                          outPtr += outStride;
                        }
                      } else {
                        for (row = 0; row < thisBlockHeight; row++) {
                          for (col = 0; col < thisBlockWidth; col++) {
                            resultPixels[outPtr++] = rawData[z++];
                          }
                          outPtr += outStride;
                        }
                      }
                      data.ptr += z * dataTypeSize;
                    } else {
                      offsetType = Lerc2Helpers.getDataTypeUsed(imageType, bits67);
                      offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);
                      blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);
                      if (blockEncoding === 3) {
                        data.ptr += blockPtr;
                        data.counter.constantoffset++;
                        if (mask) {
                          for (row = 0; row < thisBlockHeight; row++) {
                            for (col = 0; col < thisBlockWidth; col++) {
                              if (mask[outPtr]) {
                                resultPixels[outPtr] = offset;
                              }
                              outPtr++;
                            }
                            outPtr += outStride;
                          }
                        } else {
                          for (row = 0; row < thisBlockHeight; row++) {
                            for (col = 0; col < thisBlockWidth; col++) {
                              resultPixels[outPtr++] = offset;
                            }
                            outPtr += outStride;
                          }
                        }
                      } else {
                        data.ptr += blockPtr;
                        Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);
                        blockPtr = 0;
                        if (mask) {
                          for (row = 0; row < thisBlockHeight; row++) {
                            for (col = 0; col < thisBlockWidth; col++) {
                              if (mask[outPtr]) {
                                resultPixels[outPtr] = blockDataBuffer[blockPtr++];
                              }
                              outPtr++;
                            }
                            outPtr += outStride;
                          }
                        } else {
                          for (row = 0; row < thisBlockHeight; row++) {
                            for (col = 0; col < thisBlockWidth; col++) {
                              resultPixels[outPtr++] = blockDataBuffer[blockPtr++];
                            }
                            outPtr += outStride;
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            /*****************
            *  private methods (helper methods)
            *****************/
            formatFileInfo: function(data) {
              return {
                "fileIdentifierString": data.headerInfo.fileIdentifierString,
                "fileVersion": data.headerInfo.fileVersion,
                "imageType": data.headerInfo.imageType,
                "height": data.headerInfo.height,
                "width": data.headerInfo.width,
                "numValidPixel": data.headerInfo.numValidPixel,
                "microBlockSize": data.headerInfo.microBlockSize,
                "blobSize": data.headerInfo.blobSize,
                "maxZError": data.headerInfo.maxZError,
                "pixelType": Lerc2Helpers.getPixelType(data.headerInfo.imageType),
                "eofOffset": data.eofOffset,
                "mask": data.mask ? {
                  "numBytes": data.mask.numBytes
                } : null,
                "pixels": {
                  "numBlocksX": data.pixels.numBlocksX,
                  "numBlocksY": data.pixels.numBlocksY,
                  //"numBytes": data.pixels.numBytes,
                  "maxValue": data.headerInfo.zMax,
                  "minValue": data.headerInfo.zMin,
                  "noDataValue": data.noDataValue
                }
              };
            },
            constructConstantSurface: function(data) {
              var val = data.headerInfo.zMax;
              var numDims = data.headerInfo.numDims;
              var numPixels = data.headerInfo.height * data.headerInfo.width;
              var numPixelAllDims = numPixels * numDims;
              var i = 0, k = 0, nStart = 0;
              var mask = data.pixels.resultMask;
              if (mask) {
                if (numDims > 1) {
                  for (i = 0; i < numDims; i++) {
                    nStart = i * numPixels;
                    for (k = 0; k < numPixels; k++) {
                      if (mask[k]) {
                        data.pixels.resultPixels[nStart + k] = val;
                      }
                    }
                  }
                } else {
                  for (k = 0; k < numPixels; k++) {
                    if (mask[k]) {
                      data.pixels.resultPixels[k] = val;
                    }
                  }
                }
              } else {
                if (data.pixels.resultPixels.fill) {
                  data.pixels.resultPixels.fill(val);
                } else {
                  for (k = 0; k < numPixelAllDims; k++) {
                    data.pixels.resultPixels[k] = val;
                  }
                }
              }
              return;
            },
            getDataTypeArray: function(t) {
              var tp;
              switch (t) {
                case 0:
                  tp = Int8Array;
                  break;
                case 1:
                  tp = Uint8Array;
                  break;
                case 2:
                  tp = Int16Array;
                  break;
                case 3:
                  tp = Uint16Array;
                  break;
                case 4:
                  tp = Int32Array;
                  break;
                case 5:
                  tp = Uint32Array;
                  break;
                case 6:
                  tp = Float32Array;
                  break;
                case 7:
                  tp = Float64Array;
                  break;
                default:
                  tp = Float32Array;
              }
              return tp;
            },
            getPixelType: function(t) {
              var tp;
              switch (t) {
                case 0:
                  tp = "S8";
                  break;
                case 1:
                  tp = "U8";
                  break;
                case 2:
                  tp = "S16";
                  break;
                case 3:
                  tp = "U16";
                  break;
                case 4:
                  tp = "S32";
                  break;
                case 5:
                  tp = "U32";
                  break;
                case 6:
                  tp = "F32";
                  break;
                case 7:
                  tp = "F64";
                  break;
                default:
                  tp = "F32";
              }
              return tp;
            },
            isValidPixelValue: function(t, val) {
              if (val == null) {
                return false;
              }
              var isValid;
              switch (t) {
                case 0:
                  isValid = val >= -128 && val <= 127;
                  break;
                case 1:
                  isValid = val >= 0 && val <= 255;
                  break;
                case 2:
                  isValid = val >= -32768 && val <= 32767;
                  break;
                case 3:
                  isValid = val >= 0 && val <= 65536;
                  break;
                case 4:
                  isValid = val >= -2147483648 && val <= 2147483647;
                  break;
                case 5:
                  isValid = val >= 0 && val <= 4294967296;
                  break;
                case 6:
                  isValid = val >= -34027999387901484e22 && val <= 34027999387901484e22;
                  break;
                case 7:
                  isValid = val >= 5e-324 && val <= 17976931348623157e292;
                  break;
                default:
                  isValid = false;
              }
              return isValid;
            },
            getDataTypeSize: function(t) {
              var s = 0;
              switch (t) {
                case 0:
                case 1:
                  s = 1;
                  break;
                case 2:
                case 3:
                  s = 2;
                  break;
                case 4:
                case 5:
                case 6:
                  s = 4;
                  break;
                case 7:
                  s = 8;
                  break;
                default:
                  s = t;
              }
              return s;
            },
            getDataTypeUsed: function(dt, tc) {
              var t = dt;
              switch (dt) {
                case 2:
                case 4:
                  t = dt - tc;
                  break;
                case 3:
                case 5:
                  t = dt - 2 * tc;
                  break;
                case 6:
                  if (0 === tc) {
                    t = dt;
                  } else if (1 === tc) {
                    t = 2;
                  } else {
                    t = 1;
                  }
                  break;
                case 7:
                  if (0 === tc) {
                    t = dt;
                  } else {
                    t = dt - 2 * tc + 1;
                  }
                  break;
                default:
                  t = dt;
                  break;
              }
              return t;
            },
            getOnePixel: function(block, blockPtr, offsetType, view) {
              var temp = 0;
              switch (offsetType) {
                case 0:
                  temp = view.getInt8(blockPtr);
                  break;
                case 1:
                  temp = view.getUint8(blockPtr);
                  break;
                case 2:
                  temp = view.getInt16(blockPtr, true);
                  break;
                case 3:
                  temp = view.getUint16(blockPtr, true);
                  break;
                case 4:
                  temp = view.getInt32(blockPtr, true);
                  break;
                case 5:
                  temp = view.getUInt32(blockPtr, true);
                  break;
                case 6:
                  temp = view.getFloat32(blockPtr, true);
                  break;
                case 7:
                  temp = view.getFloat64(blockPtr, true);
                  break;
                default:
                  throw "the decoder does not understand this pixel type";
              }
              return temp;
            }
          };
          var TreeNode = function(val, left, right) {
            this.val = val;
            this.left = left;
            this.right = right;
          };
          var Lerc2Decode2 = {
            /*
            * ********removed options compared to LERC1. We can bring some of them back if needed.
             * removed pixel type. LERC2 is typed and doesn't require user to give pixel type
             * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.
             * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.
             * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,
             *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.
             *       We can add it back later if their's a clear requirement.
             * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)
             * removed computeUsedBitDepths.
             *
             *
             * response changes compared to LERC1
             * 1. encodedMaskData is not available
             * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)
             * 3. maskData is always available
            */
            /*****************
            *  public properties
            ******************/
            //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable
            /*****************
            *  public methods
            *****************/
            /**
             * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.
             *
             * @param {ArrayBuffer} input The LERC input byte stream
             * @param {object} [options] options Decoding options
             * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position
             * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process
             */
            decode: function(input, options) {
              options = options || {};
              var noDataValue = options.noDataValue;
              var i = 0, data = {};
              data.ptr = options.inputOffset || 0;
              data.pixels = {};
              if (!Lerc2Helpers.readHeaderInfo(input, data)) {
                return;
              }
              var headerInfo = data.headerInfo;
              var fileVersion = headerInfo.fileVersion;
              var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);
              Lerc2Helpers.readMask(input, data);
              if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {
                data.pixels.resultMask = options.maskData;
              }
              var numPixels = headerInfo.width * headerInfo.height;
              data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);
              data.counter = {
                onesweep: 0,
                uncompressed: 0,
                lut: 0,
                bitstuffer: 0,
                constant: 0,
                constantoffset: 0
              };
              if (headerInfo.numValidPixel !== 0) {
                if (headerInfo.zMax === headerInfo.zMin) {
                  Lerc2Helpers.constructConstantSurface(data);
                } else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {
                  Lerc2Helpers.constructConstantSurface(data);
                } else {
                  var view = new DataView(input, data.ptr, 2);
                  var bReadDataOneSweep = view.getUint8(0);
                  data.ptr++;
                  if (bReadDataOneSweep) {
                    Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray);
                  } else {
                    if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 1e-5) {
                      var flagHuffman = view.getUint8(1);
                      data.ptr++;
                      data.encodeMode = flagHuffman;
                      if (flagHuffman > 2 || fileVersion < 4 && flagHuffman > 1) {
                        throw "Invalid Huffman flag " + flagHuffman;
                      }
                      if (flagHuffman) {
                        Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray);
                      } else {
                        Lerc2Helpers.readTiles(input, data, OutPixelTypeArray);
                      }
                    } else {
                      Lerc2Helpers.readTiles(input, data, OutPixelTypeArray);
                    }
                  }
                }
              }
              data.eofOffset = data.ptr;
              var diff;
              if (options.inputOffset) {
                diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;
                if (Math.abs(diff) >= 1) {
                  data.eofOffset = options.inputOffset + data.headerInfo.blobSize;
                }
              } else {
                diff = data.headerInfo.blobSize - data.ptr;
                if (Math.abs(diff) >= 1) {
                  data.eofOffset = data.headerInfo.blobSize;
                }
              }
              var result = {
                width: headerInfo.width,
                height: headerInfo.height,
                pixelData: data.pixels.resultPixels,
                minValue: headerInfo.zMin,
                maxValue: headerInfo.zMax,
                validPixelCount: headerInfo.numValidPixel,
                dimCount: headerInfo.numDims,
                dimStats: {
                  minValues: headerInfo.minValues,
                  maxValues: headerInfo.maxValues
                },
                maskData: data.pixels.resultMask
                //noDataValue: noDataValue
              };
              if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {
                var mask = data.pixels.resultMask;
                for (i = 0; i < numPixels; i++) {
                  if (!mask[i]) {
                    result.pixelData[i] = noDataValue;
                  }
                }
                result.noDataValue = noDataValue;
              }
              data.noDataValue = noDataValue;
              if (options.returnFileInfo) {
                result.fileInfo = Lerc2Helpers.formatFileInfo(data);
              }
              return result;
            },
            getBandCount: function(input) {
              var count = 0;
              var i = 0;
              var temp = {};
              temp.ptr = 0;
              temp.pixels = {};
              while (i < input.byteLength - 58) {
                Lerc2Helpers.readHeaderInfo(input, temp);
                i += temp.headerInfo.blobSize;
                count++;
                temp.ptr = i;
              }
              return count;
            }
          };
          return Lerc2Decode2;
        }();
        var isPlatformLittleEndian = function() {
          var a3 = new ArrayBuffer(4);
          var b = new Uint8Array(a3);
          var c = new Uint32Array(a3);
          c[0] = 1;
          return b[0] === 1;
        }();
        var Lerc2 = {
          /************wrapper**********************************************/
          /**
           * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.
           *
           * @alias module:Lerc
           * @param {ArrayBuffer} input The LERC input byte stream
           * @param {object} [options] The decoding options below are optional.
           * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.
           * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.
           * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.
           * @returns {{width, height, pixels, pixelType, mask, statistics}}
             * @property {number} width Width of decoded image.
             * @property {number} height Height of decoded image.
             * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.
             * @property {string} pixelType The type of pixels represented in the output.
             * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.
             * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values
          **/
          decode: function(encodedData, options) {
            if (!isPlatformLittleEndian) {
              throw "Big endian system is not supported.";
            }
            options = options || {};
            var inputOffset = options.inputOffset || 0;
            var fileIdView = new Uint8Array(encodedData, inputOffset, 10);
            var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);
            var lerc, majorVersion;
            if (fileIdentifierString.trim() === "CntZImage") {
              lerc = LercDecode;
              majorVersion = 1;
            } else if (fileIdentifierString.substring(0, 5) === "Lerc2") {
              lerc = Lerc2Decode;
              majorVersion = 2;
            } else {
              throw "Unexpected file identifier string: " + fileIdentifierString;
            }
            var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;
            var decodedPixelBlock = {
              width: 0,
              height: 0,
              pixels: [],
              pixelType: options.pixelType,
              mask: null,
              statistics: []
            };
            while (inputOffset < eof) {
              var result = lerc.decode(encodedData, {
                inputOffset,
                //for both lerc1 and lerc2
                encodedMaskData,
                //lerc1 only
                maskData,
                //lerc2 only
                returnMask: iPlane === 0 ? true : false,
                //lerc1 only
                returnEncodedMask: iPlane === 0 ? true : false,
                //lerc1 only
                returnFileInfo: true,
                //for both lerc1 and lerc2
                pixelType: options.pixelType || null,
                //lerc1 only
                noDataValue: options.noDataValue || null
                //lerc1 only
              });
              inputOffset = result.fileInfo.eofOffset;
              if (iPlane === 0) {
                encodedMaskData = result.encodedMaskData;
                maskData = result.maskData;
                decodedPixelBlock.width = result.width;
                decodedPixelBlock.height = result.height;
                decodedPixelBlock.dimCount = result.dimCount || 1;
                decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;
                decodedPixelBlock.mask = result.maskData;
              }
              if (majorVersion > 1 && result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {
                bandMasks.push(result.maskData);
              }
              iPlane++;
              decodedPixelBlock.pixels.push(result.pixelData);
              decodedPixelBlock.statistics.push({
                minValue: result.minValue,
                maxValue: result.maxValue,
                noDataValue: result.noDataValue,
                dimStats: result.dimStats
              });
            }
            var i, j, numPixels;
            if (majorVersion > 1 && bandMasks.length > 1) {
              numPixels = decodedPixelBlock.width * decodedPixelBlock.height;
              decodedPixelBlock.bandMasks = bandMasks;
              maskData = new Uint8Array(numPixels);
              maskData.set(bandMasks[0]);
              for (i = 1; i < bandMasks.length; i++) {
                bandMask = bandMasks[i];
                for (j = 0; j < numPixels; j++) {
                  maskData[j] = maskData[j] & bandMask[j];
                }
              }
              decodedPixelBlock.maskData = maskData;
            }
            return decodedPixelBlock;
          }
        };
        if (typeof define === "function" && define.amd) {
          define([], function() {
            return Lerc2;
          });
        } else if (typeof module !== "undefined" && module.exports) {
          module.exports = Lerc2;
        } else {
          this.Lerc = Lerc2;
        }
      })();
    }
  });

  // packages/engine/Source/Workers/createVerticesFromHeightmap.js
  var createVerticesFromHeightmap_exports = {};
  __export(createVerticesFromHeightmap_exports, {
    default: () => createVerticesFromHeightmap_default
  });
  function createVerticesFromHeightmap(parameters, transferableObjects) {
    if (parameters.encoding === HeightmapEncoding_default.LERC) {
      let result;
      try {
        result = import_lerc.default.decode(parameters.heightmap);
      } catch (error) {
        throw new RuntimeError_default(error);
      }
      const lercStatistics = result.statistics[0];
      if (lercStatistics.minValue === Number.MAX_VALUE) {
        throw new RuntimeError_default("Invalid tile data");
      }
      parameters.heightmap = result.pixels[0];
      parameters.width = result.width;
      parameters.height = result.height;
    }
    parameters.ellipsoid = Ellipsoid_default.clone(parameters.ellipsoid);
    parameters.rectangle = Rectangle_default.clone(parameters.rectangle);
    const statistics2 = HeightmapTessellator_default.computeVertices(parameters);
    const vertices = statistics2.vertices;
    transferableObjects.push(vertices.buffer);
    return {
      vertices: vertices.buffer,
      numberOfAttributes: statistics2.encoding.stride,
      minimumHeight: statistics2.minimumHeight,
      maximumHeight: statistics2.maximumHeight,
      gridWidth: parameters.width,
      gridHeight: parameters.height,
      boundingSphere3D: statistics2.boundingSphere3D,
      orientedBoundingBox: statistics2.orientedBoundingBox,
      occludeePointInScaledSpace: statistics2.occludeePointInScaledSpace,
      encoding: statistics2.encoding,
      westIndicesSouthToNorth: statistics2.westIndicesSouthToNorth,
      southIndicesEastToWest: statistics2.southIndicesEastToWest,
      eastIndicesNorthToSouth: statistics2.eastIndicesNorthToSouth,
      northIndicesWestToEast: statistics2.northIndicesWestToEast
    };
  }
  var import_lerc, createVerticesFromHeightmap_default;
  var init_createVerticesFromHeightmap = __esm({
    "packages/engine/Source/Workers/createVerticesFromHeightmap.js"() {
      init_Ellipsoid();
      init_HeightmapEncoding();
      init_HeightmapTessellator();
      init_Rectangle();
      init_RuntimeError();
      import_lerc = __toESM(require_LercDecode(), 1);
      init_createTaskProcessorWorker();
      createVerticesFromHeightmap_default = createTaskProcessorWorker_default(createVerticesFromHeightmap);
    }
  });

  // packages/engine/Source/Core/TerrainProvider.js
  function TerrainProvider() {
    DeveloperError_default.throwInstantiationError();
  }
  function getEdgeIndices(width, height) {
    const westIndicesSouthToNorth = new Array(height);
    const southIndicesEastToWest = new Array(width);
    const eastIndicesNorthToSouth = new Array(height);
    const northIndicesWestToEast = new Array(width);
    let i;
    for (i = 0; i < width; ++i) {
      northIndicesWestToEast[i] = i;
      southIndicesEastToWest[i] = width * height - 1 - i;
    }
    for (i = 0; i < height; ++i) {
      eastIndicesNorthToSouth[i] = (i + 1) * width - 1;
      westIndicesSouthToNorth[i] = (height - i - 1) * width;
    }
    return {
      westIndicesSouthToNorth,
      southIndicesEastToWest,
      eastIndicesNorthToSouth,
      northIndicesWestToEast
    };
  }
  function addRegularGridIndices(width, height, indices, offset) {
    let index = 0;
    for (let j = 0; j < height - 1; ++j) {
      for (let i = 0; i < width - 1; ++i) {
        const upperLeft = index;
        const lowerLeft = upperLeft + width;
        const lowerRight = lowerLeft + 1;
        const upperRight = upperLeft + 1;
        indices[offset++] = upperLeft;
        indices[offset++] = lowerLeft;
        indices[offset++] = upperRight;
        indices[offset++] = upperRight;
        indices[offset++] = lowerLeft;
        indices[offset++] = lowerRight;
        ++index;
      }
      ++index;
    }
  }
  function addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {
    let previousIndex = edgeIndices[0];
    const length = edgeIndices.length;
    for (let i = 1; i < length; ++i) {
      const index = edgeIndices[i];
      indices[offset++] = previousIndex;
      indices[offset++] = index;
      indices[offset++] = vertexIndex;
      indices[offset++] = vertexIndex;
      indices[offset++] = index;
      indices[offset++] = vertexIndex + 1;
      previousIndex = index;
      ++vertexIndex;
    }
    return offset;
  }
  var regularGridIndicesCache, regularGridAndEdgeIndicesCache, regularGridAndSkirtAndEdgeIndicesCache, TerrainProvider_default;
  var init_TerrainProvider = __esm({
    "packages/engine/Source/Core/TerrainProvider.js"() {
      init_defined();
      init_DeveloperError();
      init_IndexDatatype();
      init_Math();
      Object.defineProperties(TerrainProvider.prototype, {
        /**
         * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing
         * to the event, you will be notified of the error and can potentially recover from it.  Event listeners
         * are passed an instance of {@link TileProviderError}.
         * @memberof TerrainProvider.prototype
         * @type {Event<TerrainProvider.ErrorEvent>}
         * @readonly
         */
        errorEvent: {
          get: DeveloperError_default.throwInstantiationError
        },
        /**
         * Gets the credit to display when this terrain provider is active.  Typically this is used to credit
         * the source of the terrain.
         * @memberof TerrainProvider.prototype
         * @type {Credit}
         * @readonly
         */
        credit: {
          get: DeveloperError_default.throwInstantiationError
        },
        /**
         * Gets the tiling scheme used by the provider.
         * @memberof TerrainProvider.prototype
         * @type {TilingScheme}
         * @readonly
         */
        tilingScheme: {
          get: DeveloperError_default.throwInstantiationError
        },
        /**
         * Gets a value indicating whether or not the provider includes a water mask.  The water mask
         * indicates which areas of the globe are water rather than land, so they can be rendered
         * as a reflective surface with animated waves.
         * @memberof TerrainProvider.prototype
         * @type {boolean}
         * @readonly
         */
        hasWaterMask: {
          get: DeveloperError_default.throwInstantiationError
        },
        /**
         * Gets a value indicating whether or not the requested tiles include vertex normals.
         * @memberof TerrainProvider.prototype
         * @type {boolean}
         * @readonly
         */
        hasVertexNormals: {
          get: DeveloperError_default.throwInstantiationError
        },
        /**
         * Gets an object that can be used to determine availability of terrain from this provider, such as
         * at points and in rectangles. This property may be undefined if availability
         * information is not available.
         * @memberof TerrainProvider.prototype
         * @type {TileAvailability}
         * @readonly
         */
        availability: {
          get: DeveloperError_default.throwInstantiationError
        }
      });
      regularGridIndicesCache = [];
      TerrainProvider.getRegularGridIndices = function(width, height) {
        if (width * height >= Math_default.FOUR_GIGABYTES) {
          throw new DeveloperError_default(
            "The total number of vertices (width * height) must be less than 4,294,967,296."
          );
        }
        let byWidth = regularGridIndicesCache[width];
        if (!defined_default(byWidth)) {
          regularGridIndicesCache[width] = byWidth = [];
        }
        let indices = byWidth[height];
        if (!defined_default(indices)) {
          if (width * height < Math_default.SIXTY_FOUR_KILOBYTES) {
            indices = byWidth[height] = new Uint16Array(
              (width - 1) * (height - 1) * 6
            );
          } else {
            indices = byWidth[height] = new Uint32Array(
              (width - 1) * (height - 1) * 6
            );
          }
          addRegularGridIndices(width, height, indices, 0);
        }
        return indices;
      };
      regularGridAndEdgeIndicesCache = [];
      TerrainProvider.getRegularGridIndicesAndEdgeIndices = function(width, height) {
        if (width * height >= Math_default.FOUR_GIGABYTES) {
          throw new DeveloperError_default(
            "The total number of vertices (width * height) must be less than 4,294,967,296."
          );
        }
        let byWidth = regularGridAndEdgeIndicesCache[width];
        if (!defined_default(byWidth)) {
          regularGridAndEdgeIndicesCache[width] = byWidth = [];
        }
        let indicesAndEdges = byWidth[height];
        if (!defined_default(indicesAndEdges)) {
          const indices = TerrainProvider.getRegularGridIndices(width, height);
          const edgeIndices = getEdgeIndices(width, height);
          const westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;
          const southIndicesEastToWest = edgeIndices.southIndicesEastToWest;
          const eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;
          const northIndicesWestToEast = edgeIndices.northIndicesWestToEast;
          indicesAndEdges = byWidth[height] = {
            indices,
            westIndicesSouthToNorth,
            southIndicesEastToWest,
            eastIndicesNorthToSouth,
            northIndicesWestToEast
          };
        }
        return indicesAndEdges;
      };
      regularGridAndSkirtAndEdgeIndicesCache = [];
      TerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function(width, height) {
        if (width * height >= Math_default.FOUR_GIGABYTES) {
          throw new DeveloperError_default(
            "The total number of vertices (width * height) must be less than 4,294,967,296."
          );
        }
        let byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];
        if (!defined_default(byWidth)) {
          regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];
        }
        let indicesAndEdges = byWidth[height];
        if (!defined_default(indicesAndEdges)) {
          const gridVertexCount = width * height;
          const gridIndexCount = (width - 1) * (height - 1) * 6;
          const edgeVertexCount = width * 2 + height * 2;
          const edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;
          const vertexCount = gridVertexCount + edgeVertexCount;
          const indexCount = gridIndexCount + edgeIndexCount;
          const edgeIndices = getEdgeIndices(width, height);
          const westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;
          const southIndicesEastToWest = edgeIndices.southIndicesEastToWest;
          const eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;
          const northIndicesWestToEast = edgeIndices.northIndicesWestToEast;
          const indices = IndexDatatype_default.createTypedArray(vertexCount, indexCount);
          addRegularGridIndices(width, height, indices, 0);
          TerrainProvider.addSkirtIndices(
            westIndicesSouthToNorth,
            southIndicesEastToWest,
            eastIndicesNorthToSouth,
            northIndicesWestToEast,
            gridVertexCount,
            indices,
            gridIndexCount
          );
          indicesAndEdges = byWidth[height] = {
            indices,
            westIndicesSouthToNorth,
            southIndicesEastToWest,
            eastIndicesNorthToSouth,
            northIndicesWestToEast,
            indexCountWithoutSkirts: gridIndexCount
          };
        }
        return indicesAndEdges;
      };
      TerrainProvider.addSkirtIndices = function(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, vertexCount, indices, offset) {
        let vertexIndex = vertexCount;
        offset = addSkirtIndices(
          westIndicesSouthToNorth,
          vertexIndex,
          indices,
          offset
        );
        vertexIndex += westIndicesSouthToNorth.length;
        offset = addSkirtIndices(
          southIndicesEastToWest,
          vertexIndex,
          indices,
          offset
        );
        vertexIndex += southIndicesEastToWest.length;
        offset = addSkirtIndices(
          eastIndicesNorthToSouth,
          vertexIndex,
          indices,
          offset
        );
        vertexIndex += eastIndicesNorthToSouth.length;
        addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);
      };
      TerrainProvider.heightmapTerrainQuality = 0.25;
      TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function(ellipsoid, tileImageWidth, numberOfTilesAtLevelZero) {
        return ellipsoid.maximumRadius * 2 * Math.PI * TerrainProvider.heightmapTerrainQuality / (tileImageWidth * numberOfTilesAtLevelZero);
      };
      TerrainProvider.prototype.requestTileGeometry = DeveloperError_default.throwInstantiationError;
      TerrainProvider.prototype.getLevelMaximumGeometricError = DeveloperError_default.throwInstantiationError;
      TerrainProvider.prototype.getTileDataAvailable = DeveloperError_default.throwInstantiationError;
      TerrainProvider.prototype.loadTileDataAvailability = DeveloperError_default.throwInstantiationError;
      TerrainProvider_default = TerrainProvider;
    }
  });

  // packages/engine/Source/Workers/createVerticesFromQuantizedTerrainMesh.js
  var createVerticesFromQuantizedTerrainMesh_exports = {};
  __export(createVerticesFromQuantizedTerrainMesh_exports, {
    default: () => createVerticesFromQuantizedTerrainMesh_default
  });
  function createVerticesFromQuantizedTerrainMesh(parameters, transferableObjects) {
    const quantizedVertices = parameters.quantizedVertices;
    const quantizedVertexCount = quantizedVertices.length / 3;
    const octEncodedNormals = parameters.octEncodedNormals;
    const edgeVertexCount = parameters.westIndices.length + parameters.eastIndices.length + parameters.southIndices.length + parameters.northIndices.length;
    const includeWebMercatorT = parameters.includeWebMercatorT;
    const exaggeration = parameters.exaggeration;
    const exaggerationRelativeHeight = parameters.exaggerationRelativeHeight;
    const hasExaggeration = exaggeration !== 1;
    const includeGeodeticSurfaceNormals = hasExaggeration;
    const rectangle = Rectangle_default.clone(parameters.rectangle);
    const west = rectangle.west;
    const south = rectangle.south;
    const east = rectangle.east;
    const north = rectangle.north;
    const ellipsoid = Ellipsoid_default.clone(parameters.ellipsoid);
    const minimumHeight = parameters.minimumHeight;
    const maximumHeight = parameters.maximumHeight;
    const center = parameters.relativeToCenter;
    const fromENU = Transforms_default.eastNorthUpToFixedFrame(center, ellipsoid);
    const toENU = Matrix4_default.inverseTransformation(fromENU, new Matrix4_default());
    let southMercatorY;
    let oneOverMercatorHeight;
    if (includeWebMercatorT) {
      southMercatorY = WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(
        south
      );
      oneOverMercatorHeight = 1 / (WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(north) - southMercatorY);
    }
    const uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);
    const vBuffer = quantizedVertices.subarray(
      quantizedVertexCount,
      2 * quantizedVertexCount
    );
    const heightBuffer = quantizedVertices.subarray(
      quantizedVertexCount * 2,
      3 * quantizedVertexCount
    );
    const hasVertexNormals = defined_default(octEncodedNormals);
    const uvs = new Array(quantizedVertexCount);
    const heights = new Array(quantizedVertexCount);
    const positions = new Array(quantizedVertexCount);
    const webMercatorTs = includeWebMercatorT ? new Array(quantizedVertexCount) : [];
    const geodeticSurfaceNormals = includeGeodeticSurfaceNormals ? new Array(quantizedVertexCount) : [];
    const minimum = scratchMinimum;
    minimum.x = Number.POSITIVE_INFINITY;
    minimum.y = Number.POSITIVE_INFINITY;
    minimum.z = Number.POSITIVE_INFINITY;
    const maximum = scratchMaximum;
    maximum.x = Number.NEGATIVE_INFINITY;
    maximum.y = Number.NEGATIVE_INFINITY;
    maximum.z = Number.NEGATIVE_INFINITY;
    let minLongitude = Number.POSITIVE_INFINITY;
    let maxLongitude = Number.NEGATIVE_INFINITY;
    let minLatitude = Number.POSITIVE_INFINITY;
    let maxLatitude = Number.NEGATIVE_INFINITY;
    for (let i = 0; i < quantizedVertexCount; ++i) {
      const rawU = uBuffer[i];
      const rawV = vBuffer[i];
      const u3 = rawU / maxShort4;
      const v3 = rawV / maxShort4;
      const height = Math_default.lerp(
        minimumHeight,
        maximumHeight,
        heightBuffer[i] / maxShort4
      );
      cartographicScratch.longitude = Math_default.lerp(west, east, u3);
      cartographicScratch.latitude = Math_default.lerp(south, north, v3);
      cartographicScratch.height = height;
      minLongitude = Math.min(cartographicScratch.longitude, minLongitude);
      maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);
      minLatitude = Math.min(cartographicScratch.latitude, minLatitude);
      maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);
      const position = ellipsoid.cartographicToCartesian(cartographicScratch);
      uvs[i] = new Cartesian2_default(u3, v3);
      heights[i] = height;
      positions[i] = position;
      if (includeWebMercatorT) {
        webMercatorTs[i] = (WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(
          cartographicScratch.latitude
        ) - southMercatorY) * oneOverMercatorHeight;
      }
      if (includeGeodeticSurfaceNormals) {
        geodeticSurfaceNormals[i] = ellipsoid.geodeticSurfaceNormal(position);
      }
      Matrix4_default.multiplyByPoint(toENU, position, cartesian3Scratch8);
      Cartesian3_default.minimumByComponent(cartesian3Scratch8, minimum, minimum);
      Cartesian3_default.maximumByComponent(cartesian3Scratch8, maximum, maximum);
    }
    const westIndicesSouthToNorth = copyAndSort(parameters.westIndices, function(a3, b) {
      return uvs[a3].y - uvs[b].y;
    });
    const eastIndicesNorthToSouth = copyAndSort(parameters.eastIndices, function(a3, b) {
      return uvs[b].y - uvs[a3].y;
    });
    const southIndicesEastToWest = copyAndSort(parameters.southIndices, function(a3, b) {
      return uvs[b].x - uvs[a3].x;
    });
    const northIndicesWestToEast = copyAndSort(parameters.northIndices, function(a3, b) {
      return uvs[a3].x - uvs[b].x;
    });
    let occludeePointInScaledSpace;
    if (minimumHeight < 0) {
      const occluder = new EllipsoidalOccluder_default(ellipsoid);
      occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(
        center,
        positions,
        minimumHeight
      );
    }
    let hMin = minimumHeight;
    hMin = Math.min(
      hMin,
      findMinMaxSkirts(
        parameters.westIndices,
        parameters.westSkirtHeight,
        heights,
        uvs,
        rectangle,
        ellipsoid,
        toENU,
        minimum,
        maximum
      )
    );
    hMin = Math.min(
      hMin,
      findMinMaxSkirts(
        parameters.southIndices,
        parameters.southSkirtHeight,
        heights,
        uvs,
        rectangle,
        ellipsoid,
        toENU,
        minimum,
        maximum
      )
    );
    hMin = Math.min(
      hMin,
      findMinMaxSkirts(
        parameters.eastIndices,
        parameters.eastSkirtHeight,
        heights,
        uvs,
        rectangle,
        ellipsoid,
        toENU,
        minimum,
        maximum
      )
    );
    hMin = Math.min(
      hMin,
      findMinMaxSkirts(
        parameters.northIndices,
        parameters.northSkirtHeight,
        heights,
        uvs,
        rectangle,
        ellipsoid,
        toENU,
        minimum,
        maximum
      )
    );
    const aaBox = new AxisAlignedBoundingBox_default(minimum, maximum, center);
    const encoding = new TerrainEncoding_default(
      center,
      aaBox,
      hMin,
      maximumHeight,
      fromENU,
      hasVertexNormals,
      includeWebMercatorT,
      includeGeodeticSurfaceNormals,
      exaggeration,
      exaggerationRelativeHeight
    );
    const vertexStride = encoding.stride;
    const size = quantizedVertexCount * vertexStride + edgeVertexCount * vertexStride;
    const vertexBuffer = new Float32Array(size);
    let bufferIndex = 0;
    for (let j = 0; j < quantizedVertexCount; ++j) {
      if (hasVertexNormals) {
        const n = j * 2;
        toPack.x = octEncodedNormals[n];
        toPack.y = octEncodedNormals[n + 1];
      }
      bufferIndex = encoding.encode(
        vertexBuffer,
        bufferIndex,
        positions[j],
        uvs[j],
        heights[j],
        toPack,
        webMercatorTs[j],
        geodeticSurfaceNormals[j]
      );
    }
    const edgeTriangleCount = Math.max(0, (edgeVertexCount - 4) * 2);
    const indexBufferLength = parameters.indices.length + edgeTriangleCount * 3;
    const indexBuffer = IndexDatatype_default.createTypedArray(
      quantizedVertexCount + edgeVertexCount,
      indexBufferLength
    );
    indexBuffer.set(parameters.indices, 0);
    const percentage = 1e-4;
    const lonOffset = (maxLongitude - minLongitude) * percentage;
    const latOffset = (maxLatitude - minLatitude) * percentage;
    const westLongitudeOffset = -lonOffset;
    const westLatitudeOffset = 0;
    const eastLongitudeOffset = lonOffset;
    const eastLatitudeOffset = 0;
    const northLongitudeOffset = 0;
    const northLatitudeOffset = latOffset;
    const southLongitudeOffset = 0;
    const southLatitudeOffset = -latOffset;
    let vertexBufferIndex = quantizedVertexCount * vertexStride;
    addSkirt2(
      vertexBuffer,
      vertexBufferIndex,
      westIndicesSouthToNorth,
      encoding,
      heights,
      uvs,
      octEncodedNormals,
      ellipsoid,
      rectangle,
      parameters.westSkirtHeight,
      southMercatorY,
      oneOverMercatorHeight,
      westLongitudeOffset,
      westLatitudeOffset
    );
    vertexBufferIndex += parameters.westIndices.length * vertexStride;
    addSkirt2(
      vertexBuffer,
      vertexBufferIndex,
      southIndicesEastToWest,
      encoding,
      heights,
      uvs,
      octEncodedNormals,
      ellipsoid,
      rectangle,
      parameters.southSkirtHeight,
      southMercatorY,
      oneOverMercatorHeight,
      southLongitudeOffset,
      southLatitudeOffset
    );
    vertexBufferIndex += parameters.southIndices.length * vertexStride;
    addSkirt2(
      vertexBuffer,
      vertexBufferIndex,
      eastIndicesNorthToSouth,
      encoding,
      heights,
      uvs,
      octEncodedNormals,
      ellipsoid,
      rectangle,
      parameters.eastSkirtHeight,
      southMercatorY,
      oneOverMercatorHeight,
      eastLongitudeOffset,
      eastLatitudeOffset
    );
    vertexBufferIndex += parameters.eastIndices.length * vertexStride;
    addSkirt2(
      vertexBuffer,
      vertexBufferIndex,
      northIndicesWestToEast,
      encoding,
      heights,
      uvs,
      octEncodedNormals,
      ellipsoid,
      rectangle,
      parameters.northSkirtHeight,
      southMercatorY,
      oneOverMercatorHeight,
      northLongitudeOffset,
      northLatitudeOffset
    );
    TerrainProvider_default.addSkirtIndices(
      westIndicesSouthToNorth,
      southIndicesEastToWest,
      eastIndicesNorthToSouth,
      northIndicesWestToEast,
      quantizedVertexCount,
      indexBuffer,
      parameters.indices.length
    );
    transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer);
    return {
      vertices: vertexBuffer.buffer,
      indices: indexBuffer.buffer,
      westIndicesSouthToNorth,
      southIndicesEastToWest,
      eastIndicesNorthToSouth,
      northIndicesWestToEast,
      vertexStride,
      center,
      minimumHeight,
      maximumHeight,
      occludeePointInScaledSpace,
      encoding,
      indexCountWithoutSkirts: parameters.indices.length
    };
  }
  function findMinMaxSkirts(edgeIndices, edgeHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum) {
    let hMin = Number.POSITIVE_INFINITY;
    const north = rectangle.north;
    const south = rectangle.south;
    let east = rectangle.east;
    const west = rectangle.west;
    if (east < west) {
      east += Math_default.TWO_PI;
    }
    const length = edgeIndices.length;
    for (let i = 0; i < length; ++i) {
      const index = edgeIndices[i];
      const h = heights[index];
      const uv = uvs[index];
      cartographicScratch.longitude = Math_default.lerp(west, east, uv.x);
      cartographicScratch.latitude = Math_default.lerp(south, north, uv.y);
      cartographicScratch.height = h - edgeHeight;
      const position = ellipsoid.cartographicToCartesian(
        cartographicScratch,
        cartesian3Scratch8
      );
      Matrix4_default.multiplyByPoint(toENU, position, position);
      Cartesian3_default.minimumByComponent(position, minimum, minimum);
      Cartesian3_default.maximumByComponent(position, maximum, maximum);
      hMin = Math.min(hMin, cartographicScratch.height);
    }
    return hMin;
  }
  function addSkirt2(vertexBuffer, vertexBufferIndex, edgeVertices, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, skirtLength, southMercatorY, oneOverMercatorHeight, longitudeOffset, latitudeOffset) {
    const hasVertexNormals = defined_default(octEncodedNormals);
    const north = rectangle.north;
    const south = rectangle.south;
    let east = rectangle.east;
    const west = rectangle.west;
    if (east < west) {
      east += Math_default.TWO_PI;
    }
    const length = edgeVertices.length;
    for (let i = 0; i < length; ++i) {
      const index = edgeVertices[i];
      const h = heights[index];
      const uv = uvs[index];
      cartographicScratch.longitude = Math_default.lerp(west, east, uv.x) + longitudeOffset;
      cartographicScratch.latitude = Math_default.lerp(south, north, uv.y) + latitudeOffset;
      cartographicScratch.height = h - skirtLength;
      const position = ellipsoid.cartographicToCartesian(
        cartographicScratch,
        cartesian3Scratch8
      );
      if (hasVertexNormals) {
        const n = index * 2;
        toPack.x = octEncodedNormals[n];
        toPack.y = octEncodedNormals[n + 1];
      }
      let webMercatorT;
      if (encoding.hasWebMercatorT) {
        webMercatorT = (WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(
          cartographicScratch.latitude
        ) - southMercatorY) * oneOverMercatorHeight;
      }
      let geodeticSurfaceNormal;
      if (encoding.hasGeodeticSurfaceNormals) {
        geodeticSurfaceNormal = ellipsoid.geodeticSurfaceNormal(position);
      }
      vertexBufferIndex = encoding.encode(
        vertexBuffer,
        vertexBufferIndex,
        position,
        uv,
        cartographicScratch.height,
        toPack,
        webMercatorT,
        geodeticSurfaceNormal
      );
    }
  }
  function copyAndSort(typedArray, comparator) {
    let copy;
    if (typeof typedArray.slice === "function") {
      copy = typedArray.slice();
      if (typeof copy.sort !== "function") {
        copy = void 0;
      }
    }
    if (!defined_default(copy)) {
      copy = Array.prototype.slice.call(typedArray);
    }
    copy.sort(comparator);
    return copy;
  }
  var maxShort4, cartesian3Scratch8, scratchMinimum, scratchMaximum, cartographicScratch, toPack, createVerticesFromQuantizedTerrainMesh_default;
  var init_createVerticesFromQuantizedTerrainMesh = __esm({
    "packages/engine/Source/Workers/createVerticesFromQuantizedTerrainMesh.js"() {
      init_AxisAlignedBoundingBox();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_defined();
      init_Ellipsoid();
      init_EllipsoidalOccluder();
      init_IndexDatatype();
      init_Math();
      init_Matrix4();
      init_Rectangle();
      init_TerrainEncoding();
      init_TerrainProvider();
      init_Transforms();
      init_WebMercatorProjection();
      init_createTaskProcessorWorker();
      maxShort4 = 32767;
      cartesian3Scratch8 = new Cartesian3_default();
      scratchMinimum = new Cartesian3_default();
      scratchMaximum = new Cartesian3_default();
      cartographicScratch = new Cartographic_default();
      toPack = new Cartesian2_default();
      createVerticesFromQuantizedTerrainMesh_default = createTaskProcessorWorker_default(
        createVerticesFromQuantizedTerrainMesh
      );
    }
  });

  // packages/engine/Source/Core/WallGeometryLibrary.js
  function latLonEquals(c0, c1) {
    return Math_default.equalsEpsilon(c0.latitude, c1.latitude, Math_default.EPSILON10) && Math_default.equalsEpsilon(c0.longitude, c1.longitude, Math_default.EPSILON10);
  }
  function removeDuplicates2(ellipsoid, positions, topHeights, bottomHeights) {
    positions = arrayRemoveDuplicates_default(positions, Cartesian3_default.equalsEpsilon);
    const length = positions.length;
    if (length < 2) {
      return;
    }
    const hasBottomHeights = defined_default(bottomHeights);
    const hasTopHeights = defined_default(topHeights);
    const cleanedPositions = new Array(length);
    const cleanedTopHeights = new Array(length);
    const cleanedBottomHeights = new Array(length);
    const v02 = positions[0];
    cleanedPositions[0] = v02;
    const c0 = ellipsoid.cartesianToCartographic(v02, scratchCartographic13);
    if (hasTopHeights) {
      c0.height = topHeights[0];
    }
    cleanedTopHeights[0] = c0.height;
    if (hasBottomHeights) {
      cleanedBottomHeights[0] = bottomHeights[0];
    } else {
      cleanedBottomHeights[0] = 0;
    }
    const startTopHeight = cleanedTopHeights[0];
    const startBottomHeight = cleanedBottomHeights[0];
    let hasAllSameHeights = startTopHeight === startBottomHeight;
    let index = 1;
    for (let i = 1; i < length; ++i) {
      const v12 = positions[i];
      const c1 = ellipsoid.cartesianToCartographic(v12, scratchCartographic23);
      if (hasTopHeights) {
        c1.height = topHeights[i];
      }
      hasAllSameHeights = hasAllSameHeights && c1.height === 0;
      if (!latLonEquals(c0, c1)) {
        cleanedPositions[index] = v12;
        cleanedTopHeights[index] = c1.height;
        if (hasBottomHeights) {
          cleanedBottomHeights[index] = bottomHeights[i];
        } else {
          cleanedBottomHeights[index] = 0;
        }
        hasAllSameHeights = hasAllSameHeights && cleanedTopHeights[index] === cleanedBottomHeights[index];
        Cartographic_default.clone(c1, c0);
        ++index;
      } else if (c0.height < c1.height) {
        cleanedTopHeights[index - 1] = c1.height;
      }
    }
    if (hasAllSameHeights || index < 2) {
      return;
    }
    cleanedPositions.length = index;
    cleanedTopHeights.length = index;
    cleanedBottomHeights.length = index;
    return {
      positions: cleanedPositions,
      topHeights: cleanedTopHeights,
      bottomHeights: cleanedBottomHeights
    };
  }
  var WallGeometryLibrary, scratchCartographic13, scratchCartographic23, positionsArrayScratch, heightsArrayScratch, generateArcOptionsScratch2, WallGeometryLibrary_default;
  var init_WallGeometryLibrary = __esm({
    "packages/engine/Source/Core/WallGeometryLibrary.js"() {
      init_arrayRemoveDuplicates();
      init_Cartesian3();
      init_Cartographic();
      init_defined();
      init_Math();
      init_PolylinePipeline();
      WallGeometryLibrary = {};
      scratchCartographic13 = new Cartographic_default();
      scratchCartographic23 = new Cartographic_default();
      positionsArrayScratch = new Array(2);
      heightsArrayScratch = new Array(2);
      generateArcOptionsScratch2 = {
        positions: void 0,
        height: void 0,
        granularity: void 0,
        ellipsoid: void 0
      };
      WallGeometryLibrary.computePositions = function(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, duplicateCorners) {
        const o = removeDuplicates2(
          ellipsoid,
          wallPositions,
          maximumHeights,
          minimumHeights
        );
        if (!defined_default(o)) {
          return;
        }
        wallPositions = o.positions;
        maximumHeights = o.topHeights;
        minimumHeights = o.bottomHeights;
        const length = wallPositions.length;
        const numCorners = length - 2;
        let topPositions;
        let bottomPositions;
        const minDistance = Math_default.chordLength(
          granularity,
          ellipsoid.maximumRadius
        );
        const generateArcOptions = generateArcOptionsScratch2;
        generateArcOptions.minDistance = minDistance;
        generateArcOptions.ellipsoid = ellipsoid;
        if (duplicateCorners) {
          let count = 0;
          let i;
          for (i = 0; i < length - 1; i++) {
            count += PolylinePipeline_default.numberOfPoints(
              wallPositions[i],
              wallPositions[i + 1],
              minDistance
            ) + 1;
          }
          topPositions = new Float64Array(count * 3);
          bottomPositions = new Float64Array(count * 3);
          const generateArcPositions = positionsArrayScratch;
          const generateArcHeights = heightsArrayScratch;
          generateArcOptions.positions = generateArcPositions;
          generateArcOptions.height = generateArcHeights;
          let offset = 0;
          for (i = 0; i < length - 1; i++) {
            generateArcPositions[0] = wallPositions[i];
            generateArcPositions[1] = wallPositions[i + 1];
            generateArcHeights[0] = maximumHeights[i];
            generateArcHeights[1] = maximumHeights[i + 1];
            const pos = PolylinePipeline_default.generateArc(generateArcOptions);
            topPositions.set(pos, offset);
            generateArcHeights[0] = minimumHeights[i];
            generateArcHeights[1] = minimumHeights[i + 1];
            bottomPositions.set(
              PolylinePipeline_default.generateArc(generateArcOptions),
              offset
            );
            offset += pos.length;
          }
        } else {
          generateArcOptions.positions = wallPositions;
          generateArcOptions.height = maximumHeights;
          topPositions = new Float64Array(
            PolylinePipeline_default.generateArc(generateArcOptions)
          );
          generateArcOptions.height = minimumHeights;
          bottomPositions = new Float64Array(
            PolylinePipeline_default.generateArc(generateArcOptions)
          );
        }
        return {
          bottomPositions,
          topPositions,
          numCorners
        };
      };
      WallGeometryLibrary_default = WallGeometryLibrary;
    }
  });

  // packages/engine/Source/Core/WallGeometry.js
  function WallGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const wallPositions = options.positions;
    const maximumHeights = options.maximumHeights;
    const minimumHeights = options.minimumHeights;
    if (!defined_default(wallPositions)) {
      throw new DeveloperError_default("options.positions is required.");
    }
    if (defined_default(maximumHeights) && maximumHeights.length !== wallPositions.length) {
      throw new DeveloperError_default(
        "options.positions and options.maximumHeights must have the same length."
      );
    }
    if (defined_default(minimumHeights) && minimumHeights.length !== wallPositions.length) {
      throw new DeveloperError_default(
        "options.positions and options.minimumHeights must have the same length."
      );
    }
    const vertexFormat = defaultValue_default(options.vertexFormat, VertexFormat_default.DEFAULT);
    const granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    this._positions = wallPositions;
    this._minimumHeights = minimumHeights;
    this._maximumHeights = maximumHeights;
    this._vertexFormat = VertexFormat_default.clone(vertexFormat);
    this._granularity = granularity;
    this._ellipsoid = Ellipsoid_default.clone(ellipsoid);
    this._workerName = "createWallGeometry";
    let numComponents = 1 + wallPositions.length * Cartesian3_default.packedLength + 2;
    if (defined_default(minimumHeights)) {
      numComponents += minimumHeights.length;
    }
    if (defined_default(maximumHeights)) {
      numComponents += maximumHeights.length;
    }
    this.packedLength = numComponents + Ellipsoid_default.packedLength + VertexFormat_default.packedLength + 1;
  }
  var scratchCartesian3Position1, scratchCartesian3Position2, scratchCartesian3Position4, scratchCartesian3Position5, scratchBitangent5, scratchTangent5, scratchNormal8, scratchEllipsoid17, scratchVertexFormat13, scratchOptions23, WallGeometry_default;
  var init_WallGeometry = __esm({
    "packages/engine/Source/Core/WallGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_IndexDatatype();
      init_Math();
      init_PrimitiveType();
      init_VertexFormat();
      init_WallGeometryLibrary();
      scratchCartesian3Position1 = new Cartesian3_default();
      scratchCartesian3Position2 = new Cartesian3_default();
      scratchCartesian3Position4 = new Cartesian3_default();
      scratchCartesian3Position5 = new Cartesian3_default();
      scratchBitangent5 = new Cartesian3_default();
      scratchTangent5 = new Cartesian3_default();
      scratchNormal8 = new Cartesian3_default();
      WallGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        const positions = value._positions;
        let length = positions.length;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          Cartesian3_default.pack(positions[i], array, startingIndex);
        }
        const minimumHeights = value._minimumHeights;
        length = defined_default(minimumHeights) ? minimumHeights.length : 0;
        array[startingIndex++] = length;
        if (defined_default(minimumHeights)) {
          for (i = 0; i < length; ++i) {
            array[startingIndex++] = minimumHeights[i];
          }
        }
        const maximumHeights = value._maximumHeights;
        length = defined_default(maximumHeights) ? maximumHeights.length : 0;
        array[startingIndex++] = length;
        if (defined_default(maximumHeights)) {
          for (i = 0; i < length; ++i) {
            array[startingIndex++] = maximumHeights[i];
          }
        }
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        VertexFormat_default.pack(value._vertexFormat, array, startingIndex);
        startingIndex += VertexFormat_default.packedLength;
        array[startingIndex] = value._granularity;
        return array;
      };
      scratchEllipsoid17 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchVertexFormat13 = new VertexFormat_default();
      scratchOptions23 = {
        positions: void 0,
        minimumHeights: void 0,
        maximumHeights: void 0,
        ellipsoid: scratchEllipsoid17,
        vertexFormat: scratchVertexFormat13,
        granularity: void 0
      };
      WallGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        let length = array[startingIndex++];
        const positions = new Array(length);
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          positions[i] = Cartesian3_default.unpack(array, startingIndex);
        }
        length = array[startingIndex++];
        let minimumHeights;
        if (length > 0) {
          minimumHeights = new Array(length);
          for (i = 0; i < length; ++i) {
            minimumHeights[i] = array[startingIndex++];
          }
        }
        length = array[startingIndex++];
        let maximumHeights;
        if (length > 0) {
          maximumHeights = new Array(length);
          for (i = 0; i < length; ++i) {
            maximumHeights[i] = array[startingIndex++];
          }
        }
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid17);
        startingIndex += Ellipsoid_default.packedLength;
        const vertexFormat = VertexFormat_default.unpack(
          array,
          startingIndex,
          scratchVertexFormat13
        );
        startingIndex += VertexFormat_default.packedLength;
        const granularity = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions23.positions = positions;
          scratchOptions23.minimumHeights = minimumHeights;
          scratchOptions23.maximumHeights = maximumHeights;
          scratchOptions23.granularity = granularity;
          return new WallGeometry(scratchOptions23);
        }
        result._positions = positions;
        result._minimumHeights = minimumHeights;
        result._maximumHeights = maximumHeights;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._vertexFormat = VertexFormat_default.clone(vertexFormat, result._vertexFormat);
        result._granularity = granularity;
        return result;
      };
      WallGeometry.fromConstantHeights = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const positions = options.positions;
        if (!defined_default(positions)) {
          throw new DeveloperError_default("options.positions is required.");
        }
        let minHeights;
        let maxHeights;
        const min3 = options.minimumHeight;
        const max3 = options.maximumHeight;
        const doMin = defined_default(min3);
        const doMax = defined_default(max3);
        if (doMin || doMax) {
          const length = positions.length;
          minHeights = doMin ? new Array(length) : void 0;
          maxHeights = doMax ? new Array(length) : void 0;
          for (let i = 0; i < length; ++i) {
            if (doMin) {
              minHeights[i] = min3;
            }
            if (doMax) {
              maxHeights[i] = max3;
            }
          }
        }
        const newOptions = {
          positions,
          maximumHeights: maxHeights,
          minimumHeights: minHeights,
          ellipsoid: options.ellipsoid,
          vertexFormat: options.vertexFormat
        };
        return new WallGeometry(newOptions);
      };
      WallGeometry.createGeometry = function(wallGeometry) {
        const wallPositions = wallGeometry._positions;
        const minimumHeights = wallGeometry._minimumHeights;
        const maximumHeights = wallGeometry._maximumHeights;
        const vertexFormat = wallGeometry._vertexFormat;
        const granularity = wallGeometry._granularity;
        const ellipsoid = wallGeometry._ellipsoid;
        const pos = WallGeometryLibrary_default.computePositions(
          ellipsoid,
          wallPositions,
          maximumHeights,
          minimumHeights,
          granularity,
          true
        );
        if (!defined_default(pos)) {
          return;
        }
        const bottomPositions = pos.bottomPositions;
        const topPositions = pos.topPositions;
        const numCorners = pos.numCorners;
        let length = topPositions.length;
        let size = length * 2;
        const positions = vertexFormat.position ? new Float64Array(size) : void 0;
        const normals = vertexFormat.normal ? new Float32Array(size) : void 0;
        const tangents = vertexFormat.tangent ? new Float32Array(size) : void 0;
        const bitangents = vertexFormat.bitangent ? new Float32Array(size) : void 0;
        const textureCoordinates = vertexFormat.st ? new Float32Array(size / 3 * 2) : void 0;
        let positionIndex = 0;
        let normalIndex = 0;
        let bitangentIndex = 0;
        let tangentIndex = 0;
        let stIndex = 0;
        let normal2 = scratchNormal8;
        let tangent = scratchTangent5;
        let bitangent = scratchBitangent5;
        let recomputeNormal = true;
        length /= 3;
        let i;
        let s = 0;
        const ds = 1 / (length - numCorners - 1);
        for (i = 0; i < length; ++i) {
          const i3 = i * 3;
          const topPosition = Cartesian3_default.fromArray(
            topPositions,
            i3,
            scratchCartesian3Position1
          );
          const bottomPosition = Cartesian3_default.fromArray(
            bottomPositions,
            i3,
            scratchCartesian3Position2
          );
          if (vertexFormat.position) {
            positions[positionIndex++] = bottomPosition.x;
            positions[positionIndex++] = bottomPosition.y;
            positions[positionIndex++] = bottomPosition.z;
            positions[positionIndex++] = topPosition.x;
            positions[positionIndex++] = topPosition.y;
            positions[positionIndex++] = topPosition.z;
          }
          if (vertexFormat.st) {
            textureCoordinates[stIndex++] = s;
            textureCoordinates[stIndex++] = 0;
            textureCoordinates[stIndex++] = s;
            textureCoordinates[stIndex++] = 1;
          }
          if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {
            let nextTop = Cartesian3_default.clone(
              Cartesian3_default.ZERO,
              scratchCartesian3Position5
            );
            const groundPosition = Cartesian3_default.subtract(
              topPosition,
              ellipsoid.geodeticSurfaceNormal(
                topPosition,
                scratchCartesian3Position2
              ),
              scratchCartesian3Position2
            );
            if (i + 1 < length) {
              nextTop = Cartesian3_default.fromArray(
                topPositions,
                i3 + 3,
                scratchCartesian3Position5
              );
            }
            if (recomputeNormal) {
              const scalednextPosition = Cartesian3_default.subtract(
                nextTop,
                topPosition,
                scratchCartesian3Position4
              );
              const scaledGroundPosition = Cartesian3_default.subtract(
                groundPosition,
                topPosition,
                scratchCartesian3Position1
              );
              normal2 = Cartesian3_default.normalize(
                Cartesian3_default.cross(scaledGroundPosition, scalednextPosition, normal2),
                normal2
              );
              recomputeNormal = false;
            }
            if (Cartesian3_default.equalsEpsilon(topPosition, nextTop, Math_default.EPSILON10)) {
              recomputeNormal = true;
            } else {
              s += ds;
              if (vertexFormat.tangent) {
                tangent = Cartesian3_default.normalize(
                  Cartesian3_default.subtract(nextTop, topPosition, tangent),
                  tangent
                );
              }
              if (vertexFormat.bitangent) {
                bitangent = Cartesian3_default.normalize(
                  Cartesian3_default.cross(normal2, tangent, bitangent),
                  bitangent
                );
              }
            }
            if (vertexFormat.normal) {
              normals[normalIndex++] = normal2.x;
              normals[normalIndex++] = normal2.y;
              normals[normalIndex++] = normal2.z;
              normals[normalIndex++] = normal2.x;
              normals[normalIndex++] = normal2.y;
              normals[normalIndex++] = normal2.z;
            }
            if (vertexFormat.tangent) {
              tangents[tangentIndex++] = tangent.x;
              tangents[tangentIndex++] = tangent.y;
              tangents[tangentIndex++] = tangent.z;
              tangents[tangentIndex++] = tangent.x;
              tangents[tangentIndex++] = tangent.y;
              tangents[tangentIndex++] = tangent.z;
            }
            if (vertexFormat.bitangent) {
              bitangents[bitangentIndex++] = bitangent.x;
              bitangents[bitangentIndex++] = bitangent.y;
              bitangents[bitangentIndex++] = bitangent.z;
              bitangents[bitangentIndex++] = bitangent.x;
              bitangents[bitangentIndex++] = bitangent.y;
              bitangents[bitangentIndex++] = bitangent.z;
            }
          }
        }
        const attributes = new GeometryAttributes_default();
        if (vertexFormat.position) {
          attributes.position = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          });
        }
        if (vertexFormat.normal) {
          attributes.normal = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 3,
            values: normals
          });
        }
        if (vertexFormat.tangent) {
          attributes.tangent = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 3,
            values: tangents
          });
        }
        if (vertexFormat.bitangent) {
          attributes.bitangent = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 3,
            values: bitangents
          });
        }
        if (vertexFormat.st) {
          attributes.st = new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.FLOAT,
            componentsPerAttribute: 2,
            values: textureCoordinates
          });
        }
        const numVertices = size / 3;
        size -= 6 * (numCorners + 1);
        const indices = IndexDatatype_default.createTypedArray(numVertices, size);
        let edgeIndex = 0;
        for (i = 0; i < numVertices - 2; i += 2) {
          const LL = i;
          const LR = i + 2;
          const pl = Cartesian3_default.fromArray(
            positions,
            LL * 3,
            scratchCartesian3Position1
          );
          const pr = Cartesian3_default.fromArray(
            positions,
            LR * 3,
            scratchCartesian3Position2
          );
          if (Cartesian3_default.equalsEpsilon(pl, pr, Math_default.EPSILON10)) {
            continue;
          }
          const UL = i + 1;
          const UR = i + 3;
          indices[edgeIndex++] = UL;
          indices[edgeIndex++] = LL;
          indices[edgeIndex++] = UR;
          indices[edgeIndex++] = UR;
          indices[edgeIndex++] = LL;
          indices[edgeIndex++] = LR;
        }
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.TRIANGLES,
          boundingSphere: new BoundingSphere_default.fromVertices(positions)
        });
      };
      WallGeometry_default = WallGeometry;
    }
  });

  // packages/engine/Source/Workers/createWallGeometry.js
  var createWallGeometry_exports = {};
  __export(createWallGeometry_exports, {
    default: () => createWallGeometry_default
  });
  function createWallGeometry(wallGeometry, offset) {
    if (defined_default(offset)) {
      wallGeometry = WallGeometry_default.unpack(wallGeometry, offset);
    }
    wallGeometry._ellipsoid = Ellipsoid_default.clone(wallGeometry._ellipsoid);
    return WallGeometry_default.createGeometry(wallGeometry);
  }
  var createWallGeometry_default;
  var init_createWallGeometry = __esm({
    "packages/engine/Source/Workers/createWallGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_WallGeometry();
      createWallGeometry_default = createWallGeometry;
    }
  });

  // packages/engine/Source/Core/WallOutlineGeometry.js
  function WallOutlineGeometry(options) {
    options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
    const wallPositions = options.positions;
    const maximumHeights = options.maximumHeights;
    const minimumHeights = options.minimumHeights;
    if (!defined_default(wallPositions)) {
      throw new DeveloperError_default("options.positions is required.");
    }
    if (defined_default(maximumHeights) && maximumHeights.length !== wallPositions.length) {
      throw new DeveloperError_default(
        "options.positions and options.maximumHeights must have the same length."
      );
    }
    if (defined_default(minimumHeights) && minimumHeights.length !== wallPositions.length) {
      throw new DeveloperError_default(
        "options.positions and options.minimumHeights must have the same length."
      );
    }
    const granularity = defaultValue_default(
      options.granularity,
      Math_default.RADIANS_PER_DEGREE
    );
    const ellipsoid = defaultValue_default(options.ellipsoid, Ellipsoid_default.WGS84);
    this._positions = wallPositions;
    this._minimumHeights = minimumHeights;
    this._maximumHeights = maximumHeights;
    this._granularity = granularity;
    this._ellipsoid = Ellipsoid_default.clone(ellipsoid);
    this._workerName = "createWallOutlineGeometry";
    let numComponents = 1 + wallPositions.length * Cartesian3_default.packedLength + 2;
    if (defined_default(minimumHeights)) {
      numComponents += minimumHeights.length;
    }
    if (defined_default(maximumHeights)) {
      numComponents += maximumHeights.length;
    }
    this.packedLength = numComponents + Ellipsoid_default.packedLength + 1;
  }
  var scratchCartesian3Position12, scratchCartesian3Position22, scratchEllipsoid18, scratchOptions24, WallOutlineGeometry_default;
  var init_WallOutlineGeometry = __esm({
    "packages/engine/Source/Core/WallOutlineGeometry.js"() {
      init_BoundingSphere();
      init_Cartesian3();
      init_ComponentDatatype();
      init_defaultValue();
      init_defined();
      init_DeveloperError();
      init_Ellipsoid();
      init_Geometry();
      init_GeometryAttribute();
      init_GeometryAttributes();
      init_IndexDatatype();
      init_Math();
      init_PrimitiveType();
      init_WallGeometryLibrary();
      scratchCartesian3Position12 = new Cartesian3_default();
      scratchCartesian3Position22 = new Cartesian3_default();
      WallOutlineGeometry.pack = function(value, array, startingIndex) {
        if (!defined_default(value)) {
          throw new DeveloperError_default("value is required");
        }
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        const positions = value._positions;
        let length = positions.length;
        array[startingIndex++] = length;
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          Cartesian3_default.pack(positions[i], array, startingIndex);
        }
        const minimumHeights = value._minimumHeights;
        length = defined_default(minimumHeights) ? minimumHeights.length : 0;
        array[startingIndex++] = length;
        if (defined_default(minimumHeights)) {
          for (i = 0; i < length; ++i) {
            array[startingIndex++] = minimumHeights[i];
          }
        }
        const maximumHeights = value._maximumHeights;
        length = defined_default(maximumHeights) ? maximumHeights.length : 0;
        array[startingIndex++] = length;
        if (defined_default(maximumHeights)) {
          for (i = 0; i < length; ++i) {
            array[startingIndex++] = maximumHeights[i];
          }
        }
        Ellipsoid_default.pack(value._ellipsoid, array, startingIndex);
        startingIndex += Ellipsoid_default.packedLength;
        array[startingIndex] = value._granularity;
        return array;
      };
      scratchEllipsoid18 = Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE);
      scratchOptions24 = {
        positions: void 0,
        minimumHeights: void 0,
        maximumHeights: void 0,
        ellipsoid: scratchEllipsoid18,
        granularity: void 0
      };
      WallOutlineGeometry.unpack = function(array, startingIndex, result) {
        if (!defined_default(array)) {
          throw new DeveloperError_default("array is required");
        }
        startingIndex = defaultValue_default(startingIndex, 0);
        let i;
        let length = array[startingIndex++];
        const positions = new Array(length);
        for (i = 0; i < length; ++i, startingIndex += Cartesian3_default.packedLength) {
          positions[i] = Cartesian3_default.unpack(array, startingIndex);
        }
        length = array[startingIndex++];
        let minimumHeights;
        if (length > 0) {
          minimumHeights = new Array(length);
          for (i = 0; i < length; ++i) {
            minimumHeights[i] = array[startingIndex++];
          }
        }
        length = array[startingIndex++];
        let maximumHeights;
        if (length > 0) {
          maximumHeights = new Array(length);
          for (i = 0; i < length; ++i) {
            maximumHeights[i] = array[startingIndex++];
          }
        }
        const ellipsoid = Ellipsoid_default.unpack(array, startingIndex, scratchEllipsoid18);
        startingIndex += Ellipsoid_default.packedLength;
        const granularity = array[startingIndex];
        if (!defined_default(result)) {
          scratchOptions24.positions = positions;
          scratchOptions24.minimumHeights = minimumHeights;
          scratchOptions24.maximumHeights = maximumHeights;
          scratchOptions24.granularity = granularity;
          return new WallOutlineGeometry(scratchOptions24);
        }
        result._positions = positions;
        result._minimumHeights = minimumHeights;
        result._maximumHeights = maximumHeights;
        result._ellipsoid = Ellipsoid_default.clone(ellipsoid, result._ellipsoid);
        result._granularity = granularity;
        return result;
      };
      WallOutlineGeometry.fromConstantHeights = function(options) {
        options = defaultValue_default(options, defaultValue_default.EMPTY_OBJECT);
        const positions = options.positions;
        if (!defined_default(positions)) {
          throw new DeveloperError_default("options.positions is required.");
        }
        let minHeights;
        let maxHeights;
        const min3 = options.minimumHeight;
        const max3 = options.maximumHeight;
        const doMin = defined_default(min3);
        const doMax = defined_default(max3);
        if (doMin || doMax) {
          const length = positions.length;
          minHeights = doMin ? new Array(length) : void 0;
          maxHeights = doMax ? new Array(length) : void 0;
          for (let i = 0; i < length; ++i) {
            if (doMin) {
              minHeights[i] = min3;
            }
            if (doMax) {
              maxHeights[i] = max3;
            }
          }
        }
        const newOptions = {
          positions,
          maximumHeights: maxHeights,
          minimumHeights: minHeights,
          ellipsoid: options.ellipsoid
        };
        return new WallOutlineGeometry(newOptions);
      };
      WallOutlineGeometry.createGeometry = function(wallGeometry) {
        const wallPositions = wallGeometry._positions;
        const minimumHeights = wallGeometry._minimumHeights;
        const maximumHeights = wallGeometry._maximumHeights;
        const granularity = wallGeometry._granularity;
        const ellipsoid = wallGeometry._ellipsoid;
        const pos = WallGeometryLibrary_default.computePositions(
          ellipsoid,
          wallPositions,
          maximumHeights,
          minimumHeights,
          granularity,
          false
        );
        if (!defined_default(pos)) {
          return;
        }
        const bottomPositions = pos.bottomPositions;
        const topPositions = pos.topPositions;
        let length = topPositions.length;
        let size = length * 2;
        const positions = new Float64Array(size);
        let positionIndex = 0;
        length /= 3;
        let i;
        for (i = 0; i < length; ++i) {
          const i3 = i * 3;
          const topPosition = Cartesian3_default.fromArray(
            topPositions,
            i3,
            scratchCartesian3Position12
          );
          const bottomPosition = Cartesian3_default.fromArray(
            bottomPositions,
            i3,
            scratchCartesian3Position22
          );
          positions[positionIndex++] = bottomPosition.x;
          positions[positionIndex++] = bottomPosition.y;
          positions[positionIndex++] = bottomPosition.z;
          positions[positionIndex++] = topPosition.x;
          positions[positionIndex++] = topPosition.y;
          positions[positionIndex++] = topPosition.z;
        }
        const attributes = new GeometryAttributes_default({
          position: new GeometryAttribute_default({
            componentDatatype: ComponentDatatype_default.DOUBLE,
            componentsPerAttribute: 3,
            values: positions
          })
        });
        const numVertices = size / 3;
        size = 2 * numVertices - 4 + numVertices;
        const indices = IndexDatatype_default.createTypedArray(numVertices, size);
        let edgeIndex = 0;
        for (i = 0; i < numVertices - 2; i += 2) {
          const LL = i;
          const LR = i + 2;
          const pl = Cartesian3_default.fromArray(
            positions,
            LL * 3,
            scratchCartesian3Position12
          );
          const pr = Cartesian3_default.fromArray(
            positions,
            LR * 3,
            scratchCartesian3Position22
          );
          if (Cartesian3_default.equalsEpsilon(pl, pr, Math_default.EPSILON10)) {
            continue;
          }
          const UL = i + 1;
          const UR = i + 3;
          indices[edgeIndex++] = UL;
          indices[edgeIndex++] = LL;
          indices[edgeIndex++] = UL;
          indices[edgeIndex++] = UR;
          indices[edgeIndex++] = LL;
          indices[edgeIndex++] = LR;
        }
        indices[edgeIndex++] = numVertices - 2;
        indices[edgeIndex++] = numVertices - 1;
        return new Geometry_default({
          attributes,
          indices,
          primitiveType: PrimitiveType_default.LINES,
          boundingSphere: new BoundingSphere_default.fromVertices(positions)
        });
      };
      WallOutlineGeometry_default = WallOutlineGeometry;
    }
  });

  // packages/engine/Source/Workers/createWallOutlineGeometry.js
  var createWallOutlineGeometry_exports = {};
  __export(createWallOutlineGeometry_exports, {
    default: () => createWallOutlineGeometry_default
  });
  function createWallOutlineGeometry(wallGeometry, offset) {
    if (defined_default(offset)) {
      wallGeometry = WallOutlineGeometry_default.unpack(wallGeometry, offset);
    }
    wallGeometry._ellipsoid = Ellipsoid_default.clone(wallGeometry._ellipsoid);
    return WallOutlineGeometry_default.createGeometry(wallGeometry);
  }
  var createWallOutlineGeometry_default;
  var init_createWallOutlineGeometry = __esm({
    "packages/engine/Source/Workers/createWallOutlineGeometry.js"() {
      init_defined();
      init_Ellipsoid();
      init_WallOutlineGeometry();
      createWallOutlineGeometry_default = createWallOutlineGeometry;
    }
  });

  // node_modules/draco3d/draco_decoder_nodejs.js
  var require_draco_decoder_nodejs = __commonJS({
    "node_modules/draco3d/draco_decoder_nodejs.js"(exports2, module) {
      var $jscomp = $jscomp || {};
      $jscomp.scope = {};
      $jscomp.arrayIteratorImpl = function(k) {
        var n = 0;
        return function() {
          return n < k.length ? { done: false, value: k[n++] } : { done: true };
        };
      };
      $jscomp.arrayIterator = function(k) {
        return { next: $jscomp.arrayIteratorImpl(k) };
      };
      $jscomp.makeIterator = function(k) {
        var n = "undefined" != typeof Symbol && Symbol.iterator && k[Symbol.iterator];
        return n ? n.call(k) : $jscomp.arrayIterator(k);
      };
      $jscomp.ASSUME_ES5 = false;
      $jscomp.ASSUME_NO_NATIVE_MAP = false;
      $jscomp.ASSUME_NO_NATIVE_SET = false;
      $jscomp.SIMPLE_FROUND_POLYFILL = false;
      $jscomp.ISOLATE_POLYFILLS = false;
      $jscomp.FORCE_POLYFILL_PROMISE = false;
      $jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = false;
      $jscomp.getGlobal = function(k) {
        k = ["object" == typeof globalThis && globalThis, k, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
        for (var n = 0; n < k.length; ++n) {
          var l = k[n];
          if (l && l.Math == Math)
            return l;
        }
        throw Error("Cannot find global object");
      };
      $jscomp.global = $jscomp.getGlobal(exports2);
      $jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(k, n, l) {
        if (k == Array.prototype || k == Object.prototype)
          return k;
        k[n] = l.value;
        return k;
      };
      $jscomp.IS_SYMBOL_NATIVE = "function" === typeof Symbol && "symbol" === typeof Symbol("x");
      $jscomp.TRUST_ES6_POLYFILLS = !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;
      $jscomp.polyfills = {};
      $jscomp.propertyToPolyfillSymbol = {};
      $jscomp.POLYFILL_PREFIX = "$jscp$";
      $jscomp.polyfill = function(k, n, l, p) {
        n && ($jscomp.ISOLATE_POLYFILLS ? $jscomp.polyfillIsolated(k, n, l, p) : $jscomp.polyfillUnisolated(k, n, l, p));
      };
      $jscomp.polyfillUnisolated = function(k, n, l, p) {
        l = $jscomp.global;
        k = k.split(".");
        for (p = 0; p < k.length - 1; p++) {
          var h = k[p];
          if (!(h in l))
            return;
          l = l[h];
        }
        k = k[k.length - 1];
        p = l[k];
        n = n(p);
        n != p && null != n && $jscomp.defineProperty(l, k, { configurable: true, writable: true, value: n });
      };
      $jscomp.polyfillIsolated = function(k, n, l, p) {
        var h = k.split(".");
        k = 1 === h.length;
        p = h[0];
        p = !k && p in $jscomp.polyfills ? $jscomp.polyfills : $jscomp.global;
        for (var A = 0; A < h.length - 1; A++) {
          var f = h[A];
          if (!(f in p))
            return;
          p = p[f];
        }
        h = h[h.length - 1];
        l = $jscomp.IS_SYMBOL_NATIVE && "es6" === l ? p[h] : null;
        n = n(l);
        null != n && (k ? $jscomp.defineProperty($jscomp.polyfills, h, { configurable: true, writable: true, value: n }) : n !== l && (void 0 === $jscomp.propertyToPolyfillSymbol[h] && (l = 1e9 * Math.random() >>> 0, $jscomp.propertyToPolyfillSymbol[h] = $jscomp.IS_SYMBOL_NATIVE ? $jscomp.global.Symbol(h) : $jscomp.POLYFILL_PREFIX + l + "$" + h), $jscomp.defineProperty(p, $jscomp.propertyToPolyfillSymbol[h], { configurable: true, writable: true, value: n })));
      };
      $jscomp.polyfill("Promise", function(k) {
        function n() {
          this.batch_ = null;
        }
        function l(f) {
          return f instanceof h ? f : new h(function(q, v3) {
            q(f);
          });
        }
        if (k && (!($jscomp.FORCE_POLYFILL_PROMISE || $jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION && "undefined" === typeof $jscomp.global.PromiseRejectionEvent) || !$jscomp.global.Promise || -1 === $jscomp.global.Promise.toString().indexOf("[native code]")))
          return k;
        n.prototype.asyncExecute = function(f) {
          if (null == this.batch_) {
            this.batch_ = [];
            var q = this;
            this.asyncExecuteFunction(function() {
              q.executeBatch_();
            });
          }
          this.batch_.push(f);
        };
        var p = $jscomp.global.setTimeout;
        n.prototype.asyncExecuteFunction = function(f) {
          p(f, 0);
        };
        n.prototype.executeBatch_ = function() {
          for (; this.batch_ && this.batch_.length; ) {
            var f = this.batch_;
            this.batch_ = [];
            for (var q = 0; q < f.length; ++q) {
              var v3 = f[q];
              f[q] = null;
              try {
                v3();
              } catch (z) {
                this.asyncThrow_(z);
              }
            }
          }
          this.batch_ = null;
        };
        n.prototype.asyncThrow_ = function(f) {
          this.asyncExecuteFunction(function() {
            throw f;
          });
        };
        var h = function(f) {
          this.state_ = 0;
          this.result_ = void 0;
          this.onSettledCallbacks_ = [];
          this.isRejectionHandled_ = false;
          var q = this.createResolveAndReject_();
          try {
            f(q.resolve, q.reject);
          } catch (v3) {
            q.reject(v3);
          }
        };
        h.prototype.createResolveAndReject_ = function() {
          function f(z) {
            return function(O) {
              v3 || (v3 = true, z.call(q, O));
            };
          }
          var q = this, v3 = false;
          return { resolve: f(this.resolveTo_), reject: f(this.reject_) };
        };
        h.prototype.resolveTo_ = function(f) {
          if (f === this)
            this.reject_(new TypeError("A Promise cannot resolve to itself"));
          else if (f instanceof h)
            this.settleSameAsPromise_(f);
          else {
            a:
              switch (typeof f) {
                case "object":
                  var q = null != f;
                  break a;
                case "function":
                  q = true;
                  break a;
                default:
                  q = false;
              }
            q ? this.resolveToNonPromiseObj_(f) : this.fulfill_(f);
          }
        };
        h.prototype.resolveToNonPromiseObj_ = function(f) {
          var q = void 0;
          try {
            q = f.then;
          } catch (v3) {
            this.reject_(v3);
            return;
          }
          "function" == typeof q ? this.settleSameAsThenable_(q, f) : this.fulfill_(f);
        };
        h.prototype.reject_ = function(f) {
          this.settle_(2, f);
        };
        h.prototype.fulfill_ = function(f) {
          this.settle_(1, f);
        };
        h.prototype.settle_ = function(f, q) {
          if (0 != this.state_)
            throw Error("Cannot settle(" + f + ", " + q + "): Promise already settled in state" + this.state_);
          this.state_ = f;
          this.result_ = q;
          2 === this.state_ && this.scheduleUnhandledRejectionCheck_();
          this.executeOnSettledCallbacks_();
        };
        h.prototype.scheduleUnhandledRejectionCheck_ = function() {
          var f = this;
          p(function() {
            if (f.notifyUnhandledRejection_()) {
              var q = $jscomp.global.console;
              "undefined" !== typeof q && q.error(f.result_);
            }
          }, 1);
        };
        h.prototype.notifyUnhandledRejection_ = function() {
          if (this.isRejectionHandled_)
            return false;
          var f = $jscomp.global.CustomEvent, q = $jscomp.global.Event, v3 = $jscomp.global.dispatchEvent;
          if ("undefined" === typeof v3)
            return true;
          "function" === typeof f ? f = new f("unhandledrejection", { cancelable: true }) : "function" === typeof q ? f = new q("unhandledrejection", { cancelable: true }) : (f = $jscomp.global.document.createEvent("CustomEvent"), f.initCustomEvent("unhandledrejection", false, true, f));
          f.promise = this;
          f.reason = this.result_;
          return v3(f);
        };
        h.prototype.executeOnSettledCallbacks_ = function() {
          if (null != this.onSettledCallbacks_) {
            for (var f = 0; f < this.onSettledCallbacks_.length; ++f)
              A.asyncExecute(this.onSettledCallbacks_[f]);
            this.onSettledCallbacks_ = null;
          }
        };
        var A = new n();
        h.prototype.settleSameAsPromise_ = function(f) {
          var q = this.createResolveAndReject_();
          f.callWhenSettled_(q.resolve, q.reject);
        };
        h.prototype.settleSameAsThenable_ = function(f, q) {
          var v3 = this.createResolveAndReject_();
          try {
            f.call(q, v3.resolve, v3.reject);
          } catch (z) {
            v3.reject(z);
          }
        };
        h.prototype.then = function(f, q) {
          function v3(t, x) {
            return "function" == typeof t ? function(D) {
              try {
                z(t(D));
              } catch (R) {
                O(R);
              }
            } : x;
          }
          var z, O, ba = new h(function(t, x) {
            z = t;
            O = x;
          });
          this.callWhenSettled_(v3(f, z), v3(q, O));
          return ba;
        };
        h.prototype.catch = function(f) {
          return this.then(void 0, f);
        };
        h.prototype.callWhenSettled_ = function(f, q) {
          function v3() {
            switch (z.state_) {
              case 1:
                f(z.result_);
                break;
              case 2:
                q(z.result_);
                break;
              default:
                throw Error("Unexpected state: " + z.state_);
            }
          }
          var z = this;
          null == this.onSettledCallbacks_ ? A.asyncExecute(v3) : this.onSettledCallbacks_.push(v3);
          this.isRejectionHandled_ = true;
        };
        h.resolve = l;
        h.reject = function(f) {
          return new h(function(q, v3) {
            v3(f);
          });
        };
        h.race = function(f) {
          return new h(function(q, v3) {
            for (var z = $jscomp.makeIterator(f), O = z.next(); !O.done; O = z.next())
              l(O.value).callWhenSettled_(q, v3);
          });
        };
        h.all = function(f) {
          var q = $jscomp.makeIterator(f), v3 = q.next();
          return v3.done ? l([]) : new h(function(z, O) {
            function ba(D) {
              return function(R) {
                t[D] = R;
                x--;
                0 == x && z(t);
              };
            }
            var t = [], x = 0;
            do
              t.push(void 0), x++, l(v3.value).callWhenSettled_(ba(t.length - 1), O), v3 = q.next();
            while (!v3.done);
          });
        };
        return h;
      }, "es6", "es3");
      $jscomp.owns = function(k, n) {
        return Object.prototype.hasOwnProperty.call(k, n);
      };
      $jscomp.assign = $jscomp.TRUST_ES6_POLYFILLS && "function" == typeof Object.assign ? Object.assign : function(k, n) {
        for (var l = 1; l < arguments.length; l++) {
          var p = arguments[l];
          if (p)
            for (var h in p)
              $jscomp.owns(p, h) && (k[h] = p[h]);
        }
        return k;
      };
      $jscomp.polyfill("Object.assign", function(k) {
        return k || $jscomp.assign;
      }, "es6", "es3");
      $jscomp.checkStringArgs = function(k, n, l) {
        if (null == k)
          throw new TypeError("The 'this' value for String.prototype." + l + " must not be null or undefined");
        if (n instanceof RegExp)
          throw new TypeError("First argument to String.prototype." + l + " must not be a regular expression");
        return k + "";
      };
      $jscomp.polyfill("String.prototype.startsWith", function(k) {
        return k ? k : function(n, l) {
          var p = $jscomp.checkStringArgs(this, n, "startsWith");
          n += "";
          var h = p.length, A = n.length;
          l = Math.max(0, Math.min(l | 0, p.length));
          for (var f = 0; f < A && l < h; )
            if (p[l++] != n[f++])
              return false;
          return f >= A;
        };
      }, "es6", "es3");
      $jscomp.polyfill("Array.prototype.copyWithin", function(k) {
        function n(l) {
          l = Number(l);
          return Infinity === l || -Infinity === l ? l : l | 0;
        }
        return k ? k : function(l, p, h) {
          var A = this.length;
          l = n(l);
          p = n(p);
          h = void 0 === h ? A : n(h);
          l = 0 > l ? Math.max(A + l, 0) : Math.min(l, A);
          p = 0 > p ? Math.max(A + p, 0) : Math.min(p, A);
          h = 0 > h ? Math.max(A + h, 0) : Math.min(h, A);
          if (l < p)
            for (; p < h; )
              p in this ? this[l++] = this[p++] : (delete this[l++], p++);
          else
            for (h = Math.min(h, A + p - l), l += h - p; h > p; )
              --h in this ? this[--l] = this[h] : delete this[--l];
          return this;
        };
      }, "es6", "es3");
      $jscomp.typedArrayCopyWithin = function(k) {
        return k ? k : Array.prototype.copyWithin;
      };
      $jscomp.polyfill("Int8Array.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      $jscomp.polyfill("Uint8Array.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      $jscomp.polyfill("Uint8ClampedArray.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      $jscomp.polyfill("Int16Array.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      $jscomp.polyfill("Uint16Array.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      $jscomp.polyfill("Int32Array.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      $jscomp.polyfill("Uint32Array.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      $jscomp.polyfill("Float32Array.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      $jscomp.polyfill("Float64Array.prototype.copyWithin", $jscomp.typedArrayCopyWithin, "es6", "es5");
      var DracoDecoderModule = function() {
        var k = "undefined" !== typeof document && document.currentScript ? document.currentScript.src : void 0;
        "undefined" !== typeof __filename && (k = k || __filename);
        return function(n) {
          function l(e) {
            return a3.locateFile ? a3.locateFile(e, U) : U + e;
          }
          function p(e, b, c) {
            var d = b + c;
            for (c = b; e[c] && !(c >= d); )
              ++c;
            if (16 < c - b && e.buffer && va)
              return va.decode(e.subarray(b, c));
            for (d = ""; b < c; ) {
              var g = e[b++];
              if (g & 128) {
                var u3 = e[b++] & 63;
                if (192 == (g & 224))
                  d += String.fromCharCode((g & 31) << 6 | u3);
                else {
                  var X = e[b++] & 63;
                  g = 224 == (g & 240) ? (g & 15) << 12 | u3 << 6 | X : (g & 7) << 18 | u3 << 12 | X << 6 | e[b++] & 63;
                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
                }
              } else
                d += String.fromCharCode(g);
            }
            return d;
          }
          function h(e, b) {
            return e ? p(ea, e, b) : "";
          }
          function A() {
            var e = ja.buffer;
            a3.HEAP8 = Y = new Int8Array(e);
            a3.HEAP16 = new Int16Array(e);
            a3.HEAP32 = ca = new Int32Array(e);
            a3.HEAPU8 = ea = new Uint8Array(e);
            a3.HEAPU16 = new Uint16Array(e);
            a3.HEAPU32 = V = new Uint32Array(e);
            a3.HEAPF32 = new Float32Array(e);
            a3.HEAPF64 = new Float64Array(e);
          }
          function f(e) {
            if (a3.onAbort)
              a3.onAbort(e);
            e = "Aborted(" + e + ")";
            da(e);
            wa = true;
            e = new WebAssembly.RuntimeError(e + ". Build with -sASSERTIONS for more info.");
            ka(e);
            throw e;
          }
          function q(e) {
            try {
              if (e == P && fa)
                return new Uint8Array(fa);
              if (ma)
                return ma(e);
              throw "both async and sync fetching of the wasm failed";
            } catch (b) {
              f(b);
            }
          }
          function v3() {
            if (!fa && (xa || ha)) {
              if ("function" == typeof fetch && !P.startsWith("file://"))
                return fetch(P, { credentials: "same-origin" }).then(function(e) {
                  if (!e.ok)
                    throw "failed to load wasm binary file at '" + P + "'";
                  return e.arrayBuffer();
                }).catch(function() {
                  return q(P);
                });
              if (na)
                return new Promise(function(e, b) {
                  na(P, function(c) {
                    e(new Uint8Array(c));
                  }, b);
                });
            }
            return Promise.resolve().then(function() {
              return q(P);
            });
          }
          function z(e) {
            for (; 0 < e.length; )
              e.shift()(a3);
          }
          function O(e) {
            this.excPtr = e;
            this.ptr = e - 24;
            this.set_type = function(b) {
              V[this.ptr + 4 >> 2] = b;
            };
            this.get_type = function() {
              return V[this.ptr + 4 >> 2];
            };
            this.set_destructor = function(b) {
              V[this.ptr + 8 >> 2] = b;
            };
            this.get_destructor = function() {
              return V[this.ptr + 8 >> 2];
            };
            this.set_refcount = function(b) {
              ca[this.ptr >> 2] = b;
            };
            this.set_caught = function(b) {
              Y[this.ptr + 12 >> 0] = b ? 1 : 0;
            };
            this.get_caught = function() {
              return 0 != Y[this.ptr + 12 >> 0];
            };
            this.set_rethrown = function(b) {
              Y[this.ptr + 13 >> 0] = b ? 1 : 0;
            };
            this.get_rethrown = function() {
              return 0 != Y[this.ptr + 13 >> 0];
            };
            this.init = function(b, c) {
              this.set_adjusted_ptr(0);
              this.set_type(b);
              this.set_destructor(c);
              this.set_refcount(0);
              this.set_caught(false);
              this.set_rethrown(false);
            };
            this.add_ref = function() {
              ca[this.ptr >> 2] += 1;
            };
            this.release_ref = function() {
              var b = ca[this.ptr >> 2];
              ca[this.ptr >> 2] = b - 1;
              return 1 === b;
            };
            this.set_adjusted_ptr = function(b) {
              V[this.ptr + 16 >> 2] = b;
            };
            this.get_adjusted_ptr = function() {
              return V[this.ptr + 16 >> 2];
            };
            this.get_exception_ptr = function() {
              if (ya(this.get_type()))
                return V[this.excPtr >> 2];
              var b = this.get_adjusted_ptr();
              return 0 !== b ? b : this.excPtr;
            };
          }
          function ba() {
            function e() {
              if (!la && (la = true, a3.calledRun = true, !wa)) {
                za = true;
                z(oa);
                Aa(a3);
                if (a3.onRuntimeInitialized)
                  a3.onRuntimeInitialized();
                if (a3.postRun)
                  for ("function" == typeof a3.postRun && (a3.postRun = [a3.postRun]); a3.postRun.length; )
                    Ba.unshift(a3.postRun.shift());
                z(Ba);
              }
            }
            if (!(0 < aa)) {
              if (a3.preRun)
                for ("function" == typeof a3.preRun && (a3.preRun = [a3.preRun]); a3.preRun.length; )
                  Ca.unshift(a3.preRun.shift());
              z(Ca);
              0 < aa || (a3.setStatus ? (a3.setStatus("Running..."), setTimeout(function() {
                setTimeout(function() {
                  a3.setStatus("");
                }, 1);
                e();
              }, 1)) : e());
            }
          }
          function t() {
          }
          function x(e) {
            return (e || t).__cache__;
          }
          function D(e, b) {
            var c = x(b), d = c[e];
            if (d)
              return d;
            d = Object.create((b || t).prototype);
            d.ptr = e;
            return c[e] = d;
          }
          function R(e) {
            if ("string" === typeof e) {
              for (var b = 0, c = 0; c < e.length; ++c) {
                var d = e.charCodeAt(c);
                127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
              }
              b = Array(b + 1);
              c = 0;
              d = b.length;
              if (0 < d) {
                d = c + d - 1;
                for (var g = 0; g < e.length; ++g) {
                  var u3 = e.charCodeAt(g);
                  if (55296 <= u3 && 57343 >= u3) {
                    var X = e.charCodeAt(++g);
                    u3 = 65536 + ((u3 & 1023) << 10) | X & 1023;
                  }
                  if (127 >= u3) {
                    if (c >= d)
                      break;
                    b[c++] = u3;
                  } else {
                    if (2047 >= u3) {
                      if (c + 1 >= d)
                        break;
                      b[c++] = 192 | u3 >> 6;
                    } else {
                      if (65535 >= u3) {
                        if (c + 2 >= d)
                          break;
                        b[c++] = 224 | u3 >> 12;
                      } else {
                        if (c + 3 >= d)
                          break;
                        b[c++] = 240 | u3 >> 18;
                        b[c++] = 128 | u3 >> 12 & 63;
                      }
                      b[c++] = 128 | u3 >> 6 & 63;
                    }
                    b[c++] = 128 | u3 & 63;
                  }
                }
                b[c] = 0;
              }
              e = r.alloc(b, Y);
              r.copy(b, Y, e);
              return e;
            }
            return e;
          }
          function pa(e) {
            if ("object" === typeof e) {
              var b = r.alloc(e, Y);
              r.copy(e, Y, b);
              return b;
            }
            return e;
          }
          function Z() {
            throw "cannot construct a VoidPtr, no constructor in IDL";
          }
          function S() {
            this.ptr = Da();
            x(S)[this.ptr] = this;
          }
          function Q() {
            this.ptr = Ea();
            x(Q)[this.ptr] = this;
          }
          function W() {
            this.ptr = Fa();
            x(W)[this.ptr] = this;
          }
          function w() {
            this.ptr = Ga();
            x(w)[this.ptr] = this;
          }
          function C() {
            this.ptr = Ha();
            x(C)[this.ptr] = this;
          }
          function F() {
            this.ptr = Ia();
            x(F)[this.ptr] = this;
          }
          function G() {
            this.ptr = Ja();
            x(G)[this.ptr] = this;
          }
          function E() {
            this.ptr = Ka();
            x(E)[this.ptr] = this;
          }
          function T() {
            this.ptr = La();
            x(T)[this.ptr] = this;
          }
          function B() {
            throw "cannot construct a Status, no constructor in IDL";
          }
          function H() {
            this.ptr = Ma();
            x(H)[this.ptr] = this;
          }
          function I() {
            this.ptr = Na();
            x(I)[this.ptr] = this;
          }
          function J() {
            this.ptr = Oa();
            x(J)[this.ptr] = this;
          }
          function K() {
            this.ptr = Pa();
            x(K)[this.ptr] = this;
          }
          function L() {
            this.ptr = Qa();
            x(L)[this.ptr] = this;
          }
          function M() {
            this.ptr = Ra();
            x(M)[this.ptr] = this;
          }
          function N() {
            this.ptr = Sa();
            x(N)[this.ptr] = this;
          }
          function y() {
            this.ptr = Ta();
            x(y)[this.ptr] = this;
          }
          function m() {
            this.ptr = Ua();
            x(m)[this.ptr] = this;
          }
          n = void 0 === n ? {} : n;
          var a3 = "undefined" != typeof n ? n : {}, Aa, ka;
          a3.ready = new Promise(function(e, b) {
            Aa = e;
            ka = b;
          });
          var Va = false, Wa = false;
          a3.onRuntimeInitialized = function() {
            Va = true;
            if (Wa && "function" === typeof a3.onModuleLoaded)
              a3.onModuleLoaded(a3);
          };
          a3.onModuleParsed = function() {
            Wa = true;
            if (Va && "function" === typeof a3.onModuleLoaded)
              a3.onModuleLoaded(a3);
          };
          a3.isVersionSupported = function(e) {
            if ("string" !== typeof e)
              return false;
            e = e.split(".");
            return 2 > e.length || 3 < e.length ? false : 1 == e[0] && 0 <= e[1] && 5 >= e[1] ? true : 0 != e[0] || 10 < e[1] ? false : true;
          };
          var Xa = Object.assign({}, a3), xa = "object" == typeof window, ha = "function" == typeof importScripts, Ya = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, U = "";
          if (Ya) {
            var Za = __require("fs"), qa = __require("path");
            U = ha ? qa.dirname(U) + "/" : __dirname + "/";
            var $a = function(e, b) {
              e = e.startsWith("file://") ? new URL(e) : qa.normalize(e);
              return Za.readFileSync(e, b ? void 0 : "utf8");
            };
            var ma = function(e) {
              e = $a(e, true);
              e.buffer || (e = new Uint8Array(e));
              return e;
            };
            var na = function(e, b, c) {
              e = e.startsWith("file://") ? new URL(e) : qa.normalize(e);
              Za.readFile(e, function(d, g) {
                d ? c(d) : b(g.buffer);
              });
            };
            1 < process.argv.length && process.argv[1].replace(/\\/g, "/");
            process.argv.slice(2);
            a3.inspect = function() {
              return "[Emscripten Module object]";
            };
          } else if (xa || ha)
            ha ? U = self.location.href : "undefined" != typeof document && document.currentScript && (U = document.currentScript.src), k && (U = k), U = 0 !== U.indexOf("blob:") ? U.substr(0, U.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", $a = function(e) {
              var b = new XMLHttpRequest();
              b.open("GET", e, false);
              b.send(null);
              return b.responseText;
            }, ha && (ma = function(e) {
              var b = new XMLHttpRequest();
              b.open("GET", e, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), na = function(e, b, c) {
              var d = new XMLHttpRequest();
              d.open("GET", e, true);
              d.responseType = "arraybuffer";
              d.onload = function() {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            };
          var ud = a3.print || console.log.bind(console), da = a3.printErr || console.warn.bind(console);
          Object.assign(a3, Xa);
          Xa = null;
          var fa;
          a3.wasmBinary && (fa = a3.wasmBinary);
          "object" != typeof WebAssembly && f("no native wasm support detected");
          var ja, wa = false, va = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Y, ea, ca, V, Ca = [], oa = [], Ba = [], za = false, aa = 0, ra = null, ia = null;
          var P = "draco_decoder.wasm";
          P.startsWith("data:application/octet-stream;base64,") || (P = l(P));
          var vd = 0, wd = [null, [], []], xd = { b: function(e, b, c) {
            new O(e).init(b, c);
            vd++;
            throw e;
          }, a: function() {
            f("");
          }, g: function(e, b, c) {
            ea.copyWithin(e, b, b + c);
          }, e: function(e) {
            var b = ea.length;
            e >>>= 0;
            if (2147483648 < e)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var d = b * (1 + 0.2 / c);
              d = Math.min(d, e + 100663296);
              var g = Math;
              d = Math.max(e, d);
              g = g.min.call(g, 2147483648, d + (65536 - d % 65536) % 65536);
              a: {
                d = ja.buffer;
                try {
                  ja.grow(g - d.byteLength + 65535 >>> 16);
                  A();
                  var u3 = 1;
                  break a;
                } catch (X) {
                }
                u3 = void 0;
              }
              if (u3)
                return true;
            }
            return false;
          }, f: function(e) {
            return 52;
          }, d: function(e, b, c, d, g) {
            return 70;
          }, c: function(e, b, c, d) {
            for (var g = 0, u3 = 0; u3 < c; u3++) {
              var X = V[b >> 2], ab = V[b + 4 >> 2];
              b += 8;
              for (var sa = 0; sa < ab; sa++) {
                var ta = ea[X + sa], ua = wd[e];
                0 === ta || 10 === ta ? ((1 === e ? ud : da)(p(ua, 0)), ua.length = 0) : ua.push(ta);
              }
              g += ab;
            }
            V[d >> 2] = g;
            return 0;
          } };
          (function() {
            function e(g, u3) {
              a3.asm = g.exports;
              ja = a3.asm.h;
              A();
              oa.unshift(a3.asm.i);
              aa--;
              a3.monitorRunDependencies && a3.monitorRunDependencies(aa);
              0 == aa && (null !== ra && (clearInterval(ra), ra = null), ia && (g = ia, ia = null, g()));
            }
            function b(g) {
              e(g.instance);
            }
            function c(g) {
              return v3().then(function(u3) {
                return WebAssembly.instantiate(u3, d);
              }).then(function(u3) {
                return u3;
              }).then(g, function(u3) {
                da("failed to asynchronously prepare wasm: " + u3);
                f(u3);
              });
            }
            var d = { a: xd };
            aa++;
            a3.monitorRunDependencies && a3.monitorRunDependencies(aa);
            if (a3.instantiateWasm)
              try {
                return a3.instantiateWasm(d, e);
              } catch (g) {
                da("Module.instantiateWasm callback failed with error: " + g), ka(g);
              }
            (function() {
              return fa || "function" != typeof WebAssembly.instantiateStreaming || P.startsWith("data:application/octet-stream;base64,") || P.startsWith("file://") || Ya || "function" != typeof fetch ? c(b) : fetch(P, { credentials: "same-origin" }).then(function(g) {
                return WebAssembly.instantiateStreaming(g, d).then(b, function(u3) {
                  da("wasm streaming compile failed: " + u3);
                  da("falling back to ArrayBuffer instantiation");
                  return c(b);
                });
              });
            })().catch(ka);
            return {};
          })();
          var bb = a3._emscripten_bind_VoidPtr___destroy___0 = function() {
            return (bb = a3._emscripten_bind_VoidPtr___destroy___0 = a3.asm.k).apply(null, arguments);
          }, Da = a3._emscripten_bind_DecoderBuffer_DecoderBuffer_0 = function() {
            return (Da = a3._emscripten_bind_DecoderBuffer_DecoderBuffer_0 = a3.asm.l).apply(null, arguments);
          }, cb = a3._emscripten_bind_DecoderBuffer_Init_2 = function() {
            return (cb = a3._emscripten_bind_DecoderBuffer_Init_2 = a3.asm.m).apply(null, arguments);
          }, db = a3._emscripten_bind_DecoderBuffer___destroy___0 = function() {
            return (db = a3._emscripten_bind_DecoderBuffer___destroy___0 = a3.asm.n).apply(null, arguments);
          }, Ea = a3._emscripten_bind_AttributeTransformData_AttributeTransformData_0 = function() {
            return (Ea = a3._emscripten_bind_AttributeTransformData_AttributeTransformData_0 = a3.asm.o).apply(null, arguments);
          }, eb = a3._emscripten_bind_AttributeTransformData_transform_type_0 = function() {
            return (eb = a3._emscripten_bind_AttributeTransformData_transform_type_0 = a3.asm.p).apply(null, arguments);
          }, fb = a3._emscripten_bind_AttributeTransformData___destroy___0 = function() {
            return (fb = a3._emscripten_bind_AttributeTransformData___destroy___0 = a3.asm.q).apply(null, arguments);
          }, Fa = a3._emscripten_bind_GeometryAttribute_GeometryAttribute_0 = function() {
            return (Fa = a3._emscripten_bind_GeometryAttribute_GeometryAttribute_0 = a3.asm.r).apply(null, arguments);
          }, gb = a3._emscripten_bind_GeometryAttribute___destroy___0 = function() {
            return (gb = a3._emscripten_bind_GeometryAttribute___destroy___0 = a3.asm.s).apply(null, arguments);
          }, Ga = a3._emscripten_bind_PointAttribute_PointAttribute_0 = function() {
            return (Ga = a3._emscripten_bind_PointAttribute_PointAttribute_0 = a3.asm.t).apply(null, arguments);
          }, hb = a3._emscripten_bind_PointAttribute_size_0 = function() {
            return (hb = a3._emscripten_bind_PointAttribute_size_0 = a3.asm.u).apply(null, arguments);
          }, ib = a3._emscripten_bind_PointAttribute_GetAttributeTransformData_0 = function() {
            return (ib = a3._emscripten_bind_PointAttribute_GetAttributeTransformData_0 = a3.asm.v).apply(null, arguments);
          }, jb = a3._emscripten_bind_PointAttribute_attribute_type_0 = function() {
            return (jb = a3._emscripten_bind_PointAttribute_attribute_type_0 = a3.asm.w).apply(null, arguments);
          }, kb = a3._emscripten_bind_PointAttribute_data_type_0 = function() {
            return (kb = a3._emscripten_bind_PointAttribute_data_type_0 = a3.asm.x).apply(null, arguments);
          }, lb = a3._emscripten_bind_PointAttribute_num_components_0 = function() {
            return (lb = a3._emscripten_bind_PointAttribute_num_components_0 = a3.asm.y).apply(null, arguments);
          }, mb = a3._emscripten_bind_PointAttribute_normalized_0 = function() {
            return (mb = a3._emscripten_bind_PointAttribute_normalized_0 = a3.asm.z).apply(null, arguments);
          }, nb = a3._emscripten_bind_PointAttribute_byte_stride_0 = function() {
            return (nb = a3._emscripten_bind_PointAttribute_byte_stride_0 = a3.asm.A).apply(null, arguments);
          }, ob = a3._emscripten_bind_PointAttribute_byte_offset_0 = function() {
            return (ob = a3._emscripten_bind_PointAttribute_byte_offset_0 = a3.asm.B).apply(null, arguments);
          }, pb = a3._emscripten_bind_PointAttribute_unique_id_0 = function() {
            return (pb = a3._emscripten_bind_PointAttribute_unique_id_0 = a3.asm.C).apply(null, arguments);
          }, qb = a3._emscripten_bind_PointAttribute___destroy___0 = function() {
            return (qb = a3._emscripten_bind_PointAttribute___destroy___0 = a3.asm.D).apply(null, arguments);
          }, Ha = a3._emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0 = function() {
            return (Ha = a3._emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0 = a3.asm.E).apply(null, arguments);
          }, rb = a3._emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1 = function() {
            return (rb = a3._emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1 = a3.asm.F).apply(null, arguments);
          }, sb = a3._emscripten_bind_AttributeQuantizationTransform_quantization_bits_0 = function() {
            return (sb = a3._emscripten_bind_AttributeQuantizationTransform_quantization_bits_0 = a3.asm.G).apply(null, arguments);
          }, tb = a3._emscripten_bind_AttributeQuantizationTransform_min_value_1 = function() {
            return (tb = a3._emscripten_bind_AttributeQuantizationTransform_min_value_1 = a3.asm.H).apply(null, arguments);
          }, ub = a3._emscripten_bind_AttributeQuantizationTransform_range_0 = function() {
            return (ub = a3._emscripten_bind_AttributeQuantizationTransform_range_0 = a3.asm.I).apply(null, arguments);
          }, vb = a3._emscripten_bind_AttributeQuantizationTransform___destroy___0 = function() {
            return (vb = a3._emscripten_bind_AttributeQuantizationTransform___destroy___0 = a3.asm.J).apply(null, arguments);
          }, Ia = a3._emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0 = function() {
            return (Ia = a3._emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0 = a3.asm.K).apply(null, arguments);
          }, wb = a3._emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1 = function() {
            return (wb = a3._emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1 = a3.asm.L).apply(
              null,
              arguments
            );
          }, xb = a3._emscripten_bind_AttributeOctahedronTransform_quantization_bits_0 = function() {
            return (xb = a3._emscripten_bind_AttributeOctahedronTransform_quantization_bits_0 = a3.asm.M).apply(null, arguments);
          }, yb = a3._emscripten_bind_AttributeOctahedronTransform___destroy___0 = function() {
            return (yb = a3._emscripten_bind_AttributeOctahedronTransform___destroy___0 = a3.asm.N).apply(null, arguments);
          }, Ja = a3._emscripten_bind_PointCloud_PointCloud_0 = function() {
            return (Ja = a3._emscripten_bind_PointCloud_PointCloud_0 = a3.asm.O).apply(
              null,
              arguments
            );
          }, zb = a3._emscripten_bind_PointCloud_num_attributes_0 = function() {
            return (zb = a3._emscripten_bind_PointCloud_num_attributes_0 = a3.asm.P).apply(null, arguments);
          }, Ab = a3._emscripten_bind_PointCloud_num_points_0 = function() {
            return (Ab = a3._emscripten_bind_PointCloud_num_points_0 = a3.asm.Q).apply(null, arguments);
          }, Bb = a3._emscripten_bind_PointCloud___destroy___0 = function() {
            return (Bb = a3._emscripten_bind_PointCloud___destroy___0 = a3.asm.R).apply(null, arguments);
          }, Ka = a3._emscripten_bind_Mesh_Mesh_0 = function() {
            return (Ka = a3._emscripten_bind_Mesh_Mesh_0 = a3.asm.S).apply(null, arguments);
          }, Cb = a3._emscripten_bind_Mesh_num_faces_0 = function() {
            return (Cb = a3._emscripten_bind_Mesh_num_faces_0 = a3.asm.T).apply(null, arguments);
          }, Db = a3._emscripten_bind_Mesh_num_attributes_0 = function() {
            return (Db = a3._emscripten_bind_Mesh_num_attributes_0 = a3.asm.U).apply(null, arguments);
          }, Eb = a3._emscripten_bind_Mesh_num_points_0 = function() {
            return (Eb = a3._emscripten_bind_Mesh_num_points_0 = a3.asm.V).apply(null, arguments);
          }, Fb = a3._emscripten_bind_Mesh___destroy___0 = function() {
            return (Fb = a3._emscripten_bind_Mesh___destroy___0 = a3.asm.W).apply(null, arguments);
          }, La = a3._emscripten_bind_Metadata_Metadata_0 = function() {
            return (La = a3._emscripten_bind_Metadata_Metadata_0 = a3.asm.X).apply(null, arguments);
          }, Gb = a3._emscripten_bind_Metadata___destroy___0 = function() {
            return (Gb = a3._emscripten_bind_Metadata___destroy___0 = a3.asm.Y).apply(null, arguments);
          }, Hb = a3._emscripten_bind_Status_code_0 = function() {
            return (Hb = a3._emscripten_bind_Status_code_0 = a3.asm.Z).apply(null, arguments);
          }, Ib = a3._emscripten_bind_Status_ok_0 = function() {
            return (Ib = a3._emscripten_bind_Status_ok_0 = a3.asm._).apply(null, arguments);
          }, Jb = a3._emscripten_bind_Status_error_msg_0 = function() {
            return (Jb = a3._emscripten_bind_Status_error_msg_0 = a3.asm.$).apply(null, arguments);
          }, Kb = a3._emscripten_bind_Status___destroy___0 = function() {
            return (Kb = a3._emscripten_bind_Status___destroy___0 = a3.asm.aa).apply(null, arguments);
          }, Ma = a3._emscripten_bind_DracoFloat32Array_DracoFloat32Array_0 = function() {
            return (Ma = a3._emscripten_bind_DracoFloat32Array_DracoFloat32Array_0 = a3.asm.ba).apply(null, arguments);
          }, Lb = a3._emscripten_bind_DracoFloat32Array_GetValue_1 = function() {
            return (Lb = a3._emscripten_bind_DracoFloat32Array_GetValue_1 = a3.asm.ca).apply(null, arguments);
          }, Mb = a3._emscripten_bind_DracoFloat32Array_size_0 = function() {
            return (Mb = a3._emscripten_bind_DracoFloat32Array_size_0 = a3.asm.da).apply(null, arguments);
          }, Nb = a3._emscripten_bind_DracoFloat32Array___destroy___0 = function() {
            return (Nb = a3._emscripten_bind_DracoFloat32Array___destroy___0 = a3.asm.ea).apply(null, arguments);
          }, Na = a3._emscripten_bind_DracoInt8Array_DracoInt8Array_0 = function() {
            return (Na = a3._emscripten_bind_DracoInt8Array_DracoInt8Array_0 = a3.asm.fa).apply(null, arguments);
          }, Ob = a3._emscripten_bind_DracoInt8Array_GetValue_1 = function() {
            return (Ob = a3._emscripten_bind_DracoInt8Array_GetValue_1 = a3.asm.ga).apply(null, arguments);
          }, Pb = a3._emscripten_bind_DracoInt8Array_size_0 = function() {
            return (Pb = a3._emscripten_bind_DracoInt8Array_size_0 = a3.asm.ha).apply(null, arguments);
          }, Qb = a3._emscripten_bind_DracoInt8Array___destroy___0 = function() {
            return (Qb = a3._emscripten_bind_DracoInt8Array___destroy___0 = a3.asm.ia).apply(null, arguments);
          }, Oa = a3._emscripten_bind_DracoUInt8Array_DracoUInt8Array_0 = function() {
            return (Oa = a3._emscripten_bind_DracoUInt8Array_DracoUInt8Array_0 = a3.asm.ja).apply(null, arguments);
          }, Rb = a3._emscripten_bind_DracoUInt8Array_GetValue_1 = function() {
            return (Rb = a3._emscripten_bind_DracoUInt8Array_GetValue_1 = a3.asm.ka).apply(null, arguments);
          }, Sb = a3._emscripten_bind_DracoUInt8Array_size_0 = function() {
            return (Sb = a3._emscripten_bind_DracoUInt8Array_size_0 = a3.asm.la).apply(null, arguments);
          }, Tb = a3._emscripten_bind_DracoUInt8Array___destroy___0 = function() {
            return (Tb = a3._emscripten_bind_DracoUInt8Array___destroy___0 = a3.asm.ma).apply(null, arguments);
          }, Pa = a3._emscripten_bind_DracoInt16Array_DracoInt16Array_0 = function() {
            return (Pa = a3._emscripten_bind_DracoInt16Array_DracoInt16Array_0 = a3.asm.na).apply(null, arguments);
          }, Ub = a3._emscripten_bind_DracoInt16Array_GetValue_1 = function() {
            return (Ub = a3._emscripten_bind_DracoInt16Array_GetValue_1 = a3.asm.oa).apply(null, arguments);
          }, Vb = a3._emscripten_bind_DracoInt16Array_size_0 = function() {
            return (Vb = a3._emscripten_bind_DracoInt16Array_size_0 = a3.asm.pa).apply(null, arguments);
          }, Wb = a3._emscripten_bind_DracoInt16Array___destroy___0 = function() {
            return (Wb = a3._emscripten_bind_DracoInt16Array___destroy___0 = a3.asm.qa).apply(null, arguments);
          }, Qa = a3._emscripten_bind_DracoUInt16Array_DracoUInt16Array_0 = function() {
            return (Qa = a3._emscripten_bind_DracoUInt16Array_DracoUInt16Array_0 = a3.asm.ra).apply(null, arguments);
          }, Xb = a3._emscripten_bind_DracoUInt16Array_GetValue_1 = function() {
            return (Xb = a3._emscripten_bind_DracoUInt16Array_GetValue_1 = a3.asm.sa).apply(null, arguments);
          }, Yb = a3._emscripten_bind_DracoUInt16Array_size_0 = function() {
            return (Yb = a3._emscripten_bind_DracoUInt16Array_size_0 = a3.asm.ta).apply(null, arguments);
          }, Zb = a3._emscripten_bind_DracoUInt16Array___destroy___0 = function() {
            return (Zb = a3._emscripten_bind_DracoUInt16Array___destroy___0 = a3.asm.ua).apply(null, arguments);
          }, Ra = a3._emscripten_bind_DracoInt32Array_DracoInt32Array_0 = function() {
            return (Ra = a3._emscripten_bind_DracoInt32Array_DracoInt32Array_0 = a3.asm.va).apply(null, arguments);
          }, $b = a3._emscripten_bind_DracoInt32Array_GetValue_1 = function() {
            return ($b = a3._emscripten_bind_DracoInt32Array_GetValue_1 = a3.asm.wa).apply(null, arguments);
          }, ac = a3._emscripten_bind_DracoInt32Array_size_0 = function() {
            return (ac = a3._emscripten_bind_DracoInt32Array_size_0 = a3.asm.xa).apply(null, arguments);
          }, bc = a3._emscripten_bind_DracoInt32Array___destroy___0 = function() {
            return (bc = a3._emscripten_bind_DracoInt32Array___destroy___0 = a3.asm.ya).apply(null, arguments);
          }, Sa = a3._emscripten_bind_DracoUInt32Array_DracoUInt32Array_0 = function() {
            return (Sa = a3._emscripten_bind_DracoUInt32Array_DracoUInt32Array_0 = a3.asm.za).apply(null, arguments);
          }, cc = a3._emscripten_bind_DracoUInt32Array_GetValue_1 = function() {
            return (cc = a3._emscripten_bind_DracoUInt32Array_GetValue_1 = a3.asm.Aa).apply(null, arguments);
          }, dc = a3._emscripten_bind_DracoUInt32Array_size_0 = function() {
            return (dc = a3._emscripten_bind_DracoUInt32Array_size_0 = a3.asm.Ba).apply(null, arguments);
          }, ec = a3._emscripten_bind_DracoUInt32Array___destroy___0 = function() {
            return (ec = a3._emscripten_bind_DracoUInt32Array___destroy___0 = a3.asm.Ca).apply(null, arguments);
          }, Ta = a3._emscripten_bind_MetadataQuerier_MetadataQuerier_0 = function() {
            return (Ta = a3._emscripten_bind_MetadataQuerier_MetadataQuerier_0 = a3.asm.Da).apply(null, arguments);
          }, fc = a3._emscripten_bind_MetadataQuerier_HasEntry_2 = function() {
            return (fc = a3._emscripten_bind_MetadataQuerier_HasEntry_2 = a3.asm.Ea).apply(null, arguments);
          }, gc = a3._emscripten_bind_MetadataQuerier_GetIntEntry_2 = function() {
            return (gc = a3._emscripten_bind_MetadataQuerier_GetIntEntry_2 = a3.asm.Fa).apply(null, arguments);
          }, hc = a3._emscripten_bind_MetadataQuerier_GetIntEntryArray_3 = function() {
            return (hc = a3._emscripten_bind_MetadataQuerier_GetIntEntryArray_3 = a3.asm.Ga).apply(null, arguments);
          }, ic = a3._emscripten_bind_MetadataQuerier_GetDoubleEntry_2 = function() {
            return (ic = a3._emscripten_bind_MetadataQuerier_GetDoubleEntry_2 = a3.asm.Ha).apply(null, arguments);
          }, jc = a3._emscripten_bind_MetadataQuerier_GetStringEntry_2 = function() {
            return (jc = a3._emscripten_bind_MetadataQuerier_GetStringEntry_2 = a3.asm.Ia).apply(null, arguments);
          }, kc = a3._emscripten_bind_MetadataQuerier_NumEntries_1 = function() {
            return (kc = a3._emscripten_bind_MetadataQuerier_NumEntries_1 = a3.asm.Ja).apply(null, arguments);
          }, lc = a3._emscripten_bind_MetadataQuerier_GetEntryName_2 = function() {
            return (lc = a3._emscripten_bind_MetadataQuerier_GetEntryName_2 = a3.asm.Ka).apply(null, arguments);
          }, mc = a3._emscripten_bind_MetadataQuerier___destroy___0 = function() {
            return (mc = a3._emscripten_bind_MetadataQuerier___destroy___0 = a3.asm.La).apply(null, arguments);
          }, Ua = a3._emscripten_bind_Decoder_Decoder_0 = function() {
            return (Ua = a3._emscripten_bind_Decoder_Decoder_0 = a3.asm.Ma).apply(null, arguments);
          }, nc = a3._emscripten_bind_Decoder_DecodeArrayToPointCloud_3 = function() {
            return (nc = a3._emscripten_bind_Decoder_DecodeArrayToPointCloud_3 = a3.asm.Na).apply(null, arguments);
          }, oc = a3._emscripten_bind_Decoder_DecodeArrayToMesh_3 = function() {
            return (oc = a3._emscripten_bind_Decoder_DecodeArrayToMesh_3 = a3.asm.Oa).apply(null, arguments);
          }, pc = a3._emscripten_bind_Decoder_GetAttributeId_2 = function() {
            return (pc = a3._emscripten_bind_Decoder_GetAttributeId_2 = a3.asm.Pa).apply(null, arguments);
          }, qc = a3._emscripten_bind_Decoder_GetAttributeIdByName_2 = function() {
            return (qc = a3._emscripten_bind_Decoder_GetAttributeIdByName_2 = a3.asm.Qa).apply(null, arguments);
          }, rc = a3._emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3 = function() {
            return (rc = a3._emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3 = a3.asm.Ra).apply(null, arguments);
          }, sc = a3._emscripten_bind_Decoder_GetAttribute_2 = function() {
            return (sc = a3._emscripten_bind_Decoder_GetAttribute_2 = a3.asm.Sa).apply(null, arguments);
          }, tc = a3._emscripten_bind_Decoder_GetAttributeByUniqueId_2 = function() {
            return (tc = a3._emscripten_bind_Decoder_GetAttributeByUniqueId_2 = a3.asm.Ta).apply(null, arguments);
          }, uc = a3._emscripten_bind_Decoder_GetMetadata_1 = function() {
            return (uc = a3._emscripten_bind_Decoder_GetMetadata_1 = a3.asm.Ua).apply(null, arguments);
          }, vc = a3._emscripten_bind_Decoder_GetAttributeMetadata_2 = function() {
            return (vc = a3._emscripten_bind_Decoder_GetAttributeMetadata_2 = a3.asm.Va).apply(null, arguments);
          }, wc = a3._emscripten_bind_Decoder_GetFaceFromMesh_3 = function() {
            return (wc = a3._emscripten_bind_Decoder_GetFaceFromMesh_3 = a3.asm.Wa).apply(null, arguments);
          }, xc = a3._emscripten_bind_Decoder_GetTriangleStripsFromMesh_2 = function() {
            return (xc = a3._emscripten_bind_Decoder_GetTriangleStripsFromMesh_2 = a3.asm.Xa).apply(null, arguments);
          }, yc = a3._emscripten_bind_Decoder_GetTrianglesUInt16Array_3 = function() {
            return (yc = a3._emscripten_bind_Decoder_GetTrianglesUInt16Array_3 = a3.asm.Ya).apply(null, arguments);
          }, zc = a3._emscripten_bind_Decoder_GetTrianglesUInt32Array_3 = function() {
            return (zc = a3._emscripten_bind_Decoder_GetTrianglesUInt32Array_3 = a3.asm.Za).apply(null, arguments);
          }, Ac = a3._emscripten_bind_Decoder_GetAttributeFloat_3 = function() {
            return (Ac = a3._emscripten_bind_Decoder_GetAttributeFloat_3 = a3.asm._a).apply(null, arguments);
          }, Bc = a3._emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3 = function() {
            return (Bc = a3._emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3 = a3.asm.$a).apply(null, arguments);
          }, Cc = a3._emscripten_bind_Decoder_GetAttributeIntForAllPoints_3 = function() {
            return (Cc = a3._emscripten_bind_Decoder_GetAttributeIntForAllPoints_3 = a3.asm.ab).apply(null, arguments);
          }, Dc = a3._emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3 = function() {
            return (Dc = a3._emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3 = a3.asm.bb).apply(null, arguments);
          }, Ec = a3._emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3 = function() {
            return (Ec = a3._emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3 = a3.asm.cb).apply(null, arguments);
          }, Fc = a3._emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3 = function() {
            return (Fc = a3._emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3 = a3.asm.db).apply(null, arguments);
          }, Gc = a3._emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3 = function() {
            return (Gc = a3._emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3 = a3.asm.eb).apply(null, arguments);
          }, Hc = a3._emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3 = function() {
            return (Hc = a3._emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3 = a3.asm.fb).apply(null, arguments);
          }, Ic = a3._emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3 = function() {
            return (Ic = a3._emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3 = a3.asm.gb).apply(null, arguments);
          }, Jc = a3._emscripten_bind_Decoder_GetAttributeDataArrayForAllPoints_5 = function() {
            return (Jc = a3._emscripten_bind_Decoder_GetAttributeDataArrayForAllPoints_5 = a3.asm.hb).apply(null, arguments);
          }, Kc = a3._emscripten_bind_Decoder_SkipAttributeTransform_1 = function() {
            return (Kc = a3._emscripten_bind_Decoder_SkipAttributeTransform_1 = a3.asm.ib).apply(null, arguments);
          }, Lc = a3._emscripten_bind_Decoder_GetEncodedGeometryType_Deprecated_1 = function() {
            return (Lc = a3._emscripten_bind_Decoder_GetEncodedGeometryType_Deprecated_1 = a3.asm.jb).apply(null, arguments);
          }, Mc = a3._emscripten_bind_Decoder_DecodeBufferToPointCloud_2 = function() {
            return (Mc = a3._emscripten_bind_Decoder_DecodeBufferToPointCloud_2 = a3.asm.kb).apply(null, arguments);
          }, Nc = a3._emscripten_bind_Decoder_DecodeBufferToMesh_2 = function() {
            return (Nc = a3._emscripten_bind_Decoder_DecodeBufferToMesh_2 = a3.asm.lb).apply(null, arguments);
          }, Oc = a3._emscripten_bind_Decoder___destroy___0 = function() {
            return (Oc = a3._emscripten_bind_Decoder___destroy___0 = a3.asm.mb).apply(null, arguments);
          }, Pc = a3._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM = function() {
            return (Pc = a3._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM = a3.asm.nb).apply(null, arguments);
          }, Qc = a3._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM = function() {
            return (Qc = a3._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM = a3.asm.ob).apply(null, arguments);
          }, Rc = a3._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM = function() {
            return (Rc = a3._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM = a3.asm.pb).apply(null, arguments);
          }, Sc = a3._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM = function() {
            return (Sc = a3._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM = a3.asm.qb).apply(null, arguments);
          }, Tc = a3._emscripten_enum_draco_GeometryAttribute_Type_INVALID = function() {
            return (Tc = a3._emscripten_enum_draco_GeometryAttribute_Type_INVALID = a3.asm.rb).apply(null, arguments);
          }, Uc = a3._emscripten_enum_draco_GeometryAttribute_Type_POSITION = function() {
            return (Uc = a3._emscripten_enum_draco_GeometryAttribute_Type_POSITION = a3.asm.sb).apply(null, arguments);
          }, Vc = a3._emscripten_enum_draco_GeometryAttribute_Type_NORMAL = function() {
            return (Vc = a3._emscripten_enum_draco_GeometryAttribute_Type_NORMAL = a3.asm.tb).apply(null, arguments);
          }, Wc = a3._emscripten_enum_draco_GeometryAttribute_Type_COLOR = function() {
            return (Wc = a3._emscripten_enum_draco_GeometryAttribute_Type_COLOR = a3.asm.ub).apply(null, arguments);
          }, Xc = a3._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD = function() {
            return (Xc = a3._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD = a3.asm.vb).apply(null, arguments);
          }, Yc = a3._emscripten_enum_draco_GeometryAttribute_Type_GENERIC = function() {
            return (Yc = a3._emscripten_enum_draco_GeometryAttribute_Type_GENERIC = a3.asm.wb).apply(null, arguments);
          }, Zc = a3._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE = function() {
            return (Zc = a3._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE = a3.asm.xb).apply(null, arguments);
          }, $c = a3._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD = function() {
            return ($c = a3._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD = a3.asm.yb).apply(null, arguments);
          }, ad = a3._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH = function() {
            return (ad = a3._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH = a3.asm.zb).apply(null, arguments);
          }, bd = a3._emscripten_enum_draco_DataType_DT_INVALID = function() {
            return (bd = a3._emscripten_enum_draco_DataType_DT_INVALID = a3.asm.Ab).apply(null, arguments);
          }, cd = a3._emscripten_enum_draco_DataType_DT_INT8 = function() {
            return (cd = a3._emscripten_enum_draco_DataType_DT_INT8 = a3.asm.Bb).apply(null, arguments);
          }, dd = a3._emscripten_enum_draco_DataType_DT_UINT8 = function() {
            return (dd = a3._emscripten_enum_draco_DataType_DT_UINT8 = a3.asm.Cb).apply(null, arguments);
          }, ed = a3._emscripten_enum_draco_DataType_DT_INT16 = function() {
            return (ed = a3._emscripten_enum_draco_DataType_DT_INT16 = a3.asm.Db).apply(null, arguments);
          }, fd = a3._emscripten_enum_draco_DataType_DT_UINT16 = function() {
            return (fd = a3._emscripten_enum_draco_DataType_DT_UINT16 = a3.asm.Eb).apply(null, arguments);
          }, gd = a3._emscripten_enum_draco_DataType_DT_INT32 = function() {
            return (gd = a3._emscripten_enum_draco_DataType_DT_INT32 = a3.asm.Fb).apply(null, arguments);
          }, hd = a3._emscripten_enum_draco_DataType_DT_UINT32 = function() {
            return (hd = a3._emscripten_enum_draco_DataType_DT_UINT32 = a3.asm.Gb).apply(null, arguments);
          }, id = a3._emscripten_enum_draco_DataType_DT_INT64 = function() {
            return (id = a3._emscripten_enum_draco_DataType_DT_INT64 = a3.asm.Hb).apply(null, arguments);
          }, jd = a3._emscripten_enum_draco_DataType_DT_UINT64 = function() {
            return (jd = a3._emscripten_enum_draco_DataType_DT_UINT64 = a3.asm.Ib).apply(null, arguments);
          }, kd = a3._emscripten_enum_draco_DataType_DT_FLOAT32 = function() {
            return (kd = a3._emscripten_enum_draco_DataType_DT_FLOAT32 = a3.asm.Jb).apply(
              null,
              arguments
            );
          }, ld = a3._emscripten_enum_draco_DataType_DT_FLOAT64 = function() {
            return (ld = a3._emscripten_enum_draco_DataType_DT_FLOAT64 = a3.asm.Kb).apply(null, arguments);
          }, md = a3._emscripten_enum_draco_DataType_DT_BOOL = function() {
            return (md = a3._emscripten_enum_draco_DataType_DT_BOOL = a3.asm.Lb).apply(null, arguments);
          }, nd = a3._emscripten_enum_draco_DataType_DT_TYPES_COUNT = function() {
            return (nd = a3._emscripten_enum_draco_DataType_DT_TYPES_COUNT = a3.asm.Mb).apply(null, arguments);
          }, od = a3._emscripten_enum_draco_StatusCode_OK = function() {
            return (od = a3._emscripten_enum_draco_StatusCode_OK = a3.asm.Nb).apply(null, arguments);
          }, pd = a3._emscripten_enum_draco_StatusCode_DRACO_ERROR = function() {
            return (pd = a3._emscripten_enum_draco_StatusCode_DRACO_ERROR = a3.asm.Ob).apply(null, arguments);
          }, qd = a3._emscripten_enum_draco_StatusCode_IO_ERROR = function() {
            return (qd = a3._emscripten_enum_draco_StatusCode_IO_ERROR = a3.asm.Pb).apply(null, arguments);
          }, rd = a3._emscripten_enum_draco_StatusCode_INVALID_PARAMETER = function() {
            return (rd = a3._emscripten_enum_draco_StatusCode_INVALID_PARAMETER = a3.asm.Qb).apply(null, arguments);
          }, sd = a3._emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION = function() {
            return (sd = a3._emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION = a3.asm.Rb).apply(null, arguments);
          }, td = a3._emscripten_enum_draco_StatusCode_UNKNOWN_VERSION = function() {
            return (td = a3._emscripten_enum_draco_StatusCode_UNKNOWN_VERSION = a3.asm.Sb).apply(null, arguments);
          };
          a3._malloc = function() {
            return (a3._malloc = a3.asm.Tb).apply(null, arguments);
          };
          a3._free = function() {
            return (a3._free = a3.asm.Ub).apply(null, arguments);
          };
          var ya = function() {
            return (ya = a3.asm.Vb).apply(null, arguments);
          };
          a3.___start_em_js = 15856;
          a3.___stop_em_js = 15954;
          var la;
          ia = function b() {
            la || ba();
            la || (ia = b);
          };
          if (a3.preInit)
            for ("function" == typeof a3.preInit && (a3.preInit = [a3.preInit]); 0 < a3.preInit.length; )
              a3.preInit.pop()();
          ba();
          t.prototype = Object.create(t.prototype);
          t.prototype.constructor = t;
          t.prototype.__class__ = t;
          t.__cache__ = {};
          a3.WrapperObject = t;
          a3.getCache = x;
          a3.wrapPointer = D;
          a3.castObject = function(b, c) {
            return D(b.ptr, c);
          };
          a3.NULL = D(0);
          a3.destroy = function(b) {
            if (!b.__destroy__)
              throw "Error: Cannot destroy object. (Did you create it yourself?)";
            b.__destroy__();
            delete x(b.__class__)[b.ptr];
          };
          a3.compare = function(b, c) {
            return b.ptr === c.ptr;
          };
          a3.getPointer = function(b) {
            return b.ptr;
          };
          a3.getClass = function(b) {
            return b.__class__;
          };
          var r = { buffer: 0, size: 0, pos: 0, temps: [], needed: 0, prepare: function() {
            if (r.needed) {
              for (var b = 0; b < r.temps.length; b++)
                a3._free(r.temps[b]);
              r.temps.length = 0;
              a3._free(r.buffer);
              r.buffer = 0;
              r.size += r.needed;
              r.needed = 0;
            }
            r.buffer || (r.size += 128, r.buffer = a3._malloc(r.size), r.buffer || f(void 0));
            r.pos = 0;
          }, alloc: function(b, c) {
            r.buffer || f(void 0);
            b = b.length * c.BYTES_PER_ELEMENT;
            b = b + 7 & -8;
            r.pos + b >= r.size ? (0 < b || f(void 0), r.needed += b, c = a3._malloc(b), r.temps.push(c)) : (c = r.buffer + r.pos, r.pos += b);
            return c;
          }, copy: function(b, c, d) {
            d >>>= 0;
            switch (c.BYTES_PER_ELEMENT) {
              case 2:
                d >>>= 1;
                break;
              case 4:
                d >>>= 2;
                break;
              case 8:
                d >>>= 3;
            }
            for (var g = 0; g < b.length; g++)
              c[d + g] = b[g];
          } };
          Z.prototype = Object.create(t.prototype);
          Z.prototype.constructor = Z;
          Z.prototype.__class__ = Z;
          Z.__cache__ = {};
          a3.VoidPtr = Z;
          Z.prototype.__destroy__ = Z.prototype.__destroy__ = function() {
            bb(this.ptr);
          };
          S.prototype = Object.create(t.prototype);
          S.prototype.constructor = S;
          S.prototype.__class__ = S;
          S.__cache__ = {};
          a3.DecoderBuffer = S;
          S.prototype.Init = S.prototype.Init = function(b, c) {
            var d = this.ptr;
            r.prepare();
            "object" == typeof b && (b = pa(b));
            c && "object" === typeof c && (c = c.ptr);
            cb(d, b, c);
          };
          S.prototype.__destroy__ = S.prototype.__destroy__ = function() {
            db(this.ptr);
          };
          Q.prototype = Object.create(t.prototype);
          Q.prototype.constructor = Q;
          Q.prototype.__class__ = Q;
          Q.__cache__ = {};
          a3.AttributeTransformData = Q;
          Q.prototype.transform_type = Q.prototype.transform_type = function() {
            return eb(this.ptr);
          };
          Q.prototype.__destroy__ = Q.prototype.__destroy__ = function() {
            fb(this.ptr);
          };
          W.prototype = Object.create(t.prototype);
          W.prototype.constructor = W;
          W.prototype.__class__ = W;
          W.__cache__ = {};
          a3.GeometryAttribute = W;
          W.prototype.__destroy__ = W.prototype.__destroy__ = function() {
            gb(this.ptr);
          };
          w.prototype = Object.create(t.prototype);
          w.prototype.constructor = w;
          w.prototype.__class__ = w;
          w.__cache__ = {};
          a3.PointAttribute = w;
          w.prototype.size = w.prototype.size = function() {
            return hb(this.ptr);
          };
          w.prototype.GetAttributeTransformData = w.prototype.GetAttributeTransformData = function() {
            return D(ib(this.ptr), Q);
          };
          w.prototype.attribute_type = w.prototype.attribute_type = function() {
            return jb(this.ptr);
          };
          w.prototype.data_type = w.prototype.data_type = function() {
            return kb(this.ptr);
          };
          w.prototype.num_components = w.prototype.num_components = function() {
            return lb(this.ptr);
          };
          w.prototype.normalized = w.prototype.normalized = function() {
            return !!mb(this.ptr);
          };
          w.prototype.byte_stride = w.prototype.byte_stride = function() {
            return nb(this.ptr);
          };
          w.prototype.byte_offset = w.prototype.byte_offset = function() {
            return ob(this.ptr);
          };
          w.prototype.unique_id = w.prototype.unique_id = function() {
            return pb(this.ptr);
          };
          w.prototype.__destroy__ = w.prototype.__destroy__ = function() {
            qb(this.ptr);
          };
          C.prototype = Object.create(t.prototype);
          C.prototype.constructor = C;
          C.prototype.__class__ = C;
          C.__cache__ = {};
          a3.AttributeQuantizationTransform = C;
          C.prototype.InitFromAttribute = C.prototype.InitFromAttribute = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return !!rb(c, b);
          };
          C.prototype.quantization_bits = C.prototype.quantization_bits = function() {
            return sb(this.ptr);
          };
          C.prototype.min_value = C.prototype.min_value = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return tb(c, b);
          };
          C.prototype.range = C.prototype.range = function() {
            return ub(this.ptr);
          };
          C.prototype.__destroy__ = C.prototype.__destroy__ = function() {
            vb(this.ptr);
          };
          F.prototype = Object.create(t.prototype);
          F.prototype.constructor = F;
          F.prototype.__class__ = F;
          F.__cache__ = {};
          a3.AttributeOctahedronTransform = F;
          F.prototype.InitFromAttribute = F.prototype.InitFromAttribute = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return !!wb(c, b);
          };
          F.prototype.quantization_bits = F.prototype.quantization_bits = function() {
            return xb(this.ptr);
          };
          F.prototype.__destroy__ = F.prototype.__destroy__ = function() {
            yb(this.ptr);
          };
          G.prototype = Object.create(t.prototype);
          G.prototype.constructor = G;
          G.prototype.__class__ = G;
          G.__cache__ = {};
          a3.PointCloud = G;
          G.prototype.num_attributes = G.prototype.num_attributes = function() {
            return zb(this.ptr);
          };
          G.prototype.num_points = G.prototype.num_points = function() {
            return Ab(this.ptr);
          };
          G.prototype.__destroy__ = G.prototype.__destroy__ = function() {
            Bb(this.ptr);
          };
          E.prototype = Object.create(t.prototype);
          E.prototype.constructor = E;
          E.prototype.__class__ = E;
          E.__cache__ = {};
          a3.Mesh = E;
          E.prototype.num_faces = E.prototype.num_faces = function() {
            return Cb(this.ptr);
          };
          E.prototype.num_attributes = E.prototype.num_attributes = function() {
            return Db(this.ptr);
          };
          E.prototype.num_points = E.prototype.num_points = function() {
            return Eb(this.ptr);
          };
          E.prototype.__destroy__ = E.prototype.__destroy__ = function() {
            Fb(this.ptr);
          };
          T.prototype = Object.create(t.prototype);
          T.prototype.constructor = T;
          T.prototype.__class__ = T;
          T.__cache__ = {};
          a3.Metadata = T;
          T.prototype.__destroy__ = T.prototype.__destroy__ = function() {
            Gb(this.ptr);
          };
          B.prototype = Object.create(t.prototype);
          B.prototype.constructor = B;
          B.prototype.__class__ = B;
          B.__cache__ = {};
          a3.Status = B;
          B.prototype.code = B.prototype.code = function() {
            return Hb(this.ptr);
          };
          B.prototype.ok = B.prototype.ok = function() {
            return !!Ib(this.ptr);
          };
          B.prototype.error_msg = B.prototype.error_msg = function() {
            return h(Jb(this.ptr));
          };
          B.prototype.__destroy__ = B.prototype.__destroy__ = function() {
            Kb(this.ptr);
          };
          H.prototype = Object.create(t.prototype);
          H.prototype.constructor = H;
          H.prototype.__class__ = H;
          H.__cache__ = {};
          a3.DracoFloat32Array = H;
          H.prototype.GetValue = H.prototype.GetValue = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return Lb(c, b);
          };
          H.prototype.size = H.prototype.size = function() {
            return Mb(this.ptr);
          };
          H.prototype.__destroy__ = H.prototype.__destroy__ = function() {
            Nb(this.ptr);
          };
          I.prototype = Object.create(t.prototype);
          I.prototype.constructor = I;
          I.prototype.__class__ = I;
          I.__cache__ = {};
          a3.DracoInt8Array = I;
          I.prototype.GetValue = I.prototype.GetValue = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return Ob(c, b);
          };
          I.prototype.size = I.prototype.size = function() {
            return Pb(this.ptr);
          };
          I.prototype.__destroy__ = I.prototype.__destroy__ = function() {
            Qb(this.ptr);
          };
          J.prototype = Object.create(t.prototype);
          J.prototype.constructor = J;
          J.prototype.__class__ = J;
          J.__cache__ = {};
          a3.DracoUInt8Array = J;
          J.prototype.GetValue = J.prototype.GetValue = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return Rb(c, b);
          };
          J.prototype.size = J.prototype.size = function() {
            return Sb(this.ptr);
          };
          J.prototype.__destroy__ = J.prototype.__destroy__ = function() {
            Tb(this.ptr);
          };
          K.prototype = Object.create(t.prototype);
          K.prototype.constructor = K;
          K.prototype.__class__ = K;
          K.__cache__ = {};
          a3.DracoInt16Array = K;
          K.prototype.GetValue = K.prototype.GetValue = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return Ub(c, b);
          };
          K.prototype.size = K.prototype.size = function() {
            return Vb(this.ptr);
          };
          K.prototype.__destroy__ = K.prototype.__destroy__ = function() {
            Wb(this.ptr);
          };
          L.prototype = Object.create(t.prototype);
          L.prototype.constructor = L;
          L.prototype.__class__ = L;
          L.__cache__ = {};
          a3.DracoUInt16Array = L;
          L.prototype.GetValue = L.prototype.GetValue = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return Xb(c, b);
          };
          L.prototype.size = L.prototype.size = function() {
            return Yb(this.ptr);
          };
          L.prototype.__destroy__ = L.prototype.__destroy__ = function() {
            Zb(this.ptr);
          };
          M.prototype = Object.create(t.prototype);
          M.prototype.constructor = M;
          M.prototype.__class__ = M;
          M.__cache__ = {};
          a3.DracoInt32Array = M;
          M.prototype.GetValue = M.prototype.GetValue = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return $b(c, b);
          };
          M.prototype.size = M.prototype.size = function() {
            return ac(this.ptr);
          };
          M.prototype.__destroy__ = M.prototype.__destroy__ = function() {
            bc(this.ptr);
          };
          N.prototype = Object.create(t.prototype);
          N.prototype.constructor = N;
          N.prototype.__class__ = N;
          N.__cache__ = {};
          a3.DracoUInt32Array = N;
          N.prototype.GetValue = N.prototype.GetValue = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return cc(c, b);
          };
          N.prototype.size = N.prototype.size = function() {
            return dc(this.ptr);
          };
          N.prototype.__destroy__ = N.prototype.__destroy__ = function() {
            ec(this.ptr);
          };
          y.prototype = Object.create(t.prototype);
          y.prototype.constructor = y;
          y.prototype.__class__ = y;
          y.__cache__ = {};
          a3.MetadataQuerier = y;
          y.prototype.HasEntry = y.prototype.HasEntry = function(b, c) {
            var d = this.ptr;
            r.prepare();
            b && "object" === typeof b && (b = b.ptr);
            c = c && "object" === typeof c ? c.ptr : R(c);
            return !!fc(d, b, c);
          };
          y.prototype.GetIntEntry = y.prototype.GetIntEntry = function(b, c) {
            var d = this.ptr;
            r.prepare();
            b && "object" === typeof b && (b = b.ptr);
            c = c && "object" === typeof c ? c.ptr : R(c);
            return gc(d, b, c);
          };
          y.prototype.GetIntEntryArray = y.prototype.GetIntEntryArray = function(b, c, d) {
            var g = this.ptr;
            r.prepare();
            b && "object" === typeof b && (b = b.ptr);
            c = c && "object" === typeof c ? c.ptr : R(c);
            d && "object" === typeof d && (d = d.ptr);
            hc(g, b, c, d);
          };
          y.prototype.GetDoubleEntry = y.prototype.GetDoubleEntry = function(b, c) {
            var d = this.ptr;
            r.prepare();
            b && "object" === typeof b && (b = b.ptr);
            c = c && "object" === typeof c ? c.ptr : R(c);
            return ic(d, b, c);
          };
          y.prototype.GetStringEntry = y.prototype.GetStringEntry = function(b, c) {
            var d = this.ptr;
            r.prepare();
            b && "object" === typeof b && (b = b.ptr);
            c = c && "object" === typeof c ? c.ptr : R(c);
            return h(jc(d, b, c));
          };
          y.prototype.NumEntries = y.prototype.NumEntries = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return kc(c, b);
          };
          y.prototype.GetEntryName = y.prototype.GetEntryName = function(b, c) {
            var d = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            return h(lc(d, b, c));
          };
          y.prototype.__destroy__ = y.prototype.__destroy__ = function() {
            mc(this.ptr);
          };
          m.prototype = Object.create(t.prototype);
          m.prototype.constructor = m;
          m.prototype.__class__ = m;
          m.__cache__ = {};
          a3.Decoder = m;
          m.prototype.DecodeArrayToPointCloud = m.prototype.DecodeArrayToPointCloud = function(b, c, d) {
            var g = this.ptr;
            r.prepare();
            "object" == typeof b && (b = pa(b));
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return D(nc(g, b, c, d), B);
          };
          m.prototype.DecodeArrayToMesh = m.prototype.DecodeArrayToMesh = function(b, c, d) {
            var g = this.ptr;
            r.prepare();
            "object" == typeof b && (b = pa(b));
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return D(oc(g, b, c, d), B);
          };
          m.prototype.GetAttributeId = m.prototype.GetAttributeId = function(b, c) {
            var d = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            return pc(d, b, c);
          };
          m.prototype.GetAttributeIdByName = m.prototype.GetAttributeIdByName = function(b, c) {
            var d = this.ptr;
            r.prepare();
            b && "object" === typeof b && (b = b.ptr);
            c = c && "object" === typeof c ? c.ptr : R(c);
            return qc(d, b, c);
          };
          m.prototype.GetAttributeIdByMetadataEntry = m.prototype.GetAttributeIdByMetadataEntry = function(b, c, d) {
            var g = this.ptr;
            r.prepare();
            b && "object" === typeof b && (b = b.ptr);
            c = c && "object" === typeof c ? c.ptr : R(c);
            d = d && "object" === typeof d ? d.ptr : R(d);
            return rc(g, b, c, d);
          };
          m.prototype.GetAttribute = m.prototype.GetAttribute = function(b, c) {
            var d = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            return D(sc(d, b, c), w);
          };
          m.prototype.GetAttributeByUniqueId = m.prototype.GetAttributeByUniqueId = function(b, c) {
            var d = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            return D(tc(d, b, c), w);
          };
          m.prototype.GetMetadata = m.prototype.GetMetadata = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return D(uc(c, b), T);
          };
          m.prototype.GetAttributeMetadata = m.prototype.GetAttributeMetadata = function(b, c) {
            var d = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            return D(vc(d, b, c), T);
          };
          m.prototype.GetFaceFromMesh = m.prototype.GetFaceFromMesh = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!wc(g, b, c, d);
          };
          m.prototype.GetTriangleStripsFromMesh = m.prototype.GetTriangleStripsFromMesh = function(b, c) {
            var d = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            return xc(d, b, c);
          };
          m.prototype.GetTrianglesUInt16Array = m.prototype.GetTrianglesUInt16Array = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!yc(g, b, c, d);
          };
          m.prototype.GetTrianglesUInt32Array = m.prototype.GetTrianglesUInt32Array = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!zc(g, b, c, d);
          };
          m.prototype.GetAttributeFloat = m.prototype.GetAttributeFloat = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Ac(g, b, c, d);
          };
          m.prototype.GetAttributeFloatForAllPoints = m.prototype.GetAttributeFloatForAllPoints = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Bc(g, b, c, d);
          };
          m.prototype.GetAttributeIntForAllPoints = m.prototype.GetAttributeIntForAllPoints = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Cc(g, b, c, d);
          };
          m.prototype.GetAttributeInt8ForAllPoints = m.prototype.GetAttributeInt8ForAllPoints = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Dc(g, b, c, d);
          };
          m.prototype.GetAttributeUInt8ForAllPoints = m.prototype.GetAttributeUInt8ForAllPoints = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Ec(g, b, c, d);
          };
          m.prototype.GetAttributeInt16ForAllPoints = m.prototype.GetAttributeInt16ForAllPoints = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Fc(g, b, c, d);
          };
          m.prototype.GetAttributeUInt16ForAllPoints = m.prototype.GetAttributeUInt16ForAllPoints = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Gc(g, b, c, d);
          };
          m.prototype.GetAttributeInt32ForAllPoints = m.prototype.GetAttributeInt32ForAllPoints = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Hc(g, b, c, d);
          };
          m.prototype.GetAttributeUInt32ForAllPoints = m.prototype.GetAttributeUInt32ForAllPoints = function(b, c, d) {
            var g = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            return !!Ic(g, b, c, d);
          };
          m.prototype.GetAttributeDataArrayForAllPoints = m.prototype.GetAttributeDataArrayForAllPoints = function(b, c, d, g, u3) {
            var X = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            d && "object" === typeof d && (d = d.ptr);
            g && "object" === typeof g && (g = g.ptr);
            u3 && "object" === typeof u3 && (u3 = u3.ptr);
            return !!Jc(X, b, c, d, g, u3);
          };
          m.prototype.SkipAttributeTransform = m.prototype.SkipAttributeTransform = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            Kc(c, b);
          };
          m.prototype.GetEncodedGeometryType_Deprecated = m.prototype.GetEncodedGeometryType_Deprecated = function(b) {
            var c = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            return Lc(c, b);
          };
          m.prototype.DecodeBufferToPointCloud = m.prototype.DecodeBufferToPointCloud = function(b, c) {
            var d = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            return D(Mc(d, b, c), B);
          };
          m.prototype.DecodeBufferToMesh = m.prototype.DecodeBufferToMesh = function(b, c) {
            var d = this.ptr;
            b && "object" === typeof b && (b = b.ptr);
            c && "object" === typeof c && (c = c.ptr);
            return D(Nc(d, b, c), B);
          };
          m.prototype.__destroy__ = m.prototype.__destroy__ = function() {
            Oc(this.ptr);
          };
          (function() {
            function b() {
              a3.ATTRIBUTE_INVALID_TRANSFORM = Pc();
              a3.ATTRIBUTE_NO_TRANSFORM = Qc();
              a3.ATTRIBUTE_QUANTIZATION_TRANSFORM = Rc();
              a3.ATTRIBUTE_OCTAHEDRON_TRANSFORM = Sc();
              a3.INVALID = Tc();
              a3.POSITION = Uc();
              a3.NORMAL = Vc();
              a3.COLOR = Wc();
              a3.TEX_COORD = Xc();
              a3.GENERIC = Yc();
              a3.INVALID_GEOMETRY_TYPE = Zc();
              a3.POINT_CLOUD = $c();
              a3.TRIANGULAR_MESH = ad();
              a3.DT_INVALID = bd();
              a3.DT_INT8 = cd();
              a3.DT_UINT8 = dd();
              a3.DT_INT16 = ed();
              a3.DT_UINT16 = fd();
              a3.DT_INT32 = gd();
              a3.DT_UINT32 = hd();
              a3.DT_INT64 = id();
              a3.DT_UINT64 = jd();
              a3.DT_FLOAT32 = kd();
              a3.DT_FLOAT64 = ld();
              a3.DT_BOOL = md();
              a3.DT_TYPES_COUNT = nd();
              a3.OK = od();
              a3.DRACO_ERROR = pd();
              a3.IO_ERROR = qd();
              a3.INVALID_PARAMETER = rd();
              a3.UNSUPPORTED_VERSION = sd();
              a3.UNKNOWN_VERSION = td();
            }
            za ? b() : oa.unshift(b);
          })();
          if ("function" === typeof a3.onModuleParsed)
            a3.onModuleParsed();
          a3.Decoder.prototype.GetEncodedGeometryType = function(b) {
            if (b.__class__ && b.__class__ === a3.DecoderBuffer)
              return a3.Decoder.prototype.GetEncodedGeometryType_Deprecated(b);
            if (8 > b.byteLength)
              return a3.INVALID_GEOMETRY_TYPE;
            switch (b[7]) {
              case 0:
                return a3.POINT_CLOUD;
              case 1:
                return a3.TRIANGULAR_MESH;
              default:
                return a3.INVALID_GEOMETRY_TYPE;
            }
          };
          return n.ready;
        };
      }();
      "object" === typeof exports2 && "object" === typeof module ? module.exports = DracoDecoderModule : "function" === typeof define && define.amd ? define([], function() {
        return DracoDecoderModule;
      }) : "object" === typeof exports2 && (exports2.DracoDecoderModule = DracoDecoderModule);
    }
  });

  // packages/engine/Source/Workers/decodeDraco.js
  var decodeDraco_exports = {};
  __export(decodeDraco_exports, {
    default: () => decodeDraco_default
  });
  function decodeIndexArray(dracoGeometry, dracoDecoder) {
    const numPoints = dracoGeometry.num_points();
    const numFaces = dracoGeometry.num_faces();
    const faceIndices = new draco.DracoInt32Array();
    const numIndices = numFaces * 3;
    const indexArray = IndexDatatype_default.createTypedArray(numPoints, numIndices);
    let offset = 0;
    for (let i = 0; i < numFaces; ++i) {
      dracoDecoder.GetFaceFromMesh(dracoGeometry, i, faceIndices);
      indexArray[offset + 0] = faceIndices.GetValue(0);
      indexArray[offset + 1] = faceIndices.GetValue(1);
      indexArray[offset + 2] = faceIndices.GetValue(2);
      offset += 3;
    }
    draco.destroy(faceIndices);
    return {
      typedArray: indexArray,
      numberOfIndices: numIndices
    };
  }
  function decodeQuantizedDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, quantization, vertexArrayLength) {
    let vertexArray;
    let attributeData;
    if (quantization.quantizationBits <= 8) {
      attributeData = new draco.DracoUInt8Array();
      vertexArray = new Uint8Array(vertexArrayLength);
      dracoDecoder.GetAttributeUInt8ForAllPoints(
        dracoGeometry,
        dracoAttribute,
        attributeData
      );
    } else if (quantization.quantizationBits <= 16) {
      attributeData = new draco.DracoUInt16Array();
      vertexArray = new Uint16Array(vertexArrayLength);
      dracoDecoder.GetAttributeUInt16ForAllPoints(
        dracoGeometry,
        dracoAttribute,
        attributeData
      );
    } else {
      attributeData = new draco.DracoFloat32Array();
      vertexArray = new Float32Array(vertexArrayLength);
      dracoDecoder.GetAttributeFloatForAllPoints(
        dracoGeometry,
        dracoAttribute,
        attributeData
      );
    }
    for (let i = 0; i < vertexArrayLength; ++i) {
      vertexArray[i] = attributeData.GetValue(i);
    }
    draco.destroy(attributeData);
    return vertexArray;
  }
  function decodeDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, vertexArrayLength) {
    let vertexArray;
    let attributeData;
    switch (dracoAttribute.data_type()) {
      case 1:
      case 11:
        attributeData = new draco.DracoInt8Array();
        vertexArray = new Int8Array(vertexArrayLength);
        dracoDecoder.GetAttributeInt8ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          attributeData
        );
        break;
      case 2:
        attributeData = new draco.DracoUInt8Array();
        vertexArray = new Uint8Array(vertexArrayLength);
        dracoDecoder.GetAttributeUInt8ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          attributeData
        );
        break;
      case 3:
        attributeData = new draco.DracoInt16Array();
        vertexArray = new Int16Array(vertexArrayLength);
        dracoDecoder.GetAttributeInt16ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          attributeData
        );
        break;
      case 4:
        attributeData = new draco.DracoUInt16Array();
        vertexArray = new Uint16Array(vertexArrayLength);
        dracoDecoder.GetAttributeUInt16ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          attributeData
        );
        break;
      case 5:
      case 7:
        attributeData = new draco.DracoInt32Array();
        vertexArray = new Int32Array(vertexArrayLength);
        dracoDecoder.GetAttributeInt32ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          attributeData
        );
        break;
      case 6:
      case 8:
        attributeData = new draco.DracoUInt32Array();
        vertexArray = new Uint32Array(vertexArrayLength);
        dracoDecoder.GetAttributeUInt32ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          attributeData
        );
        break;
      case 9:
      case 10:
        attributeData = new draco.DracoFloat32Array();
        vertexArray = new Float32Array(vertexArrayLength);
        dracoDecoder.GetAttributeFloatForAllPoints(
          dracoGeometry,
          dracoAttribute,
          attributeData
        );
        break;
    }
    for (let i = 0; i < vertexArrayLength; ++i) {
      vertexArray[i] = attributeData.GetValue(i);
    }
    draco.destroy(attributeData);
    return vertexArray;
  }
  function decodeAttribute(dracoGeometry, dracoDecoder, dracoAttribute) {
    const numPoints = dracoGeometry.num_points();
    const numComponents = dracoAttribute.num_components();
    let quantization;
    let transform2 = new draco.AttributeQuantizationTransform();
    if (transform2.InitFromAttribute(dracoAttribute)) {
      const minValues = new Array(numComponents);
      for (let i = 0; i < numComponents; ++i) {
        minValues[i] = transform2.min_value(i);
      }
      quantization = {
        quantizationBits: transform2.quantization_bits(),
        minValues,
        range: transform2.range(),
        octEncoded: false
      };
    }
    draco.destroy(transform2);
    transform2 = new draco.AttributeOctahedronTransform();
    if (transform2.InitFromAttribute(dracoAttribute)) {
      quantization = {
        quantizationBits: transform2.quantization_bits(),
        octEncoded: true
      };
    }
    draco.destroy(transform2);
    const vertexArrayLength = numPoints * numComponents;
    let vertexArray;
    if (defined_default(quantization)) {
      vertexArray = decodeQuantizedDracoTypedArray(
        dracoGeometry,
        dracoDecoder,
        dracoAttribute,
        quantization,
        vertexArrayLength
      );
    } else {
      vertexArray = decodeDracoTypedArray(
        dracoGeometry,
        dracoDecoder,
        dracoAttribute,
        vertexArrayLength
      );
    }
    const componentDatatype = ComponentDatatype_default.fromTypedArray(vertexArray);
    return {
      array: vertexArray,
      data: {
        componentsPerAttribute: numComponents,
        componentDatatype,
        byteOffset: dracoAttribute.byte_offset(),
        byteStride: ComponentDatatype_default.getSizeInBytes(componentDatatype) * numComponents,
        normalized: dracoAttribute.normalized(),
        quantization
      }
    };
  }
  function decodePointCloud(parameters) {
    const dracoDecoder = new draco.Decoder();
    if (parameters.dequantizeInShader) {
      dracoDecoder.SkipAttributeTransform(draco.POSITION);
      dracoDecoder.SkipAttributeTransform(draco.NORMAL);
    }
    const buffer = new draco.DecoderBuffer();
    buffer.Init(parameters.buffer, parameters.buffer.length);
    const geometryType = dracoDecoder.GetEncodedGeometryType(buffer);
    if (geometryType !== draco.POINT_CLOUD) {
      throw new RuntimeError_default("Draco geometry type must be POINT_CLOUD.");
    }
    const dracoPointCloud = new draco.PointCloud();
    const decodingStatus = dracoDecoder.DecodeBufferToPointCloud(
      buffer,
      dracoPointCloud
    );
    if (!decodingStatus.ok() || dracoPointCloud.ptr === 0) {
      throw new RuntimeError_default(
        `Error decoding draco point cloud: ${decodingStatus.error_msg()}`
      );
    }
    draco.destroy(buffer);
    const result = {};
    const properties = parameters.properties;
    for (const propertyName in properties) {
      if (properties.hasOwnProperty(propertyName)) {
        let dracoAttribute;
        if (propertyName === "POSITION" || propertyName === "NORMAL") {
          const dracoAttributeId = dracoDecoder.GetAttributeId(
            dracoPointCloud,
            draco[propertyName]
          );
          dracoAttribute = dracoDecoder.GetAttribute(
            dracoPointCloud,
            dracoAttributeId
          );
        } else {
          const attributeId = properties[propertyName];
          dracoAttribute = dracoDecoder.GetAttributeByUniqueId(
            dracoPointCloud,
            attributeId
          );
        }
        result[propertyName] = decodeAttribute(
          dracoPointCloud,
          dracoDecoder,
          dracoAttribute
        );
      }
    }
    draco.destroy(dracoPointCloud);
    draco.destroy(dracoDecoder);
    return result;
  }
  function decodePrimitive(parameters) {
    const dracoDecoder = new draco.Decoder();
    const attributesToSkip = ["POSITION", "NORMAL", "COLOR", "TEX_COORD"];
    if (parameters.dequantizeInShader) {
      for (let i = 0; i < attributesToSkip.length; ++i) {
        dracoDecoder.SkipAttributeTransform(draco[attributesToSkip[i]]);
      }
    }
    const bufferView = parameters.bufferView;
    const buffer = new draco.DecoderBuffer();
    buffer.Init(parameters.array, bufferView.byteLength);
    const geometryType = dracoDecoder.GetEncodedGeometryType(buffer);
    if (geometryType !== draco.TRIANGULAR_MESH) {
      throw new RuntimeError_default("Unsupported draco mesh geometry type.");
    }
    const dracoGeometry = new draco.Mesh();
    const decodingStatus = dracoDecoder.DecodeBufferToMesh(buffer, dracoGeometry);
    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {
      throw new RuntimeError_default(
        `Error decoding draco mesh geometry: ${decodingStatus.error_msg()}`
      );
    }
    draco.destroy(buffer);
    const attributeData = {};
    const compressedAttributes = parameters.compressedAttributes;
    for (const attributeName in compressedAttributes) {
      if (compressedAttributes.hasOwnProperty(attributeName)) {
        const compressedAttribute = compressedAttributes[attributeName];
        const dracoAttribute = dracoDecoder.GetAttributeByUniqueId(
          dracoGeometry,
          compressedAttribute
        );
        attributeData[attributeName] = decodeAttribute(
          dracoGeometry,
          dracoDecoder,
          dracoAttribute
        );
      }
    }
    const result = {
      indexArray: decodeIndexArray(dracoGeometry, dracoDecoder),
      attributeData
    };
    draco.destroy(dracoGeometry);
    draco.destroy(dracoDecoder);
    return result;
  }
  async function decode(parameters, transferableObjects) {
    if (defined_default(parameters.bufferView)) {
      return decodePrimitive(parameters);
    }
    return decodePointCloud(parameters);
  }
  async function initWorker(parameters, transferableObjects) {
    const wasmConfig = parameters.webAssemblyConfig;
    if (defined_default(wasmConfig) && defined_default(wasmConfig.wasmBinaryFile)) {
      draco = await (0, import_draco_decoder_nodejs.default)(wasmConfig);
    } else {
      draco = await (0, import_draco_decoder_nodejs.default)();
    }
    return true;
  }
  async function decodeDraco(parameters, transferableObjects) {
    const wasmConfig = parameters.webAssemblyConfig;
    if (defined_default(wasmConfig)) {
      return initWorker(parameters, transferableObjects);
    }
    return decode(parameters, transferableObjects);
  }
  var import_draco_decoder_nodejs, draco, decodeDraco_default;
  var init_decodeDraco = __esm({
    "packages/engine/Source/Workers/decodeDraco.js"() {
      init_ComponentDatatype();
      init_defined();
      init_IndexDatatype();
      init_RuntimeError();
      init_createTaskProcessorWorker();
      import_draco_decoder_nodejs = __toESM(require_draco_decoder_nodejs(), 1);
      decodeDraco_default = createTaskProcessorWorker_default(decodeDraco);
    }
  });

  // packages/engine/Source/Core/decodeGoogleEarthEnterpriseData.js
  function decodeGoogleEarthEnterpriseData(key, data) {
    if (decodeGoogleEarthEnterpriseData.passThroughDataForTesting) {
      return data;
    }
    Check_default.typeOf.object("key", key);
    Check_default.typeOf.object("data", data);
    const keyLength = key.byteLength;
    if (keyLength === 0 || keyLength % 4 !== 0) {
      throw new RuntimeError_default(
        "The length of key must be greater than 0 and a multiple of 4."
      );
    }
    const dataView = new DataView(data);
    const magic = dataView.getUint32(0, true);
    if (magic === compressedMagic || magic === compressedMagicSwap) {
      return data;
    }
    const keyView = new DataView(key);
    let dp = 0;
    const dpend = data.byteLength;
    const dpend64 = dpend - dpend % 8;
    const kpend = keyLength;
    let kp;
    let off = 8;
    while (dp < dpend64) {
      off = (off + 8) % 24;
      kp = off;
      while (dp < dpend64 && kp < kpend) {
        dataView.setUint32(
          dp,
          dataView.getUint32(dp, true) ^ keyView.getUint32(kp, true),
          true
        );
        dataView.setUint32(
          dp + 4,
          dataView.getUint32(dp + 4, true) ^ keyView.getUint32(kp + 4, true),
          true
        );
        dp += 8;
        kp += 24;
      }
    }
    if (dp < dpend) {
      if (kp >= kpend) {
        off = (off + 8) % 24;
        kp = off;
      }
      while (dp < dpend) {
        dataView.setUint8(dp, dataView.getUint8(dp) ^ keyView.getUint8(kp));
        dp++;
        kp++;
      }
    }
  }
  var compressedMagic, compressedMagicSwap, decodeGoogleEarthEnterpriseData_default;
  var init_decodeGoogleEarthEnterpriseData = __esm({
    "packages/engine/Source/Core/decodeGoogleEarthEnterpriseData.js"() {
      init_Check();
      init_RuntimeError();
      compressedMagic = 1953029805;
      compressedMagicSwap = 2917034100;
      decodeGoogleEarthEnterpriseData.passThroughDataForTesting = false;
      decodeGoogleEarthEnterpriseData_default = decodeGoogleEarthEnterpriseData;
    }
  });

  // packages/engine/Source/Core/isBitSet.js
  function isBitSet(bits, mask) {
    return (bits & mask) !== 0;
  }
  var isBitSet_default;
  var init_isBitSet = __esm({
    "packages/engine/Source/Core/isBitSet.js"() {
      isBitSet_default = isBitSet;
    }
  });

  // packages/engine/Source/Core/GoogleEarthEnterpriseTileInformation.js
  function GoogleEarthEnterpriseTileInformation(bits, cnodeVersion, imageryVersion, terrainVersion, imageryProvider, terrainProvider) {
    this._bits = bits;
    this.cnodeVersion = cnodeVersion;
    this.imageryVersion = imageryVersion;
    this.terrainVersion = terrainVersion;
    this.imageryProvider = imageryProvider;
    this.terrainProvider = terrainProvider;
    this.ancestorHasTerrain = false;
    this.terrainState = void 0;
  }
  var childrenBitmasks, anyChildBitmask, cacheFlagBitmask, imageBitmask, terrainBitmask, GoogleEarthEnterpriseTileInformation_default;
  var init_GoogleEarthEnterpriseTileInformation = __esm({
    "packages/engine/Source/Core/GoogleEarthEnterpriseTileInformation.js"() {
      init_defined();
      init_isBitSet();
      childrenBitmasks = [1, 2, 4, 8];
      anyChildBitmask = 15;
      cacheFlagBitmask = 16;
      imageBitmask = 64;
      terrainBitmask = 128;
      GoogleEarthEnterpriseTileInformation.clone = function(info, result) {
        if (!defined_default(result)) {
          result = new GoogleEarthEnterpriseTileInformation(
            info._bits,
            info.cnodeVersion,
            info.imageryVersion,
            info.terrainVersion,
            info.imageryProvider,
            info.terrainProvider
          );
        } else {
          result._bits = info._bits;
          result.cnodeVersion = info.cnodeVersion;
          result.imageryVersion = info.imageryVersion;
          result.terrainVersion = info.terrainVersion;
          result.imageryProvider = info.imageryProvider;
          result.terrainProvider = info.terrainProvider;
        }
        result.ancestorHasTerrain = info.ancestorHasTerrain;
        result.terrainState = info.terrainState;
        return result;
      };
      GoogleEarthEnterpriseTileInformation.prototype.setParent = function(parent) {
        this.ancestorHasTerrain = parent.ancestorHasTerrain || this.hasTerrain();
      };
      GoogleEarthEnterpriseTileInformation.prototype.hasSubtree = function() {
        return isBitSet_default(this._bits, cacheFlagBitmask);
      };
      GoogleEarthEnterpriseTileInformation.prototype.hasImagery = function() {
        return isBitSet_default(this._bits, imageBitmask);
      };
      GoogleEarthEnterpriseTileInformation.prototype.hasTerrain = function() {
        return isBitSet_default(this._bits, terrainBitmask);
      };
      GoogleEarthEnterpriseTileInformation.prototype.hasChildren = function() {
        return isBitSet_default(this._bits, anyChildBitmask);
      };
      GoogleEarthEnterpriseTileInformation.prototype.hasChild = function(index) {
        return isBitSet_default(this._bits, childrenBitmasks[index]);
      };
      GoogleEarthEnterpriseTileInformation.prototype.getChildBitmask = function() {
        return this._bits & anyChildBitmask;
      };
      GoogleEarthEnterpriseTileInformation_default = GoogleEarthEnterpriseTileInformation;
    }
  });

  // node_modules/pako/lib/zlib/adler32.js
  var require_adler32 = __commonJS({
    "node_modules/pako/lib/zlib/adler32.js"(exports2, module) {
      "use strict";
      var adler32 = (adler, buf, len, pos) => {
        let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
        while (len !== 0) {
          n = len > 2e3 ? 2e3 : len;
          len -= n;
          do {
            s1 = s1 + buf[pos++] | 0;
            s2 = s2 + s1 | 0;
          } while (--n);
          s1 %= 65521;
          s2 %= 65521;
        }
        return s1 | s2 << 16 | 0;
      };
      module.exports = adler32;
    }
  });

  // node_modules/pako/lib/zlib/crc32.js
  var require_crc32 = __commonJS({
    "node_modules/pako/lib/zlib/crc32.js"(exports2, module) {
      "use strict";
      var makeTable = () => {
        let c, table = [];
        for (var n = 0; n < 256; n++) {
          c = n;
          for (var k = 0; k < 8; k++) {
            c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
          }
          table[n] = c;
        }
        return table;
      };
      var crcTable = new Uint32Array(makeTable());
      var crc32 = (crc, buf, len, pos) => {
        const t = crcTable;
        const end = pos + len;
        crc ^= -1;
        for (let i = pos; i < end; i++) {
          crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
        }
        return crc ^ -1;
      };
      module.exports = crc32;
    }
  });

  // node_modules/pako/lib/zlib/inffast.js
  var require_inffast = __commonJS({
    "node_modules/pako/lib/zlib/inffast.js"(exports2, module) {
      "use strict";
      var BAD = 16209;
      var TYPE = 16191;
      module.exports = function inflate_fast(strm, start) {
        let _in;
        let last;
        let _out;
        let beg;
        let end;
        let dmax;
        let wsize;
        let whave;
        let wnext;
        let s_window;
        let hold;
        let bits;
        let lcode;
        let dcode;
        let lmask;
        let dmask;
        let here;
        let op;
        let len;
        let dist;
        let from;
        let from_source;
        let input, output;
        const state = strm.state;
        _in = strm.next_in;
        input = strm.input;
        last = _in + (strm.avail_in - 5);
        _out = strm.next_out;
        output = strm.output;
        beg = _out - (start - strm.avail_out);
        end = _out + (strm.avail_out - 257);
        dmax = state.dmax;
        wsize = state.wsize;
        whave = state.whave;
        wnext = state.wnext;
        s_window = state.window;
        hold = state.hold;
        bits = state.bits;
        lcode = state.lencode;
        dcode = state.distcode;
        lmask = (1 << state.lenbits) - 1;
        dmask = (1 << state.distbits) - 1;
        top:
          do {
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = lcode[hold & lmask];
            dolen:
              for (; ; ) {
                op = here >>> 24;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 255;
                if (op === 0) {
                  output[_out++] = here & 65535;
                } else if (op & 16) {
                  len = here & 65535;
                  op &= 15;
                  if (op) {
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                    len += hold & (1 << op) - 1;
                    hold >>>= op;
                    bits -= op;
                  }
                  if (bits < 15) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                  here = dcode[hold & dmask];
                  dodist:
                    for (; ; ) {
                      op = here >>> 24;
                      hold >>>= op;
                      bits -= op;
                      op = here >>> 16 & 255;
                      if (op & 16) {
                        dist = here & 65535;
                        op &= 15;
                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;
                          if (bits < op) {
                            hold += input[_in++] << bits;
                            bits += 8;
                          }
                        }
                        dist += hold & (1 << op) - 1;
                        if (dist > dmax) {
                          strm.msg = "invalid distance too far back";
                          state.mode = BAD;
                          break top;
                        }
                        hold >>>= op;
                        bits -= op;
                        op = _out - beg;
                        if (dist > op) {
                          op = dist - op;
                          if (op > whave) {
                            if (state.sane) {
                              strm.msg = "invalid distance too far back";
                              state.mode = BAD;
                              break top;
                            }
                          }
                          from = 0;
                          from_source = s_window;
                          if (wnext === 0) {
                            from += wsize - op;
                            if (op < len) {
                              len -= op;
                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);
                              from = _out - dist;
                              from_source = output;
                            }
                          } else if (wnext < op) {
                            from += wsize + wnext - op;
                            op -= wnext;
                            if (op < len) {
                              len -= op;
                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);
                              from = 0;
                              if (wnext < len) {
                                op = wnext;
                                len -= op;
                                do {
                                  output[_out++] = s_window[from++];
                                } while (--op);
                                from = _out - dist;
                                from_source = output;
                              }
                            }
                          } else {
                            from += wnext - op;
                            if (op < len) {
                              len -= op;
                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);
                              from = _out - dist;
                              from_source = output;
                            }
                          }
                          while (len > 2) {
                            output[_out++] = from_source[from++];
                            output[_out++] = from_source[from++];
                            output[_out++] = from_source[from++];
                            len -= 3;
                          }
                          if (len) {
                            output[_out++] = from_source[from++];
                            if (len > 1) {
                              output[_out++] = from_source[from++];
                            }
                          }
                        } else {
                          from = _out - dist;
                          do {
                            output[_out++] = output[from++];
                            output[_out++] = output[from++];
                            output[_out++] = output[from++];
                            len -= 3;
                          } while (len > 2);
                          if (len) {
                            output[_out++] = output[from++];
                            if (len > 1) {
                              output[_out++] = output[from++];
                            }
                          }
                        }
                      } else if ((op & 64) === 0) {
                        here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                        continue dodist;
                      } else {
                        strm.msg = "invalid distance code";
                        state.mode = BAD;
                        break top;
                      }
                      break;
                    }
                } else if ((op & 64) === 0) {
                  here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                  continue dolen;
                } else if (op & 32) {
                  state.mode = TYPE;
                  break top;
                } else {
                  strm.msg = "invalid literal/length code";
                  state.mode = BAD;
                  break top;
                }
                break;
              }
          } while (_in < last && _out < end);
        len = bits >> 3;
        _in -= len;
        bits -= len << 3;
        hold &= (1 << bits) - 1;
        strm.next_in = _in;
        strm.next_out = _out;
        strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
        strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
        state.hold = hold;
        state.bits = bits;
        return;
      };
    }
  });

  // node_modules/pako/lib/zlib/inftrees.js
  var require_inftrees = __commonJS({
    "node_modules/pako/lib/zlib/inftrees.js"(exports2, module) {
      "use strict";
      var MAXBITS = 15;
      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592;
      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      var lbase = new Uint16Array([
        /* Length codes 257..285 base */
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        17,
        19,
        23,
        27,
        31,
        35,
        43,
        51,
        59,
        67,
        83,
        99,
        115,
        131,
        163,
        195,
        227,
        258,
        0,
        0
      ]);
      var lext = new Uint8Array([
        /* Length codes 257..285 extra */
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        17,
        17,
        17,
        17,
        18,
        18,
        18,
        18,
        19,
        19,
        19,
        19,
        20,
        20,
        20,
        20,
        21,
        21,
        21,
        21,
        16,
        72,
        78
      ]);
      var dbase = new Uint16Array([
        /* Distance codes 0..29 base */
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        13,
        17,
        25,
        33,
        49,
        65,
        97,
        129,
        193,
        257,
        385,
        513,
        769,
        1025,
        1537,
        2049,
        3073,
        4097,
        6145,
        8193,
        12289,
        16385,
        24577,
        0,
        0
      ]);
      var dext = new Uint8Array([
        /* Distance codes 0..29 extra */
        16,
        16,
        16,
        16,
        17,
        17,
        18,
        18,
        19,
        19,
        20,
        20,
        21,
        21,
        22,
        22,
        23,
        23,
        24,
        24,
        25,
        25,
        26,
        26,
        27,
        27,
        28,
        28,
        29,
        29,
        64,
        64
      ]);
      var inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {
        const bits = opts.bits;
        let len = 0;
        let sym = 0;
        let min3 = 0, max3 = 0;
        let root = 0;
        let curr = 0;
        let drop = 0;
        let left = 0;
        let used = 0;
        let huff = 0;
        let incr;
        let fill;
        let low;
        let mask;
        let next;
        let base = null;
        let match;
        const count = new Uint16Array(MAXBITS + 1);
        const offs = new Uint16Array(MAXBITS + 1);
        let extra = null;
        let here_bits, here_op, here_val;
        for (len = 0; len <= MAXBITS; len++) {
          count[len] = 0;
        }
        for (sym = 0; sym < codes; sym++) {
          count[lens[lens_index + sym]]++;
        }
        root = bits;
        for (max3 = MAXBITS; max3 >= 1; max3--) {
          if (count[max3] !== 0) {
            break;
          }
        }
        if (root > max3) {
          root = max3;
        }
        if (max3 === 0) {
          table[table_index++] = 1 << 24 | 64 << 16 | 0;
          table[table_index++] = 1 << 24 | 64 << 16 | 0;
          opts.bits = 1;
          return 0;
        }
        for (min3 = 1; min3 < max3; min3++) {
          if (count[min3] !== 0) {
            break;
          }
        }
        if (root < min3) {
          root = min3;
        }
        left = 1;
        for (len = 1; len <= MAXBITS; len++) {
          left <<= 1;
          left -= count[len];
          if (left < 0) {
            return -1;
          }
        }
        if (left > 0 && (type === CODES || max3 !== 1)) {
          return -1;
        }
        offs[1] = 0;
        for (len = 1; len < MAXBITS; len++) {
          offs[len + 1] = offs[len] + count[len];
        }
        for (sym = 0; sym < codes; sym++) {
          if (lens[lens_index + sym] !== 0) {
            work[offs[lens[lens_index + sym]]++] = sym;
          }
        }
        if (type === CODES) {
          base = extra = work;
          match = 20;
        } else if (type === LENS) {
          base = lbase;
          extra = lext;
          match = 257;
        } else {
          base = dbase;
          extra = dext;
          match = 0;
        }
        huff = 0;
        sym = 0;
        len = min3;
        next = table_index;
        curr = root;
        drop = 0;
        low = -1;
        used = 1 << root;
        mask = used - 1;
        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
          return 1;
        }
        for (; ; ) {
          here_bits = len - drop;
          if (work[sym] + 1 < match) {
            here_op = 0;
            here_val = work[sym];
          } else if (work[sym] >= match) {
            here_op = extra[work[sym] - match];
            here_val = base[work[sym] - match];
          } else {
            here_op = 32 + 64;
            here_val = 0;
          }
          incr = 1 << len - drop;
          fill = 1 << curr;
          min3 = fill;
          do {
            fill -= incr;
            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
          } while (fill !== 0);
          incr = 1 << len - 1;
          while (huff & incr) {
            incr >>= 1;
          }
          if (incr !== 0) {
            huff &= incr - 1;
            huff += incr;
          } else {
            huff = 0;
          }
          sym++;
          if (--count[len] === 0) {
            if (len === max3) {
              break;
            }
            len = lens[lens_index + work[sym]];
          }
          if (len > root && (huff & mask) !== low) {
            if (drop === 0) {
              drop = root;
            }
            next += min3;
            curr = len - drop;
            left = 1 << curr;
            while (curr + drop < max3) {
              left -= count[curr + drop];
              if (left <= 0) {
                break;
              }
              curr++;
              left <<= 1;
            }
            used += 1 << curr;
            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
              return 1;
            }
            low = huff & mask;
            table[low] = root << 24 | curr << 16 | next - table_index | 0;
          }
        }
        if (huff !== 0) {
          table[next + huff] = len - drop << 24 | 64 << 16 | 0;
        }
        opts.bits = root;
        return 0;
      };
      module.exports = inflate_table;
    }
  });

  // node_modules/pako/lib/zlib/constants.js
  var require_constants = __commonJS({
    "node_modules/pako/lib/zlib/constants.js"(exports2, module) {
      "use strict";
      module.exports = {
        /* Allowed flush values; see deflate() and inflate() below for details */
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_TREES: 6,
        /* Return codes for the compression/decompression functions. Negative values
        * are errors, positive values are used for special but normal events.
        */
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        Z_MEM_ERROR: -4,
        Z_BUF_ERROR: -5,
        //Z_VERSION_ERROR: -6,
        /* compression levels */
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,
        /* Possible values of the data_type field (though see inflate()) */
        Z_BINARY: 0,
        Z_TEXT: 1,
        //Z_ASCII:                1, // = Z_TEXT (deprecated)
        Z_UNKNOWN: 2,
        /* The deflate compression method */
        Z_DEFLATED: 8
        //Z_NULL:                 null // Use -1 or null inline, depending on var type
      };
    }
  });

  // node_modules/pako/lib/zlib/inflate.js
  var require_inflate = __commonJS({
    "node_modules/pako/lib/zlib/inflate.js"(exports2, module) {
      "use strict";
      var adler32 = require_adler32();
      var crc32 = require_crc32();
      var inflate_fast = require_inffast();
      var inflate_table = require_inftrees();
      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      var {
        Z_FINISH,
        Z_BLOCK,
        Z_TREES,
        Z_OK,
        Z_STREAM_END,
        Z_NEED_DICT,
        Z_STREAM_ERROR,
        Z_DATA_ERROR,
        Z_MEM_ERROR,
        Z_BUF_ERROR,
        Z_DEFLATED
      } = require_constants();
      var HEAD = 16180;
      var FLAGS = 16181;
      var TIME = 16182;
      var OS = 16183;
      var EXLEN = 16184;
      var EXTRA = 16185;
      var NAME = 16186;
      var COMMENT = 16187;
      var HCRC = 16188;
      var DICTID = 16189;
      var DICT = 16190;
      var TYPE = 16191;
      var TYPEDO = 16192;
      var STORED = 16193;
      var COPY_ = 16194;
      var COPY = 16195;
      var TABLE = 16196;
      var LENLENS = 16197;
      var CODELENS = 16198;
      var LEN_ = 16199;
      var LEN = 16200;
      var LENEXT = 16201;
      var DIST = 16202;
      var DISTEXT = 16203;
      var MATCH = 16204;
      var LIT = 16205;
      var CHECK = 16206;
      var LENGTH = 16207;
      var DONE = 16208;
      var BAD = 16209;
      var MEM = 16210;
      var SYNC = 16211;
      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592;
      var MAX_WBITS = 15;
      var DEF_WBITS = MAX_WBITS;
      var zswap32 = (q) => {
        return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
      };
      function InflateState() {
        this.strm = null;
        this.mode = 0;
        this.last = false;
        this.wrap = 0;
        this.havedict = false;
        this.flags = 0;
        this.dmax = 0;
        this.check = 0;
        this.total = 0;
        this.head = null;
        this.wbits = 0;
        this.wsize = 0;
        this.whave = 0;
        this.wnext = 0;
        this.window = null;
        this.hold = 0;
        this.bits = 0;
        this.length = 0;
        this.offset = 0;
        this.extra = 0;
        this.lencode = null;
        this.distcode = null;
        this.lenbits = 0;
        this.distbits = 0;
        this.ncode = 0;
        this.nlen = 0;
        this.ndist = 0;
        this.have = 0;
        this.next = null;
        this.lens = new Uint16Array(320);
        this.work = new Uint16Array(288);
        this.lendyn = null;
        this.distdyn = null;
        this.sane = 0;
        this.back = 0;
        this.was = 0;
      }
      var inflateStateCheck = (strm) => {
        if (!strm) {
          return 1;
        }
        const state = strm.state;
        if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) {
          return 1;
        }
        return 0;
      };
      var inflateResetKeep = (strm) => {
        if (inflateStateCheck(strm)) {
          return Z_STREAM_ERROR;
        }
        const state = strm.state;
        strm.total_in = strm.total_out = state.total = 0;
        strm.msg = "";
        if (state.wrap) {
          strm.adler = state.wrap & 1;
        }
        state.mode = HEAD;
        state.last = 0;
        state.havedict = 0;
        state.flags = -1;
        state.dmax = 32768;
        state.head = null;
        state.hold = 0;
        state.bits = 0;
        state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
        state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
        state.sane = 1;
        state.back = -1;
        return Z_OK;
      };
      var inflateReset = (strm) => {
        if (inflateStateCheck(strm)) {
          return Z_STREAM_ERROR;
        }
        const state = strm.state;
        state.wsize = 0;
        state.whave = 0;
        state.wnext = 0;
        return inflateResetKeep(strm);
      };
      var inflateReset2 = (strm, windowBits) => {
        let wrap;
        if (inflateStateCheck(strm)) {
          return Z_STREAM_ERROR;
        }
        const state = strm.state;
        if (windowBits < 0) {
          wrap = 0;
          windowBits = -windowBits;
        } else {
          wrap = (windowBits >> 4) + 5;
          if (windowBits < 48) {
            windowBits &= 15;
          }
        }
        if (windowBits && (windowBits < 8 || windowBits > 15)) {
          return Z_STREAM_ERROR;
        }
        if (state.window !== null && state.wbits !== windowBits) {
          state.window = null;
        }
        state.wrap = wrap;
        state.wbits = windowBits;
        return inflateReset(strm);
      };
      var inflateInit2 = (strm, windowBits) => {
        if (!strm) {
          return Z_STREAM_ERROR;
        }
        const state = new InflateState();
        strm.state = state;
        state.strm = strm;
        state.window = null;
        state.mode = HEAD;
        const ret = inflateReset2(strm, windowBits);
        if (ret !== Z_OK) {
          strm.state = null;
        }
        return ret;
      };
      var inflateInit = (strm) => {
        return inflateInit2(strm, DEF_WBITS);
      };
      var virgin = true;
      var lenfix;
      var distfix;
      var fixedtables = (state) => {
        if (virgin) {
          lenfix = new Int32Array(512);
          distfix = new Int32Array(32);
          let sym = 0;
          while (sym < 144) {
            state.lens[sym++] = 8;
          }
          while (sym < 256) {
            state.lens[sym++] = 9;
          }
          while (sym < 280) {
            state.lens[sym++] = 7;
          }
          while (sym < 288) {
            state.lens[sym++] = 8;
          }
          inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
          sym = 0;
          while (sym < 32) {
            state.lens[sym++] = 5;
          }
          inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
          virgin = false;
        }
        state.lencode = lenfix;
        state.lenbits = 9;
        state.distcode = distfix;
        state.distbits = 5;
      };
      var updatewindow = (strm, src, end, copy) => {
        let dist;
        const state = strm.state;
        if (state.window === null) {
          state.wsize = 1 << state.wbits;
          state.wnext = 0;
          state.whave = 0;
          state.window = new Uint8Array(state.wsize);
        }
        if (copy >= state.wsize) {
          state.window.set(src.subarray(end - state.wsize, end), 0);
          state.wnext = 0;
          state.whave = state.wsize;
        } else {
          dist = state.wsize - state.wnext;
          if (dist > copy) {
            dist = copy;
          }
          state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
          copy -= dist;
          if (copy) {
            state.window.set(src.subarray(end - copy, end), 0);
            state.wnext = copy;
            state.whave = state.wsize;
          } else {
            state.wnext += dist;
            if (state.wnext === state.wsize) {
              state.wnext = 0;
            }
            if (state.whave < state.wsize) {
              state.whave += dist;
            }
          }
        }
        return 0;
      };
      var inflate = (strm, flush) => {
        let state;
        let input, output;
        let next;
        let put;
        let have, left;
        let hold;
        let bits;
        let _in, _out;
        let copy;
        let from;
        let from_source;
        let here = 0;
        let here_bits, here_op, here_val;
        let last_bits, last_op, last_val;
        let len;
        let ret;
        const hbuf = new Uint8Array(4);
        let opts;
        let n;
        const order = (
          /* permutation of code lengths */
          new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
        );
        if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) {
          return Z_STREAM_ERROR;
        }
        state = strm.state;
        if (state.mode === TYPE) {
          state.mode = TYPEDO;
        }
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        _in = have;
        _out = left;
        ret = Z_OK;
        inf_leave:
          for (; ; ) {
            switch (state.mode) {
              case HEAD:
                if (state.wrap === 0) {
                  state.mode = TYPEDO;
                  break;
                }
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (state.wrap & 2 && hold === 35615) {
                  if (state.wbits === 0) {
                    state.wbits = 15;
                  }
                  state.check = 0;
                  hbuf[0] = hold & 255;
                  hbuf[1] = hold >>> 8 & 255;
                  state.check = crc32(state.check, hbuf, 2, 0);
                  hold = 0;
                  bits = 0;
                  state.mode = FLAGS;
                  break;
                }
                if (state.head) {
                  state.head.done = false;
                }
                if (!(state.wrap & 1) || /* check if zlib header allowed */
                (((hold & 255) << 8) + (hold >> 8)) % 31) {
                  strm.msg = "incorrect header check";
                  state.mode = BAD;
                  break;
                }
                if ((hold & 15) !== Z_DEFLATED) {
                  strm.msg = "unknown compression method";
                  state.mode = BAD;
                  break;
                }
                hold >>>= 4;
                bits -= 4;
                len = (hold & 15) + 8;
                if (state.wbits === 0) {
                  state.wbits = len;
                }
                if (len > 15 || len > state.wbits) {
                  strm.msg = "invalid window size";
                  state.mode = BAD;
                  break;
                }
                state.dmax = 1 << state.wbits;
                state.flags = 0;
                strm.adler = state.check = 1;
                state.mode = hold & 512 ? DICTID : TYPE;
                hold = 0;
                bits = 0;
                break;
              case FLAGS:
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.flags = hold;
                if ((state.flags & 255) !== Z_DEFLATED) {
                  strm.msg = "unknown compression method";
                  state.mode = BAD;
                  break;
                }
                if (state.flags & 57344) {
                  strm.msg = "unknown header flags set";
                  state.mode = BAD;
                  break;
                }
                if (state.head) {
                  state.head.text = hold >> 8 & 1;
                }
                if (state.flags & 512 && state.wrap & 4) {
                  hbuf[0] = hold & 255;
                  hbuf[1] = hold >>> 8 & 255;
                  state.check = crc32(state.check, hbuf, 2, 0);
                }
                hold = 0;
                bits = 0;
                state.mode = TIME;
              case TIME:
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (state.head) {
                  state.head.time = hold;
                }
                if (state.flags & 512 && state.wrap & 4) {
                  hbuf[0] = hold & 255;
                  hbuf[1] = hold >>> 8 & 255;
                  hbuf[2] = hold >>> 16 & 255;
                  hbuf[3] = hold >>> 24 & 255;
                  state.check = crc32(state.check, hbuf, 4, 0);
                }
                hold = 0;
                bits = 0;
                state.mode = OS;
              case OS:
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (state.head) {
                  state.head.xflags = hold & 255;
                  state.head.os = hold >> 8;
                }
                if (state.flags & 512 && state.wrap & 4) {
                  hbuf[0] = hold & 255;
                  hbuf[1] = hold >>> 8 & 255;
                  state.check = crc32(state.check, hbuf, 2, 0);
                }
                hold = 0;
                bits = 0;
                state.mode = EXLEN;
              case EXLEN:
                if (state.flags & 1024) {
                  while (bits < 16) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  state.length = hold;
                  if (state.head) {
                    state.head.extra_len = hold;
                  }
                  if (state.flags & 512 && state.wrap & 4) {
                    hbuf[0] = hold & 255;
                    hbuf[1] = hold >>> 8 & 255;
                    state.check = crc32(state.check, hbuf, 2, 0);
                  }
                  hold = 0;
                  bits = 0;
                } else if (state.head) {
                  state.head.extra = null;
                }
                state.mode = EXTRA;
              case EXTRA:
                if (state.flags & 1024) {
                  copy = state.length;
                  if (copy > have) {
                    copy = have;
                  }
                  if (copy) {
                    if (state.head) {
                      len = state.head.extra_len - state.length;
                      if (!state.head.extra) {
                        state.head.extra = new Uint8Array(state.head.extra_len);
                      }
                      state.head.extra.set(
                        input.subarray(
                          next,
                          // extra field is limited to 65536 bytes
                          // - no need for additional size check
                          next + copy
                        ),
                        /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                        len
                      );
                    }
                    if (state.flags & 512 && state.wrap & 4) {
                      state.check = crc32(state.check, input, copy, next);
                    }
                    have -= copy;
                    next += copy;
                    state.length -= copy;
                  }
                  if (state.length) {
                    break inf_leave;
                  }
                }
                state.length = 0;
                state.mode = NAME;
              case NAME:
                if (state.flags & 2048) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  copy = 0;
                  do {
                    len = input[next + copy++];
                    if (state.head && len && state.length < 65536) {
                      state.head.name += String.fromCharCode(len);
                    }
                  } while (len && copy < have);
                  if (state.flags & 512 && state.wrap & 4) {
                    state.check = crc32(state.check, input, copy, next);
                  }
                  have -= copy;
                  next += copy;
                  if (len) {
                    break inf_leave;
                  }
                } else if (state.head) {
                  state.head.name = null;
                }
                state.length = 0;
                state.mode = COMMENT;
              case COMMENT:
                if (state.flags & 4096) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  copy = 0;
                  do {
                    len = input[next + copy++];
                    if (state.head && len && state.length < 65536) {
                      state.head.comment += String.fromCharCode(len);
                    }
                  } while (len && copy < have);
                  if (state.flags & 512 && state.wrap & 4) {
                    state.check = crc32(state.check, input, copy, next);
                  }
                  have -= copy;
                  next += copy;
                  if (len) {
                    break inf_leave;
                  }
                } else if (state.head) {
                  state.head.comment = null;
                }
                state.mode = HCRC;
              case HCRC:
                if (state.flags & 512) {
                  while (bits < 16) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if (state.wrap & 4 && hold !== (state.check & 65535)) {
                    strm.msg = "header crc mismatch";
                    state.mode = BAD;
                    break;
                  }
                  hold = 0;
                  bits = 0;
                }
                if (state.head) {
                  state.head.hcrc = state.flags >> 9 & 1;
                  state.head.done = true;
                }
                strm.adler = state.check = 0;
                state.mode = TYPE;
                break;
              case DICTID:
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                strm.adler = state.check = zswap32(hold);
                hold = 0;
                bits = 0;
                state.mode = DICT;
              case DICT:
                if (state.havedict === 0) {
                  strm.next_out = put;
                  strm.avail_out = left;
                  strm.next_in = next;
                  strm.avail_in = have;
                  state.hold = hold;
                  state.bits = bits;
                  return Z_NEED_DICT;
                }
                strm.adler = state.check = 1;
                state.mode = TYPE;
              case TYPE:
                if (flush === Z_BLOCK || flush === Z_TREES) {
                  break inf_leave;
                }
              case TYPEDO:
                if (state.last) {
                  hold >>>= bits & 7;
                  bits -= bits & 7;
                  state.mode = CHECK;
                  break;
                }
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.last = hold & 1;
                hold >>>= 1;
                bits -= 1;
                switch (hold & 3) {
                  case 0:
                    state.mode = STORED;
                    break;
                  case 1:
                    fixedtables(state);
                    state.mode = LEN_;
                    if (flush === Z_TREES) {
                      hold >>>= 2;
                      bits -= 2;
                      break inf_leave;
                    }
                    break;
                  case 2:
                    state.mode = TABLE;
                    break;
                  case 3:
                    strm.msg = "invalid block type";
                    state.mode = BAD;
                }
                hold >>>= 2;
                bits -= 2;
                break;
              case STORED:
                hold >>>= bits & 7;
                bits -= bits & 7;
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                  strm.msg = "invalid stored block lengths";
                  state.mode = BAD;
                  break;
                }
                state.length = hold & 65535;
                hold = 0;
                bits = 0;
                state.mode = COPY_;
                if (flush === Z_TREES) {
                  break inf_leave;
                }
              case COPY_:
                state.mode = COPY;
              case COPY:
                copy = state.length;
                if (copy) {
                  if (copy > have) {
                    copy = have;
                  }
                  if (copy > left) {
                    copy = left;
                  }
                  if (copy === 0) {
                    break inf_leave;
                  }
                  output.set(input.subarray(next, next + copy), put);
                  have -= copy;
                  next += copy;
                  left -= copy;
                  put += copy;
                  state.length -= copy;
                  break;
                }
                state.mode = TYPE;
                break;
              case TABLE:
                while (bits < 14) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.nlen = (hold & 31) + 257;
                hold >>>= 5;
                bits -= 5;
                state.ndist = (hold & 31) + 1;
                hold >>>= 5;
                bits -= 5;
                state.ncode = (hold & 15) + 4;
                hold >>>= 4;
                bits -= 4;
                if (state.nlen > 286 || state.ndist > 30) {
                  strm.msg = "too many length or distance symbols";
                  state.mode = BAD;
                  break;
                }
                state.have = 0;
                state.mode = LENLENS;
              case LENLENS:
                while (state.have < state.ncode) {
                  while (bits < 3) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  state.lens[order[state.have++]] = hold & 7;
                  hold >>>= 3;
                  bits -= 3;
                }
                while (state.have < 19) {
                  state.lens[order[state.have++]] = 0;
                }
                state.lencode = state.lendyn;
                state.lenbits = 7;
                opts = { bits: state.lenbits };
                ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                state.lenbits = opts.bits;
                if (ret) {
                  strm.msg = "invalid code lengths set";
                  state.mode = BAD;
                  break;
                }
                state.have = 0;
                state.mode = CODELENS;
              case CODELENS:
                while (state.have < state.nlen + state.ndist) {
                  for (; ; ) {
                    here = state.lencode[hold & (1 << state.lenbits) - 1];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 255;
                    here_val = here & 65535;
                    if (here_bits <= bits) {
                      break;
                    }
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if (here_val < 16) {
                    hold >>>= here_bits;
                    bits -= here_bits;
                    state.lens[state.have++] = here_val;
                  } else {
                    if (here_val === 16) {
                      n = here_bits + 2;
                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      hold >>>= here_bits;
                      bits -= here_bits;
                      if (state.have === 0) {
                        strm.msg = "invalid bit length repeat";
                        state.mode = BAD;
                        break;
                      }
                      len = state.lens[state.have - 1];
                      copy = 3 + (hold & 3);
                      hold >>>= 2;
                      bits -= 2;
                    } else if (here_val === 17) {
                      n = here_bits + 3;
                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      hold >>>= here_bits;
                      bits -= here_bits;
                      len = 0;
                      copy = 3 + (hold & 7);
                      hold >>>= 3;
                      bits -= 3;
                    } else {
                      n = here_bits + 7;
                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      hold >>>= here_bits;
                      bits -= here_bits;
                      len = 0;
                      copy = 11 + (hold & 127);
                      hold >>>= 7;
                      bits -= 7;
                    }
                    if (state.have + copy > state.nlen + state.ndist) {
                      strm.msg = "invalid bit length repeat";
                      state.mode = BAD;
                      break;
                    }
                    while (copy--) {
                      state.lens[state.have++] = len;
                    }
                  }
                }
                if (state.mode === BAD) {
                  break;
                }
                if (state.lens[256] === 0) {
                  strm.msg = "invalid code -- missing end-of-block";
                  state.mode = BAD;
                  break;
                }
                state.lenbits = 9;
                opts = { bits: state.lenbits };
                ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
                state.lenbits = opts.bits;
                if (ret) {
                  strm.msg = "invalid literal/lengths set";
                  state.mode = BAD;
                  break;
                }
                state.distbits = 6;
                state.distcode = state.distdyn;
                opts = { bits: state.distbits };
                ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
                state.distbits = opts.bits;
                if (ret) {
                  strm.msg = "invalid distances set";
                  state.mode = BAD;
                  break;
                }
                state.mode = LEN_;
                if (flush === Z_TREES) {
                  break inf_leave;
                }
              case LEN_:
                state.mode = LEN;
              case LEN:
                if (have >= 6 && left >= 258) {
                  strm.next_out = put;
                  strm.avail_out = left;
                  strm.next_in = next;
                  strm.avail_in = have;
                  state.hold = hold;
                  state.bits = bits;
                  inflate_fast(strm, _out);
                  put = strm.next_out;
                  output = strm.output;
                  left = strm.avail_out;
                  next = strm.next_in;
                  input = strm.input;
                  have = strm.avail_in;
                  hold = state.hold;
                  bits = state.bits;
                  if (state.mode === TYPE) {
                    state.back = -1;
                  }
                  break;
                }
                state.back = 0;
                for (; ; ) {
                  here = state.lencode[hold & (1 << state.lenbits) - 1];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (here_op && (here_op & 240) === 0) {
                  last_bits = here_bits;
                  last_op = here_op;
                  last_val = here_val;
                  for (; ; ) {
                    here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 255;
                    here_val = here & 65535;
                    if (last_bits + here_bits <= bits) {
                      break;
                    }
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  hold >>>= last_bits;
                  bits -= last_bits;
                  state.back += last_bits;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                state.back += here_bits;
                state.length = here_val;
                if (here_op === 0) {
                  state.mode = LIT;
                  break;
                }
                if (here_op & 32) {
                  state.back = -1;
                  state.mode = TYPE;
                  break;
                }
                if (here_op & 64) {
                  strm.msg = "invalid literal/length code";
                  state.mode = BAD;
                  break;
                }
                state.extra = here_op & 15;
                state.mode = LENEXT;
              case LENEXT:
                if (state.extra) {
                  n = state.extra;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  state.length += hold & (1 << state.extra) - 1;
                  hold >>>= state.extra;
                  bits -= state.extra;
                  state.back += state.extra;
                }
                state.was = state.length;
                state.mode = DIST;
              case DIST:
                for (; ; ) {
                  here = state.distcode[hold & (1 << state.distbits) - 1];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if ((here_op & 240) === 0) {
                  last_bits = here_bits;
                  last_op = here_op;
                  last_val = here_val;
                  for (; ; ) {
                    here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 255;
                    here_val = here & 65535;
                    if (last_bits + here_bits <= bits) {
                      break;
                    }
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  hold >>>= last_bits;
                  bits -= last_bits;
                  state.back += last_bits;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                state.back += here_bits;
                if (here_op & 64) {
                  strm.msg = "invalid distance code";
                  state.mode = BAD;
                  break;
                }
                state.offset = here_val;
                state.extra = here_op & 15;
                state.mode = DISTEXT;
              case DISTEXT:
                if (state.extra) {
                  n = state.extra;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  state.offset += hold & (1 << state.extra) - 1;
                  hold >>>= state.extra;
                  bits -= state.extra;
                  state.back += state.extra;
                }
                if (state.offset > state.dmax) {
                  strm.msg = "invalid distance too far back";
                  state.mode = BAD;
                  break;
                }
                state.mode = MATCH;
              case MATCH:
                if (left === 0) {
                  break inf_leave;
                }
                copy = _out - left;
                if (state.offset > copy) {
                  copy = state.offset - copy;
                  if (copy > state.whave) {
                    if (state.sane) {
                      strm.msg = "invalid distance too far back";
                      state.mode = BAD;
                      break;
                    }
                  }
                  if (copy > state.wnext) {
                    copy -= state.wnext;
                    from = state.wsize - copy;
                  } else {
                    from = state.wnext - copy;
                  }
                  if (copy > state.length) {
                    copy = state.length;
                  }
                  from_source = state.window;
                } else {
                  from_source = output;
                  from = put - state.offset;
                  copy = state.length;
                }
                if (copy > left) {
                  copy = left;
                }
                left -= copy;
                state.length -= copy;
                do {
                  output[put++] = from_source[from++];
                } while (--copy);
                if (state.length === 0) {
                  state.mode = LEN;
                }
                break;
              case LIT:
                if (left === 0) {
                  break inf_leave;
                }
                output[put++] = state.length;
                left--;
                state.mode = LEN;
                break;
              case CHECK:
                if (state.wrap) {
                  while (bits < 32) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold |= input[next++] << bits;
                    bits += 8;
                  }
                  _out -= left;
                  strm.total_out += _out;
                  state.total += _out;
                  if (state.wrap & 4 && _out) {
                    strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/
                    state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                  }
                  _out = left;
                  if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {
                    strm.msg = "incorrect data check";
                    state.mode = BAD;
                    break;
                  }
                  hold = 0;
                  bits = 0;
                }
                state.mode = LENGTH;
              case LENGTH:
                if (state.wrap && state.flags) {
                  while (bits < 32) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if (state.wrap & 4 && hold !== (state.total & 4294967295)) {
                    strm.msg = "incorrect length check";
                    state.mode = BAD;
                    break;
                  }
                  hold = 0;
                  bits = 0;
                }
                state.mode = DONE;
              case DONE:
                ret = Z_STREAM_END;
                break inf_leave;
              case BAD:
                ret = Z_DATA_ERROR;
                break inf_leave;
              case MEM:
                return Z_MEM_ERROR;
              case SYNC:
              default:
                return Z_STREAM_ERROR;
            }
          }
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
          if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
            state.mode = MEM;
            return Z_MEM_ERROR;
          }
        }
        _in -= strm.avail_in;
        _out -= strm.avail_out;
        strm.total_in += _in;
        strm.total_out += _out;
        state.total += _out;
        if (state.wrap & 4 && _out) {
          strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
          state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
        }
        strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
        if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
          ret = Z_BUF_ERROR;
        }
        return ret;
      };
      var inflateEnd = (strm) => {
        if (inflateStateCheck(strm)) {
          return Z_STREAM_ERROR;
        }
        let state = strm.state;
        if (state.window) {
          state.window = null;
        }
        strm.state = null;
        return Z_OK;
      };
      var inflateGetHeader = (strm, head) => {
        if (inflateStateCheck(strm)) {
          return Z_STREAM_ERROR;
        }
        const state = strm.state;
        if ((state.wrap & 2) === 0) {
          return Z_STREAM_ERROR;
        }
        state.head = head;
        head.done = false;
        return Z_OK;
      };
      var inflateSetDictionary = (strm, dictionary) => {
        const dictLength = dictionary.length;
        let state;
        let dictid;
        let ret;
        if (inflateStateCheck(strm)) {
          return Z_STREAM_ERROR;
        }
        state = strm.state;
        if (state.wrap !== 0 && state.mode !== DICT) {
          return Z_STREAM_ERROR;
        }
        if (state.mode === DICT) {
          dictid = 1;
          dictid = adler32(dictid, dictionary, dictLength, 0);
          if (dictid !== state.check) {
            return Z_DATA_ERROR;
          }
        }
        ret = updatewindow(strm, dictionary, dictLength, dictLength);
        if (ret) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }
        state.havedict = 1;
        return Z_OK;
      };
      module.exports.inflateReset = inflateReset;
      module.exports.inflateReset2 = inflateReset2;
      module.exports.inflateResetKeep = inflateResetKeep;
      module.exports.inflateInit = inflateInit;
      module.exports.inflateInit2 = inflateInit2;
      module.exports.inflate = inflate;
      module.exports.inflateEnd = inflateEnd;
      module.exports.inflateGetHeader = inflateGetHeader;
      module.exports.inflateSetDictionary = inflateSetDictionary;
      module.exports.inflateInfo = "pako inflate (from Nodeca project)";
    }
  });

  // node_modules/pako/lib/utils/common.js
  var require_common = __commonJS({
    "node_modules/pako/lib/utils/common.js"(exports2, module) {
      "use strict";
      var _has = (obj, key) => {
        return Object.prototype.hasOwnProperty.call(obj, key);
      };
      module.exports.assign = function(obj) {
        const sources = Array.prototype.slice.call(arguments, 1);
        while (sources.length) {
          const source = sources.shift();
          if (!source) {
            continue;
          }
          if (typeof source !== "object") {
            throw new TypeError(source + "must be non-object");
          }
          for (const p in source) {
            if (_has(source, p)) {
              obj[p] = source[p];
            }
          }
        }
        return obj;
      };
      module.exports.flattenChunks = (chunks) => {
        let len = 0;
        for (let i = 0, l = chunks.length; i < l; i++) {
          len += chunks[i].length;
        }
        const result = new Uint8Array(len);
        for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
          let chunk = chunks[i];
          result.set(chunk, pos);
          pos += chunk.length;
        }
        return result;
      };
    }
  });

  // node_modules/pako/lib/utils/strings.js
  var require_strings = __commonJS({
    "node_modules/pako/lib/utils/strings.js"(exports2, module) {
      "use strict";
      var STR_APPLY_UIA_OK = true;
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (__) {
        STR_APPLY_UIA_OK = false;
      }
      var _utf8len = new Uint8Array(256);
      for (let q = 0; q < 256; q++) {
        _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
      }
      _utf8len[254] = _utf8len[254] = 1;
      module.exports.string2buf = (str) => {
        if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) {
          return new TextEncoder().encode(str);
        }
        let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
        for (m_pos = 0; m_pos < str_len; m_pos++) {
          c = str.charCodeAt(m_pos);
          if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);
            if ((c2 & 64512) === 56320) {
              c = 65536 + (c - 55296 << 10) + (c2 - 56320);
              m_pos++;
            }
          }
          buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
        }
        buf = new Uint8Array(buf_len);
        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
          c = str.charCodeAt(m_pos);
          if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);
            if ((c2 & 64512) === 56320) {
              c = 65536 + (c - 55296 << 10) + (c2 - 56320);
              m_pos++;
            }
          }
          if (c < 128) {
            buf[i++] = c;
          } else if (c < 2048) {
            buf[i++] = 192 | c >>> 6;
            buf[i++] = 128 | c & 63;
          } else if (c < 65536) {
            buf[i++] = 224 | c >>> 12;
            buf[i++] = 128 | c >>> 6 & 63;
            buf[i++] = 128 | c & 63;
          } else {
            buf[i++] = 240 | c >>> 18;
            buf[i++] = 128 | c >>> 12 & 63;
            buf[i++] = 128 | c >>> 6 & 63;
            buf[i++] = 128 | c & 63;
          }
        }
        return buf;
      };
      var buf2binstring = (buf, len) => {
        if (len < 65534) {
          if (buf.subarray && STR_APPLY_UIA_OK) {
            return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
          }
        }
        let result = "";
        for (let i = 0; i < len; i++) {
          result += String.fromCharCode(buf[i]);
        }
        return result;
      };
      module.exports.buf2string = (buf, max3) => {
        const len = max3 || buf.length;
        if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) {
          return new TextDecoder().decode(buf.subarray(0, max3));
        }
        let i, out;
        const utf16buf = new Array(len * 2);
        for (out = 0, i = 0; i < len; ) {
          let c = buf[i++];
          if (c < 128) {
            utf16buf[out++] = c;
            continue;
          }
          let c_len = _utf8len[c];
          if (c_len > 4) {
            utf16buf[out++] = 65533;
            i += c_len - 1;
            continue;
          }
          c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
          while (c_len > 1 && i < len) {
            c = c << 6 | buf[i++] & 63;
            c_len--;
          }
          if (c_len > 1) {
            utf16buf[out++] = 65533;
            continue;
          }
          if (c < 65536) {
            utf16buf[out++] = c;
          } else {
            c -= 65536;
            utf16buf[out++] = 55296 | c >> 10 & 1023;
            utf16buf[out++] = 56320 | c & 1023;
          }
        }
        return buf2binstring(utf16buf, out);
      };
      module.exports.utf8border = (buf, max3) => {
        max3 = max3 || buf.length;
        if (max3 > buf.length) {
          max3 = buf.length;
        }
        let pos = max3 - 1;
        while (pos >= 0 && (buf[pos] & 192) === 128) {
          pos--;
        }
        if (pos < 0) {
          return max3;
        }
        if (pos === 0) {
          return max3;
        }
        return pos + _utf8len[buf[pos]] > max3 ? pos : max3;
      };
    }
  });

  // node_modules/pako/lib/zlib/messages.js
  var require_messages = __commonJS({
    "node_modules/pako/lib/zlib/messages.js"(exports2, module) {
      "use strict";
      module.exports = {
        2: "need dictionary",
        /* Z_NEED_DICT       2  */
        1: "stream end",
        /* Z_STREAM_END      1  */
        0: "",
        /* Z_OK              0  */
        "-1": "file error",
        /* Z_ERRNO         (-1) */
        "-2": "stream error",
        /* Z_STREAM_ERROR  (-2) */
        "-3": "data error",
        /* Z_DATA_ERROR    (-3) */
        "-4": "insufficient memory",
        /* Z_MEM_ERROR     (-4) */
        "-5": "buffer error",
        /* Z_BUF_ERROR     (-5) */
        "-6": "incompatible version"
        /* Z_VERSION_ERROR (-6) */
      };
    }
  });

  // node_modules/pako/lib/zlib/zstream.js
  var require_zstream = __commonJS({
    "node_modules/pako/lib/zlib/zstream.js"(exports2, module) {
      "use strict";
      function ZStream() {
        this.input = null;
        this.next_in = 0;
        this.avail_in = 0;
        this.total_in = 0;
        this.output = null;
        this.next_out = 0;
        this.avail_out = 0;
        this.total_out = 0;
        this.msg = "";
        this.state = null;
        this.data_type = 2;
        this.adler = 0;
      }
      module.exports = ZStream;
    }
  });

  // node_modules/pako/lib/zlib/gzheader.js
  var require_gzheader = __commonJS({
    "node_modules/pako/lib/zlib/gzheader.js"(exports2, module) {
      "use strict";
      function GZheader() {
        this.text = 0;
        this.time = 0;
        this.xflags = 0;
        this.os = 0;
        this.extra = null;
        this.extra_len = 0;
        this.name = "";
        this.comment = "";
        this.hcrc = 0;
        this.done = false;
      }
      module.exports = GZheader;
    }
  });

  // node_modules/pako/lib/inflate.js
  var require_inflate2 = __commonJS({
    "node_modules/pako/lib/inflate.js"(exports2, module) {
      "use strict";
      var zlib_inflate = require_inflate();
      var utils = require_common();
      var strings = require_strings();
      var msg = require_messages();
      var ZStream = require_zstream();
      var GZheader = require_gzheader();
      var toString = Object.prototype.toString;
      var {
        Z_NO_FLUSH,
        Z_FINISH,
        Z_OK,
        Z_STREAM_END,
        Z_NEED_DICT,
        Z_STREAM_ERROR,
        Z_DATA_ERROR,
        Z_MEM_ERROR
      } = require_constants();
      function Inflate(options) {
        this.options = utils.assign({
          chunkSize: 1024 * 64,
          windowBits: 15,
          to: ""
        }, options || {});
        const opt = this.options;
        if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
          opt.windowBits = -opt.windowBits;
          if (opt.windowBits === 0) {
            opt.windowBits = -15;
          }
        }
        if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
          opt.windowBits += 32;
        }
        if (opt.windowBits > 15 && opt.windowBits < 48) {
          if ((opt.windowBits & 15) === 0) {
            opt.windowBits |= 15;
          }
        }
        this.err = 0;
        this.msg = "";
        this.ended = false;
        this.chunks = [];
        this.strm = new ZStream();
        this.strm.avail_out = 0;
        let status = zlib_inflate.inflateInit2(
          this.strm,
          opt.windowBits
        );
        if (status !== Z_OK) {
          throw new Error(msg[status]);
        }
        this.header = new GZheader();
        zlib_inflate.inflateGetHeader(this.strm, this.header);
        if (opt.dictionary) {
          if (typeof opt.dictionary === "string") {
            opt.dictionary = strings.string2buf(opt.dictionary);
          } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
            opt.dictionary = new Uint8Array(opt.dictionary);
          }
          if (opt.raw) {
            status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
            if (status !== Z_OK) {
              throw new Error(msg[status]);
            }
          }
        }
      }
      Inflate.prototype.push = function(data, flush_mode) {
        const strm = this.strm;
        const chunkSize = this.options.chunkSize;
        const dictionary = this.options.dictionary;
        let status, _flush_mode, last_avail_out;
        if (this.ended)
          return false;
        if (flush_mode === ~~flush_mode)
          _flush_mode = flush_mode;
        else
          _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
        if (toString.call(data) === "[object ArrayBuffer]") {
          strm.input = new Uint8Array(data);
        } else {
          strm.input = data;
        }
        strm.next_in = 0;
        strm.avail_in = strm.input.length;
        for (; ; ) {
          if (strm.avail_out === 0) {
            strm.output = new Uint8Array(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
          }
          status = zlib_inflate.inflate(strm, _flush_mode);
          if (status === Z_NEED_DICT && dictionary) {
            status = zlib_inflate.inflateSetDictionary(strm, dictionary);
            if (status === Z_OK) {
              status = zlib_inflate.inflate(strm, _flush_mode);
            } else if (status === Z_DATA_ERROR) {
              status = Z_NEED_DICT;
            }
          }
          while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0) {
            zlib_inflate.inflateReset(strm);
            status = zlib_inflate.inflate(strm, _flush_mode);
          }
          switch (status) {
            case Z_STREAM_ERROR:
            case Z_DATA_ERROR:
            case Z_NEED_DICT:
            case Z_MEM_ERROR:
              this.onEnd(status);
              this.ended = true;
              return false;
          }
          last_avail_out = strm.avail_out;
          if (strm.next_out) {
            if (strm.avail_out === 0 || status === Z_STREAM_END) {
              if (this.options.to === "string") {
                let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                let tail = strm.next_out - next_out_utf8;
                let utf8str = strings.buf2string(strm.output, next_out_utf8);
                strm.next_out = tail;
                strm.avail_out = chunkSize - tail;
                if (tail)
                  strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
                this.onData(utf8str);
              } else {
                this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
              }
            }
          }
          if (status === Z_OK && last_avail_out === 0)
            continue;
          if (status === Z_STREAM_END) {
            status = zlib_inflate.inflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return true;
          }
          if (strm.avail_in === 0)
            break;
        }
        return true;
      };
      Inflate.prototype.onData = function(chunk) {
        this.chunks.push(chunk);
      };
      Inflate.prototype.onEnd = function(status) {
        if (status === Z_OK) {
          if (this.options.to === "string") {
            this.result = this.chunks.join("");
          } else {
            this.result = utils.flattenChunks(this.chunks);
          }
        }
        this.chunks = [];
        this.err = status;
        this.msg = this.strm.msg;
      };
      function inflate(input, options) {
        const inflator = new Inflate(options);
        inflator.push(input);
        if (inflator.err)
          throw inflator.msg || msg[inflator.err];
        return inflator.result;
      }
      function inflateRaw(input, options) {
        options = options || {};
        options.raw = true;
        return inflate(input, options);
      }
      module.exports.Inflate = Inflate;
      module.exports.inflate = inflate;
      module.exports.inflateRaw = inflateRaw;
      module.exports.ungzip = inflate;
      module.exports.constants = require_constants();
    }
  });

  // packages/engine/Source/Workers/decodeGoogleEarthEnterprisePacket.js
  var decodeGoogleEarthEnterprisePacket_exports = {};
  __export(decodeGoogleEarthEnterprisePacket_exports, {
    default: () => decodeGoogleEarthEnterprisePacket_default
  });
  function decodeGoogleEarthEnterprisePacket(parameters, transferableObjects) {
    const type = Types.fromString(parameters.type);
    let buffer = parameters.buffer;
    decodeGoogleEarthEnterpriseData_default(parameters.key, buffer);
    const uncompressedTerrain = uncompressPacket(buffer);
    buffer = uncompressedTerrain.buffer;
    const length = uncompressedTerrain.length;
    switch (type) {
      case Types.METADATA:
        return processMetadata(buffer, length, parameters.quadKey);
      case Types.TERRAIN:
        return processTerrain(buffer, length, transferableObjects);
      case Types.DBROOT:
        transferableObjects.push(buffer);
        return {
          buffer
        };
    }
  }
  function processMetadata(buffer, totalSize, quadKey) {
    const dv = new DataView(buffer);
    let offset = 0;
    const magic = dv.getUint32(offset, true);
    offset += sizeOfUint322;
    if (magic !== qtMagic) {
      throw new RuntimeError_default("Invalid magic");
    }
    const dataTypeId = dv.getUint32(offset, true);
    offset += sizeOfUint322;
    if (dataTypeId !== 1) {
      throw new RuntimeError_default("Invalid data type. Must be 1 for QuadTreePacket");
    }
    const quadVersion = dv.getUint32(offset, true);
    offset += sizeOfUint322;
    if (quadVersion !== 2) {
      throw new RuntimeError_default(
        "Invalid QuadTreePacket version. Only version 2 is supported."
      );
    }
    const numInstances = dv.getInt32(offset, true);
    offset += sizeOfInt322;
    const dataInstanceSize = dv.getInt32(offset, true);
    offset += sizeOfInt322;
    if (dataInstanceSize !== 32) {
      throw new RuntimeError_default("Invalid instance size.");
    }
    const dataBufferOffset = dv.getInt32(offset, true);
    offset += sizeOfInt322;
    const dataBufferSize = dv.getInt32(offset, true);
    offset += sizeOfInt322;
    const metaBufferSize = dv.getInt32(offset, true);
    offset += sizeOfInt322;
    if (dataBufferOffset !== numInstances * dataInstanceSize + offset) {
      throw new RuntimeError_default("Invalid dataBufferOffset");
    }
    if (dataBufferOffset + dataBufferSize + metaBufferSize !== totalSize) {
      throw new RuntimeError_default("Invalid packet offsets");
    }
    const instances = [];
    for (let i = 0; i < numInstances; ++i) {
      const bitfield = dv.getUint8(offset);
      ++offset;
      ++offset;
      const cnodeVersion = dv.getUint16(offset, true);
      offset += sizeOfUint162;
      const imageVersion = dv.getUint16(offset, true);
      offset += sizeOfUint162;
      const terrainVersion = dv.getUint16(offset, true);
      offset += sizeOfUint162;
      offset += sizeOfUint162;
      offset += sizeOfUint162;
      offset += sizeOfInt322;
      offset += sizeOfInt322;
      offset += 8;
      const imageProvider = dv.getUint8(offset++);
      const terrainProvider = dv.getUint8(offset++);
      offset += sizeOfUint162;
      instances.push(
        new GoogleEarthEnterpriseTileInformation_default(
          bitfield,
          cnodeVersion,
          imageVersion,
          terrainVersion,
          imageProvider,
          terrainProvider
        )
      );
    }
    const tileInfo = [];
    let index = 0;
    function populateTiles(parentKey, parent, level2) {
      let isLeaf = false;
      if (level2 === 4) {
        if (parent.hasSubtree()) {
          return;
        }
        isLeaf = true;
      }
      for (let i = 0; i < 4; ++i) {
        const childKey = parentKey + i.toString();
        if (isLeaf) {
          tileInfo[childKey] = null;
        } else if (level2 < 4) {
          if (!parent.hasChild(i)) {
            tileInfo[childKey] = null;
          } else {
            if (index === numInstances) {
              console.log("Incorrect number of instances");
              return;
            }
            const instance = instances[index++];
            tileInfo[childKey] = instance;
            populateTiles(childKey, instance, level2 + 1);
          }
        }
      }
    }
    let level = 0;
    const root = instances[index++];
    if (quadKey === "") {
      ++level;
    } else {
      tileInfo[quadKey] = root;
    }
    populateTiles(quadKey, root, level);
    return tileInfo;
  }
  function processTerrain(buffer, totalSize, transferableObjects) {
    const dv = new DataView(buffer);
    const advanceMesh = function(pos) {
      for (let sub = 0; sub < numSubMeshesPerMesh; ++sub) {
        const size = dv.getUint32(pos, true);
        pos += sizeOfUint322;
        pos += size;
        if (pos > totalSize) {
          throw new RuntimeError_default("Malformed terrain packet found.");
        }
      }
      return pos;
    };
    let offset = 0;
    const terrainMeshes = [];
    while (terrainMeshes.length < numMeshesPerPacket) {
      const start = offset;
      offset = advanceMesh(offset);
      const mesh = buffer.slice(start, offset);
      transferableObjects.push(mesh);
      terrainMeshes.push(mesh);
    }
    return terrainMeshes;
  }
  function uncompressPacket(data) {
    const dv = new DataView(data);
    let offset = 0;
    const magic = dv.getUint32(offset, true);
    offset += sizeOfUint322;
    if (magic !== compressedMagic2 && magic !== compressedMagicSwap2) {
      throw new RuntimeError_default("Invalid magic");
    }
    const size = dv.getUint32(offset, magic === compressedMagic2);
    offset += sizeOfUint322;
    const compressedPacket = new Uint8Array(data, offset);
    const uncompressedPacket = import_inflate.default.inflate(compressedPacket);
    if (uncompressedPacket.length !== size) {
      throw new RuntimeError_default("Size of packet doesn't match header");
    }
    return uncompressedPacket;
  }
  var import_inflate, sizeOfUint162, sizeOfInt322, sizeOfUint322, Types, qtMagic, numMeshesPerPacket, numSubMeshesPerMesh, compressedMagic2, compressedMagicSwap2, decodeGoogleEarthEnterprisePacket_default;
  var init_decodeGoogleEarthEnterprisePacket = __esm({
    "packages/engine/Source/Workers/decodeGoogleEarthEnterprisePacket.js"() {
      init_decodeGoogleEarthEnterpriseData();
      init_GoogleEarthEnterpriseTileInformation();
      init_RuntimeError();
      import_inflate = __toESM(require_inflate2(), 1);
      init_createTaskProcessorWorker();
      sizeOfUint162 = Uint16Array.BYTES_PER_ELEMENT;
      sizeOfInt322 = Int32Array.BYTES_PER_ELEMENT;
      sizeOfUint322 = Uint32Array.BYTES_PER_ELEMENT;
      Types = {
        METADATA: 0,
        TERRAIN: 1,
        DBROOT: 2
      };
      Types.fromString = function(s) {
        if (s === "Metadata") {
          return Types.METADATA;
        } else if (s === "Terrain") {
          return Types.TERRAIN;
        } else if (s === "DbRoot") {
          return Types.DBROOT;
        }
      };
      qtMagic = 32301;
      numMeshesPerPacket = 5;
      numSubMeshesPerMesh = 4;
      compressedMagic2 = 1953029805;
      compressedMagicSwap2 = 2917034100;
      decodeGoogleEarthEnterprisePacket_default = createTaskProcessorWorker_default(decodeGoogleEarthEnterprisePacket);
    }
  });

  // packages/engine/Source/Core/srgbToLinear.js
  function srgbToLinear(value) {
    Check_default.defined("value", value);
    if (value <= 0.04045) {
      return value * 0.07739938080495357;
    }
    return Math.pow(
      // eslint-disable-next-line no-loss-of-precision
      (value + 0.055) * 0.9478672985781991,
      2.4
    );
  }
  var srgbToLinear_default;
  var init_srgbToLinear = __esm({
    "packages/engine/Source/Core/srgbToLinear.js"() {
      init_Check();
      srgbToLinear_default = srgbToLinear;
    }
  });

  // packages/engine/Source/Workers/decodeI3S.js
  var decodeI3S_exports = {};
  __export(decodeI3S_exports, {
    default: () => decodeI3S_default
  });
  function bilinearInterpolate(tx, ty, h00, h10, h01, h11) {
    const a3 = h00 * (1 - tx) + h10 * tx;
    const b = h01 * (1 - tx) + h11 * tx;
    return a3 * (1 - ty) + b * ty;
  }
  function sampleMap(u3, v3, width, data) {
    const address = u3 + v3 * width;
    return data[address];
  }
  function sampleGeoid(sampleX, sampleY, geoidData) {
    const extent = geoidData.nativeExtent;
    let x = (sampleX - extent.west) / (extent.east - extent.west) * (geoidData.width - 1);
    let y = (sampleY - extent.south) / (extent.north - extent.south) * (geoidData.height - 1);
    const xi = Math.floor(x);
    let yi = Math.floor(y);
    x -= xi;
    y -= yi;
    const xNext = xi < geoidData.width ? xi + 1 : xi;
    let yNext = yi < geoidData.height ? yi + 1 : yi;
    yi = geoidData.height - 1 - yi;
    yNext = geoidData.height - 1 - yNext;
    const h00 = sampleMap(xi, yi, geoidData.width, geoidData.buffer);
    const h10 = sampleMap(xNext, yi, geoidData.width, geoidData.buffer);
    const h01 = sampleMap(xi, yNext, geoidData.width, geoidData.buffer);
    const h11 = sampleMap(xNext, yNext, geoidData.width, geoidData.buffer);
    let finalHeight = bilinearInterpolate(x, y, h00, h10, h01, h11);
    finalHeight = finalHeight * geoidData.scale + geoidData.offset;
    return finalHeight;
  }
  function sampleGeoidFromList(lon, lat, geoidDataList) {
    for (let i = 0; i < geoidDataList.length; i++) {
      const localExtent = geoidDataList[i].nativeExtent;
      let localPt = new Cartesian3_default();
      if (geoidDataList[i].projectionType === "WebMercator") {
        const radii = geoidDataList[i].projection._ellipsoid._radii;
        const webMercatorProj = new WebMercatorProjection_default(
          new Ellipsoid_default(radii.x, radii.y, radii.z)
        );
        localPt = webMercatorProj.project(new Cartographic_default(lon, lat, 0));
      } else {
        localPt.x = lon;
        localPt.y = lat;
      }
      if (localPt.x > localExtent.west && localPt.x < localExtent.east && localPt.y > localExtent.south && localPt.y < localExtent.north) {
        return sampleGeoid(localPt.x, localPt.y, geoidDataList[i]);
      }
    }
    return 0;
  }
  function orthometricToEllipsoidal(vertexCount, position, scale_x, scale_y, center, geoidDataList, fast) {
    if (fast) {
      return;
    }
    const centerHeight = sampleGeoidFromList(
      center.longitude,
      center.latitude,
      geoidDataList
    );
    for (let i = 0; i < vertexCount; ++i) {
      const height = sampleGeoidFromList(
        center.longitude + Math_default.toRadians(scale_x * position[i * 3]),
        center.latitude + Math_default.toRadians(scale_y * position[i * 3 + 1]),
        geoidDataList
      );
      position[i * 3 + 2] += height - centerHeight;
    }
  }
  function transformToLocal(vertexCount, positions, normals, cartographicCenter, cartesianCenter, parentRotation, ellipsoidRadiiSquare, scale_x, scale_y) {
    if (vertexCount === 0 || !defined_default(positions) || positions.length === 0) {
      return;
    }
    const ellipsoid = new Ellipsoid_default(
      Math.sqrt(ellipsoidRadiiSquare.x),
      Math.sqrt(ellipsoidRadiiSquare.y),
      Math.sqrt(ellipsoidRadiiSquare.z)
    );
    for (let i = 0; i < vertexCount; ++i) {
      const indexOffset = i * 3;
      const indexOffset1 = indexOffset + 1;
      const indexOffset2 = indexOffset + 2;
      const cartographic2 = new Cartographic_default();
      cartographic2.longitude = cartographicCenter.longitude + Math_default.toRadians(scale_x * positions[indexOffset]);
      cartographic2.latitude = cartographicCenter.latitude + Math_default.toRadians(scale_y * positions[indexOffset1]);
      cartographic2.height = cartographicCenter.height + positions[indexOffset2];
      const position = {};
      ellipsoid.cartographicToCartesian(cartographic2, position);
      position.x -= cartesianCenter.x;
      position.y -= cartesianCenter.y;
      position.z -= cartesianCenter.z;
      const rotatedPosition = {};
      Matrix3_default.multiplyByVector(parentRotation, position, rotatedPosition);
      positions[indexOffset] = rotatedPosition.x;
      positions[indexOffset1] = rotatedPosition.y;
      positions[indexOffset2] = rotatedPosition.z;
      if (defined_default(normals)) {
        const normal2 = new Cartesian3_default(
          normals[indexOffset],
          normals[indexOffset1],
          normals[indexOffset2]
        );
        const rotatedNormal = {};
        Matrix3_default.multiplyByVector(parentRotation, normal2, rotatedNormal);
        normals[indexOffset] = rotatedNormal.x;
        normals[indexOffset1] = rotatedNormal.y;
        normals[indexOffset2] = rotatedNormal.z;
      }
    }
  }
  function cropUVs(vertexCount, uv0s, uvRegions) {
    for (let vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
      const minU = uvRegions[vertexIndex * 4] / 65535;
      const minV = uvRegions[vertexIndex * 4 + 1] / 65535;
      const scaleU = (uvRegions[vertexIndex * 4 + 2] - uvRegions[vertexIndex * 4]) / 65535;
      const scaleV = (uvRegions[vertexIndex * 4 + 3] - uvRegions[vertexIndex * 4 + 1]) / 65535;
      uv0s[vertexIndex * 2] *= scaleU;
      uv0s[vertexIndex * 2] += minU;
      uv0s[vertexIndex * 2 + 1] *= scaleV;
      uv0s[vertexIndex * 2 + 1] += minV;
    }
  }
  function generateIndexArray(vertexCount, indices, colors, splitGeometryByColorTransparency) {
    const indexArray = new Uint32Array(vertexCount);
    const vertexIndexFn = defined_default(indices) ? (vertexIndex) => indices[vertexIndex] : (vertexIndex) => vertexIndex;
    let transparentVertexOffset = 0;
    if (splitGeometryByColorTransparency && defined_default(colors)) {
      const isVertexTransparentFn = (vertexIndex) => colors[vertexIndexFn(vertexIndex) * 4 + 3] < 255;
      for (let vertexIndex = 0; vertexIndex < vertexCount; vertexIndex += 3) {
        if (!isVertexTransparentFn(vertexIndex) && !isVertexTransparentFn(vertexIndex + 1) && !isVertexTransparentFn(vertexIndex + 2)) {
          indexArray[transparentVertexOffset++] = vertexIndexFn(vertexIndex);
          indexArray[transparentVertexOffset++] = vertexIndexFn(vertexIndex + 1);
          indexArray[transparentVertexOffset++] = vertexIndexFn(vertexIndex + 2);
        }
      }
      if (transparentVertexOffset > 0) {
        let offset = transparentVertexOffset;
        for (let vertexIndex = 0; vertexIndex < vertexCount; vertexIndex += 3) {
          if (isVertexTransparentFn(vertexIndex) || isVertexTransparentFn(vertexIndex + 1) || isVertexTransparentFn(vertexIndex + 2)) {
            indexArray[offset++] = vertexIndexFn(vertexIndex);
            indexArray[offset++] = vertexIndexFn(vertexIndex + 1);
            indexArray[offset++] = vertexIndexFn(vertexIndex + 2);
          }
        }
      } else {
        for (let vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
          indexArray[vertexIndex] = vertexIndexFn(vertexIndex);
        }
      }
    } else {
      transparentVertexOffset = vertexCount;
      for (let vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
        indexArray[vertexIndex] = vertexIndexFn(vertexIndex);
      }
    }
    return {
      indexArray,
      transparentVertexOffset
    };
  }
  function getFeatureHash(symbologyData, outlinesHash, featureIndex) {
    const featureHash = outlinesHash[featureIndex];
    if (defined_default(featureHash)) {
      return featureHash;
    }
    const newFeatureHash = outlinesHash[featureIndex] = {
      positions: {},
      indices: {},
      edges: {}
    };
    const featureSymbology = defaultValue_default(
      symbologyData[featureIndex],
      symbologyData.default
    );
    newFeatureHash.hasOutline = defined_default(featureSymbology?.edges);
    return newFeatureHash;
  }
  function addVertexToHash(indexHash, positionHash, vertexIndex, positions) {
    if (!defined_default(indexHash[vertexIndex])) {
      const startPositionIndex = vertexIndex * 3;
      let coordinateHash = positionHash;
      for (let index = 0; index < 3; index++) {
        const coordinate = positions[startPositionIndex + index];
        if (!defined_default(coordinateHash[coordinate])) {
          coordinateHash[coordinate] = {};
        }
        coordinateHash = coordinateHash[coordinate];
      }
      if (!defined_default(coordinateHash.index)) {
        coordinateHash.index = vertexIndex;
      }
      indexHash[vertexIndex] = coordinateHash.index;
    }
  }
  function addEdgeToHash(edgeHash, vertexAIndex, vertexBIndex, vertexAIndexUnique, vertexBIndexUnique, normalIndex) {
    let startVertexIndex;
    let endVertexIndex;
    if (vertexAIndexUnique < vertexBIndexUnique) {
      startVertexIndex = vertexAIndexUnique;
      endVertexIndex = vertexBIndexUnique;
    } else {
      startVertexIndex = vertexBIndexUnique;
      endVertexIndex = vertexAIndexUnique;
    }
    let edgeStart = edgeHash[startVertexIndex];
    if (!defined_default(edgeStart)) {
      edgeStart = edgeHash[startVertexIndex] = {};
    }
    let edgeEnd = edgeStart[endVertexIndex];
    if (!defined_default(edgeEnd)) {
      edgeEnd = edgeStart[endVertexIndex] = {
        normalsIndex: [],
        outlines: []
      };
    }
    edgeEnd.normalsIndex.push(normalIndex);
    if (edgeEnd.outlines.length === 0 || vertexAIndex !== vertexAIndexUnique || vertexBIndex !== vertexBIndexUnique) {
      edgeEnd.outlines.push(vertexAIndex, vertexBIndex);
    }
  }
  function generateOutlinesHash(symbologyData, featureIndexArray, indexArray, positions) {
    const outlinesHash = [];
    for (let i = 0; i < indexArray.length; i += 3) {
      const featureIndex = defined_default(featureIndexArray) ? featureIndexArray[indexArray[i]] : "default";
      const featureHash = getFeatureHash(
        symbologyData,
        outlinesHash,
        featureIndex
      );
      if (!featureHash.hasOutline) {
        continue;
      }
      const indexHash = featureHash.indices;
      const positionHash = featureHash.positions;
      for (let vertex = 0; vertex < 3; vertex++) {
        const vertexIndex = indexArray[i + vertex];
        addVertexToHash(indexHash, positionHash, vertexIndex, positions);
      }
      const edgeHash = featureHash.edges;
      for (let vertex = 0; vertex < 3; vertex++) {
        const vertexIndex = indexArray[i + vertex];
        const nextVertexIndex = indexArray[i + (vertex + 1) % 3];
        const uniqueVertexIndex = indexHash[vertexIndex];
        const uniqueNextVertexIndex = indexHash[nextVertexIndex];
        addEdgeToHash(
          edgeHash,
          vertexIndex,
          nextVertexIndex,
          uniqueVertexIndex,
          uniqueNextVertexIndex,
          i
        );
      }
    }
    return outlinesHash;
  }
  function calculateFaceNormal(normals, vertexAIndex, indexArray, positions) {
    const positionAIndex = indexArray[vertexAIndex] * 3;
    const positionBIndex = indexArray[vertexAIndex + 1] * 3;
    const positionCIndex = indexArray[vertexAIndex + 2] * 3;
    Cartesian3_default.fromArray(positions, positionAIndex, calculateFaceNormalA);
    Cartesian3_default.fromArray(positions, positionBIndex, calculateFaceNormalB);
    Cartesian3_default.fromArray(positions, positionCIndex, calculateFaceNormalC);
    Cartesian3_default.subtract(
      calculateFaceNormalB,
      calculateFaceNormalA,
      calculateFaceNormalB
    );
    Cartesian3_default.subtract(
      calculateFaceNormalC,
      calculateFaceNormalA,
      calculateFaceNormalC
    );
    Cartesian3_default.cross(
      calculateFaceNormalB,
      calculateFaceNormalC,
      calculateFaceNormalA
    );
    const magnitude = Cartesian3_default.magnitude(calculateFaceNormalA);
    if (magnitude !== 0) {
      Cartesian3_default.divideByScalar(
        calculateFaceNormalA,
        magnitude,
        calculateFaceNormalA
      );
    }
    const normalAIndex = vertexAIndex * 3;
    const normalBIndex = (vertexAIndex + 1) * 3;
    const normalCIndex = (vertexAIndex + 2) * 3;
    Cartesian3_default.pack(calculateFaceNormalA, normals, normalAIndex);
    Cartesian3_default.pack(calculateFaceNormalA, normals, normalBIndex);
    Cartesian3_default.pack(calculateFaceNormalA, normals, normalCIndex);
  }
  function isEdgeSmooth(normals, normalAIndex, normalBIndex) {
    Cartesian3_default.fromArray(normals, normalAIndex, isEdgeSmoothA);
    Cartesian3_default.fromArray(normals, normalBIndex, isEdgeSmoothB);
    const cosine = Cartesian3_default.dot(isEdgeSmoothA, isEdgeSmoothB);
    const sine = Cartesian3_default.magnitude(
      Cartesian3_default.cross(isEdgeSmoothA, isEdgeSmoothB, isEdgeSmoothA)
    );
    return Math.atan2(sine, cosine) < 0.25;
  }
  function addOutlinesForEdge(outlines, edgeData, indexArray, positions, normals) {
    if (edgeData.normalsIndex.length > 1) {
      const normalsByIndex = positions.length === normals.length;
      for (let indexA = 0; indexA < edgeData.normalsIndex.length; indexA++) {
        const vertexAIndex = edgeData.normalsIndex[indexA];
        if (!defined_default(normals[vertexAIndex * 3])) {
          calculateFaceNormal(normals, vertexAIndex, indexArray, positions);
        }
        if (indexA === 0) {
          continue;
        }
        for (let indexB = 0; indexB < indexA; indexB++) {
          const vertexBIndex = edgeData.normalsIndex[indexB];
          const normalAIndex = normalsByIndex ? indexArray[vertexAIndex] * 3 : vertexAIndex * 3;
          const normalBIndex = normalsByIndex ? indexArray[vertexBIndex] * 3 : vertexBIndex * 3;
          if (isEdgeSmooth(normals, normalAIndex, normalBIndex)) {
            return;
          }
        }
      }
    }
    outlines.push(...edgeData.outlines);
  }
  function addOutlinesForFeature(outlines, edgeHash, indexArray, positions, normals) {
    const edgeStartKeys = Object.keys(edgeHash);
    for (let startIndex = 0; startIndex < edgeStartKeys.length; startIndex++) {
      const edgeEnds = edgeHash[edgeStartKeys[startIndex]];
      const edgeEndKeys = Object.keys(edgeEnds);
      for (let endIndex = 0; endIndex < edgeEndKeys.length; endIndex++) {
        const edgeData = edgeEnds[edgeEndKeys[endIndex]];
        addOutlinesForEdge(outlines, edgeData, indexArray, positions, normals);
      }
    }
  }
  function generateOutlinesFromHash(outlinesHash, indexArray, positions, normals) {
    const outlines = [];
    const features = Object.keys(outlinesHash);
    for (let featureIndex = 0; featureIndex < features.length; featureIndex++) {
      const edgeHash = outlinesHash[features[featureIndex]].edges;
      addOutlinesForFeature(outlines, edgeHash, indexArray, positions, normals);
    }
    return outlines;
  }
  function generateOutlinesIndexArray(symbologyData, featureIndexArray, indexArray, positions, normals) {
    if (!defined_default(symbologyData) || Object.keys(symbologyData).length === 0) {
      return void 0;
    }
    const outlinesHash = generateOutlinesHash(
      symbologyData,
      featureIndexArray,
      indexArray,
      positions
    );
    if (!defined_default(normals) || indexArray.length * 3 !== normals.length) {
      normals = [];
    }
    const outlines = generateOutlinesFromHash(
      outlinesHash,
      indexArray,
      positions,
      normals
    );
    const outlinesIndexArray = outlines.length > 0 ? new Uint32Array(outlines) : void 0;
    return outlinesIndexArray;
  }
  function convertColorsArray(colors) {
    const colorsArray = new Float32Array(colors.length);
    for (let index = 0; index < colors.length; index += 4) {
      colorsArray[index] = srgbToLinear_default(Color_default.byteToFloat(colors[index]));
      colorsArray[index + 1] = srgbToLinear_default(Color_default.byteToFloat(colors[index + 1]));
      colorsArray[index + 2] = srgbToLinear_default(Color_default.byteToFloat(colors[index + 2]));
      colorsArray[index + 3] = Color_default.byteToFloat(colors[index + 3]);
    }
    return colorsArray;
  }
  function generateNormals(vertexCount, indices, positions, normals, uv0s, colors, featureIndex) {
    const result = {
      normals: void 0,
      positions: void 0,
      uv0s: void 0,
      colors: void 0,
      featureIndex: void 0,
      vertexCount: void 0
    };
    if (vertexCount === 0 || !defined_default(positions) || positions.length === 0 || defined_default(normals)) {
      return result;
    }
    if (defined_default(indices)) {
      result.vertexCount = indices.length;
      result.positions = new Float32Array(indices.length * 3);
      result.uv0s = defined_default(uv0s) ? new Float32Array(indices.length * 2) : void 0;
      result.colors = defined_default(colors) ? new Uint8Array(indices.length * 4) : void 0;
      result.featureIndex = defined_default(featureIndex) ? new Array(indices.length) : void 0;
      for (let i = 0; i < indices.length; i++) {
        const index = indices[i];
        result.positions[i * 3] = positions[index * 3];
        result.positions[i * 3 + 1] = positions[index * 3 + 1];
        result.positions[i * 3 + 2] = positions[index * 3 + 2];
        if (defined_default(result.uv0s)) {
          result.uv0s[i * 2] = uv0s[index * 2];
          result.uv0s[i * 2 + 1] = uv0s[index * 2 + 1];
        }
        if (defined_default(result.colors)) {
          result.colors[i * 4] = colors[index * 4];
          result.colors[i * 4 + 1] = colors[index * 4 + 1];
          result.colors[i * 4 + 2] = colors[index * 4 + 2];
          result.colors[i * 4 + 3] = colors[index * 4 + 3];
        }
        if (defined_default(result.featureIndex)) {
          result.featureIndex[i] = featureIndex[index];
        }
      }
      vertexCount = indices.length;
      positions = result.positions;
    }
    indices = new Array(vertexCount);
    for (let i = 0; i < vertexCount; i++) {
      indices[i] = i;
    }
    result.normals = new Float32Array(indices.length * 3);
    for (let i = 0; i < indices.length; i += 3) {
      calculateFaceNormal(result.normals, i, indices, positions);
    }
    return result;
  }
  function generateGltfBuffer(vertexCount, indices, positions, normals, uv0s, colors, featureIndex, parameters) {
    if (vertexCount === 0 || !defined_default(positions) || positions.length === 0) {
      return {
        buffers: [],
        bufferViews: [],
        accessors: [],
        meshes: [],
        nodes: [],
        nodesInScene: []
      };
    }
    const buffers = [];
    const bufferViews = [];
    const accessors = [];
    const meshes = [];
    const nodes = [];
    const nodesInScene = [];
    const rootExtensions = {};
    const extensionsUsed = [];
    if (defined_default(indices)) {
      vertexCount = indices.length;
    }
    const { indexArray, transparentVertexOffset } = generateIndexArray(
      vertexCount,
      indices,
      colors,
      parameters.splitGeometryByColorTransparency
    );
    const indicesBlob = new Blob([indexArray], { type: "application/binary" });
    const indicesURL = URL.createObjectURL(indicesBlob);
    const endIndex = vertexCount;
    const featureIndexArray = parameters.enableFeatures && defined_default(featureIndex) ? new Float32Array(featureIndex.length) : void 0;
    let featureCount = 0;
    if (defined_default(featureIndexArray)) {
      for (let index = 0; index < featureIndex.length; ++index) {
        featureIndexArray[index] = featureIndex[index];
        const countByIndex = featureIndex[index] + 1;
        if (featureCount < countByIndex) {
          featureCount = countByIndex;
        }
      }
    }
    let outlinesIndicesURL;
    const outlinesIndexArray = generateOutlinesIndexArray(
      parameters.symbologyData,
      featureIndex,
      indexArray,
      positions,
      normals
    );
    if (defined_default(outlinesIndexArray)) {
      const outlinesIndicesBlob = new Blob([outlinesIndexArray], {
        type: "application/binary"
      });
      outlinesIndicesURL = URL.createObjectURL(outlinesIndicesBlob);
    }
    const meshPositions = positions.subarray(0, endIndex * 3);
    const positionsBlob = new Blob([meshPositions], {
      type: "application/binary"
    });
    const positionsURL = URL.createObjectURL(positionsBlob);
    let minX = Number.POSITIVE_INFINITY;
    let maxX = Number.NEGATIVE_INFINITY;
    let minY = Number.POSITIVE_INFINITY;
    let maxY = Number.NEGATIVE_INFINITY;
    let minZ = Number.POSITIVE_INFINITY;
    let maxZ = Number.NEGATIVE_INFINITY;
    for (let i = 0; i < meshPositions.length / 3; i++) {
      minX = Math.min(minX, meshPositions[i * 3 + 0]);
      maxX = Math.max(maxX, meshPositions[i * 3 + 0]);
      minY = Math.min(minY, meshPositions[i * 3 + 1]);
      maxY = Math.max(maxY, meshPositions[i * 3 + 1]);
      minZ = Math.min(minZ, meshPositions[i * 3 + 2]);
      maxZ = Math.max(maxZ, meshPositions[i * 3 + 2]);
    }
    const meshNormals = normals ? normals.subarray(0, endIndex * 3) : void 0;
    let normalsURL;
    if (defined_default(meshNormals)) {
      const normalsBlob = new Blob([meshNormals], {
        type: "application/binary"
      });
      normalsURL = URL.createObjectURL(normalsBlob);
    }
    const meshUv0s = uv0s ? uv0s.subarray(0, endIndex * 2) : void 0;
    let uv0URL;
    if (defined_default(meshUv0s)) {
      const uv0Blob = new Blob([meshUv0s], { type: "application/binary" });
      uv0URL = URL.createObjectURL(uv0Blob);
    }
    const meshColorsInBytes = defined_default(colors) ? convertColorsArray(colors.subarray(0, endIndex * 4)) : void 0;
    let colorsURL;
    if (defined_default(meshColorsInBytes)) {
      const colorsBlob = new Blob([meshColorsInBytes], {
        type: "application/binary"
      });
      colorsURL = URL.createObjectURL(colorsBlob);
    }
    const meshFeatureId0 = defined_default(featureIndexArray) ? featureIndexArray.subarray(0, endIndex) : void 0;
    let featureId0URL;
    if (defined_default(meshFeatureId0)) {
      const featureId0Blob = new Blob([meshFeatureId0], {
        type: "application/binary"
      });
      featureId0URL = URL.createObjectURL(featureId0Blob);
    }
    const meshPropertyTable0 = defined_default(featureIndexArray) ? new Float32Array(featureCount) : void 0;
    let propertyTable0URL;
    if (defined_default(meshPropertyTable0)) {
      for (let index = 0; index < meshPropertyTable0.length; ++index) {
        meshPropertyTable0[index] = index;
      }
      const propertyTable0Blob = new Blob([meshPropertyTable0], {
        type: "application/binary"
      });
      propertyTable0URL = URL.createObjectURL(propertyTable0Blob);
    }
    const attributes = {};
    const extensions = {};
    attributes.POSITION = accessors.length;
    buffers.push({
      uri: positionsURL,
      byteLength: meshPositions.byteLength
    });
    bufferViews.push({
      buffer: buffers.length - 1,
      byteOffset: 0,
      byteLength: meshPositions.byteLength,
      target: 34962
    });
    accessors.push({
      bufferView: bufferViews.length - 1,
      byteOffset: 0,
      componentType: 5126,
      count: meshPositions.length / 3,
      type: "VEC3",
      max: [minX, minY, minZ],
      min: [maxX, maxY, maxZ]
    });
    if (defined_default(normalsURL)) {
      attributes.NORMAL = accessors.length;
      buffers.push({
        uri: normalsURL,
        byteLength: meshNormals.byteLength
      });
      bufferViews.push({
        buffer: buffers.length - 1,
        byteOffset: 0,
        byteLength: meshNormals.byteLength,
        target: 34962
      });
      accessors.push({
        bufferView: bufferViews.length - 1,
        byteOffset: 0,
        componentType: 5126,
        count: meshNormals.length / 3,
        type: "VEC3"
      });
    }
    if (defined_default(uv0URL)) {
      attributes.TEXCOORD_0 = accessors.length;
      buffers.push({
        uri: uv0URL,
        byteLength: meshUv0s.byteLength
      });
      bufferViews.push({
        buffer: buffers.length - 1,
        byteOffset: 0,
        byteLength: meshUv0s.byteLength,
        target: 34962
      });
      accessors.push({
        bufferView: bufferViews.length - 1,
        byteOffset: 0,
        componentType: 5126,
        count: meshUv0s.length / 2,
        type: "VEC2"
      });
    }
    if (defined_default(colorsURL)) {
      attributes.COLOR_0 = accessors.length;
      buffers.push({
        uri: colorsURL,
        byteLength: meshColorsInBytes.byteLength
      });
      bufferViews.push({
        buffer: buffers.length - 1,
        byteOffset: 0,
        byteLength: meshColorsInBytes.byteLength,
        target: 34962
      });
      accessors.push({
        bufferView: bufferViews.length - 1,
        byteOffset: 0,
        componentType: 5126,
        count: meshColorsInBytes.length / 4,
        type: "VEC4"
      });
    }
    if (defined_default(featureId0URL)) {
      attributes._FEATURE_ID_0 = accessors.length;
      buffers.push({
        uri: featureId0URL,
        byteLength: meshFeatureId0.byteLength
      });
      bufferViews.push({
        buffer: buffers.length - 1,
        byteOffset: 0,
        byteLength: meshFeatureId0.byteLength,
        target: 34963
      });
      accessors.push({
        bufferView: bufferViews.length - 1,
        byteOffset: 0,
        componentType: 5126,
        count: meshFeatureId0.length,
        type: "SCALAR"
      });
      extensions.EXT_mesh_features = {
        featureIds: [
          {
            attribute: 0,
            propertyTable: 0,
            featureCount
          }
        ]
      };
      extensionsUsed.push("EXT_mesh_features");
    }
    if (defined_default(propertyTable0URL)) {
      buffers.push({
        uri: propertyTable0URL,
        byteLength: meshPropertyTable0.byteLength
      });
      bufferViews.push({
        buffer: buffers.length - 1,
        byteOffset: 0,
        byteLength: meshPropertyTable0.byteLength,
        target: 34963
      });
      rootExtensions.EXT_structural_metadata = {
        schema: {
          id: "i3s-metadata-schema-001",
          name: "I3S metadata schema 001",
          description: "The schema for I3S metadata",
          version: "1.0",
          classes: {
            feature: {
              name: "feature",
              description: "Feature metadata",
              properties: {
                index: {
                  description: "The feature index",
                  type: "SCALAR",
                  componentType: "FLOAT32",
                  required: true
                }
              }
            }
          }
        },
        propertyTables: [
          {
            name: "feature-indices-mapping",
            class: "feature",
            count: featureCount,
            properties: {
              index: {
                values: bufferViews.length - 1
              }
            }
          }
        ]
      };
      extensionsUsed.push("EXT_structural_metadata");
    }
    if (defined_default(outlinesIndicesURL)) {
      buffers.push({
        uri: outlinesIndicesURL,
        byteLength: outlinesIndexArray.byteLength
      });
      bufferViews.push({
        buffer: buffers.length - 1,
        byteOffset: 0,
        byteLength: outlinesIndexArray.byteLength,
        target: 34963
      });
      accessors.push({
        bufferView: bufferViews.length - 1,
        byteOffset: 0,
        componentType: 5125,
        count: outlinesIndexArray.length,
        type: "SCALAR"
      });
      extensions.CESIUM_primitive_outline = {
        indices: accessors.length - 1
      };
      extensionsUsed.push("CESIUM_primitive_outline");
    }
    buffers.push({
      uri: indicesURL,
      byteLength: indexArray.byteLength
    });
    bufferViews.push({
      buffer: buffers.length - 1,
      byteOffset: 0,
      byteLength: indexArray.byteLength,
      target: 34963
    });
    const meshPrimitives = [];
    if (transparentVertexOffset > 0) {
      accessors.push({
        bufferView: bufferViews.length - 1,
        byteOffset: 0,
        componentType: 5125,
        count: transparentVertexOffset,
        type: "SCALAR"
      });
      meshPrimitives.push({
        attributes,
        indices: accessors.length - 1,
        material: meshPrimitives.length,
        extensions
      });
    }
    if (transparentVertexOffset < vertexCount) {
      accessors.push({
        bufferView: bufferViews.length - 1,
        byteOffset: 4 * transparentVertexOffset,
        // skip 4 bytes for each opaque vertex
        componentType: 5125,
        count: vertexCount - transparentVertexOffset,
        type: "SCALAR"
      });
      meshPrimitives.push({
        attributes,
        indices: accessors.length - 1,
        material: meshPrimitives.length,
        extensions,
        extra: {
          isTransparent: true
        }
      });
    }
    meshes.push({
      primitives: meshPrimitives
    });
    nodesInScene.push(0);
    nodes.push({ mesh: 0 });
    return {
      buffers,
      bufferViews,
      accessors,
      meshes,
      nodes,
      nodesInScene,
      rootExtensions,
      extensionsUsed
    };
  }
  function decode2(data, schema, bufferInfo, featureData) {
    const magicNumber = new Uint8Array(data, 0, 5);
    if (magicNumber[0] === "D".charCodeAt() && magicNumber[1] === "R".charCodeAt() && magicNumber[2] === "A".charCodeAt() && magicNumber[3] === "C".charCodeAt() && magicNumber[4] === "O".charCodeAt()) {
      return decodeDracoEncodedGeometry(data, bufferInfo);
    }
    return decodeBinaryGeometry(data, schema, bufferInfo, featureData);
  }
  function decodeDracoEncodedGeometry(data) {
    const dracoDecoderModule = draco2;
    const buffer = new dracoDecoderModule.DecoderBuffer();
    const byteArray = new Uint8Array(data);
    buffer.Init(byteArray, byteArray.length);
    const dracoDecoder = new dracoDecoderModule.Decoder();
    const geometryType = dracoDecoder.GetEncodedGeometryType(buffer);
    const metadataQuerier = new dracoDecoderModule.MetadataQuerier();
    let dracoGeometry;
    let status;
    if (geometryType === dracoDecoderModule.TRIANGULAR_MESH) {
      dracoGeometry = new dracoDecoderModule.Mesh();
      status = dracoDecoder.DecodeBufferToMesh(buffer, dracoGeometry);
    }
    const decodedGeometry = {
      vertexCount: [0],
      featureCount: 0
    };
    if (defined_default(status) && status.ok() && dracoGeometry.ptr !== 0) {
      const faceCount = dracoGeometry.num_faces();
      const attributesCount = dracoGeometry.num_attributes();
      const vertexCount = dracoGeometry.num_points();
      decodedGeometry.indices = new Uint32Array(faceCount * 3);
      const faces2 = decodedGeometry.indices;
      decodedGeometry.vertexCount[0] = vertexCount;
      decodedGeometry.scale_x = 1;
      decodedGeometry.scale_y = 1;
      const face = new dracoDecoderModule.DracoInt32Array(3);
      for (let faceIndex = 0; faceIndex < faceCount; ++faceIndex) {
        dracoDecoder.GetFaceFromMesh(dracoGeometry, faceIndex, face);
        faces2[faceIndex * 3] = face.GetValue(0);
        faces2[faceIndex * 3 + 1] = face.GetValue(1);
        faces2[faceIndex * 3 + 2] = face.GetValue(2);
      }
      dracoDecoderModule.destroy(face);
      for (let attrIndex = 0; attrIndex < attributesCount; ++attrIndex) {
        const dracoAttribute = dracoDecoder.GetAttribute(
          dracoGeometry,
          attrIndex
        );
        const attributeData = decodeDracoAttribute(
          dracoDecoderModule,
          dracoDecoder,
          dracoGeometry,
          dracoAttribute,
          vertexCount
        );
        const dracoAttributeType = dracoAttribute.attribute_type();
        let attributei3sName = "unknown";
        if (dracoAttributeType === dracoDecoderModule.POSITION) {
          attributei3sName = "positions";
        } else if (dracoAttributeType === dracoDecoderModule.NORMAL) {
          attributei3sName = "normals";
        } else if (dracoAttributeType === dracoDecoderModule.COLOR) {
          attributei3sName = "colors";
        } else if (dracoAttributeType === dracoDecoderModule.TEX_COORD) {
          attributei3sName = "uv0s";
        }
        const metadata = dracoDecoder.GetAttributeMetadata(
          dracoGeometry,
          attrIndex
        );
        if (metadata.ptr !== 0) {
          const numEntries = metadataQuerier.NumEntries(metadata);
          for (let entry = 0; entry < numEntries; ++entry) {
            const entryName = metadataQuerier.GetEntryName(metadata, entry);
            if (entryName === "i3s-scale_x") {
              decodedGeometry.scale_x = metadataQuerier.GetDoubleEntry(
                metadata,
                "i3s-scale_x"
              );
            } else if (entryName === "i3s-scale_y") {
              decodedGeometry.scale_y = metadataQuerier.GetDoubleEntry(
                metadata,
                "i3s-scale_y"
              );
            } else if (entryName === "i3s-attribute-type") {
              attributei3sName = metadataQuerier.GetStringEntry(
                metadata,
                "i3s-attribute-type"
              );
            }
          }
        }
        if (defined_default(decodedGeometry[attributei3sName])) {
          console.log("Attribute already exists", attributei3sName);
        }
        decodedGeometry[attributei3sName] = attributeData;
        if (attributei3sName === "feature-index") {
          decodedGeometry.featureCount++;
        }
      }
      dracoDecoderModule.destroy(dracoGeometry);
    }
    dracoDecoderModule.destroy(metadataQuerier);
    dracoDecoderModule.destroy(dracoDecoder);
    return decodedGeometry;
  }
  function decodeDracoAttribute(dracoDecoderModule, dracoDecoder, dracoGeometry, dracoAttribute, vertexCount) {
    const bufferSize = dracoAttribute.num_components() * vertexCount;
    let dracoAttributeData;
    const handlers = [
      function() {
      },
      // DT_INVALID - 0
      function() {
        dracoAttributeData = new dracoDecoderModule.DracoInt8Array(bufferSize);
        const success = dracoDecoder.GetAttributeInt8ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          dracoAttributeData
        );
        if (!success) {
          console.error("Bad stream");
        }
        const attributeData2 = new Int8Array(bufferSize);
        for (let i = 0; i < bufferSize; ++i) {
          attributeData2[i] = dracoAttributeData.GetValue(i);
        }
        return attributeData2;
      },
      function() {
        dracoAttributeData = new dracoDecoderModule.DracoInt8Array(bufferSize);
        const success = dracoDecoder.GetAttributeUInt8ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          dracoAttributeData
        );
        if (!success) {
          console.error("Bad stream");
        }
        const attributeData2 = new Uint8Array(bufferSize);
        for (let i = 0; i < bufferSize; ++i) {
          attributeData2[i] = dracoAttributeData.GetValue(i);
        }
        return attributeData2;
      },
      function() {
        dracoAttributeData = new dracoDecoderModule.DracoInt16Array(bufferSize);
        const success = dracoDecoder.GetAttributeInt16ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          dracoAttributeData
        );
        if (!success) {
          console.error("Bad stream");
        }
        const attributeData2 = new Int16Array(bufferSize);
        for (let i = 0; i < bufferSize; ++i) {
          attributeData2[i] = dracoAttributeData.GetValue(i);
        }
        return attributeData2;
      },
      function() {
        dracoAttributeData = new dracoDecoderModule.DracoInt16Array(bufferSize);
        const success = dracoDecoder.GetAttributeUInt16ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          dracoAttributeData
        );
        if (!success) {
          console.error("Bad stream");
        }
        const attributeData2 = new Uint16Array(bufferSize);
        for (let i = 0; i < bufferSize; ++i) {
          attributeData2[i] = dracoAttributeData.GetValue(i);
        }
        return attributeData2;
      },
      function() {
        dracoAttributeData = new dracoDecoderModule.DracoInt32Array(bufferSize);
        const success = dracoDecoder.GetAttributeInt32ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          dracoAttributeData
        );
        if (!success) {
          console.error("Bad stream");
        }
        const attributeData2 = new Int32Array(bufferSize);
        for (let i = 0; i < bufferSize; ++i) {
          attributeData2[i] = dracoAttributeData.GetValue(i);
        }
        return attributeData2;
      },
      function() {
        dracoAttributeData = new dracoDecoderModule.DracoInt32Array(bufferSize);
        const success = dracoDecoder.GetAttributeUInt32ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          dracoAttributeData
        );
        if (!success) {
          console.error("Bad stream");
        }
        const attributeData2 = new Uint32Array(bufferSize);
        for (let i = 0; i < bufferSize; ++i) {
          attributeData2[i] = dracoAttributeData.GetValue(i);
        }
        return attributeData2;
      },
      function() {
      },
      function() {
      },
      function() {
        dracoAttributeData = new dracoDecoderModule.DracoFloat32Array(bufferSize);
        const success = dracoDecoder.GetAttributeFloatForAllPoints(
          dracoGeometry,
          dracoAttribute,
          dracoAttributeData
        );
        if (!success) {
          console.error("Bad stream");
        }
        const attributeData2 = new Float32Array(bufferSize);
        for (let i = 0; i < bufferSize; ++i) {
          attributeData2[i] = dracoAttributeData.GetValue(i);
        }
        return attributeData2;
      },
      function() {
      },
      function() {
        dracoAttributeData = new dracoDecoderModule.DracoUInt8Array(bufferSize);
        const success = dracoDecoder.GetAttributeUInt8ForAllPoints(
          dracoGeometry,
          dracoAttribute,
          dracoAttributeData
        );
        if (!success) {
          console.error("Bad stream");
        }
        const attributeData2 = new Uint8Array(bufferSize);
        for (let i = 0; i < bufferSize; ++i) {
          attributeData2[i] = dracoAttributeData.GetValue(i);
        }
        return attributeData2;
      }
    ];
    const attributeData = handlers[dracoAttribute.data_type()]();
    if (defined_default(dracoAttributeData)) {
      dracoDecoderModule.destroy(dracoAttributeData);
    }
    return attributeData;
  }
  function decodeBinaryGeometry(data, schema, bufferInfo, featureData) {
    const decodedGeometry = {
      vertexCount: 0
    };
    const dataView = new DataView(data);
    try {
      let offset = 0;
      decodedGeometry.vertexCount = dataView.getUint32(offset, 1);
      offset += 4;
      decodedGeometry.featureCount = dataView.getUint32(offset, 1);
      offset += 4;
      if (defined_default(bufferInfo)) {
        for (let attrIndex = 0; attrIndex < bufferInfo.attributes.length; attrIndex++) {
          if (defined_default(binaryAttributeDecoders[bufferInfo.attributes[attrIndex]])) {
            offset = binaryAttributeDecoders[bufferInfo.attributes[attrIndex]](
              decodedGeometry,
              data,
              offset
            );
          } else {
            console.error(
              "Unknown decoder for",
              bufferInfo.attributes[attrIndex]
            );
          }
        }
      } else {
        let ordering = schema.ordering;
        let featureAttributeOrder = schema.featureAttributeOrder;
        if (defined_default(featureData) && defined_default(featureData.geometryData) && defined_default(featureData.geometryData[0]) && defined_default(featureData.geometryData[0].params)) {
          ordering = Object.keys(
            featureData.geometryData[0].params.vertexAttributes
          );
          featureAttributeOrder = Object.keys(
            featureData.geometryData[0].params.featureAttributes
          );
        }
        for (let i = 0; i < ordering.length; i++) {
          const decoder = binaryAttributeDecoders[ordering[i]];
          offset = decoder(decodedGeometry, data, offset);
        }
        for (let j = 0; j < featureAttributeOrder.length; j++) {
          const curDecoder = binaryAttributeDecoders[featureAttributeOrder[j]];
          offset = curDecoder(decodedGeometry, data, offset);
        }
      }
    } catch (e) {
      console.error(e);
    }
    decodedGeometry.scale_x = 1;
    decodedGeometry.scale_y = 1;
    return decodedGeometry;
  }
  function decodeAndCreateGltf(parameters) {
    const geometryData = decode2(
      parameters.binaryData,
      parameters.schema,
      parameters.bufferInfo,
      parameters.featureData
    );
    if (defined_default(parameters.geoidDataList) && parameters.geoidDataList.length > 0) {
      orthometricToEllipsoidal(
        geometryData.vertexCount,
        geometryData.positions,
        geometryData.scale_x,
        geometryData.scale_y,
        parameters.cartographicCenter,
        parameters.geoidDataList,
        false
      );
    }
    transformToLocal(
      geometryData.vertexCount,
      geometryData.positions,
      geometryData.normals,
      parameters.cartographicCenter,
      parameters.cartesianCenter,
      parameters.parentRotation,
      parameters.ellipsoidRadiiSquare,
      geometryData.scale_x,
      geometryData.scale_y
    );
    if (defined_default(geometryData.uv0s) && defined_default(geometryData["uv-region"])) {
      cropUVs(
        geometryData.vertexCount,
        geometryData.uv0s,
        geometryData["uv-region"]
      );
    }
    let featureIndex;
    if (defined_default(geometryData["feature-index"])) {
      featureIndex = geometryData["feature-index"];
    } else if (defined_default(geometryData["faceRange"])) {
      featureIndex = new Array(geometryData.vertexCount);
      for (let range = 0; range < geometryData["faceRange"].length - 1; range += 2) {
        const curIndex = range / 2;
        const rangeStart = geometryData["faceRange"][range];
        const rangeEnd = geometryData["faceRange"][range + 1];
        for (let i = rangeStart; i <= rangeEnd; i++) {
          featureIndex[i * 3] = curIndex;
          featureIndex[i * 3 + 1] = curIndex;
          featureIndex[i * 3 + 2] = curIndex;
        }
      }
    }
    if (parameters.calculateNormals) {
      const data = generateNormals(
        geometryData.vertexCount,
        geometryData.indices,
        geometryData.positions,
        geometryData.normals,
        geometryData.uv0s,
        geometryData.colors,
        featureIndex
      );
      if (defined_default(data.normals)) {
        geometryData.normals = data.normals;
        if (defined_default(data.vertexCount)) {
          geometryData.vertexCount = data.vertexCount;
          geometryData.indices = data.indices;
          geometryData.positions = data.positions;
          geometryData.uv0s = data.uv0s;
          geometryData.colors = data.colors;
          featureIndex = data.featureIndex;
        }
      }
    }
    const meshData = generateGltfBuffer(
      geometryData.vertexCount,
      geometryData.indices,
      geometryData.positions,
      geometryData.normals,
      geometryData.uv0s,
      geometryData.colors,
      featureIndex,
      parameters
    );
    const customAttributes = {
      positions: geometryData.positions,
      indices: geometryData.indices,
      featureIndex,
      sourceURL: parameters.url,
      cartesianCenter: parameters.cartesianCenter,
      parentRotation: parameters.parentRotation
    };
    meshData._customAttributes = customAttributes;
    const results = {
      meshData
    };
    return results;
  }
  async function initWorker2(parameters, transferableObjects) {
    const wasmConfig = parameters.webAssemblyConfig;
    if (defined_default(wasmConfig) && defined_default(wasmConfig.wasmBinaryFile)) {
      draco2 = await (0, import_draco_decoder_nodejs2.default)(wasmConfig);
    } else {
      draco2 = await (0, import_draco_decoder_nodejs2.default)();
    }
    return true;
  }
  function decodeI3S(parameters, transferableObjects) {
    const wasmConfig = parameters.webAssemblyConfig;
    if (defined_default(wasmConfig)) {
      return initWorker2(parameters, transferableObjects);
    }
    return decodeAndCreateGltf(parameters, transferableObjects);
  }
  var import_draco_decoder_nodejs2, draco2, calculateFaceNormalA, calculateFaceNormalB, calculateFaceNormalC, isEdgeSmoothA, isEdgeSmoothB, binaryAttributeDecoders, decodeI3S_default;
  var init_decodeI3S = __esm({
    "packages/engine/Source/Workers/decodeI3S.js"() {
      init_createTaskProcessorWorker();
      init_defaultValue();
      init_defined();
      init_WebMercatorProjection();
      init_Ellipsoid();
      init_Cartographic();
      init_Cartesian3();
      init_Color();
      init_Matrix3();
      init_Math();
      import_draco_decoder_nodejs2 = __toESM(require_draco_decoder_nodejs(), 1);
      init_srgbToLinear();
      calculateFaceNormalA = new Cartesian3_default();
      calculateFaceNormalB = new Cartesian3_default();
      calculateFaceNormalC = new Cartesian3_default();
      isEdgeSmoothA = new Cartesian3_default();
      isEdgeSmoothB = new Cartesian3_default();
      binaryAttributeDecoders = {
        position: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.vertexCount * 3;
          decodedGeometry.positions = new Float32Array(data, offset, count);
          offset += count * 4;
          return offset;
        },
        normal: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.vertexCount * 3;
          decodedGeometry.normals = new Float32Array(data, offset, count);
          offset += count * 4;
          return offset;
        },
        uv0: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.vertexCount * 2;
          decodedGeometry.uv0s = new Float32Array(data, offset, count);
          offset += count * 4;
          return offset;
        },
        color: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.vertexCount * 4;
          decodedGeometry.colors = new Uint8Array(data, offset, count);
          offset += count;
          return offset;
        },
        featureId: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.featureCount;
          offset += count * 8;
          return offset;
        },
        id: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.featureCount;
          offset += count * 8;
          return offset;
        },
        faceRange: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.featureCount * 2;
          decodedGeometry.faceRange = new Uint32Array(data, offset, count);
          offset += count * 4;
          return offset;
        },
        uvRegion: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.vertexCount * 4;
          decodedGeometry["uv-region"] = new Uint16Array(data, offset, count);
          offset += count * 2;
          return offset;
        },
        region: function(decodedGeometry, data, offset) {
          const count = decodedGeometry.vertexCount * 4;
          decodedGeometry["uv-region"] = new Uint16Array(data, offset, count);
          offset += count * 2;
          return offset;
        }
      };
      decodeI3S_default = createTaskProcessorWorker_default(decodeI3S);
    }
  });

  // packages/engine/Source/Renderer/PixelDatatype.js
  var PixelDatatype, PixelDatatype_default;
  var init_PixelDatatype = __esm({
    "packages/engine/Source/Renderer/PixelDatatype.js"() {
      init_WebGLConstants();
      PixelDatatype = {
        UNSIGNED_BYTE: WebGLConstants_default.UNSIGNED_BYTE,
        UNSIGNED_SHORT: WebGLConstants_default.UNSIGNED_SHORT,
        UNSIGNED_INT: WebGLConstants_default.UNSIGNED_INT,
        FLOAT: WebGLConstants_default.FLOAT,
        HALF_FLOAT: WebGLConstants_default.HALF_FLOAT_OES,
        UNSIGNED_INT_24_8: WebGLConstants_default.UNSIGNED_INT_24_8,
        UNSIGNED_SHORT_4_4_4_4: WebGLConstants_default.UNSIGNED_SHORT_4_4_4_4,
        UNSIGNED_SHORT_5_5_5_1: WebGLConstants_default.UNSIGNED_SHORT_5_5_5_1,
        UNSIGNED_SHORT_5_6_5: WebGLConstants_default.UNSIGNED_SHORT_5_6_5
      };
      PixelDatatype.toWebGLConstant = function(pixelDatatype, context) {
        switch (pixelDatatype) {
          case PixelDatatype.UNSIGNED_BYTE:
            return WebGLConstants_default.UNSIGNED_BYTE;
          case PixelDatatype.UNSIGNED_SHORT:
            return WebGLConstants_default.UNSIGNED_SHORT;
          case PixelDatatype.UNSIGNED_INT:
            return WebGLConstants_default.UNSIGNED_INT;
          case PixelDatatype.FLOAT:
            return WebGLConstants_default.FLOAT;
          case PixelDatatype.HALF_FLOAT:
            return context.webgl2 ? WebGLConstants_default.HALF_FLOAT : WebGLConstants_default.HALF_FLOAT_OES;
          case PixelDatatype.UNSIGNED_INT_24_8:
            return WebGLConstants_default.UNSIGNED_INT_24_8;
          case PixelDatatype.UNSIGNED_SHORT_4_4_4_4:
            return WebGLConstants_default.UNSIGNED_SHORT_4_4_4_4;
          case PixelDatatype.UNSIGNED_SHORT_5_5_5_1:
            return WebGLConstants_default.UNSIGNED_SHORT_5_5_5_1;
          case PixelDatatype.UNSIGNED_SHORT_5_6_5:
            return PixelDatatype.UNSIGNED_SHORT_5_6_5;
        }
      };
      PixelDatatype.isPacked = function(pixelDatatype) {
        return pixelDatatype === PixelDatatype.UNSIGNED_INT_24_8 || pixelDatatype === PixelDatatype.UNSIGNED_SHORT_4_4_4_4 || pixelDatatype === PixelDatatype.UNSIGNED_SHORT_5_5_5_1 || pixelDatatype === PixelDatatype.UNSIGNED_SHORT_5_6_5;
      };
      PixelDatatype.sizeInBytes = function(pixelDatatype) {
        switch (pixelDatatype) {
          case PixelDatatype.UNSIGNED_BYTE:
            return 1;
          case PixelDatatype.UNSIGNED_SHORT:
          case PixelDatatype.UNSIGNED_SHORT_4_4_4_4:
          case PixelDatatype.UNSIGNED_SHORT_5_5_5_1:
          case PixelDatatype.UNSIGNED_SHORT_5_6_5:
          case PixelDatatype.HALF_FLOAT:
            return 2;
          case PixelDatatype.UNSIGNED_INT:
          case PixelDatatype.FLOAT:
          case PixelDatatype.UNSIGNED_INT_24_8:
            return 4;
        }
      };
      PixelDatatype.validate = function(pixelDatatype) {
        return pixelDatatype === PixelDatatype.UNSIGNED_BYTE || pixelDatatype === PixelDatatype.UNSIGNED_SHORT || pixelDatatype === PixelDatatype.UNSIGNED_INT || pixelDatatype === PixelDatatype.FLOAT || pixelDatatype === PixelDatatype.HALF_FLOAT || pixelDatatype === PixelDatatype.UNSIGNED_INT_24_8 || pixelDatatype === PixelDatatype.UNSIGNED_SHORT_4_4_4_4 || pixelDatatype === PixelDatatype.UNSIGNED_SHORT_5_5_5_1 || pixelDatatype === PixelDatatype.UNSIGNED_SHORT_5_6_5;
      };
      PixelDatatype_default = Object.freeze(PixelDatatype);
    }
  });

  // packages/engine/Source/Core/PixelFormat.js
  var PixelFormat, PixelFormat_default;
  var init_PixelFormat = __esm({
    "packages/engine/Source/Core/PixelFormat.js"() {
      init_PixelDatatype();
      init_WebGLConstants();
      PixelFormat = {
        /**
         * A pixel format containing a depth value.
         *
         * @type {number}
         * @constant
         */
        DEPTH_COMPONENT: WebGLConstants_default.DEPTH_COMPONENT,
        /**
         * A pixel format containing a depth and stencil value, most often used with {@link PixelDatatype.UNSIGNED_INT_24_8}.
         *
         * @type {number}
         * @constant
         */
        DEPTH_STENCIL: WebGLConstants_default.DEPTH_STENCIL,
        /**
         * A pixel format containing an alpha channel.
         *
         * @type {number}
         * @constant
         */
        ALPHA: WebGLConstants_default.ALPHA,
        /**
         * A pixel format containing a red channel
         *
         * @type {number}
         * @constant
         */
        RED: WebGLConstants_default.RED,
        /**
         * A pixel format containing red and green channels.
         *
         * @type {number}
         * @constant
         */
        RG: WebGLConstants_default.RG,
        /**
         * A pixel format containing red, green, and blue channels.
         *
         * @type {number}
         * @constant
         */
        RGB: WebGLConstants_default.RGB,
        /**
         * A pixel format containing red, green, blue, and alpha channels.
         *
         * @type {number}
         * @constant
         */
        RGBA: WebGLConstants_default.RGBA,
        /**
         * A pixel format containing a luminance (intensity) channel.
         *
         * @type {number}
         * @constant
         */
        LUMINANCE: WebGLConstants_default.LUMINANCE,
        /**
         * A pixel format containing luminance (intensity) and alpha channels.
         *
         * @type {number}
         * @constant
         */
        LUMINANCE_ALPHA: WebGLConstants_default.LUMINANCE_ALPHA,
        /**
         * A pixel format containing red, green, and blue channels that is DXT1 compressed.
         *
         * @type {number}
         * @constant
         */
        RGB_DXT1: WebGLConstants_default.COMPRESSED_RGB_S3TC_DXT1_EXT,
        /**
         * A pixel format containing red, green, blue, and alpha channels that is DXT1 compressed.
         *
         * @type {number}
         * @constant
         */
        RGBA_DXT1: WebGLConstants_default.COMPRESSED_RGBA_S3TC_DXT1_EXT,
        /**
         * A pixel format containing red, green, blue, and alpha channels that is DXT3 compressed.
         *
         * @type {number}
         * @constant
         */
        RGBA_DXT3: WebGLConstants_default.COMPRESSED_RGBA_S3TC_DXT3_EXT,
        /**
         * A pixel format containing red, green, blue, and alpha channels that is DXT5 compressed.
         *
         * @type {number}
         * @constant
         */
        RGBA_DXT5: WebGLConstants_default.COMPRESSED_RGBA_S3TC_DXT5_EXT,
        /**
         * A pixel format containing red, green, and blue channels that is PVR 4bpp compressed.
         *
         * @type {number}
         * @constant
         */
        RGB_PVRTC_4BPPV1: WebGLConstants_default.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
        /**
         * A pixel format containing red, green, and blue channels that is PVR 2bpp compressed.
         *
         * @type {number}
         * @constant
         */
        RGB_PVRTC_2BPPV1: WebGLConstants_default.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
        /**
         * A pixel format containing red, green, blue, and alpha channels that is PVR 4bpp compressed.
         *
         * @type {number}
         * @constant
         */
        RGBA_PVRTC_4BPPV1: WebGLConstants_default.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
        /**
         * A pixel format containing red, green, blue, and alpha channels that is PVR 2bpp compressed.
         *
         * @type {number}
         * @constant
         */
        RGBA_PVRTC_2BPPV1: WebGLConstants_default.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,
        /**
         * A pixel format containing red, green, blue, and alpha channels that is ASTC compressed.
         *
         * @type {number}
         * @constant
         */
        RGBA_ASTC: WebGLConstants_default.COMPRESSED_RGBA_ASTC_4x4_WEBGL,
        /**
         * A pixel format containing red, green, and blue channels that is ETC1 compressed.
         *
         * @type {number}
         * @constant
         */
        RGB_ETC1: WebGLConstants_default.COMPRESSED_RGB_ETC1_WEBGL,
        /**
         * A pixel format containing red, green, and blue channels that is ETC2 compressed.
         *
         * @type {number}
         * @constant
         */
        RGB8_ETC2: WebGLConstants_default.COMPRESSED_RGB8_ETC2,
        /**
         * A pixel format containing red, green, blue, and alpha channels that is ETC2 compressed.
         *
         * @type {number}
         * @constant
         */
        RGBA8_ETC2_EAC: WebGLConstants_default.COMPRESSED_RGBA8_ETC2_EAC,
        /**
         * A pixel format containing red, green, blue, and alpha channels that is BC7 compressed.
         *
         * @type {number}
         * @constant
         */
        RGBA_BC7: WebGLConstants_default.COMPRESSED_RGBA_BPTC_UNORM
      };
      PixelFormat.componentsLength = function(pixelFormat) {
        switch (pixelFormat) {
          case PixelFormat.RGB:
            return 3;
          case PixelFormat.RGBA:
            return 4;
          case PixelFormat.LUMINANCE_ALPHA:
          case PixelFormat.RG:
            return 2;
          case PixelFormat.ALPHA:
          case PixelFormat.RED:
          case PixelFormat.LUMINANCE:
            return 1;
          default:
            return 1;
        }
      };
      PixelFormat.validate = function(pixelFormat) {
        return pixelFormat === PixelFormat.DEPTH_COMPONENT || pixelFormat === PixelFormat.DEPTH_STENCIL || pixelFormat === PixelFormat.ALPHA || pixelFormat === PixelFormat.RED || pixelFormat === PixelFormat.RG || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.RGBA || pixelFormat === PixelFormat.LUMINANCE || pixelFormat === PixelFormat.LUMINANCE_ALPHA || pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5 || pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_ASTC || pixelFormat === PixelFormat.RGB_ETC1 || pixelFormat === PixelFormat.RGB8_ETC2 || pixelFormat === PixelFormat.RGBA8_ETC2_EAC || pixelFormat === PixelFormat.RGBA_BC7;
      };
      PixelFormat.isColorFormat = function(pixelFormat) {
        return pixelFormat === PixelFormat.ALPHA || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.RGBA || pixelFormat === PixelFormat.LUMINANCE || pixelFormat === PixelFormat.LUMINANCE_ALPHA;
      };
      PixelFormat.isDepthFormat = function(pixelFormat) {
        return pixelFormat === PixelFormat.DEPTH_COMPONENT || pixelFormat === PixelFormat.DEPTH_STENCIL;
      };
      PixelFormat.isCompressedFormat = function(pixelFormat) {
        return pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5 || pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_ASTC || pixelFormat === PixelFormat.RGB_ETC1 || pixelFormat === PixelFormat.RGB8_ETC2 || pixelFormat === PixelFormat.RGBA8_ETC2_EAC || pixelFormat === PixelFormat.RGBA_BC7;
      };
      PixelFormat.isDXTFormat = function(pixelFormat) {
        return pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5;
      };
      PixelFormat.isPVRTCFormat = function(pixelFormat) {
        return pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1;
      };
      PixelFormat.isASTCFormat = function(pixelFormat) {
        return pixelFormat === PixelFormat.RGBA_ASTC;
      };
      PixelFormat.isETC1Format = function(pixelFormat) {
        return pixelFormat === PixelFormat.RGB_ETC1;
      };
      PixelFormat.isETC2Format = function(pixelFormat) {
        return pixelFormat === PixelFormat.RGB8_ETC2 || pixelFormat === PixelFormat.RGBA8_ETC2_EAC;
      };
      PixelFormat.isBC7Format = function(pixelFormat) {
        return pixelFormat === PixelFormat.RGBA_BC7;
      };
      PixelFormat.compressedTextureSizeInBytes = function(pixelFormat, width, height) {
        switch (pixelFormat) {
          case PixelFormat.RGB_DXT1:
          case PixelFormat.RGBA_DXT1:
          case PixelFormat.RGB_ETC1:
          case PixelFormat.RGB8_ETC2:
            return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
          case PixelFormat.RGBA_DXT3:
          case PixelFormat.RGBA_DXT5:
          case PixelFormat.RGBA_ASTC:
          case PixelFormat.RGBA8_ETC2_EAC:
            return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
          case PixelFormat.RGB_PVRTC_4BPPV1:
          case PixelFormat.RGBA_PVRTC_4BPPV1:
            return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);
          case PixelFormat.RGB_PVRTC_2BPPV1:
          case PixelFormat.RGBA_PVRTC_2BPPV1:
            return Math.floor(
              (Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8
            );
          case PixelFormat.RGBA_BC7:
            return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
          default:
            return 0;
        }
      };
      PixelFormat.textureSizeInBytes = function(pixelFormat, pixelDatatype, width, height) {
        let componentsLength = PixelFormat.componentsLength(pixelFormat);
        if (PixelDatatype_default.isPacked(pixelDatatype)) {
          componentsLength = 1;
        }
        return componentsLength * PixelDatatype_default.sizeInBytes(pixelDatatype) * width * height;
      };
      PixelFormat.alignmentInBytes = function(pixelFormat, pixelDatatype, width) {
        const mod = PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, 1) % 4;
        return mod === 0 ? 4 : mod === 2 ? 2 : 1;
      };
      PixelFormat.createTypedArray = function(pixelFormat, pixelDatatype, width, height) {
        let constructor;
        const sizeInBytes = PixelDatatype_default.sizeInBytes(pixelDatatype);
        if (sizeInBytes === Uint8Array.BYTES_PER_ELEMENT) {
          constructor = Uint8Array;
        } else if (sizeInBytes === Uint16Array.BYTES_PER_ELEMENT) {
          constructor = Uint16Array;
        } else if (sizeInBytes === Float32Array.BYTES_PER_ELEMENT && pixelDatatype === PixelDatatype_default.FLOAT) {
          constructor = Float32Array;
        } else {
          constructor = Uint32Array;
        }
        const size = PixelFormat.componentsLength(pixelFormat) * width * height;
        return new constructor(size);
      };
      PixelFormat.flipY = function(bufferView, pixelFormat, pixelDatatype, width, height) {
        if (height === 1) {
          return bufferView;
        }
        const flipped = PixelFormat.createTypedArray(
          pixelFormat,
          pixelDatatype,
          width,
          height
        );
        const numberOfComponents = PixelFormat.componentsLength(pixelFormat);
        const textureWidth = width * numberOfComponents;
        for (let i = 0; i < height; ++i) {
          const row = i * width * numberOfComponents;
          const flippedRow = (height - i - 1) * width * numberOfComponents;
          for (let j = 0; j < textureWidth; ++j) {
            flipped[flippedRow + j] = bufferView[row + j];
          }
        }
        return flipped;
      };
      PixelFormat.toInternalFormat = function(pixelFormat, pixelDatatype, context) {
        if (!context.webgl2) {
          return pixelFormat;
        }
        if (pixelFormat === PixelFormat.DEPTH_STENCIL) {
          return WebGLConstants_default.DEPTH24_STENCIL8;
        }
        if (pixelFormat === PixelFormat.DEPTH_COMPONENT) {
          if (pixelDatatype === PixelDatatype_default.UNSIGNED_SHORT) {
            return WebGLConstants_default.DEPTH_COMPONENT16;
          } else if (pixelDatatype === PixelDatatype_default.UNSIGNED_INT) {
            return WebGLConstants_default.DEPTH_COMPONENT24;
          }
        }
        if (pixelDatatype === PixelDatatype_default.FLOAT) {
          switch (pixelFormat) {
            case PixelFormat.RGBA:
              return WebGLConstants_default.RGBA32F;
            case PixelFormat.RGB:
              return WebGLConstants_default.RGB32F;
            case PixelFormat.RG:
              return WebGLConstants_default.RG32F;
            case PixelFormat.RED:
              return WebGLConstants_default.R32F;
          }
        }
        if (pixelDatatype === PixelDatatype_default.HALF_FLOAT) {
          switch (pixelFormat) {
            case PixelFormat.RGBA:
              return WebGLConstants_default.RGBA16F;
            case PixelFormat.RGB:
              return WebGLConstants_default.RGB16F;
            case PixelFormat.RG:
              return WebGLConstants_default.RG16F;
            case PixelFormat.RED:
              return WebGLConstants_default.R16F;
          }
        }
        return pixelFormat;
      };
      PixelFormat_default = Object.freeze(PixelFormat);
    }
  });

  // packages/engine/Source/Core/VulkanConstants.js
  var VulkanConstants, VulkanConstants_default;
  var init_VulkanConstants = __esm({
    "packages/engine/Source/Core/VulkanConstants.js"() {
      VulkanConstants = {
        VK_FORMAT_UNDEFINED: 0,
        VK_FORMAT_R4G4_UNORM_PACK8: 1,
        VK_FORMAT_R4G4B4A4_UNORM_PACK16: 2,
        VK_FORMAT_B4G4R4A4_UNORM_PACK16: 3,
        VK_FORMAT_R5G6B5_UNORM_PACK16: 4,
        VK_FORMAT_B5G6R5_UNORM_PACK16: 5,
        VK_FORMAT_R5G5B5A1_UNORM_PACK16: 6,
        VK_FORMAT_B5G5R5A1_UNORM_PACK16: 7,
        VK_FORMAT_A1R5G5B5_UNORM_PACK16: 8,
        VK_FORMAT_R8_UNORM: 9,
        VK_FORMAT_R8_SNORM: 10,
        VK_FORMAT_R8_USCALED: 11,
        VK_FORMAT_R8_SSCALED: 12,
        VK_FORMAT_R8_UINT: 13,
        VK_FORMAT_R8_SINT: 14,
        VK_FORMAT_R8_SRGB: 15,
        VK_FORMAT_R8G8_UNORM: 16,
        VK_FORMAT_R8G8_SNORM: 17,
        VK_FORMAT_R8G8_USCALED: 18,
        VK_FORMAT_R8G8_SSCALED: 19,
        VK_FORMAT_R8G8_UINT: 20,
        VK_FORMAT_R8G8_SINT: 21,
        VK_FORMAT_R8G8_SRGB: 22,
        VK_FORMAT_R8G8B8_UNORM: 23,
        VK_FORMAT_R8G8B8_SNORM: 24,
        VK_FORMAT_R8G8B8_USCALED: 25,
        VK_FORMAT_R8G8B8_SSCALED: 26,
        VK_FORMAT_R8G8B8_UINT: 27,
        VK_FORMAT_R8G8B8_SINT: 28,
        VK_FORMAT_R8G8B8_SRGB: 29,
        VK_FORMAT_B8G8R8_UNORM: 30,
        VK_FORMAT_B8G8R8_SNORM: 31,
        VK_FORMAT_B8G8R8_USCALED: 32,
        VK_FORMAT_B8G8R8_SSCALED: 33,
        VK_FORMAT_B8G8R8_UINT: 34,
        VK_FORMAT_B8G8R8_SINT: 35,
        VK_FORMAT_B8G8R8_SRGB: 36,
        VK_FORMAT_R8G8B8A8_UNORM: 37,
        VK_FORMAT_R8G8B8A8_SNORM: 38,
        VK_FORMAT_R8G8B8A8_USCALED: 39,
        VK_FORMAT_R8G8B8A8_SSCALED: 40,
        VK_FORMAT_R8G8B8A8_UINT: 41,
        VK_FORMAT_R8G8B8A8_SINT: 42,
        VK_FORMAT_R8G8B8A8_SRGB: 43,
        VK_FORMAT_B8G8R8A8_UNORM: 44,
        VK_FORMAT_B8G8R8A8_SNORM: 45,
        VK_FORMAT_B8G8R8A8_USCALED: 46,
        VK_FORMAT_B8G8R8A8_SSCALED: 47,
        VK_FORMAT_B8G8R8A8_UINT: 48,
        VK_FORMAT_B8G8R8A8_SINT: 49,
        VK_FORMAT_B8G8R8A8_SRGB: 50,
        VK_FORMAT_A8B8G8R8_UNORM_PACK32: 51,
        VK_FORMAT_A8B8G8R8_SNORM_PACK32: 52,
        VK_FORMAT_A8B8G8R8_USCALED_PACK32: 53,
        VK_FORMAT_A8B8G8R8_SSCALED_PACK32: 54,
        VK_FORMAT_A8B8G8R8_UINT_PACK32: 55,
        VK_FORMAT_A8B8G8R8_SINT_PACK32: 56,
        VK_FORMAT_A8B8G8R8_SRGB_PACK32: 57,
        VK_FORMAT_A2R10G10B10_UNORM_PACK32: 58,
        VK_FORMAT_A2R10G10B10_SNORM_PACK32: 59,
        VK_FORMAT_A2R10G10B10_USCALED_PACK32: 60,
        VK_FORMAT_A2R10G10B10_SSCALED_PACK32: 61,
        VK_FORMAT_A2R10G10B10_UINT_PACK32: 62,
        VK_FORMAT_A2R10G10B10_SINT_PACK32: 63,
        VK_FORMAT_A2B10G10R10_UNORM_PACK32: 64,
        VK_FORMAT_A2B10G10R10_SNORM_PACK32: 65,
        VK_FORMAT_A2B10G10R10_USCALED_PACK32: 66,
        VK_FORMAT_A2B10G10R10_SSCALED_PACK32: 67,
        VK_FORMAT_A2B10G10R10_UINT_PACK32: 68,
        VK_FORMAT_A2B10G10R10_SINT_PACK32: 69,
        VK_FORMAT_R16_UNORM: 70,
        VK_FORMAT_R16_SNORM: 71,
        VK_FORMAT_R16_USCALED: 72,
        VK_FORMAT_R16_SSCALED: 73,
        VK_FORMAT_R16_UINT: 74,
        VK_FORMAT_R16_SINT: 75,
        VK_FORMAT_R16_SFLOAT: 76,
        VK_FORMAT_R16G16_UNORM: 77,
        VK_FORMAT_R16G16_SNORM: 78,
        VK_FORMAT_R16G16_USCALED: 79,
        VK_FORMAT_R16G16_SSCALED: 80,
        VK_FORMAT_R16G16_UINT: 81,
        VK_FORMAT_R16G16_SINT: 82,
        VK_FORMAT_R16G16_SFLOAT: 83,
        VK_FORMAT_R16G16B16_UNORM: 84,
        VK_FORMAT_R16G16B16_SNORM: 85,
        VK_FORMAT_R16G16B16_USCALED: 86,
        VK_FORMAT_R16G16B16_SSCALED: 87,
        VK_FORMAT_R16G16B16_UINT: 88,
        VK_FORMAT_R16G16B16_SINT: 89,
        VK_FORMAT_R16G16B16_SFLOAT: 90,
        VK_FORMAT_R16G16B16A16_UNORM: 91,
        VK_FORMAT_R16G16B16A16_SNORM: 92,
        VK_FORMAT_R16G16B16A16_USCALED: 93,
        VK_FORMAT_R16G16B16A16_SSCALED: 94,
        VK_FORMAT_R16G16B16A16_UINT: 95,
        VK_FORMAT_R16G16B16A16_SINT: 96,
        VK_FORMAT_R16G16B16A16_SFLOAT: 97,
        VK_FORMAT_R32_UINT: 98,
        VK_FORMAT_R32_SINT: 99,
        VK_FORMAT_R32_SFLOAT: 100,
        VK_FORMAT_R32G32_UINT: 101,
        VK_FORMAT_R32G32_SINT: 102,
        VK_FORMAT_R32G32_SFLOAT: 103,
        VK_FORMAT_R32G32B32_UINT: 104,
        VK_FORMAT_R32G32B32_SINT: 105,
        VK_FORMAT_R32G32B32_SFLOAT: 106,
        VK_FORMAT_R32G32B32A32_UINT: 107,
        VK_FORMAT_R32G32B32A32_SINT: 108,
        VK_FORMAT_R32G32B32A32_SFLOAT: 109,
        VK_FORMAT_R64_UINT: 110,
        VK_FORMAT_R64_SINT: 111,
        VK_FORMAT_R64_SFLOAT: 112,
        VK_FORMAT_R64G64_UINT: 113,
        VK_FORMAT_R64G64_SINT: 114,
        VK_FORMAT_R64G64_SFLOAT: 115,
        VK_FORMAT_R64G64B64_UINT: 116,
        VK_FORMAT_R64G64B64_SINT: 117,
        VK_FORMAT_R64G64B64_SFLOAT: 118,
        VK_FORMAT_R64G64B64A64_UINT: 119,
        VK_FORMAT_R64G64B64A64_SINT: 120,
        VK_FORMAT_R64G64B64A64_SFLOAT: 121,
        VK_FORMAT_B10G11R11_UFLOAT_PACK32: 122,
        VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: 123,
        VK_FORMAT_D16_UNORM: 124,
        VK_FORMAT_X8_D24_UNORM_PACK32: 125,
        VK_FORMAT_D32_SFLOAT: 126,
        VK_FORMAT_S8_UINT: 127,
        VK_FORMAT_D16_UNORM_S8_UINT: 128,
        VK_FORMAT_D24_UNORM_S8_UINT: 129,
        VK_FORMAT_D32_SFLOAT_S8_UINT: 130,
        VK_FORMAT_BC1_RGB_UNORM_BLOCK: 131,
        VK_FORMAT_BC1_RGB_SRGB_BLOCK: 132,
        VK_FORMAT_BC1_RGBA_UNORM_BLOCK: 133,
        VK_FORMAT_BC1_RGBA_SRGB_BLOCK: 134,
        VK_FORMAT_BC2_UNORM_BLOCK: 135,
        VK_FORMAT_BC2_SRGB_BLOCK: 136,
        VK_FORMAT_BC3_UNORM_BLOCK: 137,
        VK_FORMAT_BC3_SRGB_BLOCK: 138,
        VK_FORMAT_BC4_UNORM_BLOCK: 139,
        VK_FORMAT_BC4_SNORM_BLOCK: 140,
        VK_FORMAT_BC5_UNORM_BLOCK: 141,
        VK_FORMAT_BC5_SNORM_BLOCK: 142,
        VK_FORMAT_BC6H_UFLOAT_BLOCK: 143,
        VK_FORMAT_BC6H_SFLOAT_BLOCK: 144,
        VK_FORMAT_BC7_UNORM_BLOCK: 145,
        VK_FORMAT_BC7_SRGB_BLOCK: 146,
        VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: 147,
        VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: 148,
        VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: 149,
        VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: 150,
        VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: 151,
        VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: 152,
        VK_FORMAT_EAC_R11_UNORM_BLOCK: 153,
        VK_FORMAT_EAC_R11_SNORM_BLOCK: 154,
        VK_FORMAT_EAC_R11G11_UNORM_BLOCK: 155,
        VK_FORMAT_EAC_R11G11_SNORM_BLOCK: 156,
        VK_FORMAT_ASTC_4x4_UNORM_BLOCK: 157,
        VK_FORMAT_ASTC_4x4_SRGB_BLOCK: 158,
        VK_FORMAT_ASTC_5x4_UNORM_BLOCK: 159,
        VK_FORMAT_ASTC_5x4_SRGB_BLOCK: 160,
        VK_FORMAT_ASTC_5x5_UNORM_BLOCK: 161,
        VK_FORMAT_ASTC_5x5_SRGB_BLOCK: 162,
        VK_FORMAT_ASTC_6x5_UNORM_BLOCK: 163,
        VK_FORMAT_ASTC_6x5_SRGB_BLOCK: 164,
        VK_FORMAT_ASTC_6x6_UNORM_BLOCK: 165,
        VK_FORMAT_ASTC_6x6_SRGB_BLOCK: 166,
        VK_FORMAT_ASTC_8x5_UNORM_BLOCK: 167,
        VK_FORMAT_ASTC_8x5_SRGB_BLOCK: 168,
        VK_FORMAT_ASTC_8x6_UNORM_BLOCK: 169,
        VK_FORMAT_ASTC_8x6_SRGB_BLOCK: 170,
        VK_FORMAT_ASTC_8x8_UNORM_BLOCK: 171,
        VK_FORMAT_ASTC_8x8_SRGB_BLOCK: 172,
        VK_FORMAT_ASTC_10x5_UNORM_BLOCK: 173,
        VK_FORMAT_ASTC_10x5_SRGB_BLOCK: 174,
        VK_FORMAT_ASTC_10x6_UNORM_BLOCK: 175,
        VK_FORMAT_ASTC_10x6_SRGB_BLOCK: 176,
        VK_FORMAT_ASTC_10x8_UNORM_BLOCK: 177,
        VK_FORMAT_ASTC_10x8_SRGB_BLOCK: 178,
        VK_FORMAT_ASTC_10x10_UNORM_BLOCK: 179,
        VK_FORMAT_ASTC_10x10_SRGB_BLOCK: 180,
        VK_FORMAT_ASTC_12x10_UNORM_BLOCK: 181,
        VK_FORMAT_ASTC_12x10_SRGB_BLOCK: 182,
        VK_FORMAT_ASTC_12x12_UNORM_BLOCK: 183,
        VK_FORMAT_ASTC_12x12_SRGB_BLOCK: 184,
        VK_FORMAT_G8B8G8R8_422_UNORM: 1000156e3,
        VK_FORMAT_B8G8R8G8_422_UNORM: 1000156001,
        VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: 1000156002,
        VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: 1000156003,
        VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: 1000156004,
        VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: 1000156005,
        VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: 1000156006,
        VK_FORMAT_R10X6_UNORM_PACK16: 1000156007,
        VK_FORMAT_R10X6G10X6_UNORM_2PACK16: 1000156008,
        VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: 1000156009,
        VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: 1000156010,
        VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: 1000156011,
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: 1000156012,
        VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: 1000156013,
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: 1000156014,
        VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: 1000156015,
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: 1000156016,
        VK_FORMAT_R12X4_UNORM_PACK16: 1000156017,
        VK_FORMAT_R12X4G12X4_UNORM_2PACK16: 1000156018,
        VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: 1000156019,
        VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: 1000156020,
        VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: 1000156021,
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: 1000156022,
        VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: 1000156023,
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: 1000156024,
        VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: 1000156025,
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: 1000156026,
        VK_FORMAT_G16B16G16R16_422_UNORM: 1000156027,
        VK_FORMAT_B16G16R16G16_422_UNORM: 1000156028,
        VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: 1000156029,
        VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: 1000156030,
        VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: 1000156031,
        VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: 1000156032,
        VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: 1000156033,
        VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: 1000054e3,
        VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: 1000054001,
        VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: 1000054002,
        VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: 1000054003,
        VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: 1000054004,
        VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: 1000054005,
        VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: 1000054006,
        VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: 1000054007,
        VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: 1000066e3,
        VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: 1000066001,
        VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: 1000066002,
        VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: 1000066003,
        VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: 1000066004,
        VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: 1000066005,
        VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: 1000066006,
        VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: 1000066007,
        VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: 1000066008,
        VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: 1000066009,
        VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: 1000066010,
        VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: 1000066011,
        VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: 1000066012,
        VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: 1000066013,
        VK_FORMAT_G8B8G8R8_422_UNORM_KHR: 1000156e3,
        VK_FORMAT_B8G8R8G8_422_UNORM_KHR: 1000156001,
        VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: 1000156002,
        VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: 1000156003,
        VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: 1000156004,
        VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: 1000156005,
        VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: 1000156006,
        VK_FORMAT_R10X6_UNORM_PACK16_KHR: 1000156007,
        VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: 1000156008,
        VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: 1000156009,
        VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: 1000156010,
        VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: 1000156011,
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: 1000156012,
        VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: 1000156013,
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: 1000156014,
        VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: 1000156015,
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: 1000156016,
        VK_FORMAT_R12X4_UNORM_PACK16_KHR: 1000156017,
        VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: 1000156018,
        VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: 1000156019,
        VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: 1000156020,
        VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: 1000156021,
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: 1000156022,
        VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: 1000156023,
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: 1000156024,
        VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: 1000156025,
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: 1000156026,
        VK_FORMAT_G16B16G16R16_422_UNORM_KHR: 1000156027,
        VK_FORMAT_B16G16R16G16_422_UNORM_KHR: 1000156028,
        VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: 1000156029,
        VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: 1000156030,
        VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: 1000156031,
        VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: 1000156032,
        VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: 1000156033
      };
      VulkanConstants_default = Object.freeze(VulkanConstants);
    }
  });

  // node_modules/ktx-parse/dist/ktx-parse.modern.js
  function decodeText(buffer) {
    if (typeof TextDecoder !== "undefined") {
      return new TextDecoder().decode(buffer);
    }
    return Buffer.from(buffer).toString("utf8");
  }
  function read2(data) {
    const id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);
    if (id[0] !== KTX2_ID[0] || // '´'
    id[1] !== KTX2_ID[1] || // 'K'
    id[2] !== KTX2_ID[2] || // 'T'
    id[3] !== KTX2_ID[3] || // 'X'
    id[4] !== KTX2_ID[4] || // ' '
    id[5] !== KTX2_ID[5] || // '2'
    id[6] !== KTX2_ID[6] || // '0'
    id[7] !== KTX2_ID[7] || // 'ª'
    id[8] !== KTX2_ID[8] || // '\r'
    id[9] !== KTX2_ID[9] || // '\n'
    id[10] !== KTX2_ID[10] || // '\x1A'
    id[11] !== KTX2_ID[11]) {
      throw new Error("Missing KTX 2.0 identifier.");
    }
    const container = new KTX2Container();
    const headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;
    const headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);
    container.vkFormat = headerReader._nextUint32();
    container.typeSize = headerReader._nextUint32();
    container.pixelWidth = headerReader._nextUint32();
    container.pixelHeight = headerReader._nextUint32();
    container.pixelDepth = headerReader._nextUint32();
    container.layerCount = headerReader._nextUint32();
    container.faceCount = headerReader._nextUint32();
    const levelCount = headerReader._nextUint32();
    container.supercompressionScheme = headerReader._nextUint32();
    const dfdByteOffset = headerReader._nextUint32();
    const dfdByteLength = headerReader._nextUint32();
    const kvdByteOffset = headerReader._nextUint32();
    const kvdByteLength = headerReader._nextUint32();
    const sgdByteOffset = headerReader._nextUint64();
    const sgdByteLength = headerReader._nextUint64();
    const levelByteLength = levelCount * 3 * 8;
    const levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);
    for (let i = 0; i < levelCount; i++) {
      container.levels.push({
        levelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),
        uncompressedByteLength: levelReader._nextUint64()
      });
    }
    const dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);
    const dfd = {
      vendorId: dfdReader._skip(
        4
        /* totalSize */
      )._nextUint16(),
      descriptorType: dfdReader._nextUint16(),
      versionNumber: dfdReader._nextUint16(),
      descriptorBlockSize: dfdReader._nextUint16(),
      colorModel: dfdReader._nextUint8(),
      colorPrimaries: dfdReader._nextUint8(),
      transferFunction: dfdReader._nextUint8(),
      flags: dfdReader._nextUint8(),
      texelBlockDimension: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],
      bytesPlane: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],
      samples: []
    };
    const sampleStart = 6;
    const sampleWords = 4;
    const numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;
    for (let i = 0; i < numSamples; i++) {
      const sample = {
        bitOffset: dfdReader._nextUint16(),
        bitLength: dfdReader._nextUint8(),
        channelType: dfdReader._nextUint8(),
        samplePosition: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],
        sampleLower: -Infinity,
        sampleUpper: Infinity
      };
      if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {
        sample.sampleLower = dfdReader._nextInt32();
        sample.sampleUpper = dfdReader._nextInt32();
      } else {
        sample.sampleLower = dfdReader._nextUint32();
        sample.sampleUpper = dfdReader._nextUint32();
      }
      dfd.samples[i] = sample;
    }
    container.dataFormatDescriptor.length = 0;
    container.dataFormatDescriptor.push(dfd);
    const kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);
    while (kvdReader._offset < kvdByteLength) {
      const keyValueByteLength = kvdReader._nextUint32();
      const keyData = kvdReader._scan(keyValueByteLength);
      const key = decodeText(keyData);
      container.keyValue[key] = kvdReader._nextUint8Array(keyValueByteLength - keyData.byteLength - 1);
      if (key.match(/^ktx/i)) {
        const text = decodeText(container.keyValue[key]);
        container.keyValue[key] = text.substring(0, text.lastIndexOf("\0"));
      }
      const kvPadding = keyValueByteLength % 4 ? 4 - keyValueByteLength % 4 : 0;
      kvdReader._skip(kvPadding);
    }
    if (sgdByteLength <= 0)
      return container;
    const sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);
    const endpointCount = sgdReader._nextUint16();
    const selectorCount = sgdReader._nextUint16();
    const endpointsByteLength = sgdReader._nextUint32();
    const selectorsByteLength = sgdReader._nextUint32();
    const tablesByteLength = sgdReader._nextUint32();
    const extendedByteLength = sgdReader._nextUint32();
    const imageDescs = [];
    for (let i = 0; i < levelCount; i++) {
      imageDescs.push({
        imageFlags: sgdReader._nextUint32(),
        rgbSliceByteOffset: sgdReader._nextUint32(),
        rgbSliceByteLength: sgdReader._nextUint32(),
        alphaSliceByteOffset: sgdReader._nextUint32(),
        alphaSliceByteLength: sgdReader._nextUint32()
      });
    }
    const endpointsByteOffset = sgdByteOffset + sgdReader._offset;
    const selectorsByteOffset = endpointsByteOffset + endpointsByteLength;
    const tablesByteOffset = selectorsByteOffset + selectorsByteLength;
    const extendedByteOffset = tablesByteOffset + tablesByteLength;
    const endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);
    const selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);
    const tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);
    const extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);
    container.globalData = {
      endpointCount,
      selectorCount,
      imageDescs,
      endpointsData,
      selectorsData,
      tablesData,
      extendedData
    };
    return container;
  }
  var KHR_SUPERCOMPRESSION_NONE, KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, KHR_DF_MODEL_UNSPECIFIED, KHR_DF_FLAG_ALPHA_STRAIGHT, KHR_DF_TRANSFER_SRGB, KHR_DF_PRIMARIES_BT709, KHR_DF_SAMPLE_DATATYPE_SIGNED, VK_FORMAT_UNDEFINED, KTX2Container, BufferReader, NUL, KTX2_ID;
  var init_ktx_parse_modern = __esm({
    "node_modules/ktx-parse/dist/ktx-parse.modern.js"() {
      KHR_SUPERCOMPRESSION_NONE = 0;
      KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;
      KHR_DF_VENDORID_KHRONOS = 0;
      KHR_DF_VERSION = 2;
      KHR_DF_MODEL_UNSPECIFIED = 0;
      KHR_DF_FLAG_ALPHA_STRAIGHT = 0;
      KHR_DF_TRANSFER_SRGB = 2;
      KHR_DF_PRIMARIES_BT709 = 1;
      KHR_DF_SAMPLE_DATATYPE_SIGNED = 64;
      VK_FORMAT_UNDEFINED = 0;
      KTX2Container = class {
        constructor() {
          this.vkFormat = VK_FORMAT_UNDEFINED;
          this.typeSize = 1;
          this.pixelWidth = 0;
          this.pixelHeight = 0;
          this.pixelDepth = 0;
          this.layerCount = 0;
          this.faceCount = 1;
          this.supercompressionScheme = KHR_SUPERCOMPRESSION_NONE;
          this.levels = [];
          this.dataFormatDescriptor = [{
            vendorId: KHR_DF_VENDORID_KHRONOS,
            descriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,
            descriptorBlockSize: 0,
            versionNumber: KHR_DF_VERSION,
            colorModel: KHR_DF_MODEL_UNSPECIFIED,
            colorPrimaries: KHR_DF_PRIMARIES_BT709,
            transferFunction: KHR_DF_TRANSFER_SRGB,
            flags: KHR_DF_FLAG_ALPHA_STRAIGHT,
            texelBlockDimension: [0, 0, 0, 0],
            bytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],
            samples: []
          }];
          this.keyValue = {};
          this.globalData = null;
        }
      };
      BufferReader = class {
        constructor(data, byteOffset, byteLength, littleEndian2) {
          this._dataView = void 0;
          this._littleEndian = void 0;
          this._offset = void 0;
          this._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);
          this._littleEndian = littleEndian2;
          this._offset = 0;
        }
        _nextUint8() {
          const value = this._dataView.getUint8(this._offset);
          this._offset += 1;
          return value;
        }
        _nextUint16() {
          const value = this._dataView.getUint16(this._offset, this._littleEndian);
          this._offset += 2;
          return value;
        }
        _nextUint32() {
          const value = this._dataView.getUint32(this._offset, this._littleEndian);
          this._offset += 4;
          return value;
        }
        _nextUint64() {
          const left = this._dataView.getUint32(this._offset, this._littleEndian);
          const right = this._dataView.getUint32(this._offset + 4, this._littleEndian);
          const value = left + 2 ** 32 * right;
          this._offset += 8;
          return value;
        }
        _nextInt32() {
          const value = this._dataView.getInt32(this._offset, this._littleEndian);
          this._offset += 4;
          return value;
        }
        _nextUint8Array(len) {
          const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._offset, len);
          this._offset += len;
          return value;
        }
        _skip(bytes) {
          this._offset += bytes;
          return this;
        }
        _scan(maxByteLength, term = 0) {
          const byteOffset = this._offset;
          let byteLength = 0;
          while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {
            byteLength++;
            this._offset++;
          }
          if (byteLength < maxByteLength)
            this._offset++;
          return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);
        }
      };
      NUL = new Uint8Array([0]);
      KTX2_ID = [
        // '´', 'K', 'T', 'X', '2', '0', 'ª', '\r', '\n', '\x1A', '\n'
        171,
        75,
        84,
        88,
        32,
        50,
        48,
        187,
        13,
        10,
        26,
        10
      ];
    }
  });

  // packages/engine/Source/ThirdParty/Workers/basis_transcoder.js
  var require_basis_transcoder = __commonJS({
    "packages/engine/Source/ThirdParty/Workers/basis_transcoder.js"(exports2, module) {
      var BASIS = function() {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(BASIS2) {
          BASIS2 = BASIS2 || {};
          var Module = typeof BASIS2 !== "undefined" ? BASIS2 : {};
          var readyPromiseResolve, readyPromiseReject;
          Module["ready"] = new Promise(function(resolve, reject) {
            readyPromiseResolve = resolve;
            readyPromiseReject = reject;
          });
          var moduleOverrides = {};
          var key;
          for (key in Module) {
            if (Module.hasOwnProperty(key)) {
              moduleOverrides[key] = Module[key];
            }
          }
          var arguments_ = [];
          var thisProgram = "./this.program";
          var quit_ = function(status, toThrow) {
            throw toThrow;
          };
          var ENVIRONMENT_IS_WEB = false;
          var ENVIRONMENT_IS_WORKER = false;
          var ENVIRONMENT_IS_NODE = false;
          var ENVIRONMENT_IS_SHELL = false;
          ENVIRONMENT_IS_WEB = typeof window === "object";
          ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
          ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
          ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
          var scriptDirectory = "";
          function locateFile(path) {
            if (Module["locateFile"]) {
              return Module["locateFile"](path, scriptDirectory);
            }
            return scriptDirectory + path;
          }
          var read_, readAsync, readBinary, setWindowTitle;
          var nodeFS;
          var nodePath;
          if (ENVIRONMENT_IS_NODE) {
            if (ENVIRONMENT_IS_WORKER) {
              scriptDirectory = __require("path").dirname(scriptDirectory) + "/";
            } else {
              scriptDirectory = __dirname + "/";
            }
            read_ = function shell_read(filename, binary) {
              if (!nodeFS)
                nodeFS = __require("fs");
              if (!nodePath)
                nodePath = __require("path");
              filename = nodePath["normalize"](filename);
              return nodeFS["readFileSync"](filename, binary ? null : "utf8");
            };
            readBinary = function readBinary2(filename) {
              var ret = read_(filename, true);
              if (!ret.buffer) {
                ret = new Uint8Array(ret);
              }
              assert(ret.buffer);
              return ret;
            };
            if (process["argv"].length > 1) {
              thisProgram = process["argv"][1].replace(/\\/g, "/");
            }
            arguments_ = process["argv"].slice(2);
            process["on"]("uncaughtException", function(ex) {
              if (!(ex instanceof ExitStatus)) {
                throw ex;
              }
            });
            process["on"]("unhandledRejection", abort);
            quit_ = function(status) {
              process["exit"](status);
            };
            Module["inspect"] = function() {
              return "[Emscripten Module object]";
            };
          } else if (ENVIRONMENT_IS_SHELL) {
            if (typeof read != "undefined") {
              read_ = function shell_read(f) {
                return read(f);
              };
            }
            readBinary = function readBinary2(f) {
              var data;
              if (typeof readbuffer === "function") {
                return new Uint8Array(readbuffer(f));
              }
              data = read(f, "binary");
              assert(typeof data === "object");
              return data;
            };
            if (typeof scriptArgs != "undefined") {
              arguments_ = scriptArgs;
            } else if (typeof arguments != "undefined") {
              arguments_ = arguments;
            }
            if (typeof quit === "function") {
              quit_ = function(status) {
                quit(status);
              };
            }
            if (typeof print !== "undefined") {
              if (typeof console === "undefined")
                console = {};
              console.log = print;
              console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
            }
          } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
            if (ENVIRONMENT_IS_WORKER) {
              scriptDirectory = self.location.href;
            } else if (typeof document !== "undefined" && document.currentScript) {
              scriptDirectory = document.currentScript.src;
            }
            if (_scriptDir) {
              scriptDirectory = _scriptDir;
            }
            if (scriptDirectory.indexOf("blob:") !== 0) {
              scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
            } else {
              scriptDirectory = "";
            }
            {
              read_ = function(url) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, false);
                xhr.send(null);
                return xhr.responseText;
              };
              if (ENVIRONMENT_IS_WORKER) {
                readBinary = function(url) {
                  var xhr = new XMLHttpRequest();
                  xhr.open("GET", url, false);
                  xhr.responseType = "arraybuffer";
                  xhr.send(null);
                  return new Uint8Array(xhr.response);
                };
              }
              readAsync = function(url, onload, onerror) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, true);
                xhr.responseType = "arraybuffer";
                xhr.onload = function() {
                  if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                    onload(xhr.response);
                    return;
                  }
                  onerror();
                };
                xhr.onerror = onerror;
                xhr.send(null);
              };
            }
            setWindowTitle = function(title) {
              document.title = title;
            };
          } else {
          }
          var out = Module["print"] || console.log.bind(console);
          var err = Module["printErr"] || console.warn.bind(console);
          for (key in moduleOverrides) {
            if (moduleOverrides.hasOwnProperty(key)) {
              Module[key] = moduleOverrides[key];
            }
          }
          moduleOverrides = null;
          if (Module["arguments"])
            arguments_ = Module["arguments"];
          if (Module["thisProgram"])
            thisProgram = Module["thisProgram"];
          if (Module["quit"])
            quit_ = Module["quit"];
          var tempRet0 = 0;
          var setTempRet0 = function(value) {
            tempRet0 = value;
          };
          var wasmBinary;
          if (Module["wasmBinary"])
            wasmBinary = Module["wasmBinary"];
          var noExitRuntime = Module["noExitRuntime"] || true;
          if (typeof WebAssembly !== "object") {
            abort("no native wasm support detected");
          }
          var wasmMemory;
          var ABORT = false;
          var EXITSTATUS;
          function assert(condition, text) {
            if (!condition) {
              abort("Assertion failed: " + text);
            }
          }
          var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
          function UTF8ArrayToString(heap, idx, maxBytesToRead) {
            var endIdx = idx + maxBytesToRead;
            var endPtr = idx;
            while (heap[endPtr] && !(endPtr >= endIdx))
              ++endPtr;
            if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
              return UTF8Decoder.decode(heap.subarray(idx, endPtr));
            } else {
              var str = "";
              while (idx < endPtr) {
                var u0 = heap[idx++];
                if (!(u0 & 128)) {
                  str += String.fromCharCode(u0);
                  continue;
                }
                var u12 = heap[idx++] & 63;
                if ((u0 & 224) == 192) {
                  str += String.fromCharCode((u0 & 31) << 6 | u12);
                  continue;
                }
                var u22 = heap[idx++] & 63;
                if ((u0 & 240) == 224) {
                  u0 = (u0 & 15) << 12 | u12 << 6 | u22;
                } else {
                  u0 = (u0 & 7) << 18 | u12 << 12 | u22 << 6 | heap[idx++] & 63;
                }
                if (u0 < 65536) {
                  str += String.fromCharCode(u0);
                } else {
                  var ch = u0 - 65536;
                  str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                }
              }
            }
            return str;
          }
          function UTF8ToString(ptr, maxBytesToRead) {
            return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
          }
          function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
            if (!(maxBytesToWrite > 0))
              return 0;
            var startIdx = outIdx;
            var endIdx = outIdx + maxBytesToWrite - 1;
            for (var i = 0; i < str.length; ++i) {
              var u3 = str.charCodeAt(i);
              if (u3 >= 55296 && u3 <= 57343) {
                var u12 = str.charCodeAt(++i);
                u3 = 65536 + ((u3 & 1023) << 10) | u12 & 1023;
              }
              if (u3 <= 127) {
                if (outIdx >= endIdx)
                  break;
                heap[outIdx++] = u3;
              } else if (u3 <= 2047) {
                if (outIdx + 1 >= endIdx)
                  break;
                heap[outIdx++] = 192 | u3 >> 6;
                heap[outIdx++] = 128 | u3 & 63;
              } else if (u3 <= 65535) {
                if (outIdx + 2 >= endIdx)
                  break;
                heap[outIdx++] = 224 | u3 >> 12;
                heap[outIdx++] = 128 | u3 >> 6 & 63;
                heap[outIdx++] = 128 | u3 & 63;
              } else {
                if (outIdx + 3 >= endIdx)
                  break;
                heap[outIdx++] = 240 | u3 >> 18;
                heap[outIdx++] = 128 | u3 >> 12 & 63;
                heap[outIdx++] = 128 | u3 >> 6 & 63;
                heap[outIdx++] = 128 | u3 & 63;
              }
            }
            heap[outIdx] = 0;
            return outIdx - startIdx;
          }
          function stringToUTF8(str, outPtr, maxBytesToWrite) {
            return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
          }
          function lengthBytesUTF8(str) {
            var len = 0;
            for (var i = 0; i < str.length; ++i) {
              var u3 = str.charCodeAt(i);
              if (u3 >= 55296 && u3 <= 57343)
                u3 = 65536 + ((u3 & 1023) << 10) | str.charCodeAt(++i) & 1023;
              if (u3 <= 127)
                ++len;
              else if (u3 <= 2047)
                len += 2;
              else if (u3 <= 65535)
                len += 3;
              else
                len += 4;
            }
            return len;
          }
          var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
          function UTF16ToString(ptr, maxBytesToRead) {
            var endPtr = ptr;
            var idx = endPtr >> 1;
            var maxIdx = idx + maxBytesToRead / 2;
            while (!(idx >= maxIdx) && HEAPU16[idx])
              ++idx;
            endPtr = idx << 1;
            if (endPtr - ptr > 32 && UTF16Decoder) {
              return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
            } else {
              var str = "";
              for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
                var codeUnit = HEAP16[ptr + i * 2 >> 1];
                if (codeUnit == 0)
                  break;
                str += String.fromCharCode(codeUnit);
              }
              return str;
            }
          }
          function stringToUTF16(str, outPtr, maxBytesToWrite) {
            if (maxBytesToWrite === void 0) {
              maxBytesToWrite = 2147483647;
            }
            if (maxBytesToWrite < 2)
              return 0;
            maxBytesToWrite -= 2;
            var startPtr = outPtr;
            var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
            for (var i = 0; i < numCharsToWrite; ++i) {
              var codeUnit = str.charCodeAt(i);
              HEAP16[outPtr >> 1] = codeUnit;
              outPtr += 2;
            }
            HEAP16[outPtr >> 1] = 0;
            return outPtr - startPtr;
          }
          function lengthBytesUTF16(str) {
            return str.length * 2;
          }
          function UTF32ToString(ptr, maxBytesToRead) {
            var i = 0;
            var str = "";
            while (!(i >= maxBytesToRead / 4)) {
              var utf32 = HEAP32[ptr + i * 4 >> 2];
              if (utf32 == 0)
                break;
              ++i;
              if (utf32 >= 65536) {
                var ch = utf32 - 65536;
                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
              } else {
                str += String.fromCharCode(utf32);
              }
            }
            return str;
          }
          function stringToUTF32(str, outPtr, maxBytesToWrite) {
            if (maxBytesToWrite === void 0) {
              maxBytesToWrite = 2147483647;
            }
            if (maxBytesToWrite < 4)
              return 0;
            var startPtr = outPtr;
            var endPtr = startPtr + maxBytesToWrite - 4;
            for (var i = 0; i < str.length; ++i) {
              var codeUnit = str.charCodeAt(i);
              if (codeUnit >= 55296 && codeUnit <= 57343) {
                var trailSurrogate = str.charCodeAt(++i);
                codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
              }
              HEAP32[outPtr >> 2] = codeUnit;
              outPtr += 4;
              if (outPtr + 4 > endPtr)
                break;
            }
            HEAP32[outPtr >> 2] = 0;
            return outPtr - startPtr;
          }
          function lengthBytesUTF32(str) {
            var len = 0;
            for (var i = 0; i < str.length; ++i) {
              var codeUnit = str.charCodeAt(i);
              if (codeUnit >= 55296 && codeUnit <= 57343)
                ++i;
              len += 4;
            }
            return len;
          }
          function alignUp(x, multiple) {
            if (x % multiple > 0) {
              x += multiple - x % multiple;
            }
            return x;
          }
          var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
          function updateGlobalBufferAndViews(buf) {
            buffer = buf;
            Module["HEAP8"] = HEAP8 = new Int8Array(buf);
            Module["HEAP16"] = HEAP16 = new Int16Array(buf);
            Module["HEAP32"] = HEAP32 = new Int32Array(buf);
            Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
            Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
            Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
            Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
            Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
          }
          var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
          var wasmTable;
          var __ATPRERUN__ = [];
          var __ATINIT__ = [];
          var __ATMAIN__ = [];
          var __ATPOSTRUN__ = [];
          var runtimeInitialized = false;
          function preRun() {
            if (Module["preRun"]) {
              if (typeof Module["preRun"] == "function")
                Module["preRun"] = [Module["preRun"]];
              while (Module["preRun"].length) {
                addOnPreRun(Module["preRun"].shift());
              }
            }
            callRuntimeCallbacks(__ATPRERUN__);
          }
          function initRuntime() {
            runtimeInitialized = true;
            callRuntimeCallbacks(__ATINIT__);
          }
          function preMain() {
            callRuntimeCallbacks(__ATMAIN__);
          }
          function postRun() {
            if (Module["postRun"]) {
              if (typeof Module["postRun"] == "function")
                Module["postRun"] = [Module["postRun"]];
              while (Module["postRun"].length) {
                addOnPostRun(Module["postRun"].shift());
              }
            }
            callRuntimeCallbacks(__ATPOSTRUN__);
          }
          function addOnPreRun(cb) {
            __ATPRERUN__.unshift(cb);
          }
          function addOnInit(cb) {
            __ATINIT__.unshift(cb);
          }
          function addOnPostRun(cb) {
            __ATPOSTRUN__.unshift(cb);
          }
          var runDependencies = 0;
          var runDependencyWatcher = null;
          var dependenciesFulfilled = null;
          function addRunDependency(id) {
            runDependencies++;
            if (Module["monitorRunDependencies"]) {
              Module["monitorRunDependencies"](runDependencies);
            }
          }
          function removeRunDependency(id) {
            runDependencies--;
            if (Module["monitorRunDependencies"]) {
              Module["monitorRunDependencies"](runDependencies);
            }
            if (runDependencies == 0) {
              if (runDependencyWatcher !== null) {
                clearInterval(runDependencyWatcher);
                runDependencyWatcher = null;
              }
              if (dependenciesFulfilled) {
                var callback = dependenciesFulfilled;
                dependenciesFulfilled = null;
                callback();
              }
            }
          }
          Module["preloadedImages"] = {};
          Module["preloadedAudios"] = {};
          function abort(what) {
            if (Module["onAbort"]) {
              Module["onAbort"](what);
            }
            what += "";
            err(what);
            ABORT = true;
            EXITSTATUS = 1;
            what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
            var e = new WebAssembly.RuntimeError(what);
            readyPromiseReject(e);
            throw e;
          }
          function hasPrefix(str, prefix) {
            return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
          }
          var dataURIPrefix = "data:application/octet-stream;base64,";
          function isDataURI(filename) {
            return hasPrefix(filename, dataURIPrefix);
          }
          var fileURIPrefix = "file://";
          function isFileURI(filename) {
            return hasPrefix(filename, fileURIPrefix);
          }
          var wasmBinaryFile = "basis_transcoder.wasm";
          if (!isDataURI(wasmBinaryFile)) {
            wasmBinaryFile = locateFile(wasmBinaryFile);
          }
          function getBinary(file) {
            try {
              if (file == wasmBinaryFile && wasmBinary) {
                return new Uint8Array(wasmBinary);
              }
              if (readBinary) {
                return readBinary(file);
              } else {
                throw "both async and sync fetching of the wasm failed";
              }
            } catch (err2) {
              abort(err2);
            }
          }
          function getBinaryPromise() {
            if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
              if (typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
                return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
                  if (!response["ok"]) {
                    throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
                  }
                  return response["arrayBuffer"]();
                }).catch(function() {
                  return getBinary(wasmBinaryFile);
                });
              } else {
                if (readAsync) {
                  return new Promise(function(resolve, reject) {
                    readAsync(wasmBinaryFile, function(response) {
                      resolve(new Uint8Array(response));
                    }, reject);
                  });
                }
              }
            }
            return Promise.resolve().then(function() {
              return getBinary(wasmBinaryFile);
            });
          }
          function createWasm() {
            var info = { "a": asmLibraryArg };
            function receiveInstance(instance, module2) {
              var exports4 = instance.exports;
              Module["asm"] = exports4;
              wasmMemory = Module["asm"]["K"];
              updateGlobalBufferAndViews(wasmMemory.buffer);
              wasmTable = Module["asm"]["O"];
              addOnInit(Module["asm"]["L"]);
              removeRunDependency("wasm-instantiate");
            }
            addRunDependency("wasm-instantiate");
            function receiveInstantiatedSource(output) {
              receiveInstance(output["instance"]);
            }
            function instantiateArrayBuffer(receiver) {
              return getBinaryPromise().then(function(binary) {
                var result = WebAssembly.instantiate(binary, info);
                return result;
              }).then(receiver, function(reason) {
                err("failed to asynchronously prepare wasm: " + reason);
                abort(reason);
              });
            }
            function instantiateAsync() {
              if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
                return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
                  var result = WebAssembly.instantiateStreaming(response, info);
                  return result.then(receiveInstantiatedSource, function(reason) {
                    err("wasm streaming compile failed: " + reason);
                    err("falling back to ArrayBuffer instantiation");
                    return instantiateArrayBuffer(receiveInstantiatedSource);
                  });
                });
              } else {
                return instantiateArrayBuffer(receiveInstantiatedSource);
              }
            }
            if (Module["instantiateWasm"]) {
              try {
                var exports3 = Module["instantiateWasm"](info, receiveInstance);
                return exports3;
              } catch (e) {
                err("Module.instantiateWasm callback failed with error: " + e);
                return false;
              }
            }
            instantiateAsync().catch(readyPromiseReject);
            return {};
          }
          function callRuntimeCallbacks(callbacks) {
            while (callbacks.length > 0) {
              var callback = callbacks.shift();
              if (typeof callback == "function") {
                callback(Module);
                continue;
              }
              var func = callback.func;
              if (typeof func === "number") {
                if (callback.arg === void 0) {
                  wasmTable.get(func)();
                } else {
                  wasmTable.get(func)(callback.arg);
                }
              } else {
                func(callback.arg === void 0 ? null : callback.arg);
              }
            }
          }
          var structRegistrations = {};
          function runDestructors(destructors) {
            while (destructors.length) {
              var ptr = destructors.pop();
              var del = destructors.pop();
              del(ptr);
            }
          }
          function simpleReadValueFromPointer(pointer) {
            return this["fromWireType"](HEAPU32[pointer >> 2]);
          }
          var awaitingDependencies = {};
          var registeredTypes = {};
          var typeDependencies = {};
          var char_0 = 48;
          var char_9 = 57;
          function makeLegalFunctionName(name) {
            if (void 0 === name) {
              return "_unknown";
            }
            name = name.replace(/[^a-zA-Z0-9_]/g, "$");
            var f = name.charCodeAt(0);
            if (f >= char_0 && f <= char_9) {
              return "_" + name;
            } else {
              return name;
            }
          }
          function createNamedFunction(name, body) {
            name = makeLegalFunctionName(name);
            return new Function("body", "return function " + name + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body);
          }
          function extendError(baseErrorType, errorName) {
            var errorClass = createNamedFunction(errorName, function(message) {
              this.name = errorName;
              this.message = message;
              var stack = new Error(message).stack;
              if (stack !== void 0) {
                this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
              }
            });
            errorClass.prototype = Object.create(baseErrorType.prototype);
            errorClass.prototype.constructor = errorClass;
            errorClass.prototype.toString = function() {
              if (this.message === void 0) {
                return this.name;
              } else {
                return this.name + ": " + this.message;
              }
            };
            return errorClass;
          }
          var InternalError = void 0;
          function throwInternalError(message) {
            throw new InternalError(message);
          }
          function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
            myTypes.forEach(function(type) {
              typeDependencies[type] = dependentTypes;
            });
            function onComplete(typeConverters2) {
              var myTypeConverters = getTypeConverters(typeConverters2);
              if (myTypeConverters.length !== myTypes.length) {
                throwInternalError("Mismatched type converter count");
              }
              for (var i = 0; i < myTypes.length; ++i) {
                registerType(myTypes[i], myTypeConverters[i]);
              }
            }
            var typeConverters = new Array(dependentTypes.length);
            var unregisteredTypes = [];
            var registered = 0;
            dependentTypes.forEach(function(dt, i) {
              if (registeredTypes.hasOwnProperty(dt)) {
                typeConverters[i] = registeredTypes[dt];
              } else {
                unregisteredTypes.push(dt);
                if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
                }
                awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                  }
                });
              }
            });
            if (0 === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          }
          function __embind_finalize_value_object(structType) {
            var reg = structRegistrations[structType];
            delete structRegistrations[structType];
            var rawConstructor = reg.rawConstructor;
            var rawDestructor = reg.rawDestructor;
            var fieldRecords = reg.fields;
            var fieldTypes = fieldRecords.map(function(field) {
              return field.getterReturnType;
            }).concat(fieldRecords.map(function(field) {
              return field.setterArgumentType;
            }));
            whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes2) {
              var fields = {};
              fieldRecords.forEach(function(field, i) {
                var fieldName = field.fieldName;
                var getterReturnType = fieldTypes2[i];
                var getter = field.getter;
                var getterContext = field.getterContext;
                var setterArgumentType = fieldTypes2[i + fieldRecords.length];
                var setter = field.setter;
                var setterContext = field.setterContext;
                fields[fieldName] = { read: function(ptr) {
                  return getterReturnType["fromWireType"](getter(getterContext, ptr));
                }, write: function(ptr, o) {
                  var destructors = [];
                  setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
                  runDestructors(destructors);
                } };
              });
              return [{ name: reg.name, "fromWireType": function(ptr) {
                var rv = {};
                for (var i in fields) {
                  rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
              }, "toWireType": function(destructors, o) {
                for (var fieldName in fields) {
                  if (!(fieldName in o)) {
                    throw new TypeError('Missing field:  "' + fieldName + '"');
                  }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                  fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                  destructors.push(rawDestructor, ptr);
                }
                return ptr;
              }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: rawDestructor }];
            });
          }
          function getShiftFromSize(size) {
            switch (size) {
              case 1:
                return 0;
              case 2:
                return 1;
              case 4:
                return 2;
              case 8:
                return 3;
              default:
                throw new TypeError("Unknown type size: " + size);
            }
          }
          function embind_init_charCodes() {
            var codes = new Array(256);
            for (var i = 0; i < 256; ++i) {
              codes[i] = String.fromCharCode(i);
            }
            embind_charCodes = codes;
          }
          var embind_charCodes = void 0;
          function readLatin1String(ptr) {
            var ret = "";
            var c = ptr;
            while (HEAPU8[c]) {
              ret += embind_charCodes[HEAPU8[c++]];
            }
            return ret;
          }
          var BindingError = void 0;
          function throwBindingError(message) {
            throw new BindingError(message);
          }
          function registerType(rawType, registeredInstance, options) {
            options = options || {};
            if (!("argPackAdvance" in registeredInstance)) {
              throw new TypeError("registerType registeredInstance requires argPackAdvance");
            }
            var name = registeredInstance.name;
            if (!rawType) {
              throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
            }
            if (registeredTypes.hasOwnProperty(rawType)) {
              if (options.ignoreDuplicateRegistrations) {
                return;
              } else {
                throwBindingError("Cannot register type '" + name + "' twice");
              }
            }
            registeredTypes[rawType] = registeredInstance;
            delete typeDependencies[rawType];
            if (awaitingDependencies.hasOwnProperty(rawType)) {
              var callbacks = awaitingDependencies[rawType];
              delete awaitingDependencies[rawType];
              callbacks.forEach(function(cb) {
                cb();
              });
            }
          }
          function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
            var shift = getShiftFromSize(size);
            name = readLatin1String(name);
            registerType(rawType, { name, "fromWireType": function(wt) {
              return !!wt;
            }, "toWireType": function(destructors, o) {
              return o ? trueValue : falseValue;
            }, "argPackAdvance": 8, "readValueFromPointer": function(pointer) {
              var heap;
              if (size === 1) {
                heap = HEAP8;
              } else if (size === 2) {
                heap = HEAP16;
              } else if (size === 4) {
                heap = HEAP32;
              } else {
                throw new TypeError("Unknown boolean type size: " + name);
              }
              return this["fromWireType"](heap[pointer >> shift]);
            }, destructorFunction: null });
          }
          function ClassHandle_isAliasOf(other) {
            if (!(this instanceof ClassHandle)) {
              return false;
            }
            if (!(other instanceof ClassHandle)) {
              return false;
            }
            var leftClass = this.$$.ptrType.registeredClass;
            var left = this.$$.ptr;
            var rightClass = other.$$.ptrType.registeredClass;
            var right = other.$$.ptr;
            while (leftClass.baseClass) {
              left = leftClass.upcast(left);
              leftClass = leftClass.baseClass;
            }
            while (rightClass.baseClass) {
              right = rightClass.upcast(right);
              rightClass = rightClass.baseClass;
            }
            return leftClass === rightClass && left === right;
          }
          function shallowCopyInternalPointer(o) {
            return { count: o.count, deleteScheduled: o.deleteScheduled, preservePointerOnDelete: o.preservePointerOnDelete, ptr: o.ptr, ptrType: o.ptrType, smartPtr: o.smartPtr, smartPtrType: o.smartPtrType };
          }
          function throwInstanceAlreadyDeleted(obj) {
            function getInstanceTypeName(handle) {
              return handle.$$.ptrType.registeredClass.name;
            }
            throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
          }
          var finalizationGroup = false;
          function detachFinalizer(handle) {
          }
          function runDestructor($$) {
            if ($$.smartPtr) {
              $$.smartPtrType.rawDestructor($$.smartPtr);
            } else {
              $$.ptrType.registeredClass.rawDestructor($$.ptr);
            }
          }
          function releaseClassHandle($$) {
            $$.count.value -= 1;
            var toDelete = 0 === $$.count.value;
            if (toDelete) {
              runDestructor($$);
            }
          }
          function attachFinalizer(handle) {
            if ("undefined" === typeof FinalizationGroup) {
              attachFinalizer = function(handle2) {
                return handle2;
              };
              return handle;
            }
            finalizationGroup = new FinalizationGroup(function(iter) {
              for (var result = iter.next(); !result.done; result = iter.next()) {
                var $$ = result.value;
                if (!$$.ptr) {
                  console.warn("object already deleted: " + $$.ptr);
                } else {
                  releaseClassHandle($$);
                }
              }
            });
            attachFinalizer = function(handle2) {
              finalizationGroup.register(handle2, handle2.$$, handle2.$$);
              return handle2;
            };
            detachFinalizer = function(handle2) {
              finalizationGroup.unregister(handle2.$$);
            };
            return attachFinalizer(handle);
          }
          function ClassHandle_clone() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
            if (this.$$.preservePointerOnDelete) {
              this.$$.count.value += 1;
              return this;
            } else {
              var clone2 = attachFinalizer(Object.create(Object.getPrototypeOf(this), { $$: { value: shallowCopyInternalPointer(this.$$) } }));
              clone2.$$.count.value += 1;
              clone2.$$.deleteScheduled = false;
              return clone2;
            }
          }
          function ClassHandle_delete() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
            if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
              throwBindingError("Object already scheduled for deletion");
            }
            detachFinalizer(this);
            releaseClassHandle(this.$$);
            if (!this.$$.preservePointerOnDelete) {
              this.$$.smartPtr = void 0;
              this.$$.ptr = void 0;
            }
          }
          function ClassHandle_isDeleted() {
            return !this.$$.ptr;
          }
          var delayFunction = void 0;
          var deletionQueue = [];
          function flushPendingDeletes() {
            while (deletionQueue.length) {
              var obj = deletionQueue.pop();
              obj.$$.deleteScheduled = false;
              obj["delete"]();
            }
          }
          function ClassHandle_deleteLater() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
            if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
              throwBindingError("Object already scheduled for deletion");
            }
            deletionQueue.push(this);
            if (deletionQueue.length === 1 && delayFunction) {
              delayFunction(flushPendingDeletes);
            }
            this.$$.deleteScheduled = true;
            return this;
          }
          function init_ClassHandle() {
            ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
            ClassHandle.prototype["clone"] = ClassHandle_clone;
            ClassHandle.prototype["delete"] = ClassHandle_delete;
            ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
            ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
          }
          function ClassHandle() {
          }
          var registeredPointers = {};
          function ensureOverloadTable(proto, methodName, humanName) {
            if (void 0 === proto[methodName].overloadTable) {
              var prevFunc = proto[methodName];
              proto[methodName] = function() {
                if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
                }
                return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
              };
              proto[methodName].overloadTable = [];
              proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
            }
          }
          function exposePublicSymbol(name, value, numArguments) {
            if (Module.hasOwnProperty(name)) {
              if (void 0 === numArguments || void 0 !== Module[name].overloadTable && void 0 !== Module[name].overloadTable[numArguments]) {
                throwBindingError("Cannot register public name '" + name + "' twice");
              }
              ensureOverloadTable(Module, name, name);
              if (Module.hasOwnProperty(numArguments)) {
                throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
              }
              Module[name].overloadTable[numArguments] = value;
            } else {
              Module[name] = value;
              if (void 0 !== numArguments) {
                Module[name].numArguments = numArguments;
              }
            }
          }
          function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
            this.name = name;
            this.constructor = constructor;
            this.instancePrototype = instancePrototype;
            this.rawDestructor = rawDestructor;
            this.baseClass = baseClass;
            this.getActualType = getActualType;
            this.upcast = upcast;
            this.downcast = downcast;
            this.pureVirtualFunctions = [];
          }
          function upcastPointer(ptr, ptrClass, desiredClass) {
            while (ptrClass !== desiredClass) {
              if (!ptrClass.upcast) {
                throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
              }
              ptr = ptrClass.upcast(ptr);
              ptrClass = ptrClass.baseClass;
            }
            return ptr;
          }
          function constNoSmartPtrRawPointerToWireType(destructors, handle) {
            if (handle === null) {
              if (this.isReference) {
                throwBindingError("null is not a valid " + this.name);
              }
              return 0;
            }
            if (!handle.$$) {
              throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
            }
            if (!handle.$$.ptr) {
              throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
            }
            var handleClass = handle.$$.ptrType.registeredClass;
            var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
            return ptr;
          }
          function genericPointerToWireType(destructors, handle) {
            var ptr;
            if (handle === null) {
              if (this.isReference) {
                throwBindingError("null is not a valid " + this.name);
              }
              if (this.isSmartPointer) {
                ptr = this.rawConstructor();
                if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
                }
                return ptr;
              } else {
                return 0;
              }
            }
            if (!handle.$$) {
              throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
            }
            if (!handle.$$.ptr) {
              throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
            }
            if (!this.isConst && handle.$$.ptrType.isConst) {
              throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
            }
            var handleClass = handle.$$.ptrType.registeredClass;
            ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
            if (this.isSmartPointer) {
              if (void 0 === handle.$$.smartPtr) {
                throwBindingError("Passing raw pointer to smart pointer is illegal");
              }
              switch (this.sharingPolicy) {
                case 0:
                  if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                  } else {
                    throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
                  }
                  break;
                case 1:
                  ptr = handle.$$.smartPtr;
                  break;
                case 2:
                  if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                  } else {
                    var clonedHandle = handle["clone"]();
                    ptr = this.rawShare(ptr, __emval_register(function() {
                      clonedHandle["delete"]();
                    }));
                    if (destructors !== null) {
                      destructors.push(this.rawDestructor, ptr);
                    }
                  }
                  break;
                default:
                  throwBindingError("Unsupporting sharing policy");
              }
            }
            return ptr;
          }
          function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
            if (handle === null) {
              if (this.isReference) {
                throwBindingError("null is not a valid " + this.name);
              }
              return 0;
            }
            if (!handle.$$) {
              throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
            }
            if (!handle.$$.ptr) {
              throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
            }
            if (handle.$$.ptrType.isConst) {
              throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
            }
            var handleClass = handle.$$.ptrType.registeredClass;
            var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
            return ptr;
          }
          function RegisteredPointer_getPointee(ptr) {
            if (this.rawGetPointee) {
              ptr = this.rawGetPointee(ptr);
            }
            return ptr;
          }
          function RegisteredPointer_destructor(ptr) {
            if (this.rawDestructor) {
              this.rawDestructor(ptr);
            }
          }
          function RegisteredPointer_deleteObject(handle) {
            if (handle !== null) {
              handle["delete"]();
            }
          }
          function downcastPointer(ptr, ptrClass, desiredClass) {
            if (ptrClass === desiredClass) {
              return ptr;
            }
            if (void 0 === desiredClass.baseClass) {
              return null;
            }
            var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
            if (rv === null) {
              return null;
            }
            return desiredClass.downcast(rv);
          }
          function getInheritedInstanceCount() {
            return Object.keys(registeredInstances).length;
          }
          function getLiveInheritedInstances() {
            var rv = [];
            for (var k in registeredInstances) {
              if (registeredInstances.hasOwnProperty(k)) {
                rv.push(registeredInstances[k]);
              }
            }
            return rv;
          }
          function setDelayFunction(fn) {
            delayFunction = fn;
            if (deletionQueue.length && delayFunction) {
              delayFunction(flushPendingDeletes);
            }
          }
          function init_embind() {
            Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
            Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
            Module["flushPendingDeletes"] = flushPendingDeletes;
            Module["setDelayFunction"] = setDelayFunction;
          }
          var registeredInstances = {};
          function getBasestPointer(class_, ptr) {
            if (ptr === void 0) {
              throwBindingError("ptr should not be undefined");
            }
            while (class_.baseClass) {
              ptr = class_.upcast(ptr);
              class_ = class_.baseClass;
            }
            return ptr;
          }
          function getInheritedInstance(class_, ptr) {
            ptr = getBasestPointer(class_, ptr);
            return registeredInstances[ptr];
          }
          function makeClassHandle(prototype, record) {
            if (!record.ptrType || !record.ptr) {
              throwInternalError("makeClassHandle requires ptr and ptrType");
            }
            var hasSmartPtrType = !!record.smartPtrType;
            var hasSmartPtr = !!record.smartPtr;
            if (hasSmartPtrType !== hasSmartPtr) {
              throwInternalError("Both smartPtrType and smartPtr must be specified");
            }
            record.count = { value: 1 };
            return attachFinalizer(Object.create(prototype, { $$: { value: record } }));
          }
          function RegisteredPointer_fromWireType(ptr) {
            var rawPointer = this.getPointee(ptr);
            if (!rawPointer) {
              this.destructor(ptr);
              return null;
            }
            var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
            if (void 0 !== registeredInstance) {
              if (0 === registeredInstance.$$.count.value) {
                registeredInstance.$$.ptr = rawPointer;
                registeredInstance.$$.smartPtr = ptr;
                return registeredInstance["clone"]();
              } else {
                var rv = registeredInstance["clone"]();
                this.destructor(ptr);
                return rv;
              }
            }
            function makeDefaultHandle() {
              if (this.isSmartPointer) {
                return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this.pointeeType, ptr: rawPointer, smartPtrType: this, smartPtr: ptr });
              } else {
                return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this, ptr });
              }
            }
            var actualType = this.registeredClass.getActualType(rawPointer);
            var registeredPointerRecord = registeredPointers[actualType];
            if (!registeredPointerRecord) {
              return makeDefaultHandle.call(this);
            }
            var toType;
            if (this.isConst) {
              toType = registeredPointerRecord.constPointerType;
            } else {
              toType = registeredPointerRecord.pointerType;
            }
            var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
            if (dp === null) {
              return makeDefaultHandle.call(this);
            }
            if (this.isSmartPointer) {
              return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp, smartPtrType: this, smartPtr: ptr });
            } else {
              return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp });
            }
          }
          function init_RegisteredPointer() {
            RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
            RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
            RegisteredPointer.prototype["argPackAdvance"] = 8;
            RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
            RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
            RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
          }
          function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
            this.name = name;
            this.registeredClass = registeredClass;
            this.isReference = isReference;
            this.isConst = isConst;
            this.isSmartPointer = isSmartPointer;
            this.pointeeType = pointeeType;
            this.sharingPolicy = sharingPolicy;
            this.rawGetPointee = rawGetPointee;
            this.rawConstructor = rawConstructor;
            this.rawShare = rawShare;
            this.rawDestructor = rawDestructor;
            if (!isSmartPointer && registeredClass.baseClass === void 0) {
              if (isConst) {
                this["toWireType"] = constNoSmartPtrRawPointerToWireType;
                this.destructorFunction = null;
              } else {
                this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
                this.destructorFunction = null;
              }
            } else {
              this["toWireType"] = genericPointerToWireType;
            }
          }
          function replacePublicSymbol(name, value, numArguments) {
            if (!Module.hasOwnProperty(name)) {
              throwInternalError("Replacing nonexistant public symbol");
            }
            if (void 0 !== Module[name].overloadTable && void 0 !== numArguments) {
              Module[name].overloadTable[numArguments] = value;
            } else {
              Module[name] = value;
              Module[name].argCount = numArguments;
            }
          }
          function dynCallLegacy(sig, ptr, args) {
            var f = Module["dynCall_" + sig];
            return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
          }
          function dynCall(sig, ptr, args) {
            if (sig.indexOf("j") != -1) {
              return dynCallLegacy(sig, ptr, args);
            }
            return wasmTable.get(ptr).apply(null, args);
          }
          function getDynCaller(sig, ptr) {
            var argCache = [];
            return function() {
              argCache.length = arguments.length;
              for (var i = 0; i < arguments.length; i++) {
                argCache[i] = arguments[i];
              }
              return dynCall(sig, ptr, argCache);
            };
          }
          function embind__requireFunction(signature, rawFunction) {
            signature = readLatin1String(signature);
            function makeDynCaller() {
              if (signature.indexOf("j") != -1) {
                return getDynCaller(signature, rawFunction);
              }
              return wasmTable.get(rawFunction);
            }
            var fp = makeDynCaller();
            if (typeof fp !== "function") {
              throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
            }
            return fp;
          }
          var UnboundTypeError = void 0;
          function getTypeName(type) {
            var ptr = ___getTypeName(type);
            var rv = readLatin1String(ptr);
            _free(ptr);
            return rv;
          }
          function throwUnboundTypeError(message, types) {
            var unboundTypes = [];
            var seen = {};
            function visit(type) {
              if (seen[type]) {
                return;
              }
              if (registeredTypes[type]) {
                return;
              }
              if (typeDependencies[type]) {
                typeDependencies[type].forEach(visit);
                return;
              }
              unboundTypes.push(type);
              seen[type] = true;
            }
            types.forEach(visit);
            throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
          }
          function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
            name = readLatin1String(name);
            getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
            if (upcast) {
              upcast = embind__requireFunction(upcastSignature, upcast);
            }
            if (downcast) {
              downcast = embind__requireFunction(downcastSignature, downcast);
            }
            rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
            var legalFunctionName = makeLegalFunctionName(name);
            exposePublicSymbol(legalFunctionName, function() {
              throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
            });
            whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function(base) {
              base = base[0];
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
              } else {
                basePrototype = ClassHandle.prototype;
              }
              var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                  throw new BindingError("Use 'new' to construct " + name);
                }
                if (void 0 === registeredClass.constructor_body) {
                  throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (void 0 === body) {
                  throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
              });
              var instancePrototype = Object.create(basePrototype, { constructor: { value: constructor } });
              constructor.prototype = instancePrototype;
              var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
              var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
              var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
              var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
              registeredPointers[rawType] = { pointerType: pointerConverter, constPointerType: constPointerConverter };
              replacePublicSymbol(legalFunctionName, constructor);
              return [referenceConverter, pointerConverter, constPointerConverter];
            });
          }
          function heap32VectorToArray(count, firstElement) {
            var array = [];
            for (var i = 0; i < count; i++) {
              array.push(HEAP32[(firstElement >> 2) + i]);
            }
            return array;
          }
          function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
            assert(argCount > 0);
            var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
            invoker = embind__requireFunction(invokerSignature, invoker);
            var args = [rawConstructor];
            var destructors = [];
            whenDependentTypesAreResolved([], [rawClassType], function(classType) {
              classType = classType[0];
              var humanName = "constructor " + classType.name;
              if (void 0 === classType.registeredClass.constructor_body) {
                classType.registeredClass.constructor_body = [];
              }
              if (void 0 !== classType.registeredClass.constructor_body[argCount - 1]) {
                throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
              }
              classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
                throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
              };
              whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
                classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
                  }
                  destructors.length = 0;
                  args.length = argCount;
                  for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
                  }
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
                  return argTypes[0]["fromWireType"](ptr);
                };
                return [];
              });
              return [];
            });
          }
          function new_(constructor, argumentList) {
            if (!(constructor instanceof Function)) {
              throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
            }
            var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {
            });
            dummy.prototype = constructor.prototype;
            var obj = new dummy();
            var r = constructor.apply(obj, argumentList);
            return r instanceof Object ? r : obj;
          }
          function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
            var argCount = argTypes.length;
            if (argCount < 2) {
              throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
            }
            var isClassMethodFunc = argTypes[1] !== null && classType !== null;
            var needsDestructorStack = false;
            for (var i = 1; i < argTypes.length; ++i) {
              if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
                needsDestructorStack = true;
                break;
              }
            }
            var returns = argTypes[0].name !== "void";
            var argsList = "";
            var argsListWired = "";
            for (var i = 0; i < argCount - 2; ++i) {
              argsList += (i !== 0 ? ", " : "") + "arg" + i;
              argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
            }
            var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\nif (arguments.length !== " + (argCount - 2) + ") {\nthrowBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n}\n";
            if (needsDestructorStack) {
              invokerFnBody += "var destructors = [];\n";
            }
            var dtorStack = needsDestructorStack ? "destructors" : "null";
            var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
            var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
            if (isClassMethodFunc) {
              invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
            }
            for (var i = 0; i < argCount - 2; ++i) {
              invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
              args1.push("argType" + i);
              args2.push(argTypes[i + 2]);
            }
            if (isClassMethodFunc) {
              argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
            }
            invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
            if (needsDestructorStack) {
              invokerFnBody += "runDestructors(destructors);\n";
            } else {
              for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
                var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
                if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
                  args1.push(paramName + "_dtor");
                  args2.push(argTypes[i].destructorFunction);
                }
              }
            }
            if (returns) {
              invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
            } else {
            }
            invokerFnBody += "}\n";
            args1.push(invokerFnBody);
            var invokerFunction = new_(Function, args1).apply(null, args2);
            return invokerFunction;
          }
          function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
            var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
            methodName = readLatin1String(methodName);
            rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
            whenDependentTypesAreResolved([], [rawClassType], function(classType) {
              classType = classType[0];
              var humanName = classType.name + "." + methodName;
              if (isPureVirtual) {
                classType.registeredClass.pureVirtualFunctions.push(methodName);
              }
              function unboundTypesHandler() {
                throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
              }
              var proto = classType.registeredClass.instancePrototype;
              var method = proto[methodName];
              if (void 0 === method || void 0 === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
                unboundTypesHandler.argCount = argCount - 2;
                unboundTypesHandler.className = classType.name;
                proto[methodName] = unboundTypesHandler;
              } else {
                ensureOverloadTable(proto, methodName, humanName);
                proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
              }
              whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
                var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
                if (void 0 === proto[methodName].overloadTable) {
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
                } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
                }
                return [];
              });
              return [];
            });
          }
          function __embind_register_constant(name, type, value) {
            name = readLatin1String(name);
            whenDependentTypesAreResolved([], [type], function(type2) {
              type2 = type2[0];
              Module[name] = type2["fromWireType"](value);
              return [];
            });
          }
          var emval_free_list = [];
          var emval_handle_array = [{}, { value: void 0 }, { value: null }, { value: true }, { value: false }];
          function __emval_decref(handle) {
            if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
              emval_handle_array[handle] = void 0;
              emval_free_list.push(handle);
            }
          }
          function count_emval_handles() {
            var count = 0;
            for (var i = 5; i < emval_handle_array.length; ++i) {
              if (emval_handle_array[i] !== void 0) {
                ++count;
              }
            }
            return count;
          }
          function get_first_emval() {
            for (var i = 5; i < emval_handle_array.length; ++i) {
              if (emval_handle_array[i] !== void 0) {
                return emval_handle_array[i];
              }
            }
            return null;
          }
          function init_emval() {
            Module["count_emval_handles"] = count_emval_handles;
            Module["get_first_emval"] = get_first_emval;
          }
          function __emval_register(value) {
            switch (value) {
              case void 0: {
                return 1;
              }
              case null: {
                return 2;
              }
              case true: {
                return 3;
              }
              case false: {
                return 4;
              }
              default: {
                var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
                emval_handle_array[handle] = { refcount: 1, value };
                return handle;
              }
            }
          }
          function __embind_register_emval(rawType, name) {
            name = readLatin1String(name);
            registerType(rawType, { name, "fromWireType": function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
            }, "toWireType": function(destructors, value) {
              return __emval_register(value);
            }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: null });
          }
          function enumReadValueFromPointer(name, shift, signed) {
            switch (shift) {
              case 0:
                return function(pointer) {
                  var heap = signed ? HEAP8 : HEAPU8;
                  return this["fromWireType"](heap[pointer]);
                };
              case 1:
                return function(pointer) {
                  var heap = signed ? HEAP16 : HEAPU16;
                  return this["fromWireType"](heap[pointer >> 1]);
                };
              case 2:
                return function(pointer) {
                  var heap = signed ? HEAP32 : HEAPU32;
                  return this["fromWireType"](heap[pointer >> 2]);
                };
              default:
                throw new TypeError("Unknown integer type: " + name);
            }
          }
          function __embind_register_enum(rawType, name, size, isSigned) {
            var shift = getShiftFromSize(size);
            name = readLatin1String(name);
            function ctor() {
            }
            ctor.values = {};
            registerType(rawType, { name, constructor: ctor, "fromWireType": function(c) {
              return this.constructor.values[c];
            }, "toWireType": function(destructors, c) {
              return c.value;
            }, "argPackAdvance": 8, "readValueFromPointer": enumReadValueFromPointer(name, shift, isSigned), destructorFunction: null });
            exposePublicSymbol(name, ctor);
          }
          function requireRegisteredType(rawType, humanName) {
            var impl = registeredTypes[rawType];
            if (void 0 === impl) {
              throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
            }
            return impl;
          }
          function __embind_register_enum_value(rawEnumType, name, enumValue) {
            var enumType = requireRegisteredType(rawEnumType, "enum");
            name = readLatin1String(name);
            var Enum = enumType.constructor;
            var Value = Object.create(enumType.constructor.prototype, { value: { value: enumValue }, constructor: { value: createNamedFunction(enumType.name + "_" + name, function() {
            }) } });
            Enum.values[enumValue] = Value;
            Enum[name] = Value;
          }
          function _embind_repr(v3) {
            if (v3 === null) {
              return "null";
            }
            var t = typeof v3;
            if (t === "object" || t === "array" || t === "function") {
              return v3.toString();
            } else {
              return "" + v3;
            }
          }
          function floatReadValueFromPointer(name, shift) {
            switch (shift) {
              case 2:
                return function(pointer) {
                  return this["fromWireType"](HEAPF32[pointer >> 2]);
                };
              case 3:
                return function(pointer) {
                  return this["fromWireType"](HEAPF64[pointer >> 3]);
                };
              default:
                throw new TypeError("Unknown float type: " + name);
            }
          }
          function __embind_register_float(rawType, name, size) {
            var shift = getShiftFromSize(size);
            name = readLatin1String(name);
            registerType(rawType, { name, "fromWireType": function(value) {
              return value;
            }, "toWireType": function(destructors, value) {
              if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
            }, "argPackAdvance": 8, "readValueFromPointer": floatReadValueFromPointer(name, shift), destructorFunction: null });
          }
          function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
            var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
            name = readLatin1String(name);
            rawInvoker = embind__requireFunction(signature, rawInvoker);
            exposePublicSymbol(name, function() {
              throwUnboundTypeError("Cannot call " + name + " due to unbound types", argTypes);
            }, argCount - 1);
            whenDependentTypesAreResolved([], argTypes, function(argTypes2) {
              var invokerArgsArray = [argTypes2[0], null].concat(argTypes2.slice(1));
              replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);
              return [];
            });
          }
          function integerReadValueFromPointer(name, shift, signed) {
            switch (shift) {
              case 0:
                return signed ? function readS8FromPointer(pointer) {
                  return HEAP8[pointer];
                } : function readU8FromPointer(pointer) {
                  return HEAPU8[pointer];
                };
              case 1:
                return signed ? function readS16FromPointer(pointer) {
                  return HEAP16[pointer >> 1];
                } : function readU16FromPointer(pointer) {
                  return HEAPU16[pointer >> 1];
                };
              case 2:
                return signed ? function readS32FromPointer(pointer) {
                  return HEAP32[pointer >> 2];
                } : function readU32FromPointer(pointer) {
                  return HEAPU32[pointer >> 2];
                };
              default:
                throw new TypeError("Unknown integer type: " + name);
            }
          }
          function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
            name = readLatin1String(name);
            if (maxRange === -1) {
              maxRange = 4294967295;
            }
            var shift = getShiftFromSize(size);
            var fromWireType = function(value) {
              return value;
            };
            if (minRange === 0) {
              var bitshift = 32 - 8 * size;
              fromWireType = function(value) {
                return value << bitshift >>> bitshift;
              };
            }
            var isUnsignedType = name.indexOf("unsigned") != -1;
            registerType(primitiveType, { name, "fromWireType": fromWireType, "toWireType": function(destructors, value) {
              if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
              }
              return isUnsignedType ? value >>> 0 : value | 0;
            }, "argPackAdvance": 8, "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0), destructorFunction: null });
          }
          function __embind_register_memory_view(rawType, dataTypeIndex, name) {
            var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
            var TA = typeMapping[dataTypeIndex];
            function decodeMemoryView(handle) {
              handle = handle >> 2;
              var heap = HEAPU32;
              var size = heap[handle];
              var data = heap[handle + 1];
              return new TA(buffer, data, size);
            }
            name = readLatin1String(name);
            registerType(rawType, { name, "fromWireType": decodeMemoryView, "argPackAdvance": 8, "readValueFromPointer": decodeMemoryView }, { ignoreDuplicateRegistrations: true });
          }
          function __embind_register_std_string(rawType, name) {
            name = readLatin1String(name);
            var stdStringIsUTF8 = name === "std::string";
            registerType(rawType, { name, "fromWireType": function(value) {
              var length = HEAPU32[value >> 2];
              var str;
              if (stdStringIsUTF8) {
                var decodeStartPtr = value + 4;
                for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i;
                  if (i == length || HEAPU8[currentBytePtr] == 0) {
                    var maxRead = currentBytePtr - decodeStartPtr;
                    var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                    if (str === void 0) {
                      str = stringSegment;
                    } else {
                      str += String.fromCharCode(0);
                      str += stringSegment;
                    }
                    decodeStartPtr = currentBytePtr + 1;
                  }
                }
              } else {
                var a3 = new Array(length);
                for (var i = 0; i < length; ++i) {
                  a3[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                }
                str = a3.join("");
              }
              _free(value);
              return str;
            }, "toWireType": function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
              }
              var getLength;
              var valueIsOfTypeString = typeof value === "string";
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                throwBindingError("Cannot pass non-string to std::string");
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                getLength = function() {
                  return lengthBytesUTF8(value);
                };
              } else {
                getLength = function() {
                  return value.length;
                };
              }
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                stringToUTF8(value, ptr + 4, length + 1);
              } else {
                if (valueIsOfTypeString) {
                  for (var i = 0; i < length; ++i) {
                    var charCode = value.charCodeAt(i);
                    if (charCode > 255) {
                      _free(ptr);
                      throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
                    }
                    HEAPU8[ptr + 4 + i] = charCode;
                  }
                } else {
                  for (var i = 0; i < length; ++i) {
                    HEAPU8[ptr + 4 + i] = value[i];
                  }
                }
              }
              if (destructors !== null) {
                destructors.push(_free, ptr);
              }
              return ptr;
            }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function(ptr) {
              _free(ptr);
            } });
          }
          function __embind_register_std_wstring(rawType, charSize, name) {
            name = readLatin1String(name);
            var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
            if (charSize === 2) {
              decodeString = UTF16ToString;
              encodeString = stringToUTF16;
              lengthBytesUTF = lengthBytesUTF16;
              getHeap = function() {
                return HEAPU16;
              };
              shift = 1;
            } else if (charSize === 4) {
              decodeString = UTF32ToString;
              encodeString = stringToUTF32;
              lengthBytesUTF = lengthBytesUTF32;
              getHeap = function() {
                return HEAPU32;
              };
              shift = 2;
            }
            registerType(rawType, { name, "fromWireType": function(value) {
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
              var decodeStartPtr = value + 4;
              for (var i = 0; i <= length; ++i) {
                var currentBytePtr = value + 4 + i * charSize;
                if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                  var maxReadBytes = currentBytePtr - decodeStartPtr;
                  var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                  if (str === void 0) {
                    str = stringSegment;
                  } else {
                    str += String.fromCharCode(0);
                    str += stringSegment;
                  }
                  decodeStartPtr = currentBytePtr + charSize;
                }
              }
              _free(value);
              return str;
            }, "toWireType": function(destructors, value) {
              if (!(typeof value === "string")) {
                throwBindingError("Cannot pass non-string to C++ string type " + name);
              }
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
              encodeString(value, ptr + 4, length + charSize);
              if (destructors !== null) {
                destructors.push(_free, ptr);
              }
              return ptr;
            }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function(ptr) {
              _free(ptr);
            } });
          }
          function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
            structRegistrations[rawType] = { name: readLatin1String(name), rawConstructor: embind__requireFunction(constructorSignature, rawConstructor), rawDestructor: embind__requireFunction(destructorSignature, rawDestructor), fields: [] };
          }
          function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
            structRegistrations[structType].fields.push({ fieldName: readLatin1String(fieldName), getterReturnType, getter: embind__requireFunction(getterSignature, getter), getterContext, setterArgumentType, setter: embind__requireFunction(setterSignature, setter), setterContext });
          }
          function __embind_register_void(rawType, name) {
            name = readLatin1String(name);
            registerType(rawType, { isVoid: true, name, "argPackAdvance": 0, "fromWireType": function() {
              return void 0;
            }, "toWireType": function(destructors, o) {
              return void 0;
            } });
          }
          function requireHandle(handle) {
            if (!handle) {
              throwBindingError("Cannot use deleted val. handle = " + handle);
            }
            return emval_handle_array[handle].value;
          }
          function __emval_as(handle, returnType, destructorsRef) {
            handle = requireHandle(handle);
            returnType = requireRegisteredType(returnType, "emval::as");
            var destructors = [];
            var rd = __emval_register(destructors);
            HEAP32[destructorsRef >> 2] = rd;
            return returnType["toWireType"](destructors, handle);
          }
          var emval_symbols = {};
          function getStringOrSymbol(address) {
            var symbol = emval_symbols[address];
            if (symbol === void 0) {
              return readLatin1String(address);
            } else {
              return symbol;
            }
          }
          var emval_methodCallers = [];
          function __emval_call_void_method(caller, handle, methodName, args) {
            caller = emval_methodCallers[caller];
            handle = requireHandle(handle);
            methodName = getStringOrSymbol(methodName);
            caller(handle, methodName, null, args);
          }
          function emval_get_global() {
            if (typeof globalThis === "object") {
              return globalThis;
            }
            return (/* @__PURE__ */ function() {
              return Function;
            }())("return this")();
          }
          function __emval_get_global(name) {
            if (name === 0) {
              return __emval_register(emval_get_global());
            } else {
              name = getStringOrSymbol(name);
              return __emval_register(emval_get_global()[name]);
            }
          }
          function __emval_addMethodCaller(caller) {
            var id = emval_methodCallers.length;
            emval_methodCallers.push(caller);
            return id;
          }
          function __emval_lookupTypes(argCount, argTypes) {
            var a3 = new Array(argCount);
            for (var i = 0; i < argCount; ++i) {
              a3[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], "parameter " + i);
            }
            return a3;
          }
          function __emval_get_method_caller(argCount, argTypes) {
            var types = __emval_lookupTypes(argCount, argTypes);
            var retType = types[0];
            var signatureName = retType.name + "_$" + types.slice(1).map(function(t) {
              return t.name;
            }).join("_") + "$";
            var params = ["retType"];
            var args = [retType];
            var argsList = "";
            for (var i = 0; i < argCount - 1; ++i) {
              argsList += (i !== 0 ? ", " : "") + "arg" + i;
              params.push("argType" + i);
              args.push(types[1 + i]);
            }
            var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
            var functionBody = "return function " + functionName + "(handle, name, destructors, args) {\n";
            var offset = 0;
            for (var i = 0; i < argCount - 1; ++i) {
              functionBody += "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? "+" + offset : "") + ");\n";
              offset += types[i + 1]["argPackAdvance"];
            }
            functionBody += "    var rv = handle[name](" + argsList + ");\n";
            for (var i = 0; i < argCount - 1; ++i) {
              if (types[i + 1]["deleteObject"]) {
                functionBody += "    argType" + i + ".deleteObject(arg" + i + ");\n";
              }
            }
            if (!retType.isVoid) {
              functionBody += "    return retType.toWireType(destructors, rv);\n";
            }
            functionBody += "};\n";
            params.push(functionBody);
            var invokerFunction = new_(Function, params).apply(null, args);
            return __emval_addMethodCaller(invokerFunction);
          }
          function __emval_get_module_property(name) {
            name = getStringOrSymbol(name);
            return __emval_register(Module[name]);
          }
          function __emval_get_property(handle, key2) {
            handle = requireHandle(handle);
            key2 = requireHandle(key2);
            return __emval_register(handle[key2]);
          }
          function __emval_incref(handle) {
            if (handle > 4) {
              emval_handle_array[handle].refcount += 1;
            }
          }
          function craftEmvalAllocator(argCount) {
            var argsList = "";
            for (var i = 0; i < argCount; ++i) {
              argsList += (i !== 0 ? ", " : "") + "arg" + i;
            }
            var functionBody = "return function emval_allocator_" + argCount + "(constructor, argTypes, args) {\n";
            for (var i = 0; i < argCount; ++i) {
              functionBody += "var argType" + i + " = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + " + i + '], "parameter ' + i + '");\nvar arg' + i + " = argType" + i + ".readValueFromPointer(args);\nargs += argType" + i + "['argPackAdvance'];\n";
            }
            functionBody += "var obj = new constructor(" + argsList + ");\nreturn __emval_register(obj);\n}\n";
            return new Function("requireRegisteredType", "Module", "__emval_register", functionBody)(requireRegisteredType, Module, __emval_register);
          }
          var emval_newers = {};
          function __emval_new(handle, argCount, argTypes, args) {
            handle = requireHandle(handle);
            var newer = emval_newers[argCount];
            if (!newer) {
              newer = craftEmvalAllocator(argCount);
              emval_newers[argCount] = newer;
            }
            return newer(handle, argTypes, args);
          }
          function __emval_new_cstring(v3) {
            return __emval_register(getStringOrSymbol(v3));
          }
          function __emval_run_destructors(handle) {
            var destructors = emval_handle_array[handle].value;
            runDestructors(destructors);
            __emval_decref(handle);
          }
          function _abort() {
            abort();
          }
          function _emscripten_memcpy_big(dest, src, num) {
            HEAPU8.copyWithin(dest, src, src + num);
          }
          function emscripten_realloc_buffer(size) {
            try {
              wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
              updateGlobalBufferAndViews(wasmMemory.buffer);
              return 1;
            } catch (e) {
            }
          }
          function _emscripten_resize_heap(requestedSize) {
            var oldSize = HEAPU8.length;
            requestedSize = requestedSize >>> 0;
            var maxHeapSize = 2147483648;
            if (requestedSize > maxHeapSize) {
              return false;
            }
            for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
              var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
              overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
              var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
              var replacement = emscripten_realloc_buffer(newSize);
              if (replacement) {
                return true;
              }
            }
            return false;
          }
          var SYSCALLS = { mappings: {}, buffers: [null, [], []], printChar: function(stream, curr) {
            var buffer2 = SYSCALLS.buffers[stream];
            if (curr === 0 || curr === 10) {
              (stream === 1 ? out : err)(UTF8ArrayToString(buffer2, 0));
              buffer2.length = 0;
            } else {
              buffer2.push(curr);
            }
          }, varargs: void 0, get: function() {
            SYSCALLS.varargs += 4;
            var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
            return ret;
          }, getStr: function(ptr) {
            var ret = UTF8ToString(ptr);
            return ret;
          }, get64: function(low, high) {
            return low;
          } };
          function _fd_close(fd) {
            return 0;
          }
          function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
          }
          function _fd_write(fd, iov, iovcnt, pnum) {
            var num = 0;
            for (var i = 0; i < iovcnt; i++) {
              var ptr = HEAP32[iov + i * 8 >> 2];
              var len = HEAP32[iov + (i * 8 + 4) >> 2];
              for (var j = 0; j < len; j++) {
                SYSCALLS.printChar(fd, HEAPU8[ptr + j]);
              }
              num += len;
            }
            HEAP32[pnum >> 2] = num;
            return 0;
          }
          function _setTempRet0($i) {
            setTempRet0($i | 0);
          }
          InternalError = Module["InternalError"] = extendError(Error, "InternalError");
          embind_init_charCodes();
          BindingError = Module["BindingError"] = extendError(Error, "BindingError");
          init_ClassHandle();
          init_RegisteredPointer();
          init_embind();
          UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
          init_emval();
          var asmLibraryArg = { "t": __embind_finalize_value_object, "I": __embind_register_bool, "x": __embind_register_class, "w": __embind_register_class_constructor, "d": __embind_register_class_function, "k": __embind_register_constant, "H": __embind_register_emval, "n": __embind_register_enum, "a": __embind_register_enum_value, "A": __embind_register_float, "i": __embind_register_function, "j": __embind_register_integer, "h": __embind_register_memory_view, "B": __embind_register_std_string, "v": __embind_register_std_wstring, "u": __embind_register_value_object, "c": __embind_register_value_object_field, "J": __embind_register_void, "m": __emval_as, "s": __emval_call_void_method, "b": __emval_decref, "y": __emval_get_global, "p": __emval_get_method_caller, "r": __emval_get_module_property, "e": __emval_get_property, "g": __emval_incref, "q": __emval_new, "f": __emval_new_cstring, "l": __emval_run_destructors, "o": _abort, "E": _emscripten_memcpy_big, "F": _emscripten_resize_heap, "G": _fd_close, "C": _fd_seek, "z": _fd_write, "D": _setTempRet0 };
          var asm = createWasm();
          var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
            return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["L"]).apply(null, arguments);
          };
          var _malloc = Module["_malloc"] = function() {
            return (_malloc = Module["_malloc"] = Module["asm"]["M"]).apply(null, arguments);
          };
          var _free = Module["_free"] = function() {
            return (_free = Module["_free"] = Module["asm"]["N"]).apply(null, arguments);
          };
          var ___getTypeName = Module["___getTypeName"] = function() {
            return (___getTypeName = Module["___getTypeName"] = Module["asm"]["P"]).apply(null, arguments);
          };
          var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
            return (___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = Module["asm"]["Q"]).apply(null, arguments);
          };
          var dynCall_jiji = Module["dynCall_jiji"] = function() {
            return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["R"]).apply(null, arguments);
          };
          var calledRun;
          function ExitStatus(status) {
            this.name = "ExitStatus";
            this.message = "Program terminated with exit(" + status + ")";
            this.status = status;
          }
          dependenciesFulfilled = function runCaller() {
            if (!calledRun)
              run();
            if (!calledRun)
              dependenciesFulfilled = runCaller;
          };
          function run(args) {
            args = args || arguments_;
            if (runDependencies > 0) {
              return;
            }
            preRun();
            if (runDependencies > 0) {
              return;
            }
            function doRun() {
              if (calledRun)
                return;
              calledRun = true;
              Module["calledRun"] = true;
              if (ABORT)
                return;
              initRuntime();
              preMain();
              readyPromiseResolve(Module);
              if (Module["onRuntimeInitialized"])
                Module["onRuntimeInitialized"]();
              postRun();
            }
            if (Module["setStatus"]) {
              Module["setStatus"]("Running...");
              setTimeout(function() {
                setTimeout(function() {
                  Module["setStatus"]("");
                }, 1);
                doRun();
              }, 1);
            } else {
              doRun();
            }
          }
          Module["run"] = run;
          if (Module["preInit"]) {
            if (typeof Module["preInit"] == "function")
              Module["preInit"] = [Module["preInit"]];
            while (Module["preInit"].length > 0) {
              Module["preInit"].pop()();
            }
          }
          run();
          return BASIS2.ready;
        };
      }();
      if (typeof exports2 === "object" && typeof module === "object")
        module.exports = BASIS;
      else if (typeof define === "function" && define["amd"])
        define([], function() {
          return BASIS;
        });
      else if (typeof exports2 === "object")
        exports2["BASIS"] = BASIS;
    }
  });

  // packages/engine/Source/Workers/transcodeKTX2.js
  var transcodeKTX2_exports = {};
  __export(transcodeKTX2_exports, {
    default: () => transcodeKTX2_default
  });
  function transcode(parameters, transferableObjects) {
    Check_default.typeOf.object("transcoderModule", transcoderModule);
    const data = parameters.ktx2Buffer;
    const supportedTargetFormats = parameters.supportedTargetFormats;
    let header;
    try {
      header = read2(data);
    } catch (e) {
      throw new RuntimeError_default("Invalid KTX2 file.");
    }
    if (header.layerCount !== 0) {
      throw new RuntimeError_default("KTX2 texture arrays are not supported.");
    }
    if (header.pixelDepth !== 0) {
      throw new RuntimeError_default("KTX2 3D textures are unsupported.");
    }
    const dfd = header.dataFormatDescriptor[0];
    const result = new Array(header.levelCount);
    if (header.vkFormat === 0 && (dfd.colorModel === colorModelETC1S || dfd.colorModel === colorModelUASTC)) {
      transcodeCompressed(
        data,
        header,
        supportedTargetFormats,
        transcoderModule,
        transferableObjects,
        result
      );
    } else {
      transferableObjects.push(data.buffer);
      parseUncompressed(header, result);
    }
    return result;
  }
  function parseUncompressed(header, result) {
    const internalFormat = header.vkFormat === VulkanConstants_default.VK_FORMAT_R8G8B8_SRGB ? PixelFormat_default.RGB : PixelFormat_default.RGBA;
    let datatype;
    if (header.vkFormat === VulkanConstants_default.VK_FORMAT_R8G8B8A8_UNORM) {
      datatype = PixelDatatype_default.UNSIGNED_BYTE;
    } else if (header.vkFormat === VulkanConstants_default.VK_FORMAT_R16G16B16A16_SFLOAT) {
      datatype = PixelDatatype_default.HALF_FLOAT;
    } else if (header.vkFormat === VulkanConstants_default.VK_FORMAT_R32G32B32A32_SFLOAT) {
      datatype = PixelDatatype_default.FLOAT;
    }
    for (let i = 0; i < header.levels.length; ++i) {
      const level = {};
      result[i] = level;
      const levelBuffer = header.levels[i].levelData;
      const width = header.pixelWidth >> i;
      const height = header.pixelHeight >> i;
      const faceLength = width * height * PixelFormat_default.componentsLength(internalFormat);
      for (let j = 0; j < header.faceCount; ++j) {
        const faceByteOffset = levelBuffer.byteOffset + faceLength * header.typeSize * j;
        let faceView;
        if (!defined_default(datatype) || PixelDatatype_default.sizeInBytes(datatype) === 1) {
          faceView = new Uint8Array(
            levelBuffer.buffer,
            faceByteOffset,
            faceLength
          );
        } else if (PixelDatatype_default.sizeInBytes(datatype) === 2) {
          faceView = new Uint16Array(
            levelBuffer.buffer,
            faceByteOffset,
            faceLength
          );
        } else {
          faceView = new Float32Array(
            levelBuffer.buffer,
            faceByteOffset,
            faceLength
          );
        }
        level[faceOrder[j]] = {
          internalFormat,
          datatype,
          width,
          height,
          levelBuffer: faceView
        };
      }
    }
  }
  function transcodeCompressed(data, header, supportedTargetFormats, transcoderModule2, transferableObjects, result) {
    const ktx2File = new transcoderModule2.KTX2File(data);
    let width = ktx2File.getWidth();
    let height = ktx2File.getHeight();
    const levels = ktx2File.getLevels();
    const hasAlpha = ktx2File.getHasAlpha();
    if (!(width > 0) || !(height > 0) || !(levels > 0)) {
      ktx2File.close();
      ktx2File.delete();
      throw new RuntimeError_default("Invalid KTX2 file");
    }
    let internalFormat, transcoderFormat;
    const dfd = header.dataFormatDescriptor[0];
    const BasisFormat = transcoderModule2.transcoder_texture_format;
    if (dfd.colorModel === colorModelETC1S) {
      if (supportedTargetFormats.etc) {
        internalFormat = hasAlpha ? PixelFormat_default.RGBA8_ETC2_EAC : PixelFormat_default.RGB8_ETC2;
        transcoderFormat = hasAlpha ? BasisFormat.cTFETC2_RGBA : BasisFormat.cTFETC1_RGB;
      } else if (supportedTargetFormats.etc1 && !hasAlpha) {
        internalFormat = PixelFormat_default.RGB_ETC1;
        transcoderFormat = BasisFormat.cTFETC1_RGB;
      } else if (supportedTargetFormats.s3tc) {
        internalFormat = hasAlpha ? PixelFormat_default.RGBA_DXT5 : PixelFormat_default.RGB_DXT1;
        transcoderFormat = hasAlpha ? BasisFormat.cTFBC3_RGBA : BasisFormat.cTFBC1_RGB;
      } else if (supportedTargetFormats.pvrtc) {
        internalFormat = hasAlpha ? PixelFormat_default.RGBA_PVRTC_4BPPV1 : PixelFormat_default.RGB_PVRTC_4BPPV1;
        transcoderFormat = hasAlpha ? BasisFormat.cTFPVRTC1_4_RGBA : BasisFormat.cTFPVRTC1_4_RGB;
      } else if (supportedTargetFormats.astc) {
        internalFormat = PixelFormat_default.RGBA_ASTC;
        transcoderFormat = BasisFormat.cTFASTC_4x4_RGBA;
      } else if (supportedTargetFormats.bc7) {
        internalFormat = PixelFormat_default.RGBA_BC7;
        transcoderFormat = BasisFormat.cTFBC7_RGBA;
      } else {
        throw new RuntimeError_default(
          "No transcoding format target available for ETC1S compressed ktx2."
        );
      }
    } else if (dfd.colorModel === colorModelUASTC) {
      if (supportedTargetFormats.astc) {
        internalFormat = PixelFormat_default.RGBA_ASTC;
        transcoderFormat = BasisFormat.cTFASTC_4x4_RGBA;
      } else if (supportedTargetFormats.bc7) {
        internalFormat = PixelFormat_default.RGBA_BC7;
        transcoderFormat = BasisFormat.cTFBC7_RGBA;
      } else if (supportedTargetFormats.s3tc) {
        internalFormat = hasAlpha ? PixelFormat_default.RGBA_DXT5 : PixelFormat_default.RGB_DXT1;
        transcoderFormat = hasAlpha ? BasisFormat.cTFBC3_RGBA : BasisFormat.cTFBC1_RGB;
      } else if (supportedTargetFormats.etc) {
        internalFormat = hasAlpha ? PixelFormat_default.RGBA8_ETC2_EAC : PixelFormat_default.RGB8_ETC2;
        transcoderFormat = hasAlpha ? BasisFormat.cTFETC2_RGBA : BasisFormat.cTFETC1_RGB;
      } else if (supportedTargetFormats.etc1 && !hasAlpha) {
        internalFormat = PixelFormat_default.RGB_ETC1;
        transcoderFormat = BasisFormat.cTFETC1_RGB;
      } else if (supportedTargetFormats.pvrtc) {
        internalFormat = hasAlpha ? PixelFormat_default.RGBA_PVRTC_4BPPV1 : PixelFormat_default.RGB_PVRTC_4BPPV1;
        transcoderFormat = hasAlpha ? BasisFormat.cTFPVRTC1_4_RGBA : BasisFormat.cTFPVRTC1_4_RGB;
      } else {
        throw new RuntimeError_default(
          "No transcoding format target available for UASTC compressed ktx2."
        );
      }
    }
    if (!ktx2File.startTranscoding()) {
      ktx2File.close();
      ktx2File.delete();
      throw new RuntimeError_default("startTranscoding() failed");
    }
    for (let i = 0; i < header.levels.length; ++i) {
      const level = {};
      result[i] = level;
      width = header.pixelWidth >> i;
      height = header.pixelHeight >> i;
      const dstSize = ktx2File.getImageTranscodedSizeInBytes(
        i,
        // level index
        0,
        // layer index
        0,
        // face index
        transcoderFormat.value
      );
      const dst = new Uint8Array(dstSize);
      const transcoded = ktx2File.transcodeImage(
        dst,
        i,
        // level index
        0,
        // layer index
        0,
        // face index
        transcoderFormat.value,
        0,
        // get_alpha_for_opaque_formats
        -1,
        // channel0
        -1
        // channel1
      );
      if (!defined_default(transcoded)) {
        throw new RuntimeError_default("transcodeImage() failed.");
      }
      transferableObjects.push(dst.buffer);
      level[faceOrder[0]] = {
        internalFormat,
        width,
        height,
        levelBuffer: dst
      };
    }
    ktx2File.close();
    ktx2File.delete();
    return result;
  }
  async function initWorker3(parameters, transferableObjects) {
    const wasmConfig = parameters.webAssemblyConfig;
    const basisTranscoder = defaultValue_default(import_basis_transcoder.default, self.BASIS);
    if (defined_default(wasmConfig.wasmBinaryFile)) {
      transcoderModule = await basisTranscoder(wasmConfig);
    } else {
      transcoderModule = await basisTranscoder();
    }
    transcoderModule.initializeBasis();
    return true;
  }
  function transcodeKTX2(parameters, transferableObjects) {
    const wasmConfig = parameters.webAssemblyConfig;
    if (defined_default(wasmConfig)) {
      return initWorker3(parameters, transferableObjects);
    }
    return transcode(parameters, transferableObjects);
  }
  var import_basis_transcoder, faceOrder, colorModelETC1S, colorModelUASTC, transcoderModule, transcodeKTX2_default;
  var init_transcodeKTX2 = __esm({
    "packages/engine/Source/Workers/transcodeKTX2.js"() {
      init_defaultValue();
      init_defined();
      init_Check();
      init_PixelFormat();
      init_RuntimeError();
      init_VulkanConstants();
      init_PixelDatatype();
      init_createTaskProcessorWorker();
      init_ktx_parse_modern();
      import_basis_transcoder = __toESM(require_basis_transcoder(), 1);
      faceOrder = [
        "positiveX",
        "negativeX",
        "positiveY",
        "negativeY",
        "positiveZ",
        "negativeZ"
      ];
      colorModelETC1S = 163;
      colorModelUASTC = 166;
      transcodeKTX2_default = createTaskProcessorWorker_default(transcodeKTX2);
    }
  });

  // packages/engine/Source/Workers/transferTypedArrayTest.js
  var transferTypedArrayTest_exports = {};
  var init_transferTypedArrayTest = __esm({
    "packages/engine/Source/Workers/transferTypedArrayTest.js"() {
      self.onmessage = function(event) {
        const array = event.data.array;
        const postMessage2 = self.webkitPostMessage || self.postMessage;
        try {
          postMessage2(
            {
              array
            },
            [array.buffer]
          );
        } catch (e) {
          postMessage2({});
        }
      };
    }
  });

  // packages/engine/Source/Core/Intersections2D.js
  var Intersections2D, Intersections2D_default;
  var init_Intersections2D = __esm({
    "packages/engine/Source/Core/Intersections2D.js"() {
      init_Cartesian2();
      init_Cartesian3();
      init_Check();
      init_defined();
      init_DeveloperError();
      Intersections2D = {};
      Intersections2D.clipTriangleAtAxisAlignedThreshold = function(threshold, keepAbove, u0, u12, u22, result) {
        if (!defined_default(threshold)) {
          throw new DeveloperError_default("threshold is required.");
        }
        if (!defined_default(keepAbove)) {
          throw new DeveloperError_default("keepAbove is required.");
        }
        if (!defined_default(u0)) {
          throw new DeveloperError_default("u0 is required.");
        }
        if (!defined_default(u12)) {
          throw new DeveloperError_default("u1 is required.");
        }
        if (!defined_default(u22)) {
          throw new DeveloperError_default("u2 is required.");
        }
        if (!defined_default(result)) {
          result = [];
        } else {
          result.length = 0;
        }
        let u0Behind;
        let u1Behind;
        let u2Behind;
        if (keepAbove) {
          u0Behind = u0 < threshold;
          u1Behind = u12 < threshold;
          u2Behind = u22 < threshold;
        } else {
          u0Behind = u0 > threshold;
          u1Behind = u12 > threshold;
          u2Behind = u22 > threshold;
        }
        const numBehind = u0Behind + u1Behind + u2Behind;
        let u01Ratio;
        let u02Ratio;
        let u12Ratio;
        let u10Ratio;
        let u20Ratio;
        let u21Ratio;
        if (numBehind === 1) {
          if (u0Behind) {
            u01Ratio = (threshold - u0) / (u12 - u0);
            u02Ratio = (threshold - u0) / (u22 - u0);
            result.push(1);
            result.push(2);
            if (u02Ratio !== 1) {
              result.push(-1);
              result.push(0);
              result.push(2);
              result.push(u02Ratio);
            }
            if (u01Ratio !== 1) {
              result.push(-1);
              result.push(0);
              result.push(1);
              result.push(u01Ratio);
            }
          } else if (u1Behind) {
            u12Ratio = (threshold - u12) / (u22 - u12);
            u10Ratio = (threshold - u12) / (u0 - u12);
            result.push(2);
            result.push(0);
            if (u10Ratio !== 1) {
              result.push(-1);
              result.push(1);
              result.push(0);
              result.push(u10Ratio);
            }
            if (u12Ratio !== 1) {
              result.push(-1);
              result.push(1);
              result.push(2);
              result.push(u12Ratio);
            }
          } else if (u2Behind) {
            u20Ratio = (threshold - u22) / (u0 - u22);
            u21Ratio = (threshold - u22) / (u12 - u22);
            result.push(0);
            result.push(1);
            if (u21Ratio !== 1) {
              result.push(-1);
              result.push(2);
              result.push(1);
              result.push(u21Ratio);
            }
            if (u20Ratio !== 1) {
              result.push(-1);
              result.push(2);
              result.push(0);
              result.push(u20Ratio);
            }
          }
        } else if (numBehind === 2) {
          if (!u0Behind && u0 !== threshold) {
            u10Ratio = (threshold - u12) / (u0 - u12);
            u20Ratio = (threshold - u22) / (u0 - u22);
            result.push(0);
            result.push(-1);
            result.push(1);
            result.push(0);
            result.push(u10Ratio);
            result.push(-1);
            result.push(2);
            result.push(0);
            result.push(u20Ratio);
          } else if (!u1Behind && u12 !== threshold) {
            u21Ratio = (threshold - u22) / (u12 - u22);
            u01Ratio = (threshold - u0) / (u12 - u0);
            result.push(1);
            result.push(-1);
            result.push(2);
            result.push(1);
            result.push(u21Ratio);
            result.push(-1);
            result.push(0);
            result.push(1);
            result.push(u01Ratio);
          } else if (!u2Behind && u22 !== threshold) {
            u02Ratio = (threshold - u0) / (u22 - u0);
            u12Ratio = (threshold - u12) / (u22 - u12);
            result.push(2);
            result.push(-1);
            result.push(0);
            result.push(2);
            result.push(u02Ratio);
            result.push(-1);
            result.push(1);
            result.push(2);
            result.push(u12Ratio);
          }
        } else if (numBehind !== 3) {
          result.push(0);
          result.push(1);
          result.push(2);
        }
        return result;
      };
      Intersections2D.computeBarycentricCoordinates = function(x, y, x1, y1, x2, y2, x3, y3, result) {
        if (!defined_default(x)) {
          throw new DeveloperError_default("x is required.");
        }
        if (!defined_default(y)) {
          throw new DeveloperError_default("y is required.");
        }
        if (!defined_default(x1)) {
          throw new DeveloperError_default("x1 is required.");
        }
        if (!defined_default(y1)) {
          throw new DeveloperError_default("y1 is required.");
        }
        if (!defined_default(x2)) {
          throw new DeveloperError_default("x2 is required.");
        }
        if (!defined_default(y2)) {
          throw new DeveloperError_default("y2 is required.");
        }
        if (!defined_default(x3)) {
          throw new DeveloperError_default("x3 is required.");
        }
        if (!defined_default(y3)) {
          throw new DeveloperError_default("y3 is required.");
        }
        const x1mx3 = x1 - x3;
        const x3mx2 = x3 - x2;
        const y2my3 = y2 - y3;
        const y1my3 = y1 - y3;
        const inverseDeterminant = 1 / (y2my3 * x1mx3 + x3mx2 * y1my3);
        const ymy3 = y - y3;
        const xmx3 = x - x3;
        const l1 = (y2my3 * xmx3 + x3mx2 * ymy3) * inverseDeterminant;
        const l2 = (-y1my3 * xmx3 + x1mx3 * ymy3) * inverseDeterminant;
        const l3 = 1 - l1 - l2;
        if (defined_default(result)) {
          result.x = l1;
          result.y = l2;
          result.z = l3;
          return result;
        }
        return new Cartesian3_default(l1, l2, l3);
      };
      Intersections2D.computeLineSegmentLineSegmentIntersection = function(x00, y00, x01, y01, x10, y10, x11, y11, result) {
        Check_default.typeOf.number("x00", x00);
        Check_default.typeOf.number("y00", y00);
        Check_default.typeOf.number("x01", x01);
        Check_default.typeOf.number("y01", y01);
        Check_default.typeOf.number("x10", x10);
        Check_default.typeOf.number("y10", y10);
        Check_default.typeOf.number("x11", x11);
        Check_default.typeOf.number("y11", y11);
        const numerator1A = (x11 - x10) * (y00 - y10) - (y11 - y10) * (x00 - x10);
        const numerator1B = (x01 - x00) * (y00 - y10) - (y01 - y00) * (x00 - x10);
        const denominator1 = (y11 - y10) * (x01 - x00) - (x11 - x10) * (y01 - y00);
        if (denominator1 === 0) {
          return;
        }
        const ua1 = numerator1A / denominator1;
        const ub1 = numerator1B / denominator1;
        if (ua1 >= 0 && ua1 <= 1 && ub1 >= 0 && ub1 <= 1) {
          if (!defined_default(result)) {
            result = new Cartesian2_default();
          }
          result.x = x00 + ua1 * (x01 - x00);
          result.y = y00 + ua1 * (y01 - y00);
          return result;
        }
      };
      Intersections2D_default = Intersections2D;
    }
  });

  // packages/engine/Source/Workers/upsampleQuantizedTerrainMesh.js
  var upsampleQuantizedTerrainMesh_exports = {};
  __export(upsampleQuantizedTerrainMesh_exports, {
    default: () => upsampleQuantizedTerrainMesh_default
  });
  function upsampleQuantizedTerrainMesh(parameters, transferableObjects) {
    const isEastChild = parameters.isEastChild;
    const isNorthChild = parameters.isNorthChild;
    const minU = isEastChild ? halfMaxShort : 0;
    const maxU = isEastChild ? maxShort5 : halfMaxShort;
    const minV = isNorthChild ? halfMaxShort : 0;
    const maxV = isNorthChild ? maxShort5 : halfMaxShort;
    const uBuffer = uScratch;
    const vBuffer = vScratch;
    const heightBuffer = heightScratch;
    const normalBuffer = normalsScratch;
    uBuffer.length = 0;
    vBuffer.length = 0;
    heightBuffer.length = 0;
    normalBuffer.length = 0;
    const indices = indicesScratch;
    indices.length = 0;
    const vertexMap = {};
    const parentVertices = parameters.vertices;
    let parentIndices = parameters.indices;
    parentIndices = parentIndices.subarray(0, parameters.indexCountWithoutSkirts);
    const encoding = TerrainEncoding_default.clone(parameters.encoding);
    const hasVertexNormals = encoding.hasVertexNormals;
    let vertexCount = 0;
    const quantizedVertexCount = parameters.vertexCountWithoutSkirts;
    const parentMinimumHeight = parameters.minimumHeight;
    const parentMaximumHeight = parameters.maximumHeight;
    const parentUBuffer = new Array(quantizedVertexCount);
    const parentVBuffer = new Array(quantizedVertexCount);
    const parentHeightBuffer = new Array(quantizedVertexCount);
    const parentNormalBuffer = hasVertexNormals ? new Array(quantizedVertexCount * 2) : void 0;
    const threshold = 20;
    let height;
    let i, n;
    let u3, v3;
    for (i = 0, n = 0; i < quantizedVertexCount; ++i, n += 2) {
      const texCoords = encoding.decodeTextureCoordinates(
        parentVertices,
        i,
        decodeTexCoordsScratch
      );
      height = encoding.decodeHeight(parentVertices, i);
      u3 = Math_default.clamp(texCoords.x * maxShort5 | 0, 0, maxShort5);
      v3 = Math_default.clamp(texCoords.y * maxShort5 | 0, 0, maxShort5);
      parentHeightBuffer[i] = Math_default.clamp(
        (height - parentMinimumHeight) / (parentMaximumHeight - parentMinimumHeight) * maxShort5 | 0,
        0,
        maxShort5
      );
      if (u3 < threshold) {
        u3 = 0;
      }
      if (v3 < threshold) {
        v3 = 0;
      }
      if (maxShort5 - u3 < threshold) {
        u3 = maxShort5;
      }
      if (maxShort5 - v3 < threshold) {
        v3 = maxShort5;
      }
      parentUBuffer[i] = u3;
      parentVBuffer[i] = v3;
      if (hasVertexNormals) {
        const encodedNormal = encoding.getOctEncodedNormal(
          parentVertices,
          i,
          octEncodedNormalScratch
        );
        parentNormalBuffer[n] = encodedNormal.x;
        parentNormalBuffer[n + 1] = encodedNormal.y;
      }
      if ((isEastChild && u3 >= halfMaxShort || !isEastChild && u3 <= halfMaxShort) && (isNorthChild && v3 >= halfMaxShort || !isNorthChild && v3 <= halfMaxShort)) {
        vertexMap[i] = vertexCount;
        uBuffer.push(u3);
        vBuffer.push(v3);
        heightBuffer.push(parentHeightBuffer[i]);
        if (hasVertexNormals) {
          normalBuffer.push(parentNormalBuffer[n]);
          normalBuffer.push(parentNormalBuffer[n + 1]);
        }
        ++vertexCount;
      }
    }
    const triangleVertices = [];
    triangleVertices.push(new Vertex());
    triangleVertices.push(new Vertex());
    triangleVertices.push(new Vertex());
    const clippedTriangleVertices = [];
    clippedTriangleVertices.push(new Vertex());
    clippedTriangleVertices.push(new Vertex());
    clippedTriangleVertices.push(new Vertex());
    let clippedIndex;
    let clipped2;
    for (i = 0; i < parentIndices.length; i += 3) {
      const i0 = parentIndices[i];
      const i1 = parentIndices[i + 1];
      const i2 = parentIndices[i + 2];
      const u0 = parentUBuffer[i0];
      const u12 = parentUBuffer[i1];
      const u22 = parentUBuffer[i2];
      triangleVertices[0].initializeIndexed(
        parentUBuffer,
        parentVBuffer,
        parentHeightBuffer,
        parentNormalBuffer,
        i0
      );
      triangleVertices[1].initializeIndexed(
        parentUBuffer,
        parentVBuffer,
        parentHeightBuffer,
        parentNormalBuffer,
        i1
      );
      triangleVertices[2].initializeIndexed(
        parentUBuffer,
        parentVBuffer,
        parentHeightBuffer,
        parentNormalBuffer,
        i2
      );
      const clipped = Intersections2D_default.clipTriangleAtAxisAlignedThreshold(
        halfMaxShort,
        isEastChild,
        u0,
        u12,
        u22,
        clipScratch
      );
      clippedIndex = 0;
      if (clippedIndex >= clipped.length) {
        continue;
      }
      clippedIndex = clippedTriangleVertices[0].initializeFromClipResult(
        clipped,
        clippedIndex,
        triangleVertices
      );
      if (clippedIndex >= clipped.length) {
        continue;
      }
      clippedIndex = clippedTriangleVertices[1].initializeFromClipResult(
        clipped,
        clippedIndex,
        triangleVertices
      );
      if (clippedIndex >= clipped.length) {
        continue;
      }
      clippedIndex = clippedTriangleVertices[2].initializeFromClipResult(
        clipped,
        clippedIndex,
        triangleVertices
      );
      clipped2 = Intersections2D_default.clipTriangleAtAxisAlignedThreshold(
        halfMaxShort,
        isNorthChild,
        clippedTriangleVertices[0].getV(),
        clippedTriangleVertices[1].getV(),
        clippedTriangleVertices[2].getV(),
        clipScratch2
      );
      addClippedPolygon(
        uBuffer,
        vBuffer,
        heightBuffer,
        normalBuffer,
        indices,
        vertexMap,
        clipped2,
        clippedTriangleVertices,
        hasVertexNormals
      );
      if (clippedIndex < clipped.length) {
        clippedTriangleVertices[2].clone(clippedTriangleVertices[1]);
        clippedTriangleVertices[2].initializeFromClipResult(
          clipped,
          clippedIndex,
          triangleVertices
        );
        clipped2 = Intersections2D_default.clipTriangleAtAxisAlignedThreshold(
          halfMaxShort,
          isNorthChild,
          clippedTriangleVertices[0].getV(),
          clippedTriangleVertices[1].getV(),
          clippedTriangleVertices[2].getV(),
          clipScratch2
        );
        addClippedPolygon(
          uBuffer,
          vBuffer,
          heightBuffer,
          normalBuffer,
          indices,
          vertexMap,
          clipped2,
          clippedTriangleVertices,
          hasVertexNormals
        );
      }
    }
    const uOffset = isEastChild ? -maxShort5 : 0;
    const vOffset = isNorthChild ? -maxShort5 : 0;
    const westIndices = [];
    const southIndices = [];
    const eastIndices = [];
    const northIndices = [];
    let minimumHeight = Number.MAX_VALUE;
    let maximumHeight = -minimumHeight;
    const cartesianVertices = verticesScratch;
    cartesianVertices.length = 0;
    const ellipsoid = Ellipsoid_default.clone(parameters.ellipsoid);
    const rectangle = Rectangle_default.clone(parameters.childRectangle);
    const north = rectangle.north;
    const south = rectangle.south;
    let east = rectangle.east;
    const west = rectangle.west;
    if (east < west) {
      east += Math_default.TWO_PI;
    }
    for (i = 0; i < uBuffer.length; ++i) {
      u3 = Math.round(uBuffer[i]);
      if (u3 <= minU) {
        westIndices.push(i);
        u3 = 0;
      } else if (u3 >= maxU) {
        eastIndices.push(i);
        u3 = maxShort5;
      } else {
        u3 = u3 * 2 + uOffset;
      }
      uBuffer[i] = u3;
      v3 = Math.round(vBuffer[i]);
      if (v3 <= minV) {
        southIndices.push(i);
        v3 = 0;
      } else if (v3 >= maxV) {
        northIndices.push(i);
        v3 = maxShort5;
      } else {
        v3 = v3 * 2 + vOffset;
      }
      vBuffer[i] = v3;
      height = Math_default.lerp(
        parentMinimumHeight,
        parentMaximumHeight,
        heightBuffer[i] / maxShort5
      );
      if (height < minimumHeight) {
        minimumHeight = height;
      }
      if (height > maximumHeight) {
        maximumHeight = height;
      }
      heightBuffer[i] = height;
      cartographicScratch2.longitude = Math_default.lerp(west, east, u3 / maxShort5);
      cartographicScratch2.latitude = Math_default.lerp(south, north, v3 / maxShort5);
      cartographicScratch2.height = height;
      ellipsoid.cartographicToCartesian(cartographicScratch2, cartesian3Scratch9);
      cartesianVertices.push(cartesian3Scratch9.x);
      cartesianVertices.push(cartesian3Scratch9.y);
      cartesianVertices.push(cartesian3Scratch9.z);
    }
    const boundingSphere = BoundingSphere_default.fromVertices(
      cartesianVertices,
      Cartesian3_default.ZERO,
      3,
      boundingSphereScratch
    );
    const orientedBoundingBox = OrientedBoundingBox_default.fromRectangle(
      rectangle,
      minimumHeight,
      maximumHeight,
      ellipsoid,
      orientedBoundingBoxScratch
    );
    const occluder = new EllipsoidalOccluder_default(ellipsoid);
    const horizonOcclusionPoint = occluder.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid(
      boundingSphere.center,
      cartesianVertices,
      3,
      boundingSphere.center,
      minimumHeight,
      horizonOcclusionPointScratch
    );
    const heightRange = maximumHeight - minimumHeight;
    const vertices = new Uint16Array(
      uBuffer.length + vBuffer.length + heightBuffer.length
    );
    for (i = 0; i < uBuffer.length; ++i) {
      vertices[i] = uBuffer[i];
    }
    let start = uBuffer.length;
    for (i = 0; i < vBuffer.length; ++i) {
      vertices[start + i] = vBuffer[i];
    }
    start += vBuffer.length;
    for (i = 0; i < heightBuffer.length; ++i) {
      vertices[start + i] = maxShort5 * (heightBuffer[i] - minimumHeight) / heightRange;
    }
    const indicesTypedArray = IndexDatatype_default.createTypedArray(
      uBuffer.length,
      indices
    );
    let encodedNormals;
    if (hasVertexNormals) {
      const normalArray = new Uint8Array(normalBuffer);
      transferableObjects.push(
        vertices.buffer,
        indicesTypedArray.buffer,
        normalArray.buffer
      );
      encodedNormals = normalArray.buffer;
    } else {
      transferableObjects.push(vertices.buffer, indicesTypedArray.buffer);
    }
    return {
      vertices: vertices.buffer,
      encodedNormals,
      indices: indicesTypedArray.buffer,
      minimumHeight,
      maximumHeight,
      westIndices,
      southIndices,
      eastIndices,
      northIndices,
      boundingSphere,
      orientedBoundingBox,
      horizonOcclusionPoint
    };
  }
  function Vertex() {
    this.vertexBuffer = void 0;
    this.index = void 0;
    this.first = void 0;
    this.second = void 0;
    this.ratio = void 0;
  }
  function lerpOctEncodedNormal(vertex, result) {
    ++depth;
    let first = cartesianScratch1[depth];
    let second = cartesianScratch2[depth];
    first = AttributeCompression_default.octDecode(
      vertex.first.getNormalX(),
      vertex.first.getNormalY(),
      first
    );
    second = AttributeCompression_default.octDecode(
      vertex.second.getNormalX(),
      vertex.second.getNormalY(),
      second
    );
    cartesian3Scratch9 = Cartesian3_default.lerp(
      first,
      second,
      vertex.ratio,
      cartesian3Scratch9
    );
    Cartesian3_default.normalize(cartesian3Scratch9, cartesian3Scratch9);
    AttributeCompression_default.octEncode(cartesian3Scratch9, result);
    --depth;
    return result;
  }
  function addClippedPolygon(uBuffer, vBuffer, heightBuffer, normalBuffer, indices, vertexMap, clipped, triangleVertices, hasVertexNormals) {
    if (clipped.length === 0) {
      return;
    }
    let numVertices = 0;
    let clippedIndex = 0;
    while (clippedIndex < clipped.length) {
      clippedIndex = polygonVertices[numVertices++].initializeFromClipResult(
        clipped,
        clippedIndex,
        triangleVertices
      );
    }
    for (let i = 0; i < numVertices; ++i) {
      const polygonVertex = polygonVertices[i];
      if (!polygonVertex.isIndexed()) {
        const key = polygonVertex.getKey();
        if (defined_default(vertexMap[key])) {
          polygonVertex.newIndex = vertexMap[key];
        } else {
          const newIndex = uBuffer.length;
          uBuffer.push(polygonVertex.getU());
          vBuffer.push(polygonVertex.getV());
          heightBuffer.push(polygonVertex.getH());
          if (hasVertexNormals) {
            normalBuffer.push(polygonVertex.getNormalX());
            normalBuffer.push(polygonVertex.getNormalY());
          }
          polygonVertex.newIndex = newIndex;
          vertexMap[key] = newIndex;
        }
      } else {
        polygonVertex.newIndex = vertexMap[polygonVertex.index];
        polygonVertex.uBuffer = uBuffer;
        polygonVertex.vBuffer = vBuffer;
        polygonVertex.heightBuffer = heightBuffer;
        if (hasVertexNormals) {
          polygonVertex.normalBuffer = normalBuffer;
        }
      }
    }
    if (numVertices === 3) {
      indices.push(polygonVertices[0].newIndex);
      indices.push(polygonVertices[1].newIndex);
      indices.push(polygonVertices[2].newIndex);
    } else if (numVertices === 4) {
      indices.push(polygonVertices[0].newIndex);
      indices.push(polygonVertices[1].newIndex);
      indices.push(polygonVertices[2].newIndex);
      indices.push(polygonVertices[0].newIndex);
      indices.push(polygonVertices[2].newIndex);
      indices.push(polygonVertices[3].newIndex);
    }
  }
  var maxShort5, halfMaxShort, clipScratch, clipScratch2, verticesScratch, cartographicScratch2, cartesian3Scratch9, uScratch, vScratch, heightScratch, indicesScratch, normalsScratch, horizonOcclusionPointScratch, boundingSphereScratch, orientedBoundingBoxScratch, decodeTexCoordsScratch, octEncodedNormalScratch, encodedScratch, depth, cartesianScratch1, cartesianScratch2, polygonVertices, upsampleQuantizedTerrainMesh_default;
  var init_upsampleQuantizedTerrainMesh = __esm({
    "packages/engine/Source/Workers/upsampleQuantizedTerrainMesh.js"() {
      init_AttributeCompression();
      init_BoundingSphere();
      init_Cartesian2();
      init_Cartesian3();
      init_Cartographic();
      init_defined();
      init_Ellipsoid();
      init_EllipsoidalOccluder();
      init_IndexDatatype();
      init_Intersections2D();
      init_Math();
      init_OrientedBoundingBox();
      init_Rectangle();
      init_TerrainEncoding();
      init_createTaskProcessorWorker();
      maxShort5 = 32767;
      halfMaxShort = maxShort5 / 2 | 0;
      clipScratch = [];
      clipScratch2 = [];
      verticesScratch = [];
      cartographicScratch2 = new Cartographic_default();
      cartesian3Scratch9 = new Cartesian3_default();
      uScratch = [];
      vScratch = [];
      heightScratch = [];
      indicesScratch = [];
      normalsScratch = [];
      horizonOcclusionPointScratch = new Cartesian3_default();
      boundingSphereScratch = new BoundingSphere_default();
      orientedBoundingBoxScratch = new OrientedBoundingBox_default();
      decodeTexCoordsScratch = new Cartesian2_default();
      octEncodedNormalScratch = new Cartesian3_default();
      Vertex.prototype.clone = function(result) {
        if (!defined_default(result)) {
          result = new Vertex();
        }
        result.uBuffer = this.uBuffer;
        result.vBuffer = this.vBuffer;
        result.heightBuffer = this.heightBuffer;
        result.normalBuffer = this.normalBuffer;
        result.index = this.index;
        result.first = this.first;
        result.second = this.second;
        result.ratio = this.ratio;
        return result;
      };
      Vertex.prototype.initializeIndexed = function(uBuffer, vBuffer, heightBuffer, normalBuffer, index) {
        this.uBuffer = uBuffer;
        this.vBuffer = vBuffer;
        this.heightBuffer = heightBuffer;
        this.normalBuffer = normalBuffer;
        this.index = index;
        this.first = void 0;
        this.second = void 0;
        this.ratio = void 0;
      };
      Vertex.prototype.initializeFromClipResult = function(clipResult, index, vertices) {
        let nextIndex = index + 1;
        if (clipResult[index] !== -1) {
          vertices[clipResult[index]].clone(this);
        } else {
          this.vertexBuffer = void 0;
          this.index = void 0;
          this.first = vertices[clipResult[nextIndex]];
          ++nextIndex;
          this.second = vertices[clipResult[nextIndex]];
          ++nextIndex;
          this.ratio = clipResult[nextIndex];
          ++nextIndex;
        }
        return nextIndex;
      };
      Vertex.prototype.getKey = function() {
        if (this.isIndexed()) {
          return this.index;
        }
        return JSON.stringify({
          first: this.first.getKey(),
          second: this.second.getKey(),
          ratio: this.ratio
        });
      };
      Vertex.prototype.isIndexed = function() {
        return defined_default(this.index);
      };
      Vertex.prototype.getH = function() {
        if (defined_default(this.index)) {
          return this.heightBuffer[this.index];
        }
        return Math_default.lerp(this.first.getH(), this.second.getH(), this.ratio);
      };
      Vertex.prototype.getU = function() {
        if (defined_default(this.index)) {
          return this.uBuffer[this.index];
        }
        return Math_default.lerp(this.first.getU(), this.second.getU(), this.ratio);
      };
      Vertex.prototype.getV = function() {
        if (defined_default(this.index)) {
          return this.vBuffer[this.index];
        }
        return Math_default.lerp(this.first.getV(), this.second.getV(), this.ratio);
      };
      encodedScratch = new Cartesian2_default();
      depth = -1;
      cartesianScratch1 = [new Cartesian3_default(), new Cartesian3_default()];
      cartesianScratch2 = [new Cartesian3_default(), new Cartesian3_default()];
      Vertex.prototype.getNormalX = function() {
        if (defined_default(this.index)) {
          return this.normalBuffer[this.index * 2];
        }
        encodedScratch = lerpOctEncodedNormal(this, encodedScratch);
        return encodedScratch.x;
      };
      Vertex.prototype.getNormalY = function() {
        if (defined_default(this.index)) {
          return this.normalBuffer[this.index * 2 + 1];
        }
        encodedScratch = lerpOctEncodedNormal(this, encodedScratch);
        return encodedScratch.y;
      };
      polygonVertices = [];
      polygonVertices.push(new Vertex());
      polygonVertices.push(new Vertex());
      polygonVertices.push(new Vertex());
      polygonVertices.push(new Vertex());
      upsampleQuantizedTerrainMesh_default = createTaskProcessorWorker_default(upsampleQuantizedTerrainMesh);
    }
  });

  // import("./**/*.js") in packages/engine/Source/Workers/createGeometry.js
  var globImport_js;
  var init_ = __esm({
    'import("./**/*.js") in packages/engine/Source/Workers/createGeometry.js'() {
      globImport_js = __glob({
        "./combineGeometry.js": () => Promise.resolve().then(() => (init_combineGeometry(), combineGeometry_exports)),
        "./createBoxGeometry.js": () => Promise.resolve().then(() => (init_createBoxGeometry(), createBoxGeometry_exports)),
        "./createBoxOutlineGeometry.js": () => Promise.resolve().then(() => (init_createBoxOutlineGeometry(), createBoxOutlineGeometry_exports)),
        "./createCircleGeometry.js": () => Promise.resolve().then(() => (init_createCircleGeometry(), createCircleGeometry_exports)),
        "./createCircleOutlineGeometry.js": () => Promise.resolve().then(() => (init_createCircleOutlineGeometry(), createCircleOutlineGeometry_exports)),
        "./createCoplanarPolygonGeometry.js": () => Promise.resolve().then(() => (init_createCoplanarPolygonGeometry(), createCoplanarPolygonGeometry_exports)),
        "./createCoplanarPolygonOutlineGeometry.js": () => Promise.resolve().then(() => (init_createCoplanarPolygonOutlineGeometry(), createCoplanarPolygonOutlineGeometry_exports)),
        "./createCorridorGeometry.js": () => Promise.resolve().then(() => (init_createCorridorGeometry(), createCorridorGeometry_exports)),
        "./createCorridorOutlineGeometry.js": () => Promise.resolve().then(() => (init_createCorridorOutlineGeometry(), createCorridorOutlineGeometry_exports)),
        "./createCylinderGeometry.js": () => Promise.resolve().then(() => (init_createCylinderGeometry(), createCylinderGeometry_exports)),
        "./createCylinderOutlineGeometry.js": () => Promise.resolve().then(() => (init_createCylinderOutlineGeometry(), createCylinderOutlineGeometry_exports)),
        "./createEllipseGeometry.js": () => Promise.resolve().then(() => (init_createEllipseGeometry(), createEllipseGeometry_exports)),
        "./createEllipseOutlineGeometry.js": () => Promise.resolve().then(() => (init_createEllipseOutlineGeometry(), createEllipseOutlineGeometry_exports)),
        "./createEllipsoidGeometry.js": () => Promise.resolve().then(() => (init_createEllipsoidGeometry(), createEllipsoidGeometry_exports)),
        "./createEllipsoidOutlineGeometry.js": () => Promise.resolve().then(() => (init_createEllipsoidOutlineGeometry(), createEllipsoidOutlineGeometry_exports)),
        "./createFrustumGeometry.js": () => Promise.resolve().then(() => (init_createFrustumGeometry(), createFrustumGeometry_exports)),
        "./createFrustumOutlineGeometry.js": () => Promise.resolve().then(() => (init_createFrustumOutlineGeometry(), createFrustumOutlineGeometry_exports)),
        "./createGeometry.js": () => Promise.resolve().then(() => (init_createGeometry(), createGeometry_exports)),
        "./createGroundPolylineGeometry.js": () => Promise.resolve().then(() => (init_createGroundPolylineGeometry(), createGroundPolylineGeometry_exports)),
        "./createPlaneGeometry.js": () => Promise.resolve().then(() => (init_createPlaneGeometry(), createPlaneGeometry_exports)),
        "./createPlaneOutlineGeometry.js": () => Promise.resolve().then(() => (init_createPlaneOutlineGeometry(), createPlaneOutlineGeometry_exports)),
        "./createPolygonGeometry.js": () => Promise.resolve().then(() => (init_createPolygonGeometry(), createPolygonGeometry_exports)),
        "./createPolygonOutlineGeometry.js": () => Promise.resolve().then(() => (init_createPolygonOutlineGeometry(), createPolygonOutlineGeometry_exports)),
        "./createPolylineGeometry.js": () => Promise.resolve().then(() => (init_createPolylineGeometry(), createPolylineGeometry_exports)),
        "./createPolylineVolumeGeometry.js": () => Promise.resolve().then(() => (init_createPolylineVolumeGeometry(), createPolylineVolumeGeometry_exports)),
        "./createPolylineVolumeOutlineGeometry.js": () => Promise.resolve().then(() => (init_createPolylineVolumeOutlineGeometry(), createPolylineVolumeOutlineGeometry_exports)),
        "./createRectangleGeometry.js": () => Promise.resolve().then(() => (init_createRectangleGeometry(), createRectangleGeometry_exports)),
        "./createRectangleOutlineGeometry.js": () => Promise.resolve().then(() => (init_createRectangleOutlineGeometry(), createRectangleOutlineGeometry_exports)),
        "./createSimplePolylineGeometry.js": () => Promise.resolve().then(() => (init_createSimplePolylineGeometry(), createSimplePolylineGeometry_exports)),
        "./createSphereGeometry.js": () => Promise.resolve().then(() => (init_createSphereGeometry(), createSphereGeometry_exports)),
        "./createSphereOutlineGeometry.js": () => Promise.resolve().then(() => (init_createSphereOutlineGeometry(), createSphereOutlineGeometry_exports)),
        "./createTaskProcessorWorker.js": () => Promise.resolve().then(() => (init_createTaskProcessorWorker(), createTaskProcessorWorker_exports)),
        "./createVectorTileClampedPolylines.js": () => Promise.resolve().then(() => (init_createVectorTileClampedPolylines(), createVectorTileClampedPolylines_exports)),
        "./createVectorTileGeometries.js": () => Promise.resolve().then(() => (init_createVectorTileGeometries(), createVectorTileGeometries_exports)),
        "./createVectorTilePoints.js": () => Promise.resolve().then(() => (init_createVectorTilePoints(), createVectorTilePoints_exports)),
        "./createVectorTilePolygons.js": () => Promise.resolve().then(() => (init_createVectorTilePolygons(), createVectorTilePolygons_exports)),
        "./createVectorTilePolylines.js": () => Promise.resolve().then(() => (init_createVectorTilePolylines(), createVectorTilePolylines_exports)),
        "./createVerticesFromGoogleEarthEnterpriseBuffer.js": () => Promise.resolve().then(() => (init_createVerticesFromGoogleEarthEnterpriseBuffer(), createVerticesFromGoogleEarthEnterpriseBuffer_exports)),
        "./createVerticesFromHeightmap.js": () => Promise.resolve().then(() => (init_createVerticesFromHeightmap(), createVerticesFromHeightmap_exports)),
        "./createVerticesFromQuantizedTerrainMesh.js": () => Promise.resolve().then(() => (init_createVerticesFromQuantizedTerrainMesh(), createVerticesFromQuantizedTerrainMesh_exports)),
        "./createWallGeometry.js": () => Promise.resolve().then(() => (init_createWallGeometry(), createWallGeometry_exports)),
        "./createWallOutlineGeometry.js": () => Promise.resolve().then(() => (init_createWallOutlineGeometry(), createWallOutlineGeometry_exports)),
        "./decodeDraco.js": () => Promise.resolve().then(() => (init_decodeDraco(), decodeDraco_exports)),
        "./decodeGoogleEarthEnterprisePacket.js": () => Promise.resolve().then(() => (init_decodeGoogleEarthEnterprisePacket(), decodeGoogleEarthEnterprisePacket_exports)),
        "./decodeI3S.js": () => Promise.resolve().then(() => (init_decodeI3S(), decodeI3S_exports)),
        "./transcodeKTX2.js": () => Promise.resolve().then(() => (init_transcodeKTX2(), transcodeKTX2_exports)),
        "./transferTypedArrayTest.js": () => Promise.resolve().then(() => (init_transferTypedArrayTest(), transferTypedArrayTest_exports)),
        "./upsampleQuantizedTerrainMesh.js": () => Promise.resolve().then(() => (init_upsampleQuantizedTerrainMesh(), upsampleQuantizedTerrainMesh_exports))
      });
    }
  });

  // packages/engine/Source/Workers/createGeometry.js
  var createGeometry_exports = {};
  __export(createGeometry_exports, {
    default: () => createGeometry_default
  });
  async function getModule(moduleName, modulePath) {
    let module = defaultValue_default(moduleCache[modulePath] ?? moduleCache[moduleName]);
    if (defined_default(module)) {
      return module;
    }
    if (defined_default(modulePath)) {
      if (typeof exports === "object") {
        module = __require(modulePath);
      } else {
        const result = await import(modulePath);
        module = result.default;
      }
      moduleCache[modulePath] = module;
      return module;
    }
    if (typeof exports === "object") {
      module = __require(`Workers/${moduleName}`);
    } else {
      const result = defined_default(modulePath) ? await import(modulePath) : await globImport_js(`./${moduleName}.js`);
      module = result.default;
    }
    moduleCache[moduleName] = module;
    return module;
  }
  async function createGeometry(parameters, transferableObjects) {
    const subTasks = parameters.subTasks;
    const length = subTasks.length;
    const resultsOrPromises = new Array(length);
    for (let i = 0; i < length; i++) {
      const task = subTasks[i];
      const geometry = task.geometry;
      const moduleName = task.moduleName;
      const modulePath = task.modulePath;
      if (defined_default(moduleName) && defined_default(modulePath)) {
        throw new DeveloperError_default("Must only set moduleName or modulePath");
      }
      if (defined_default(moduleName) || defined_default(modulePath)) {
        resultsOrPromises[i] = getModule(
          moduleName,
          modulePath
        ).then((createFunction) => createFunction(geometry, task.offset));
      } else {
        resultsOrPromises[i] = geometry;
      }
    }
    return Promise.all(resultsOrPromises).then(function(results) {
      return PrimitivePipeline_default.packCreateGeometryResults(
        results,
        transferableObjects
      );
    });
  }
  var moduleCache, createGeometry_default;
  var init_createGeometry = __esm({
    "packages/engine/Source/Workers/createGeometry.js"() {
      init_DeveloperError();
      init_defaultValue();
      init_defined();
      init_PrimitivePipeline();
      init_createTaskProcessorWorker();
      init_();
      moduleCache = {};
      createGeometry_default = createTaskProcessorWorker_default(createGeometry);
    }
  });

  // <stdin>
  var stdin_exports = {};
  __export(stdin_exports, {
    combineGeometry: () => combineGeometry2,
    createBoxGeometry: () => createBoxGeometry2,
    createBoxOutlineGeometry: () => createBoxOutlineGeometry2,
    createCircleGeometry: () => createCircleGeometry2,
    createCircleOutlineGeometry: () => createCircleOutlineGeometry2,
    createCoplanarPolygonGeometry: () => createCoplanarPolygonGeometry2,
    createCoplanarPolygonOutlineGeometry: () => createCoplanarPolygonOutlineGeometry2,
    createCorridorGeometry: () => createCorridorGeometry2,
    createCorridorOutlineGeometry: () => createCorridorOutlineGeometry2,
    createCylinderGeometry: () => createCylinderGeometry2,
    createCylinderOutlineGeometry: () => createCylinderOutlineGeometry2,
    createEllipseGeometry: () => createEllipseGeometry2,
    createEllipseOutlineGeometry: () => createEllipseOutlineGeometry2,
    createEllipsoidGeometry: () => createEllipsoidGeometry2,
    createEllipsoidOutlineGeometry: () => createEllipsoidOutlineGeometry2,
    createFrustumGeometry: () => createFrustumGeometry2,
    createFrustumOutlineGeometry: () => createFrustumOutlineGeometry2,
    createGeometry: () => createGeometry2,
    createGroundPolylineGeometry: () => createGroundPolylineGeometry2,
    createPlaneGeometry: () => createPlaneGeometry2,
    createPlaneOutlineGeometry: () => createPlaneOutlineGeometry2,
    createPolygonGeometry: () => createPolygonGeometry2,
    createPolygonOutlineGeometry: () => createPolygonOutlineGeometry2,
    createPolylineGeometry: () => createPolylineGeometry2,
    createPolylineVolumeGeometry: () => createPolylineVolumeGeometry2,
    createPolylineVolumeOutlineGeometry: () => createPolylineVolumeOutlineGeometry2,
    createRectangleGeometry: () => createRectangleGeometry2,
    createRectangleOutlineGeometry: () => createRectangleOutlineGeometry2,
    createSimplePolylineGeometry: () => createSimplePolylineGeometry2,
    createSphereGeometry: () => createSphereGeometry2,
    createSphereOutlineGeometry: () => createSphereOutlineGeometry2,
    createTaskProcessorWorker: () => createTaskProcessorWorker2,
    createVectorTileClampedPolylines: () => createVectorTileClampedPolylines2,
    createVectorTileGeometries: () => createVectorTileGeometries2,
    createVectorTilePoints: () => createVectorTilePoints2,
    createVectorTilePolygons: () => createVectorTilePolygons2,
    createVectorTilePolylines: () => createVectorTilePolylines2,
    createVerticesFromGoogleEarthEnterpriseBuffer: () => createVerticesFromGoogleEarthEnterpriseBuffer2,
    createVerticesFromHeightmap: () => createVerticesFromHeightmap2,
    createVerticesFromQuantizedTerrainMesh: () => createVerticesFromQuantizedTerrainMesh2,
    createWallGeometry: () => createWallGeometry2,
    createWallOutlineGeometry: () => createWallOutlineGeometry2,
    decodeDraco: () => decodeDraco2,
    decodeGoogleEarthEnterprisePacket: () => decodeGoogleEarthEnterprisePacket2,
    decodeI3S: () => decodeI3S2,
    transcodeKTX2: () => transcodeKTX22,
    transferTypedArrayTest: () => transferTypedArrayTest,
    upsampleQuantizedTerrainMesh: () => upsampleQuantizedTerrainMesh2
  });
  var combineGeometry2 = () => {
    Promise.resolve().then(() => init_combineGeometry());
  };
  var createBoxGeometry2 = () => {
    Promise.resolve().then(() => init_createBoxGeometry());
  };
  var createBoxOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createBoxOutlineGeometry());
  };
  var createCircleGeometry2 = () => {
    Promise.resolve().then(() => init_createCircleGeometry());
  };
  var createCircleOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createCircleOutlineGeometry());
  };
  var createCoplanarPolygonGeometry2 = () => {
    Promise.resolve().then(() => init_createCoplanarPolygonGeometry());
  };
  var createCoplanarPolygonOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createCoplanarPolygonOutlineGeometry());
  };
  var createCorridorGeometry2 = () => {
    Promise.resolve().then(() => init_createCorridorGeometry());
  };
  var createCorridorOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createCorridorOutlineGeometry());
  };
  var createCylinderGeometry2 = () => {
    Promise.resolve().then(() => init_createCylinderGeometry());
  };
  var createCylinderOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createCylinderOutlineGeometry());
  };
  var createEllipseGeometry2 = () => {
    Promise.resolve().then(() => init_createEllipseGeometry());
  };
  var createEllipseOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createEllipseOutlineGeometry());
  };
  var createEllipsoidGeometry2 = () => {
    Promise.resolve().then(() => init_createEllipsoidGeometry());
  };
  var createEllipsoidOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createEllipsoidOutlineGeometry());
  };
  var createFrustumGeometry2 = () => {
    Promise.resolve().then(() => init_createFrustumGeometry());
  };
  var createFrustumOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createFrustumOutlineGeometry());
  };
  var createGeometry2 = () => {
    Promise.resolve().then(() => init_createGeometry());
  };
  var createGroundPolylineGeometry2 = () => {
    Promise.resolve().then(() => init_createGroundPolylineGeometry());
  };
  var createPlaneGeometry2 = () => {
    Promise.resolve().then(() => init_createPlaneGeometry());
  };
  var createPlaneOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createPlaneOutlineGeometry());
  };
  var createPolygonGeometry2 = () => {
    Promise.resolve().then(() => init_createPolygonGeometry());
  };
  var createPolygonOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createPolygonOutlineGeometry());
  };
  var createPolylineGeometry2 = () => {
    Promise.resolve().then(() => init_createPolylineGeometry());
  };
  var createPolylineVolumeGeometry2 = () => {
    Promise.resolve().then(() => init_createPolylineVolumeGeometry());
  };
  var createPolylineVolumeOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createPolylineVolumeOutlineGeometry());
  };
  var createRectangleGeometry2 = () => {
    Promise.resolve().then(() => init_createRectangleGeometry());
  };
  var createRectangleOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createRectangleOutlineGeometry());
  };
  var createSimplePolylineGeometry2 = () => {
    Promise.resolve().then(() => init_createSimplePolylineGeometry());
  };
  var createSphereGeometry2 = () => {
    Promise.resolve().then(() => init_createSphereGeometry());
  };
  var createSphereOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createSphereOutlineGeometry());
  };
  var createTaskProcessorWorker2 = () => {
    Promise.resolve().then(() => init_createTaskProcessorWorker());
  };
  var createVectorTileClampedPolylines2 = () => {
    Promise.resolve().then(() => init_createVectorTileClampedPolylines());
  };
  var createVectorTileGeometries2 = () => {
    Promise.resolve().then(() => init_createVectorTileGeometries());
  };
  var createVectorTilePoints2 = () => {
    Promise.resolve().then(() => init_createVectorTilePoints());
  };
  var createVectorTilePolygons2 = () => {
    Promise.resolve().then(() => init_createVectorTilePolygons());
  };
  var createVectorTilePolylines2 = () => {
    Promise.resolve().then(() => init_createVectorTilePolylines());
  };
  var createVerticesFromGoogleEarthEnterpriseBuffer2 = () => {
    Promise.resolve().then(() => init_createVerticesFromGoogleEarthEnterpriseBuffer());
  };
  var createVerticesFromHeightmap2 = () => {
    Promise.resolve().then(() => init_createVerticesFromHeightmap());
  };
  var createVerticesFromQuantizedTerrainMesh2 = () => {
    Promise.resolve().then(() => init_createVerticesFromQuantizedTerrainMesh());
  };
  var createWallGeometry2 = () => {
    Promise.resolve().then(() => init_createWallGeometry());
  };
  var createWallOutlineGeometry2 = () => {
    Promise.resolve().then(() => init_createWallOutlineGeometry());
  };
  var decodeDraco2 = () => {
    Promise.resolve().then(() => init_decodeDraco());
  };
  var decodeGoogleEarthEnterprisePacket2 = () => {
    Promise.resolve().then(() => init_decodeGoogleEarthEnterprisePacket());
  };
  var decodeI3S2 = () => {
    Promise.resolve().then(() => init_decodeI3S());
  };
  var transcodeKTX22 = () => {
    Promise.resolve().then(() => init_transcodeKTX2());
  };
  var transferTypedArrayTest = () => {
    Promise.resolve().then(() => init_transferTypedArrayTest());
  };
  var upsampleQuantizedTerrainMesh2 = () => {
    Promise.resolve().then(() => init_upsampleQuantizedTerrainMesh());
  };
  return __toCommonJS(stdin_exports);
})();
");